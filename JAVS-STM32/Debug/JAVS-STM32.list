
JAVS-STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012b50  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00013ab4  08012cf0  08012cf0  00022cf0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080267a4  080267a4  000402d4  2**0
                  CONTENTS
  4 .ARM          00000008  080267a4  080267a4  000367a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080267ac  080267ac  000402d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080267ac  080267ac  000367ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080267b0  080267b0  000367b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002d4  20000000  080267b4  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012158  200002d4  08026a88  000402d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001242c  08026a88  0004242c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000402d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022ba4  00000000  00000000  00040304  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000050d4  00000000  00000000  00062ea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ad0  00000000  00000000  00067f80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001868  00000000  00000000  00069a50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001db7b  00000000  00000000  0006b2b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000275b7  00000000  00000000  00088e33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a3550  00000000  00000000  000b03ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000be  00000000  00000000  0015393a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000800c  00000000  00000000  001539f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00002a9c  00000000  00000000  0015ba04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002d4 	.word	0x200002d4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08012cd8 	.word	0x08012cd8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002d8 	.word	0x200002d8
 80001dc:	08012cd8 	.word	0x08012cd8

080001e0 <arm_bitreversal_32>:
 80001e0:	1c4b      	adds	r3, r1, #1
 80001e2:	2b01      	cmp	r3, #1
 80001e4:	bf98      	it	ls
 80001e6:	4770      	bxls	lr
 80001e8:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80001ec:	1c91      	adds	r1, r2, #2
 80001ee:	089b      	lsrs	r3, r3, #2

080001f0 <arm_bitreversal_32_0>:
 80001f0:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 80001f4:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 80001f8:	880a      	ldrh	r2, [r1, #0]
 80001fa:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 80001fe:	4480      	add	r8, r0
 8000200:	4481      	add	r9, r0
 8000202:	4402      	add	r2, r0
 8000204:	4484      	add	ip, r0
 8000206:	f8d9 7000 	ldr.w	r7, [r9]
 800020a:	f8d8 6000 	ldr.w	r6, [r8]
 800020e:	6815      	ldr	r5, [r2, #0]
 8000210:	f8dc 4000 	ldr.w	r4, [ip]
 8000214:	f8c9 6000 	str.w	r6, [r9]
 8000218:	f8c8 7000 	str.w	r7, [r8]
 800021c:	f8cc 5000 	str.w	r5, [ip]
 8000220:	6014      	str	r4, [r2, #0]
 8000222:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000226:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800022a:	6855      	ldr	r5, [r2, #4]
 800022c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000230:	f8c9 6004 	str.w	r6, [r9, #4]
 8000234:	f8c8 7004 	str.w	r7, [r8, #4]
 8000238:	f8cc 5004 	str.w	r5, [ip, #4]
 800023c:	6054      	str	r4, [r2, #4]
 800023e:	3108      	adds	r1, #8
 8000240:	3b01      	subs	r3, #1
 8000242:	d1d5      	bne.n	80001f0 <arm_bitreversal_32_0>
 8000244:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000248:	4770      	bx	lr

0800024a <arm_bitreversal_16>:
 800024a:	1c4b      	adds	r3, r1, #1
 800024c:	2b01      	cmp	r3, #1
 800024e:	bf98      	it	ls
 8000250:	4770      	bxls	lr
 8000252:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000256:	1c91      	adds	r1, r2, #2
 8000258:	089b      	lsrs	r3, r3, #2

0800025a <arm_bitreversal_16_0>:
 800025a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800025e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000262:	880a      	ldrh	r2, [r1, #0]
 8000264:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000268:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 800026c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 8000270:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 8000274:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 8000278:	f8d9 7000 	ldr.w	r7, [r9]
 800027c:	f8d8 6000 	ldr.w	r6, [r8]
 8000280:	6815      	ldr	r5, [r2, #0]
 8000282:	f8dc 4000 	ldr.w	r4, [ip]
 8000286:	f8c9 6000 	str.w	r6, [r9]
 800028a:	f8c8 7000 	str.w	r7, [r8]
 800028e:	f8cc 5000 	str.w	r5, [ip]
 8000292:	6014      	str	r4, [r2, #0]
 8000294:	3108      	adds	r1, #8
 8000296:	3b01      	subs	r3, #1
 8000298:	d1df      	bne.n	800025a <arm_bitreversal_16_0>
 800029a:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 800029e:	4770      	bx	lr

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <memchr>:
 80002b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002b4:	2a10      	cmp	r2, #16
 80002b6:	db2b      	blt.n	8000310 <memchr+0x60>
 80002b8:	f010 0f07 	tst.w	r0, #7
 80002bc:	d008      	beq.n	80002d0 <memchr+0x20>
 80002be:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002c2:	3a01      	subs	r2, #1
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d02d      	beq.n	8000324 <memchr+0x74>
 80002c8:	f010 0f07 	tst.w	r0, #7
 80002cc:	b342      	cbz	r2, 8000320 <memchr+0x70>
 80002ce:	d1f6      	bne.n	80002be <memchr+0xe>
 80002d0:	b4f0      	push	{r4, r5, r6, r7}
 80002d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002da:	f022 0407 	bic.w	r4, r2, #7
 80002de:	f07f 0700 	mvns.w	r7, #0
 80002e2:	2300      	movs	r3, #0
 80002e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002e8:	3c08      	subs	r4, #8
 80002ea:	ea85 0501 	eor.w	r5, r5, r1
 80002ee:	ea86 0601 	eor.w	r6, r6, r1
 80002f2:	fa85 f547 	uadd8	r5, r5, r7
 80002f6:	faa3 f587 	sel	r5, r3, r7
 80002fa:	fa86 f647 	uadd8	r6, r6, r7
 80002fe:	faa5 f687 	sel	r6, r5, r7
 8000302:	b98e      	cbnz	r6, 8000328 <memchr+0x78>
 8000304:	d1ee      	bne.n	80002e4 <memchr+0x34>
 8000306:	bcf0      	pop	{r4, r5, r6, r7}
 8000308:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800030c:	f002 0207 	and.w	r2, r2, #7
 8000310:	b132      	cbz	r2, 8000320 <memchr+0x70>
 8000312:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000316:	3a01      	subs	r2, #1
 8000318:	ea83 0301 	eor.w	r3, r3, r1
 800031c:	b113      	cbz	r3, 8000324 <memchr+0x74>
 800031e:	d1f8      	bne.n	8000312 <memchr+0x62>
 8000320:	2000      	movs	r0, #0
 8000322:	4770      	bx	lr
 8000324:	3801      	subs	r0, #1
 8000326:	4770      	bx	lr
 8000328:	2d00      	cmp	r5, #0
 800032a:	bf06      	itte	eq
 800032c:	4635      	moveq	r5, r6
 800032e:	3803      	subeq	r0, #3
 8000330:	3807      	subne	r0, #7
 8000332:	f015 0f01 	tst.w	r5, #1
 8000336:	d107      	bne.n	8000348 <memchr+0x98>
 8000338:	3001      	adds	r0, #1
 800033a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800033e:	bf02      	ittt	eq
 8000340:	3001      	addeq	r0, #1
 8000342:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000346:	3001      	addeq	r0, #1
 8000348:	bcf0      	pop	{r4, r5, r6, r7}
 800034a:	3801      	subs	r0, #1
 800034c:	4770      	bx	lr
 800034e:	bf00      	nop

08000350 <__aeabi_drsub>:
 8000350:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000354:	e002      	b.n	800035c <__adddf3>
 8000356:	bf00      	nop

08000358 <__aeabi_dsub>:
 8000358:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800035c <__adddf3>:
 800035c:	b530      	push	{r4, r5, lr}
 800035e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000362:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	bf1f      	itttt	ne
 8000372:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000376:	ea55 0c02 	orrsne.w	ip, r5, r2
 800037a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800037e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000382:	f000 80e2 	beq.w	800054a <__adddf3+0x1ee>
 8000386:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800038a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800038e:	bfb8      	it	lt
 8000390:	426d      	neglt	r5, r5
 8000392:	dd0c      	ble.n	80003ae <__adddf3+0x52>
 8000394:	442c      	add	r4, r5
 8000396:	ea80 0202 	eor.w	r2, r0, r2
 800039a:	ea81 0303 	eor.w	r3, r1, r3
 800039e:	ea82 0000 	eor.w	r0, r2, r0
 80003a2:	ea83 0101 	eor.w	r1, r3, r1
 80003a6:	ea80 0202 	eor.w	r2, r0, r2
 80003aa:	ea81 0303 	eor.w	r3, r1, r3
 80003ae:	2d36      	cmp	r5, #54	; 0x36
 80003b0:	bf88      	it	hi
 80003b2:	bd30      	pophi	{r4, r5, pc}
 80003b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80003c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003c4:	d002      	beq.n	80003cc <__adddf3+0x70>
 80003c6:	4240      	negs	r0, r0
 80003c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80003d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80003d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80003d8:	d002      	beq.n	80003e0 <__adddf3+0x84>
 80003da:	4252      	negs	r2, r2
 80003dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003e0:	ea94 0f05 	teq	r4, r5
 80003e4:	f000 80a7 	beq.w	8000536 <__adddf3+0x1da>
 80003e8:	f1a4 0401 	sub.w	r4, r4, #1
 80003ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80003f0:	db0d      	blt.n	800040e <__adddf3+0xb2>
 80003f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003f6:	fa22 f205 	lsr.w	r2, r2, r5
 80003fa:	1880      	adds	r0, r0, r2
 80003fc:	f141 0100 	adc.w	r1, r1, #0
 8000400:	fa03 f20e 	lsl.w	r2, r3, lr
 8000404:	1880      	adds	r0, r0, r2
 8000406:	fa43 f305 	asr.w	r3, r3, r5
 800040a:	4159      	adcs	r1, r3
 800040c:	e00e      	b.n	800042c <__adddf3+0xd0>
 800040e:	f1a5 0520 	sub.w	r5, r5, #32
 8000412:	f10e 0e20 	add.w	lr, lr, #32
 8000416:	2a01      	cmp	r2, #1
 8000418:	fa03 fc0e 	lsl.w	ip, r3, lr
 800041c:	bf28      	it	cs
 800041e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000422:	fa43 f305 	asr.w	r3, r3, r5
 8000426:	18c0      	adds	r0, r0, r3
 8000428:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800042c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000430:	d507      	bpl.n	8000442 <__adddf3+0xe6>
 8000432:	f04f 0e00 	mov.w	lr, #0
 8000436:	f1dc 0c00 	rsbs	ip, ip, #0
 800043a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800043e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000442:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000446:	d31b      	bcc.n	8000480 <__adddf3+0x124>
 8000448:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800044c:	d30c      	bcc.n	8000468 <__adddf3+0x10c>
 800044e:	0849      	lsrs	r1, r1, #1
 8000450:	ea5f 0030 	movs.w	r0, r0, rrx
 8000454:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000458:	f104 0401 	add.w	r4, r4, #1
 800045c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000460:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000464:	f080 809a 	bcs.w	800059c <__adddf3+0x240>
 8000468:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800046c:	bf08      	it	eq
 800046e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000472:	f150 0000 	adcs.w	r0, r0, #0
 8000476:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800047a:	ea41 0105 	orr.w	r1, r1, r5
 800047e:	bd30      	pop	{r4, r5, pc}
 8000480:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000484:	4140      	adcs	r0, r0
 8000486:	eb41 0101 	adc.w	r1, r1, r1
 800048a:	3c01      	subs	r4, #1
 800048c:	bf28      	it	cs
 800048e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000492:	d2e9      	bcs.n	8000468 <__adddf3+0x10c>
 8000494:	f091 0f00 	teq	r1, #0
 8000498:	bf04      	itt	eq
 800049a:	4601      	moveq	r1, r0
 800049c:	2000      	moveq	r0, #0
 800049e:	fab1 f381 	clz	r3, r1
 80004a2:	bf08      	it	eq
 80004a4:	3320      	addeq	r3, #32
 80004a6:	f1a3 030b 	sub.w	r3, r3, #11
 80004aa:	f1b3 0220 	subs.w	r2, r3, #32
 80004ae:	da0c      	bge.n	80004ca <__adddf3+0x16e>
 80004b0:	320c      	adds	r2, #12
 80004b2:	dd08      	ble.n	80004c6 <__adddf3+0x16a>
 80004b4:	f102 0c14 	add.w	ip, r2, #20
 80004b8:	f1c2 020c 	rsb	r2, r2, #12
 80004bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80004c0:	fa21 f102 	lsr.w	r1, r1, r2
 80004c4:	e00c      	b.n	80004e0 <__adddf3+0x184>
 80004c6:	f102 0214 	add.w	r2, r2, #20
 80004ca:	bfd8      	it	le
 80004cc:	f1c2 0c20 	rsble	ip, r2, #32
 80004d0:	fa01 f102 	lsl.w	r1, r1, r2
 80004d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80004d8:	bfdc      	itt	le
 80004da:	ea41 010c 	orrle.w	r1, r1, ip
 80004de:	4090      	lslle	r0, r2
 80004e0:	1ae4      	subs	r4, r4, r3
 80004e2:	bfa2      	ittt	ge
 80004e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004e8:	4329      	orrge	r1, r5
 80004ea:	bd30      	popge	{r4, r5, pc}
 80004ec:	ea6f 0404 	mvn.w	r4, r4
 80004f0:	3c1f      	subs	r4, #31
 80004f2:	da1c      	bge.n	800052e <__adddf3+0x1d2>
 80004f4:	340c      	adds	r4, #12
 80004f6:	dc0e      	bgt.n	8000516 <__adddf3+0x1ba>
 80004f8:	f104 0414 	add.w	r4, r4, #20
 80004fc:	f1c4 0220 	rsb	r2, r4, #32
 8000500:	fa20 f004 	lsr.w	r0, r0, r4
 8000504:	fa01 f302 	lsl.w	r3, r1, r2
 8000508:	ea40 0003 	orr.w	r0, r0, r3
 800050c:	fa21 f304 	lsr.w	r3, r1, r4
 8000510:	ea45 0103 	orr.w	r1, r5, r3
 8000514:	bd30      	pop	{r4, r5, pc}
 8000516:	f1c4 040c 	rsb	r4, r4, #12
 800051a:	f1c4 0220 	rsb	r2, r4, #32
 800051e:	fa20 f002 	lsr.w	r0, r0, r2
 8000522:	fa01 f304 	lsl.w	r3, r1, r4
 8000526:	ea40 0003 	orr.w	r0, r0, r3
 800052a:	4629      	mov	r1, r5
 800052c:	bd30      	pop	{r4, r5, pc}
 800052e:	fa21 f004 	lsr.w	r0, r1, r4
 8000532:	4629      	mov	r1, r5
 8000534:	bd30      	pop	{r4, r5, pc}
 8000536:	f094 0f00 	teq	r4, #0
 800053a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800053e:	bf06      	itte	eq
 8000540:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000544:	3401      	addeq	r4, #1
 8000546:	3d01      	subne	r5, #1
 8000548:	e74e      	b.n	80003e8 <__adddf3+0x8c>
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf18      	it	ne
 8000550:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000554:	d029      	beq.n	80005aa <__adddf3+0x24e>
 8000556:	ea94 0f05 	teq	r4, r5
 800055a:	bf08      	it	eq
 800055c:	ea90 0f02 	teqeq	r0, r2
 8000560:	d005      	beq.n	800056e <__adddf3+0x212>
 8000562:	ea54 0c00 	orrs.w	ip, r4, r0
 8000566:	bf04      	itt	eq
 8000568:	4619      	moveq	r1, r3
 800056a:	4610      	moveq	r0, r2
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	ea91 0f03 	teq	r1, r3
 8000572:	bf1e      	ittt	ne
 8000574:	2100      	movne	r1, #0
 8000576:	2000      	movne	r0, #0
 8000578:	bd30      	popne	{r4, r5, pc}
 800057a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800057e:	d105      	bne.n	800058c <__adddf3+0x230>
 8000580:	0040      	lsls	r0, r0, #1
 8000582:	4149      	adcs	r1, r1
 8000584:	bf28      	it	cs
 8000586:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800058a:	bd30      	pop	{r4, r5, pc}
 800058c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000590:	bf3c      	itt	cc
 8000592:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000596:	bd30      	popcc	{r4, r5, pc}
 8000598:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800059c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005a4:	f04f 0000 	mov.w	r0, #0
 80005a8:	bd30      	pop	{r4, r5, pc}
 80005aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ae:	bf1a      	itte	ne
 80005b0:	4619      	movne	r1, r3
 80005b2:	4610      	movne	r0, r2
 80005b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005b8:	bf1c      	itt	ne
 80005ba:	460b      	movne	r3, r1
 80005bc:	4602      	movne	r2, r0
 80005be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005c2:	bf06      	itte	eq
 80005c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005c8:	ea91 0f03 	teqeq	r1, r3
 80005cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80005d0:	bd30      	pop	{r4, r5, pc}
 80005d2:	bf00      	nop

080005d4 <__aeabi_ui2d>:
 80005d4:	f090 0f00 	teq	r0, #0
 80005d8:	bf04      	itt	eq
 80005da:	2100      	moveq	r1, #0
 80005dc:	4770      	bxeq	lr
 80005de:	b530      	push	{r4, r5, lr}
 80005e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005e8:	f04f 0500 	mov.w	r5, #0
 80005ec:	f04f 0100 	mov.w	r1, #0
 80005f0:	e750      	b.n	8000494 <__adddf3+0x138>
 80005f2:	bf00      	nop

080005f4 <__aeabi_i2d>:
 80005f4:	f090 0f00 	teq	r0, #0
 80005f8:	bf04      	itt	eq
 80005fa:	2100      	moveq	r1, #0
 80005fc:	4770      	bxeq	lr
 80005fe:	b530      	push	{r4, r5, lr}
 8000600:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000604:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000608:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800060c:	bf48      	it	mi
 800060e:	4240      	negmi	r0, r0
 8000610:	f04f 0100 	mov.w	r1, #0
 8000614:	e73e      	b.n	8000494 <__adddf3+0x138>
 8000616:	bf00      	nop

08000618 <__aeabi_f2d>:
 8000618:	0042      	lsls	r2, r0, #1
 800061a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800061e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000622:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000626:	bf1f      	itttt	ne
 8000628:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800062c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000630:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000634:	4770      	bxne	lr
 8000636:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800063a:	bf08      	it	eq
 800063c:	4770      	bxeq	lr
 800063e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000642:	bf04      	itt	eq
 8000644:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000648:	4770      	bxeq	lr
 800064a:	b530      	push	{r4, r5, lr}
 800064c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000650:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000654:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000658:	e71c      	b.n	8000494 <__adddf3+0x138>
 800065a:	bf00      	nop

0800065c <__aeabi_ul2d>:
 800065c:	ea50 0201 	orrs.w	r2, r0, r1
 8000660:	bf08      	it	eq
 8000662:	4770      	bxeq	lr
 8000664:	b530      	push	{r4, r5, lr}
 8000666:	f04f 0500 	mov.w	r5, #0
 800066a:	e00a      	b.n	8000682 <__aeabi_l2d+0x16>

0800066c <__aeabi_l2d>:
 800066c:	ea50 0201 	orrs.w	r2, r0, r1
 8000670:	bf08      	it	eq
 8000672:	4770      	bxeq	lr
 8000674:	b530      	push	{r4, r5, lr}
 8000676:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800067a:	d502      	bpl.n	8000682 <__aeabi_l2d+0x16>
 800067c:	4240      	negs	r0, r0
 800067e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000682:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000686:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800068a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800068e:	f43f aed8 	beq.w	8000442 <__adddf3+0xe6>
 8000692:	f04f 0203 	mov.w	r2, #3
 8000696:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800069a:	bf18      	it	ne
 800069c:	3203      	addne	r2, #3
 800069e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006a2:	bf18      	it	ne
 80006a4:	3203      	addne	r2, #3
 80006a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006aa:	f1c2 0320 	rsb	r3, r2, #32
 80006ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80006b2:	fa20 f002 	lsr.w	r0, r0, r2
 80006b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006ba:	ea40 000e 	orr.w	r0, r0, lr
 80006be:	fa21 f102 	lsr.w	r1, r1, r2
 80006c2:	4414      	add	r4, r2
 80006c4:	e6bd      	b.n	8000442 <__adddf3+0xe6>
 80006c6:	bf00      	nop

080006c8 <__aeabi_dmul>:
 80006c8:	b570      	push	{r4, r5, r6, lr}
 80006ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80006ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80006d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80006d6:	bf1d      	ittte	ne
 80006d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80006dc:	ea94 0f0c 	teqne	r4, ip
 80006e0:	ea95 0f0c 	teqne	r5, ip
 80006e4:	f000 f8de 	bleq	80008a4 <__aeabi_dmul+0x1dc>
 80006e8:	442c      	add	r4, r5
 80006ea:	ea81 0603 	eor.w	r6, r1, r3
 80006ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80006f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80006f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80006fa:	bf18      	it	ne
 80006fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000700:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000704:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000708:	d038      	beq.n	800077c <__aeabi_dmul+0xb4>
 800070a:	fba0 ce02 	umull	ip, lr, r0, r2
 800070e:	f04f 0500 	mov.w	r5, #0
 8000712:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000716:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800071a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800071e:	f04f 0600 	mov.w	r6, #0
 8000722:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000726:	f09c 0f00 	teq	ip, #0
 800072a:	bf18      	it	ne
 800072c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000730:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000734:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000738:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800073c:	d204      	bcs.n	8000748 <__aeabi_dmul+0x80>
 800073e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000742:	416d      	adcs	r5, r5
 8000744:	eb46 0606 	adc.w	r6, r6, r6
 8000748:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800074c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000750:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000754:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000758:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800075c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000760:	bf88      	it	hi
 8000762:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000766:	d81e      	bhi.n	80007a6 <__aeabi_dmul+0xde>
 8000768:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800076c:	bf08      	it	eq
 800076e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000772:	f150 0000 	adcs.w	r0, r0, #0
 8000776:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000780:	ea46 0101 	orr.w	r1, r6, r1
 8000784:	ea40 0002 	orr.w	r0, r0, r2
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000790:	bfc2      	ittt	gt
 8000792:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000796:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800079a:	bd70      	popgt	{r4, r5, r6, pc}
 800079c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007a0:	f04f 0e00 	mov.w	lr, #0
 80007a4:	3c01      	subs	r4, #1
 80007a6:	f300 80ab 	bgt.w	8000900 <__aeabi_dmul+0x238>
 80007aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80007ae:	bfde      	ittt	le
 80007b0:	2000      	movle	r0, #0
 80007b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80007b6:	bd70      	pople	{r4, r5, r6, pc}
 80007b8:	f1c4 0400 	rsb	r4, r4, #0
 80007bc:	3c20      	subs	r4, #32
 80007be:	da35      	bge.n	800082c <__aeabi_dmul+0x164>
 80007c0:	340c      	adds	r4, #12
 80007c2:	dc1b      	bgt.n	80007fc <__aeabi_dmul+0x134>
 80007c4:	f104 0414 	add.w	r4, r4, #20
 80007c8:	f1c4 0520 	rsb	r5, r4, #32
 80007cc:	fa00 f305 	lsl.w	r3, r0, r5
 80007d0:	fa20 f004 	lsr.w	r0, r0, r4
 80007d4:	fa01 f205 	lsl.w	r2, r1, r5
 80007d8:	ea40 0002 	orr.w	r0, r0, r2
 80007dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80007e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007e8:	fa21 f604 	lsr.w	r6, r1, r4
 80007ec:	eb42 0106 	adc.w	r1, r2, r6
 80007f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007f4:	bf08      	it	eq
 80007f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007fa:	bd70      	pop	{r4, r5, r6, pc}
 80007fc:	f1c4 040c 	rsb	r4, r4, #12
 8000800:	f1c4 0520 	rsb	r5, r4, #32
 8000804:	fa00 f304 	lsl.w	r3, r0, r4
 8000808:	fa20 f005 	lsr.w	r0, r0, r5
 800080c:	fa01 f204 	lsl.w	r2, r1, r4
 8000810:	ea40 0002 	orr.w	r0, r0, r2
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800081c:	f141 0100 	adc.w	r1, r1, #0
 8000820:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000824:	bf08      	it	eq
 8000826:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800082a:	bd70      	pop	{r4, r5, r6, pc}
 800082c:	f1c4 0520 	rsb	r5, r4, #32
 8000830:	fa00 f205 	lsl.w	r2, r0, r5
 8000834:	ea4e 0e02 	orr.w	lr, lr, r2
 8000838:	fa20 f304 	lsr.w	r3, r0, r4
 800083c:	fa01 f205 	lsl.w	r2, r1, r5
 8000840:	ea43 0302 	orr.w	r3, r3, r2
 8000844:	fa21 f004 	lsr.w	r0, r1, r4
 8000848:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800084c:	fa21 f204 	lsr.w	r2, r1, r4
 8000850:	ea20 0002 	bic.w	r0, r0, r2
 8000854:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000858:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800085c:	bf08      	it	eq
 800085e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000862:	bd70      	pop	{r4, r5, r6, pc}
 8000864:	f094 0f00 	teq	r4, #0
 8000868:	d10f      	bne.n	800088a <__aeabi_dmul+0x1c2>
 800086a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800086e:	0040      	lsls	r0, r0, #1
 8000870:	eb41 0101 	adc.w	r1, r1, r1
 8000874:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000878:	bf08      	it	eq
 800087a:	3c01      	subeq	r4, #1
 800087c:	d0f7      	beq.n	800086e <__aeabi_dmul+0x1a6>
 800087e:	ea41 0106 	orr.w	r1, r1, r6
 8000882:	f095 0f00 	teq	r5, #0
 8000886:	bf18      	it	ne
 8000888:	4770      	bxne	lr
 800088a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800088e:	0052      	lsls	r2, r2, #1
 8000890:	eb43 0303 	adc.w	r3, r3, r3
 8000894:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000898:	bf08      	it	eq
 800089a:	3d01      	subeq	r5, #1
 800089c:	d0f7      	beq.n	800088e <__aeabi_dmul+0x1c6>
 800089e:	ea43 0306 	orr.w	r3, r3, r6
 80008a2:	4770      	bx	lr
 80008a4:	ea94 0f0c 	teq	r4, ip
 80008a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ac:	bf18      	it	ne
 80008ae:	ea95 0f0c 	teqne	r5, ip
 80008b2:	d00c      	beq.n	80008ce <__aeabi_dmul+0x206>
 80008b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008b8:	bf18      	it	ne
 80008ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008be:	d1d1      	bne.n	8000864 <__aeabi_dmul+0x19c>
 80008c0:	ea81 0103 	eor.w	r1, r1, r3
 80008c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008c8:	f04f 0000 	mov.w	r0, #0
 80008cc:	bd70      	pop	{r4, r5, r6, pc}
 80008ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d2:	bf06      	itte	eq
 80008d4:	4610      	moveq	r0, r2
 80008d6:	4619      	moveq	r1, r3
 80008d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008dc:	d019      	beq.n	8000912 <__aeabi_dmul+0x24a>
 80008de:	ea94 0f0c 	teq	r4, ip
 80008e2:	d102      	bne.n	80008ea <__aeabi_dmul+0x222>
 80008e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80008e8:	d113      	bne.n	8000912 <__aeabi_dmul+0x24a>
 80008ea:	ea95 0f0c 	teq	r5, ip
 80008ee:	d105      	bne.n	80008fc <__aeabi_dmul+0x234>
 80008f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80008f4:	bf1c      	itt	ne
 80008f6:	4610      	movne	r0, r2
 80008f8:	4619      	movne	r1, r3
 80008fa:	d10a      	bne.n	8000912 <__aeabi_dmul+0x24a>
 80008fc:	ea81 0103 	eor.w	r1, r1, r3
 8000900:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000904:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000908:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800090c:	f04f 0000 	mov.w	r0, #0
 8000910:	bd70      	pop	{r4, r5, r6, pc}
 8000912:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000916:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800091a:	bd70      	pop	{r4, r5, r6, pc}

0800091c <__aeabi_ddiv>:
 800091c:	b570      	push	{r4, r5, r6, lr}
 800091e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000922:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000926:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800092a:	bf1d      	ittte	ne
 800092c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000930:	ea94 0f0c 	teqne	r4, ip
 8000934:	ea95 0f0c 	teqne	r5, ip
 8000938:	f000 f8a7 	bleq	8000a8a <__aeabi_ddiv+0x16e>
 800093c:	eba4 0405 	sub.w	r4, r4, r5
 8000940:	ea81 0e03 	eor.w	lr, r1, r3
 8000944:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000948:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800094c:	f000 8088 	beq.w	8000a60 <__aeabi_ddiv+0x144>
 8000950:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000954:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000958:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800095c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000960:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000964:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000968:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800096c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000970:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000974:	429d      	cmp	r5, r3
 8000976:	bf08      	it	eq
 8000978:	4296      	cmpeq	r6, r2
 800097a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800097e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000982:	d202      	bcs.n	800098a <__aeabi_ddiv+0x6e>
 8000984:	085b      	lsrs	r3, r3, #1
 8000986:	ea4f 0232 	mov.w	r2, r2, rrx
 800098a:	1ab6      	subs	r6, r6, r2
 800098c:	eb65 0503 	sbc.w	r5, r5, r3
 8000990:	085b      	lsrs	r3, r3, #1
 8000992:	ea4f 0232 	mov.w	r2, r2, rrx
 8000996:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800099a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800099e:	ebb6 0e02 	subs.w	lr, r6, r2
 80009a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009a6:	bf22      	ittt	cs
 80009a8:	1ab6      	subcs	r6, r6, r2
 80009aa:	4675      	movcs	r5, lr
 80009ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80009b0:	085b      	lsrs	r3, r3, #1
 80009b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009be:	bf22      	ittt	cs
 80009c0:	1ab6      	subcs	r6, r6, r2
 80009c2:	4675      	movcs	r5, lr
 80009c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009c8:	085b      	lsrs	r3, r3, #1
 80009ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80009ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80009d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009d6:	bf22      	ittt	cs
 80009d8:	1ab6      	subcs	r6, r6, r2
 80009da:	4675      	movcs	r5, lr
 80009dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80009e0:	085b      	lsrs	r3, r3, #1
 80009e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009ee:	bf22      	ittt	cs
 80009f0:	1ab6      	subcs	r6, r6, r2
 80009f2:	4675      	movcs	r5, lr
 80009f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80009f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80009fc:	d018      	beq.n	8000a30 <__aeabi_ddiv+0x114>
 80009fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000a02:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000a06:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000a0a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a0e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a12:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a16:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a1a:	d1c0      	bne.n	800099e <__aeabi_ddiv+0x82>
 8000a1c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a20:	d10b      	bne.n	8000a3a <__aeabi_ddiv+0x11e>
 8000a22:	ea41 0100 	orr.w	r1, r1, r0
 8000a26:	f04f 0000 	mov.w	r0, #0
 8000a2a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000a2e:	e7b6      	b.n	800099e <__aeabi_ddiv+0x82>
 8000a30:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a34:	bf04      	itt	eq
 8000a36:	4301      	orreq	r1, r0
 8000a38:	2000      	moveq	r0, #0
 8000a3a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000a3e:	bf88      	it	hi
 8000a40:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a44:	f63f aeaf 	bhi.w	80007a6 <__aeabi_dmul+0xde>
 8000a48:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a4c:	bf04      	itt	eq
 8000a4e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a52:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a56:	f150 0000 	adcs.w	r0, r0, #0
 8000a5a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a5e:	bd70      	pop	{r4, r5, r6, pc}
 8000a60:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a64:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a68:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a6c:	bfc2      	ittt	gt
 8000a6e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a72:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a76:	bd70      	popgt	{r4, r5, r6, pc}
 8000a78:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a7c:	f04f 0e00 	mov.w	lr, #0
 8000a80:	3c01      	subs	r4, #1
 8000a82:	e690      	b.n	80007a6 <__aeabi_dmul+0xde>
 8000a84:	ea45 0e06 	orr.w	lr, r5, r6
 8000a88:	e68d      	b.n	80007a6 <__aeabi_dmul+0xde>
 8000a8a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a8e:	ea94 0f0c 	teq	r4, ip
 8000a92:	bf08      	it	eq
 8000a94:	ea95 0f0c 	teqeq	r5, ip
 8000a98:	f43f af3b 	beq.w	8000912 <__aeabi_dmul+0x24a>
 8000a9c:	ea94 0f0c 	teq	r4, ip
 8000aa0:	d10a      	bne.n	8000ab8 <__aeabi_ddiv+0x19c>
 8000aa2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000aa6:	f47f af34 	bne.w	8000912 <__aeabi_dmul+0x24a>
 8000aaa:	ea95 0f0c 	teq	r5, ip
 8000aae:	f47f af25 	bne.w	80008fc <__aeabi_dmul+0x234>
 8000ab2:	4610      	mov	r0, r2
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	e72c      	b.n	8000912 <__aeabi_dmul+0x24a>
 8000ab8:	ea95 0f0c 	teq	r5, ip
 8000abc:	d106      	bne.n	8000acc <__aeabi_ddiv+0x1b0>
 8000abe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000ac2:	f43f aefd 	beq.w	80008c0 <__aeabi_dmul+0x1f8>
 8000ac6:	4610      	mov	r0, r2
 8000ac8:	4619      	mov	r1, r3
 8000aca:	e722      	b.n	8000912 <__aeabi_dmul+0x24a>
 8000acc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000ad0:	bf18      	it	ne
 8000ad2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000ad6:	f47f aec5 	bne.w	8000864 <__aeabi_dmul+0x19c>
 8000ada:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000ade:	f47f af0d 	bne.w	80008fc <__aeabi_dmul+0x234>
 8000ae2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000ae6:	f47f aeeb 	bne.w	80008c0 <__aeabi_dmul+0x1f8>
 8000aea:	e712      	b.n	8000912 <__aeabi_dmul+0x24a>

08000aec <__gedf2>:
 8000aec:	f04f 3cff 	mov.w	ip, #4294967295
 8000af0:	e006      	b.n	8000b00 <__cmpdf2+0x4>
 8000af2:	bf00      	nop

08000af4 <__ledf2>:
 8000af4:	f04f 0c01 	mov.w	ip, #1
 8000af8:	e002      	b.n	8000b00 <__cmpdf2+0x4>
 8000afa:	bf00      	nop

08000afc <__cmpdf2>:
 8000afc:	f04f 0c01 	mov.w	ip, #1
 8000b00:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b04:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b10:	bf18      	it	ne
 8000b12:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000b16:	d01b      	beq.n	8000b50 <__cmpdf2+0x54>
 8000b18:	b001      	add	sp, #4
 8000b1a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000b1e:	bf0c      	ite	eq
 8000b20:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b24:	ea91 0f03 	teqne	r1, r3
 8000b28:	bf02      	ittt	eq
 8000b2a:	ea90 0f02 	teqeq	r0, r2
 8000b2e:	2000      	moveq	r0, #0
 8000b30:	4770      	bxeq	lr
 8000b32:	f110 0f00 	cmn.w	r0, #0
 8000b36:	ea91 0f03 	teq	r1, r3
 8000b3a:	bf58      	it	pl
 8000b3c:	4299      	cmppl	r1, r3
 8000b3e:	bf08      	it	eq
 8000b40:	4290      	cmpeq	r0, r2
 8000b42:	bf2c      	ite	cs
 8000b44:	17d8      	asrcs	r0, r3, #31
 8000b46:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b4a:	f040 0001 	orr.w	r0, r0, #1
 8000b4e:	4770      	bx	lr
 8000b50:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b58:	d102      	bne.n	8000b60 <__cmpdf2+0x64>
 8000b5a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5e:	d107      	bne.n	8000b70 <__cmpdf2+0x74>
 8000b60:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b68:	d1d6      	bne.n	8000b18 <__cmpdf2+0x1c>
 8000b6a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6e:	d0d3      	beq.n	8000b18 <__cmpdf2+0x1c>
 8000b70:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop

08000b78 <__aeabi_cdrcmple>:
 8000b78:	4684      	mov	ip, r0
 8000b7a:	4610      	mov	r0, r2
 8000b7c:	4662      	mov	r2, ip
 8000b7e:	468c      	mov	ip, r1
 8000b80:	4619      	mov	r1, r3
 8000b82:	4663      	mov	r3, ip
 8000b84:	e000      	b.n	8000b88 <__aeabi_cdcmpeq>
 8000b86:	bf00      	nop

08000b88 <__aeabi_cdcmpeq>:
 8000b88:	b501      	push	{r0, lr}
 8000b8a:	f7ff ffb7 	bl	8000afc <__cmpdf2>
 8000b8e:	2800      	cmp	r0, #0
 8000b90:	bf48      	it	mi
 8000b92:	f110 0f00 	cmnmi.w	r0, #0
 8000b96:	bd01      	pop	{r0, pc}

08000b98 <__aeabi_dcmpeq>:
 8000b98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b9c:	f7ff fff4 	bl	8000b88 <__aeabi_cdcmpeq>
 8000ba0:	bf0c      	ite	eq
 8000ba2:	2001      	moveq	r0, #1
 8000ba4:	2000      	movne	r0, #0
 8000ba6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000baa:	bf00      	nop

08000bac <__aeabi_dcmplt>:
 8000bac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bb0:	f7ff ffea 	bl	8000b88 <__aeabi_cdcmpeq>
 8000bb4:	bf34      	ite	cc
 8000bb6:	2001      	movcc	r0, #1
 8000bb8:	2000      	movcs	r0, #0
 8000bba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bbe:	bf00      	nop

08000bc0 <__aeabi_dcmple>:
 8000bc0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bc4:	f7ff ffe0 	bl	8000b88 <__aeabi_cdcmpeq>
 8000bc8:	bf94      	ite	ls
 8000bca:	2001      	movls	r0, #1
 8000bcc:	2000      	movhi	r0, #0
 8000bce:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bd2:	bf00      	nop

08000bd4 <__aeabi_dcmpge>:
 8000bd4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bd8:	f7ff ffce 	bl	8000b78 <__aeabi_cdrcmple>
 8000bdc:	bf94      	ite	ls
 8000bde:	2001      	movls	r0, #1
 8000be0:	2000      	movhi	r0, #0
 8000be2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000be6:	bf00      	nop

08000be8 <__aeabi_dcmpgt>:
 8000be8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bec:	f7ff ffc4 	bl	8000b78 <__aeabi_cdrcmple>
 8000bf0:	bf34      	ite	cc
 8000bf2:	2001      	movcc	r0, #1
 8000bf4:	2000      	movcs	r0, #0
 8000bf6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bfa:	bf00      	nop

08000bfc <__aeabi_dcmpun>:
 8000bfc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000c00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c04:	d102      	bne.n	8000c0c <__aeabi_dcmpun+0x10>
 8000c06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000c0a:	d10a      	bne.n	8000c22 <__aeabi_dcmpun+0x26>
 8000c0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000c10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c14:	d102      	bne.n	8000c1c <__aeabi_dcmpun+0x20>
 8000c16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_dcmpun+0x26>
 8000c1c:	f04f 0000 	mov.w	r0, #0
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0001 	mov.w	r0, #1
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2iz>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c30:	d215      	bcs.n	8000c5e <__aeabi_d2iz+0x36>
 8000c32:	d511      	bpl.n	8000c58 <__aeabi_d2iz+0x30>
 8000c34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c3c:	d912      	bls.n	8000c64 <__aeabi_d2iz+0x3c>
 8000c3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000c52:	bf18      	it	ne
 8000c54:	4240      	negne	r0, r0
 8000c56:	4770      	bx	lr
 8000c58:	f04f 0000 	mov.w	r0, #0
 8000c5c:	4770      	bx	lr
 8000c5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c62:	d105      	bne.n	8000c70 <__aeabi_d2iz+0x48>
 8000c64:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	bf08      	it	eq
 8000c6a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c6e:	4770      	bx	lr
 8000c70:	f04f 0000 	mov.w	r0, #0
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <__aeabi_uldivmod>:
 8000c78:	b953      	cbnz	r3, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7a:	b94a      	cbnz	r2, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	bf08      	it	eq
 8000c80:	2800      	cmpeq	r0, #0
 8000c82:	bf1c      	itt	ne
 8000c84:	f04f 31ff 	movne.w	r1, #4294967295
 8000c88:	f04f 30ff 	movne.w	r0, #4294967295
 8000c8c:	f000 b974 	b.w	8000f78 <__aeabi_idiv0>
 8000c90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c98:	f000 f806 	bl	8000ca8 <__udivmoddi4>
 8000c9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca4:	b004      	add	sp, #16
 8000ca6:	4770      	bx	lr

08000ca8 <__udivmoddi4>:
 8000ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cac:	9d08      	ldr	r5, [sp, #32]
 8000cae:	4604      	mov	r4, r0
 8000cb0:	468e      	mov	lr, r1
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d14d      	bne.n	8000d52 <__udivmoddi4+0xaa>
 8000cb6:	428a      	cmp	r2, r1
 8000cb8:	4694      	mov	ip, r2
 8000cba:	d969      	bls.n	8000d90 <__udivmoddi4+0xe8>
 8000cbc:	fab2 f282 	clz	r2, r2
 8000cc0:	b152      	cbz	r2, 8000cd8 <__udivmoddi4+0x30>
 8000cc2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cc6:	f1c2 0120 	rsb	r1, r2, #32
 8000cca:	fa20 f101 	lsr.w	r1, r0, r1
 8000cce:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cd2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cd6:	4094      	lsls	r4, r2
 8000cd8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cdc:	0c21      	lsrs	r1, r4, #16
 8000cde:	fbbe f6f8 	udiv	r6, lr, r8
 8000ce2:	fa1f f78c 	uxth.w	r7, ip
 8000ce6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cea:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cee:	fb06 f107 	mul.w	r1, r6, r7
 8000cf2:	4299      	cmp	r1, r3
 8000cf4:	d90a      	bls.n	8000d0c <__udivmoddi4+0x64>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cfe:	f080 811f 	bcs.w	8000f40 <__udivmoddi4+0x298>
 8000d02:	4299      	cmp	r1, r3
 8000d04:	f240 811c 	bls.w	8000f40 <__udivmoddi4+0x298>
 8000d08:	3e02      	subs	r6, #2
 8000d0a:	4463      	add	r3, ip
 8000d0c:	1a5b      	subs	r3, r3, r1
 8000d0e:	b2a4      	uxth	r4, r4
 8000d10:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d14:	fb08 3310 	mls	r3, r8, r0, r3
 8000d18:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d1c:	fb00 f707 	mul.w	r7, r0, r7
 8000d20:	42a7      	cmp	r7, r4
 8000d22:	d90a      	bls.n	8000d3a <__udivmoddi4+0x92>
 8000d24:	eb1c 0404 	adds.w	r4, ip, r4
 8000d28:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d2c:	f080 810a 	bcs.w	8000f44 <__udivmoddi4+0x29c>
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	f240 8107 	bls.w	8000f44 <__udivmoddi4+0x29c>
 8000d36:	4464      	add	r4, ip
 8000d38:	3802      	subs	r0, #2
 8000d3a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d3e:	1be4      	subs	r4, r4, r7
 8000d40:	2600      	movs	r6, #0
 8000d42:	b11d      	cbz	r5, 8000d4c <__udivmoddi4+0xa4>
 8000d44:	40d4      	lsrs	r4, r2
 8000d46:	2300      	movs	r3, #0
 8000d48:	e9c5 4300 	strd	r4, r3, [r5]
 8000d4c:	4631      	mov	r1, r6
 8000d4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d909      	bls.n	8000d6a <__udivmoddi4+0xc2>
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	f000 80ef 	beq.w	8000f3a <__udivmoddi4+0x292>
 8000d5c:	2600      	movs	r6, #0
 8000d5e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d62:	4630      	mov	r0, r6
 8000d64:	4631      	mov	r1, r6
 8000d66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6a:	fab3 f683 	clz	r6, r3
 8000d6e:	2e00      	cmp	r6, #0
 8000d70:	d14a      	bne.n	8000e08 <__udivmoddi4+0x160>
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d302      	bcc.n	8000d7c <__udivmoddi4+0xd4>
 8000d76:	4282      	cmp	r2, r0
 8000d78:	f200 80f9 	bhi.w	8000f6e <__udivmoddi4+0x2c6>
 8000d7c:	1a84      	subs	r4, r0, r2
 8000d7e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d82:	2001      	movs	r0, #1
 8000d84:	469e      	mov	lr, r3
 8000d86:	2d00      	cmp	r5, #0
 8000d88:	d0e0      	beq.n	8000d4c <__udivmoddi4+0xa4>
 8000d8a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d8e:	e7dd      	b.n	8000d4c <__udivmoddi4+0xa4>
 8000d90:	b902      	cbnz	r2, 8000d94 <__udivmoddi4+0xec>
 8000d92:	deff      	udf	#255	; 0xff
 8000d94:	fab2 f282 	clz	r2, r2
 8000d98:	2a00      	cmp	r2, #0
 8000d9a:	f040 8092 	bne.w	8000ec2 <__udivmoddi4+0x21a>
 8000d9e:	eba1 010c 	sub.w	r1, r1, ip
 8000da2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da6:	fa1f fe8c 	uxth.w	lr, ip
 8000daa:	2601      	movs	r6, #1
 8000dac:	0c20      	lsrs	r0, r4, #16
 8000dae:	fbb1 f3f7 	udiv	r3, r1, r7
 8000db2:	fb07 1113 	mls	r1, r7, r3, r1
 8000db6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dba:	fb0e f003 	mul.w	r0, lr, r3
 8000dbe:	4288      	cmp	r0, r1
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x12c>
 8000dc2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dc6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x12a>
 8000dcc:	4288      	cmp	r0, r1
 8000dce:	f200 80cb 	bhi.w	8000f68 <__udivmoddi4+0x2c0>
 8000dd2:	4643      	mov	r3, r8
 8000dd4:	1a09      	subs	r1, r1, r0
 8000dd6:	b2a4      	uxth	r4, r4
 8000dd8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ddc:	fb07 1110 	mls	r1, r7, r0, r1
 8000de0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000de4:	fb0e fe00 	mul.w	lr, lr, r0
 8000de8:	45a6      	cmp	lr, r4
 8000dea:	d908      	bls.n	8000dfe <__udivmoddi4+0x156>
 8000dec:	eb1c 0404 	adds.w	r4, ip, r4
 8000df0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000df4:	d202      	bcs.n	8000dfc <__udivmoddi4+0x154>
 8000df6:	45a6      	cmp	lr, r4
 8000df8:	f200 80bb 	bhi.w	8000f72 <__udivmoddi4+0x2ca>
 8000dfc:	4608      	mov	r0, r1
 8000dfe:	eba4 040e 	sub.w	r4, r4, lr
 8000e02:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e06:	e79c      	b.n	8000d42 <__udivmoddi4+0x9a>
 8000e08:	f1c6 0720 	rsb	r7, r6, #32
 8000e0c:	40b3      	lsls	r3, r6
 8000e0e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e12:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e16:	fa20 f407 	lsr.w	r4, r0, r7
 8000e1a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e1e:	431c      	orrs	r4, r3
 8000e20:	40f9      	lsrs	r1, r7
 8000e22:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e26:	fa00 f306 	lsl.w	r3, r0, r6
 8000e2a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e2e:	0c20      	lsrs	r0, r4, #16
 8000e30:	fa1f fe8c 	uxth.w	lr, ip
 8000e34:	fb09 1118 	mls	r1, r9, r8, r1
 8000e38:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e3c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e40:	4288      	cmp	r0, r1
 8000e42:	fa02 f206 	lsl.w	r2, r2, r6
 8000e46:	d90b      	bls.n	8000e60 <__udivmoddi4+0x1b8>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e50:	f080 8088 	bcs.w	8000f64 <__udivmoddi4+0x2bc>
 8000e54:	4288      	cmp	r0, r1
 8000e56:	f240 8085 	bls.w	8000f64 <__udivmoddi4+0x2bc>
 8000e5a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e5e:	4461      	add	r1, ip
 8000e60:	1a09      	subs	r1, r1, r0
 8000e62:	b2a4      	uxth	r4, r4
 8000e64:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e68:	fb09 1110 	mls	r1, r9, r0, r1
 8000e6c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e70:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e74:	458e      	cmp	lr, r1
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x1e2>
 8000e78:	eb1c 0101 	adds.w	r1, ip, r1
 8000e7c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e80:	d26c      	bcs.n	8000f5c <__udivmoddi4+0x2b4>
 8000e82:	458e      	cmp	lr, r1
 8000e84:	d96a      	bls.n	8000f5c <__udivmoddi4+0x2b4>
 8000e86:	3802      	subs	r0, #2
 8000e88:	4461      	add	r1, ip
 8000e8a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e8e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e92:	eba1 010e 	sub.w	r1, r1, lr
 8000e96:	42a1      	cmp	r1, r4
 8000e98:	46c8      	mov	r8, r9
 8000e9a:	46a6      	mov	lr, r4
 8000e9c:	d356      	bcc.n	8000f4c <__udivmoddi4+0x2a4>
 8000e9e:	d053      	beq.n	8000f48 <__udivmoddi4+0x2a0>
 8000ea0:	b15d      	cbz	r5, 8000eba <__udivmoddi4+0x212>
 8000ea2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ea6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eaa:	fa01 f707 	lsl.w	r7, r1, r7
 8000eae:	fa22 f306 	lsr.w	r3, r2, r6
 8000eb2:	40f1      	lsrs	r1, r6
 8000eb4:	431f      	orrs	r7, r3
 8000eb6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eba:	2600      	movs	r6, #0
 8000ebc:	4631      	mov	r1, r6
 8000ebe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec2:	f1c2 0320 	rsb	r3, r2, #32
 8000ec6:	40d8      	lsrs	r0, r3
 8000ec8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ecc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ed0:	4091      	lsls	r1, r2
 8000ed2:	4301      	orrs	r1, r0
 8000ed4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ed8:	fa1f fe8c 	uxth.w	lr, ip
 8000edc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ee0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ee4:	0c0b      	lsrs	r3, r1, #16
 8000ee6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eea:	fb00 f60e 	mul.w	r6, r0, lr
 8000eee:	429e      	cmp	r6, r3
 8000ef0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ef4:	d908      	bls.n	8000f08 <__udivmoddi4+0x260>
 8000ef6:	eb1c 0303 	adds.w	r3, ip, r3
 8000efa:	f100 38ff 	add.w	r8, r0, #4294967295
 8000efe:	d22f      	bcs.n	8000f60 <__udivmoddi4+0x2b8>
 8000f00:	429e      	cmp	r6, r3
 8000f02:	d92d      	bls.n	8000f60 <__udivmoddi4+0x2b8>
 8000f04:	3802      	subs	r0, #2
 8000f06:	4463      	add	r3, ip
 8000f08:	1b9b      	subs	r3, r3, r6
 8000f0a:	b289      	uxth	r1, r1
 8000f0c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f10:	fb07 3316 	mls	r3, r7, r6, r3
 8000f14:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f18:	fb06 f30e 	mul.w	r3, r6, lr
 8000f1c:	428b      	cmp	r3, r1
 8000f1e:	d908      	bls.n	8000f32 <__udivmoddi4+0x28a>
 8000f20:	eb1c 0101 	adds.w	r1, ip, r1
 8000f24:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f28:	d216      	bcs.n	8000f58 <__udivmoddi4+0x2b0>
 8000f2a:	428b      	cmp	r3, r1
 8000f2c:	d914      	bls.n	8000f58 <__udivmoddi4+0x2b0>
 8000f2e:	3e02      	subs	r6, #2
 8000f30:	4461      	add	r1, ip
 8000f32:	1ac9      	subs	r1, r1, r3
 8000f34:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f38:	e738      	b.n	8000dac <__udivmoddi4+0x104>
 8000f3a:	462e      	mov	r6, r5
 8000f3c:	4628      	mov	r0, r5
 8000f3e:	e705      	b.n	8000d4c <__udivmoddi4+0xa4>
 8000f40:	4606      	mov	r6, r0
 8000f42:	e6e3      	b.n	8000d0c <__udivmoddi4+0x64>
 8000f44:	4618      	mov	r0, r3
 8000f46:	e6f8      	b.n	8000d3a <__udivmoddi4+0x92>
 8000f48:	454b      	cmp	r3, r9
 8000f4a:	d2a9      	bcs.n	8000ea0 <__udivmoddi4+0x1f8>
 8000f4c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f50:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f54:	3801      	subs	r0, #1
 8000f56:	e7a3      	b.n	8000ea0 <__udivmoddi4+0x1f8>
 8000f58:	4646      	mov	r6, r8
 8000f5a:	e7ea      	b.n	8000f32 <__udivmoddi4+0x28a>
 8000f5c:	4620      	mov	r0, r4
 8000f5e:	e794      	b.n	8000e8a <__udivmoddi4+0x1e2>
 8000f60:	4640      	mov	r0, r8
 8000f62:	e7d1      	b.n	8000f08 <__udivmoddi4+0x260>
 8000f64:	46d0      	mov	r8, sl
 8000f66:	e77b      	b.n	8000e60 <__udivmoddi4+0x1b8>
 8000f68:	3b02      	subs	r3, #2
 8000f6a:	4461      	add	r1, ip
 8000f6c:	e732      	b.n	8000dd4 <__udivmoddi4+0x12c>
 8000f6e:	4630      	mov	r0, r6
 8000f70:	e709      	b.n	8000d86 <__udivmoddi4+0xde>
 8000f72:	4464      	add	r4, ip
 8000f74:	3802      	subs	r0, #2
 8000f76:	e742      	b.n	8000dfe <__udivmoddi4+0x156>

08000f78 <__aeabi_idiv0>:
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop

08000f7c <LEDMenu_Init>:
/*
 * Menu functions
 */

void LEDMenu_Init(LCD2004_I2C *lcd)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b084      	sub	sp, #16
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
	// Start config with all off
	// TODO: save & load config for restarts
	for (uint8_t i = 0; i < LED_NUM_STRIPS; i++)
 8000f84:	2300      	movs	r3, #0
 8000f86:	73fb      	strb	r3, [r7, #15]
 8000f88:	e015      	b.n	8000fb6 <LEDMenu_Init+0x3a>
		for (uint8_t j = 0; j < LED_NUM_COLORS; j++)
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	73bb      	strb	r3, [r7, #14]
 8000f8e:	e00c      	b.n	8000faa <LEDMenu_Init+0x2e>
			LEDStrips_Config[i][j] = LEDCONFIG_OFF;
 8000f90:	7bfa      	ldrb	r2, [r7, #15]
 8000f92:	7bb9      	ldrb	r1, [r7, #14]
 8000f94:	4814      	ldr	r0, [pc, #80]	; (8000fe8 <LEDMenu_Init+0x6c>)
 8000f96:	4613      	mov	r3, r2
 8000f98:	005b      	lsls	r3, r3, #1
 8000f9a:	4413      	add	r3, r2
 8000f9c:	4403      	add	r3, r0
 8000f9e:	440b      	add	r3, r1
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	701a      	strb	r2, [r3, #0]
		for (uint8_t j = 0; j < LED_NUM_COLORS; j++)
 8000fa4:	7bbb      	ldrb	r3, [r7, #14]
 8000fa6:	3301      	adds	r3, #1
 8000fa8:	73bb      	strb	r3, [r7, #14]
 8000faa:	7bbb      	ldrb	r3, [r7, #14]
 8000fac:	2b02      	cmp	r3, #2
 8000fae:	d9ef      	bls.n	8000f90 <LEDMenu_Init+0x14>
	for (uint8_t i = 0; i < LED_NUM_STRIPS; i++)
 8000fb0:	7bfb      	ldrb	r3, [r7, #15]
 8000fb2:	3301      	adds	r3, #1
 8000fb4:	73fb      	strb	r3, [r7, #15]
 8000fb6:	7bfb      	ldrb	r3, [r7, #15]
 8000fb8:	2b02      	cmp	r3, #2
 8000fba:	d9e6      	bls.n	8000f8a <LEDMenu_Init+0xe>

	LEDSelectionMenu_State = LEDMENU_START;
 8000fbc:	4b0b      	ldr	r3, [pc, #44]	; (8000fec <LEDMenu_Init+0x70>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	701a      	strb	r2, [r3, #0]
	LEDSelectionMenu_Memory[LEDMENU_STRIP_SELECTION] = 0;
 8000fc2:	4b0b      	ldr	r3, [pc, #44]	; (8000ff0 <LEDMenu_Init+0x74>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	705a      	strb	r2, [r3, #1]
	LEDSelectionMenu_Memory[LEDMENU_COLOR_SELECTION] = 0;
 8000fc8:	4b09      	ldr	r3, [pc, #36]	; (8000ff0 <LEDMenu_Init+0x74>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	709a      	strb	r2, [r3, #2]
	LEDSelectionMenu_Memory[LEDMENU_CONFIG_SELECTION] = 0;
 8000fce:	4b08      	ldr	r3, [pc, #32]	; (8000ff0 <LEDMenu_Init+0x74>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	70da      	strb	r2, [r3, #3]

	LEDMenu_StatusFlags = 0;
 8000fd4:	4b07      	ldr	r3, [pc, #28]	; (8000ff4 <LEDMenu_Init+0x78>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	701a      	strb	r2, [r3, #0]

	LEDMenu_UpdateDisplay(lcd);
 8000fda:	6878      	ldr	r0, [r7, #4]
 8000fdc:	f000 f960 	bl	80012a0 <LEDMenu_UpdateDisplay>
}
 8000fe0:	bf00      	nop
 8000fe2:	3710      	adds	r7, #16
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	200002f4 	.word	0x200002f4
 8000fec:	200002fd 	.word	0x200002fd
 8000ff0:	20000324 	.word	0x20000324
 8000ff4:	200002f0 	.word	0x200002f0

08000ff8 <LEDMenu_UpdateState>:

void LEDMenu_UpdateState(LEDMenu_ButtonAction action, LCD2004_I2C *lcd)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b086      	sub	sp, #24
 8000ffc:	af02      	add	r7, sp, #8
 8000ffe:	4603      	mov	r3, r0
 8001000:	6039      	str	r1, [r7, #0]
 8001002:	71fb      	strb	r3, [r7, #7]
	switch (action)
 8001004:	79fb      	ldrb	r3, [r7, #7]
 8001006:	2b02      	cmp	r3, #2
 8001008:	f000 80d5 	beq.w	80011b6 <LEDMenu_UpdateState+0x1be>
 800100c:	2b02      	cmp	r3, #2
 800100e:	f300 8113 	bgt.w	8001238 <LEDMenu_UpdateState+0x240>
 8001012:	2b00      	cmp	r3, #0
 8001014:	d002      	beq.n	800101c <LEDMenu_UpdateState+0x24>
 8001016:	2b01      	cmp	r3, #1
 8001018:	d025      	beq.n	8001066 <LEDMenu_UpdateState+0x6e>
 800101a:	e10d      	b.n	8001238 <LEDMenu_UpdateState+0x240>
	{
	case LEDMENU_BTN_BACK: // Go back to previous menu
	{
		switch (LEDSelectionMenu_State)
 800101c:	4b92      	ldr	r3, [pc, #584]	; (8001268 <LEDMenu_UpdateState+0x270>)
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	2b03      	cmp	r3, #3
 8001022:	d817      	bhi.n	8001054 <LEDMenu_UpdateState+0x5c>
 8001024:	a201      	add	r2, pc, #4	; (adr r2, 800102c <LEDMenu_UpdateState+0x34>)
 8001026:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800102a:	bf00      	nop
 800102c:	0800105d 	.word	0x0800105d
 8001030:	0800103d 	.word	0x0800103d
 8001034:	08001045 	.word	0x08001045
 8001038:	0800104d 	.word	0x0800104d

			// cant go back from start state -> do nothing

			break;
		case LEDMENU_STRIP_SELECTION:
			LEDSelectionMenu_State = LEDMENU_START;
 800103c:	4b8a      	ldr	r3, [pc, #552]	; (8001268 <LEDMenu_UpdateState+0x270>)
 800103e:	2200      	movs	r2, #0
 8001040:	701a      	strb	r2, [r3, #0]
			break;
 8001042:	e00c      	b.n	800105e <LEDMenu_UpdateState+0x66>
		case LEDMENU_COLOR_SELECTION:
			LEDSelectionMenu_State = LEDMENU_STRIP_SELECTION;
 8001044:	4b88      	ldr	r3, [pc, #544]	; (8001268 <LEDMenu_UpdateState+0x270>)
 8001046:	2201      	movs	r2, #1
 8001048:	701a      	strb	r2, [r3, #0]
			break;
 800104a:	e008      	b.n	800105e <LEDMenu_UpdateState+0x66>
		case LEDMENU_CONFIG_SELECTION:
			LEDSelectionMenu_State = LEDMENU_COLOR_SELECTION;
 800104c:	4b86      	ldr	r3, [pc, #536]	; (8001268 <LEDMenu_UpdateState+0x270>)
 800104e:	2202      	movs	r2, #2
 8001050:	701a      	strb	r2, [r3, #0]
			break;
 8001052:	e004      	b.n	800105e <LEDMenu_UpdateState+0x66>
		case LEDMENU_NUM:
		default:
			// default to start
			LEDSelectionMenu_State = LEDMENU_START;
 8001054:	4b84      	ldr	r3, [pc, #528]	; (8001268 <LEDMenu_UpdateState+0x270>)
 8001056:	2200      	movs	r2, #0
 8001058:	701a      	strb	r2, [r3, #0]
			break;
 800105a:	e000      	b.n	800105e <LEDMenu_UpdateState+0x66>
			break;
 800105c:	bf00      	nop
		}

		LCD_Clear(lcd);
 800105e:	6838      	ldr	r0, [r7, #0]
 8001060:	f002 fb6e 	bl	8003740 <LCD_Clear>

		break;
 8001064:	e0f8      	b.n	8001258 <LEDMenu_UpdateState+0x260>
	}

	case LEDMENU_BTN_SELECT: // select current item, remember selection and go to next menu
	{
		switch (LEDSelectionMenu_State)
 8001066:	4b80      	ldr	r3, [pc, #512]	; (8001268 <LEDMenu_UpdateState+0x270>)
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	2b03      	cmp	r3, #3
 800106c:	f200 809b 	bhi.w	80011a6 <LEDMenu_UpdateState+0x1ae>
 8001070:	a201      	add	r2, pc, #4	; (adr r2, 8001078 <LEDMenu_UpdateState+0x80>)
 8001072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001076:	bf00      	nop
 8001078:	08001089 	.word	0x08001089
 800107c:	08001097 	.word	0x08001097
 8001080:	080010a5 	.word	0x080010a5
 8001084:	080010ad 	.word	0x080010ad
		{
		case LEDMENU_START:
		{
			LEDSelectionMenu_Memory[LEDMENU_STRIP_SELECTION] = 0;
 8001088:	4b78      	ldr	r3, [pc, #480]	; (800126c <LEDMenu_UpdateState+0x274>)
 800108a:	2200      	movs	r2, #0
 800108c:	705a      	strb	r2, [r3, #1]
			LEDSelectionMenu_State = LEDMENU_STRIP_SELECTION;
 800108e:	4b76      	ldr	r3, [pc, #472]	; (8001268 <LEDMenu_UpdateState+0x270>)
 8001090:	2201      	movs	r2, #1
 8001092:	701a      	strb	r2, [r3, #0]
			break;
 8001094:	e08b      	b.n	80011ae <LEDMenu_UpdateState+0x1b6>
		}

		case LEDMENU_STRIP_SELECTION:
		{
			LEDSelectionMenu_Memory[LEDMENU_COLOR_SELECTION] = 0;
 8001096:	4b75      	ldr	r3, [pc, #468]	; (800126c <LEDMenu_UpdateState+0x274>)
 8001098:	2200      	movs	r2, #0
 800109a:	709a      	strb	r2, [r3, #2]
			LEDSelectionMenu_State = LEDMENU_COLOR_SELECTION;
 800109c:	4b72      	ldr	r3, [pc, #456]	; (8001268 <LEDMenu_UpdateState+0x270>)
 800109e:	2202      	movs	r2, #2
 80010a0:	701a      	strb	r2, [r3, #0]
			break;
 80010a2:	e084      	b.n	80011ae <LEDMenu_UpdateState+0x1b6>
		}

		case LEDMENU_COLOR_SELECTION:
		{
			//LEDSelectionMenu_Memory[LEDMENU_INPUT_SELECTION] = 0;
			LEDSelectionMenu_State = LEDMENU_CONFIG_SELECTION;
 80010a4:	4b70      	ldr	r3, [pc, #448]	; (8001268 <LEDMenu_UpdateState+0x270>)
 80010a6:	2203      	movs	r2, #3
 80010a8:	701a      	strb	r2, [r3, #0]
			break;
 80010aa:	e080      	b.n	80011ae <LEDMenu_UpdateState+0x1b6>
		}

		case LEDMENU_CONFIG_SELECTION:
		{
			// save selection result in led strip config
			uint8_t Selection_Strip = LEDSelectionMenu_Memory[LEDMENU_STRIP_SELECTION];
 80010ac:	4b6f      	ldr	r3, [pc, #444]	; (800126c <LEDMenu_UpdateState+0x274>)
 80010ae:	785b      	ldrb	r3, [r3, #1]
 80010b0:	73fb      	strb	r3, [r7, #15]
			uint8_t Selection_Color = LEDSelectionMenu_Memory[LEDMENU_COLOR_SELECTION];
 80010b2:	4b6e      	ldr	r3, [pc, #440]	; (800126c <LEDMenu_UpdateState+0x274>)
 80010b4:	789b      	ldrb	r3, [r3, #2]
 80010b6:	73bb      	strb	r3, [r7, #14]
			uint8_t Selection_Config = LEDSelectionMenu_Memory[LEDMENU_CONFIG_SELECTION];
 80010b8:	4b6c      	ldr	r3, [pc, #432]	; (800126c <LEDMenu_UpdateState+0x274>)
 80010ba:	78db      	ldrb	r3, [r3, #3]
 80010bc:	737b      	strb	r3, [r7, #13]

			LEDStrips_Config[Selection_Strip][Selection_Color] = Selection_Config;
 80010be:	7bfa      	ldrb	r2, [r7, #15]
 80010c0:	7bb9      	ldrb	r1, [r7, #14]
 80010c2:	486b      	ldr	r0, [pc, #428]	; (8001270 <LEDMenu_UpdateState+0x278>)
 80010c4:	4613      	mov	r3, r2
 80010c6:	005b      	lsls	r3, r3, #1
 80010c8:	4413      	add	r3, r2
 80010ca:	4403      	add	r3, r0
 80010cc:	440b      	add	r3, r1
 80010ce:	7b7a      	ldrb	r2, [r7, #13]
 80010d0:	701a      	strb	r2, [r3, #0]
			LEDStrips_Update();
 80010d2:	f000 fb11 	bl	80016f8 <LEDStrips_Update>

			LEDMenu_StatusFlags |= LEDMENU_FLAG_STATECHANGE;
 80010d6:	4b67      	ldr	r3, [pc, #412]	; (8001274 <LEDMenu_UpdateState+0x27c>)
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	f043 0301 	orr.w	r3, r3, #1
 80010de:	b2da      	uxtb	r2, r3
 80010e0:	4b64      	ldr	r3, [pc, #400]	; (8001274 <LEDMenu_UpdateState+0x27c>)
 80010e2:	701a      	strb	r2, [r3, #0]

			sprintf(USB_TxBuffer, "led config changed: strip %s %s -> %s\r\n", LED_StripNames_Long[Selection_Strip], LED_ColorNames_Long[Selection_Color], LED_ConfigNames[Selection_Config]);
 80010e4:	7bfa      	ldrb	r2, [r7, #15]
 80010e6:	4613      	mov	r3, r2
 80010e8:	00db      	lsls	r3, r3, #3
 80010ea:	4413      	add	r3, r2
 80010ec:	4a62      	ldr	r2, [pc, #392]	; (8001278 <LEDMenu_UpdateState+0x280>)
 80010ee:	1899      	adds	r1, r3, r2
 80010f0:	7bba      	ldrb	r2, [r7, #14]
 80010f2:	4613      	mov	r3, r2
 80010f4:	005b      	lsls	r3, r3, #1
 80010f6:	4413      	add	r3, r2
 80010f8:	005b      	lsls	r3, r3, #1
 80010fa:	4a60      	ldr	r2, [pc, #384]	; (800127c <LEDMenu_UpdateState+0x284>)
 80010fc:	1898      	adds	r0, r3, r2
 80010fe:	7b7a      	ldrb	r2, [r7, #13]
 8001100:	4613      	mov	r3, r2
 8001102:	009b      	lsls	r3, r3, #2
 8001104:	4413      	add	r3, r2
 8001106:	4a5e      	ldr	r2, [pc, #376]	; (8001280 <LEDMenu_UpdateState+0x288>)
 8001108:	4413      	add	r3, r2
 800110a:	9300      	str	r3, [sp, #0]
 800110c:	4603      	mov	r3, r0
 800110e:	460a      	mov	r2, r1
 8001110:	495c      	ldr	r1, [pc, #368]	; (8001284 <LEDMenu_UpdateState+0x28c>)
 8001112:	485d      	ldr	r0, [pc, #372]	; (8001288 <LEDMenu_UpdateState+0x290>)
 8001114:	f00f fb66 	bl	80107e4 <siprintf>
			USB_PrintDebug(USB_TxBuffer);
 8001118:	485b      	ldr	r0, [pc, #364]	; (8001288 <LEDMenu_UpdateState+0x290>)
 800111a:	f000 fdf3 	bl	8001d04 <USB_PrintDebug>

			// output changed config
			LCD_Clear(lcd);
 800111e:	6838      	ldr	r0, [r7, #0]
 8001120:	f002 fb0e 	bl	8003740 <LCD_Clear>
			LCD_DisplayStringLineCentered2(lcd, "New config:", 0);
 8001124:	2200      	movs	r2, #0
 8001126:	4959      	ldr	r1, [pc, #356]	; (800128c <LEDMenu_UpdateState+0x294>)
 8001128:	6838      	ldr	r0, [r7, #0]
 800112a:	f002 fa9a 	bl	8003662 <LCD_DisplayStringLineCentered2>

			sprintf(lcd->printBuffer, "%s %s", LED_StripNames_Long[Selection_Strip], LED_ColorNames_Long[Selection_Color]);
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	f103 0055 	add.w	r0, r3, #85	; 0x55
 8001134:	7bfa      	ldrb	r2, [r7, #15]
 8001136:	4613      	mov	r3, r2
 8001138:	00db      	lsls	r3, r3, #3
 800113a:	4413      	add	r3, r2
 800113c:	4a4e      	ldr	r2, [pc, #312]	; (8001278 <LEDMenu_UpdateState+0x280>)
 800113e:	1899      	adds	r1, r3, r2
 8001140:	7bba      	ldrb	r2, [r7, #14]
 8001142:	4613      	mov	r3, r2
 8001144:	005b      	lsls	r3, r3, #1
 8001146:	4413      	add	r3, r2
 8001148:	005b      	lsls	r3, r3, #1
 800114a:	4a4c      	ldr	r2, [pc, #304]	; (800127c <LEDMenu_UpdateState+0x284>)
 800114c:	4413      	add	r3, r2
 800114e:	460a      	mov	r2, r1
 8001150:	494f      	ldr	r1, [pc, #316]	; (8001290 <LEDMenu_UpdateState+0x298>)
 8001152:	f00f fb47 	bl	80107e4 <siprintf>
			LCD_DisplayStringLineCentered2(lcd, lcd->printBuffer, 2);
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	3355      	adds	r3, #85	; 0x55
 800115a:	2202      	movs	r2, #2
 800115c:	4619      	mov	r1, r3
 800115e:	6838      	ldr	r0, [r7, #0]
 8001160:	f002 fa7f 	bl	8003662 <LCD_DisplayStringLineCentered2>

			sprintf(lcd->printBuffer, "=> %s", LED_ConfigNames[Selection_Config]);
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	f103 0055 	add.w	r0, r3, #85	; 0x55
 800116a:	7b7a      	ldrb	r2, [r7, #13]
 800116c:	4613      	mov	r3, r2
 800116e:	009b      	lsls	r3, r3, #2
 8001170:	4413      	add	r3, r2
 8001172:	4a43      	ldr	r2, [pc, #268]	; (8001280 <LEDMenu_UpdateState+0x288>)
 8001174:	4413      	add	r3, r2
 8001176:	461a      	mov	r2, r3
 8001178:	4946      	ldr	r1, [pc, #280]	; (8001294 <LEDMenu_UpdateState+0x29c>)
 800117a:	f00f fb33 	bl	80107e4 <siprintf>
			LCD_DisplayStringLineCentered2(lcd, lcd->printBuffer, 3);
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	3355      	adds	r3, #85	; 0x55
 8001182:	2203      	movs	r2, #3
 8001184:	4619      	mov	r1, r3
 8001186:	6838      	ldr	r0, [r7, #0]
 8001188:	f002 fa6b 	bl	8003662 <LCD_DisplayStringLineCentered2>

			// let update message stay on lcd for 5 sec, then discard any button events that happened during waiting time
			HAL_Delay(3000);
 800118c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001190:	f002 fb8e 	bl	80038b0 <HAL_Delay>
			Buttons_ResetFlags();
 8001194:	f001 fb0a 	bl	80027ac <Buttons_ResetFlags>
			LCD_TimeoutCounter = 0;
 8001198:	4b3f      	ldr	r3, [pc, #252]	; (8001298 <LEDMenu_UpdateState+0x2a0>)
 800119a:	2200      	movs	r2, #0
 800119c:	601a      	str	r2, [r3, #0]

			LEDSelectionMenu_State = LEDMENU_COLOR_SELECTION;
 800119e:	4b32      	ldr	r3, [pc, #200]	; (8001268 <LEDMenu_UpdateState+0x270>)
 80011a0:	2202      	movs	r2, #2
 80011a2:	701a      	strb	r2, [r3, #0]
			break;
 80011a4:	e003      	b.n	80011ae <LEDMenu_UpdateState+0x1b6>
		}
		case LEDMENU_NUM:
		default:
		{
			// default to start
			LEDSelectionMenu_State = LEDMENU_START;
 80011a6:	4b30      	ldr	r3, [pc, #192]	; (8001268 <LEDMenu_UpdateState+0x270>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	701a      	strb	r2, [r3, #0]
			break;
 80011ac:	bf00      	nop
		}
		}

		LCD_Clear(lcd);
 80011ae:	6838      	ldr	r0, [r7, #0]
 80011b0:	f002 fac6 	bl	8003740 <LCD_Clear>

		break;
 80011b4:	e050      	b.n	8001258 <LEDMenu_UpdateState+0x260>
	}

	case LEDMENU_BTN_NEXTITEM: // select next possible item in current menu
	{
		switch (LEDSelectionMenu_State)
 80011b6:	4b2c      	ldr	r3, [pc, #176]	; (8001268 <LEDMenu_UpdateState+0x270>)
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	2b03      	cmp	r3, #3
 80011bc:	d834      	bhi.n	8001228 <LEDMenu_UpdateState+0x230>
 80011be:	a201      	add	r2, pc, #4	; (adr r2, 80011c4 <LEDMenu_UpdateState+0x1cc>)
 80011c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011c4:	08001229 	.word	0x08001229
 80011c8:	080011d5 	.word	0x080011d5
 80011cc:	080011f1 	.word	0x080011f1
 80011d0:	0800120d 	.word	0x0800120d

			break;

		case LEDMENU_STRIP_SELECTION:
		{
			LEDSelectionMenu_Memory[LEDMENU_STRIP_SELECTION]++;
 80011d4:	4b25      	ldr	r3, [pc, #148]	; (800126c <LEDMenu_UpdateState+0x274>)
 80011d6:	785b      	ldrb	r3, [r3, #1]
 80011d8:	3301      	adds	r3, #1
 80011da:	b2da      	uxtb	r2, r3
 80011dc:	4b23      	ldr	r3, [pc, #140]	; (800126c <LEDMenu_UpdateState+0x274>)
 80011de:	705a      	strb	r2, [r3, #1]

			if (LEDSelectionMenu_Memory[LEDMENU_STRIP_SELECTION] >= LED_NUM_STRIPS)
 80011e0:	4b22      	ldr	r3, [pc, #136]	; (800126c <LEDMenu_UpdateState+0x274>)
 80011e2:	785b      	ldrb	r3, [r3, #1]
 80011e4:	2b02      	cmp	r3, #2
 80011e6:	d921      	bls.n	800122c <LEDMenu_UpdateState+0x234>
				LEDSelectionMenu_Memory[LEDMENU_STRIP_SELECTION] = 0;
 80011e8:	4b20      	ldr	r3, [pc, #128]	; (800126c <LEDMenu_UpdateState+0x274>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	705a      	strb	r2, [r3, #1]

			break;
 80011ee:	e01d      	b.n	800122c <LEDMenu_UpdateState+0x234>
		}

		case LEDMENU_COLOR_SELECTION:
		{
			LEDSelectionMenu_Memory[LEDMENU_COLOR_SELECTION]++;
 80011f0:	4b1e      	ldr	r3, [pc, #120]	; (800126c <LEDMenu_UpdateState+0x274>)
 80011f2:	789b      	ldrb	r3, [r3, #2]
 80011f4:	3301      	adds	r3, #1
 80011f6:	b2da      	uxtb	r2, r3
 80011f8:	4b1c      	ldr	r3, [pc, #112]	; (800126c <LEDMenu_UpdateState+0x274>)
 80011fa:	709a      	strb	r2, [r3, #2]

			if (LEDSelectionMenu_Memory[LEDMENU_COLOR_SELECTION] >= LED_NUM_COLORS)
 80011fc:	4b1b      	ldr	r3, [pc, #108]	; (800126c <LEDMenu_UpdateState+0x274>)
 80011fe:	789b      	ldrb	r3, [r3, #2]
 8001200:	2b02      	cmp	r3, #2
 8001202:	d915      	bls.n	8001230 <LEDMenu_UpdateState+0x238>
				LEDSelectionMenu_Memory[LEDMENU_COLOR_SELECTION] = 0;
 8001204:	4b19      	ldr	r3, [pc, #100]	; (800126c <LEDMenu_UpdateState+0x274>)
 8001206:	2200      	movs	r2, #0
 8001208:	709a      	strb	r2, [r3, #2]

			break;
 800120a:	e011      	b.n	8001230 <LEDMenu_UpdateState+0x238>
		}

		case LEDMENU_CONFIG_SELECTION:
		{
			LEDSelectionMenu_Memory[LEDMENU_CONFIG_SELECTION]++;
 800120c:	4b17      	ldr	r3, [pc, #92]	; (800126c <LEDMenu_UpdateState+0x274>)
 800120e:	78db      	ldrb	r3, [r3, #3]
 8001210:	3301      	adds	r3, #1
 8001212:	b2da      	uxtb	r2, r3
 8001214:	4b15      	ldr	r3, [pc, #84]	; (800126c <LEDMenu_UpdateState+0x274>)
 8001216:	70da      	strb	r2, [r3, #3]

			if (LEDSelectionMenu_Memory[LEDMENU_CONFIG_SELECTION] >= LEDCONFIG_NUM)
 8001218:	4b14      	ldr	r3, [pc, #80]	; (800126c <LEDMenu_UpdateState+0x274>)
 800121a:	78db      	ldrb	r3, [r3, #3]
 800121c:	2b04      	cmp	r3, #4
 800121e:	d909      	bls.n	8001234 <LEDMenu_UpdateState+0x23c>
				LEDSelectionMenu_Memory[LEDMENU_CONFIG_SELECTION] = 0;
 8001220:	4b12      	ldr	r3, [pc, #72]	; (800126c <LEDMenu_UpdateState+0x274>)
 8001222:	2200      	movs	r2, #0
 8001224:	70da      	strb	r2, [r3, #3]
			break;
 8001226:	e005      	b.n	8001234 <LEDMenu_UpdateState+0x23c>
		}

		case LEDMENU_NUM:
		default:
			// nothing to do / select
			break;
 8001228:	bf00      	nop
 800122a:	e015      	b.n	8001258 <LEDMenu_UpdateState+0x260>
			break;
 800122c:	bf00      	nop
 800122e:	e013      	b.n	8001258 <LEDMenu_UpdateState+0x260>
			break;
 8001230:	bf00      	nop
 8001232:	e011      	b.n	8001258 <LEDMenu_UpdateState+0x260>
			break;
 8001234:	bf00      	nop
		}

		break;
 8001236:	e00f      	b.n	8001258 <LEDMenu_UpdateState+0x260>
	}

	case LEDMENU_BTN_NUM:
	default:
	{
		sprintf(USB_TxBuffer, "invalid btn action: %x\r\n", action);
 8001238:	79fb      	ldrb	r3, [r7, #7]
 800123a:	461a      	mov	r2, r3
 800123c:	4917      	ldr	r1, [pc, #92]	; (800129c <LEDMenu_UpdateState+0x2a4>)
 800123e:	4812      	ldr	r0, [pc, #72]	; (8001288 <LEDMenu_UpdateState+0x290>)
 8001240:	f00f fad0 	bl	80107e4 <siprintf>
		CDC_Transmit_FS((uint8_t*) USB_TxBuffer, strlen(USB_TxBuffer));
 8001244:	4810      	ldr	r0, [pc, #64]	; (8001288 <LEDMenu_UpdateState+0x290>)
 8001246:	f7ff f82b 	bl	80002a0 <strlen>
 800124a:	4603      	mov	r3, r0
 800124c:	b29b      	uxth	r3, r3
 800124e:	4619      	mov	r1, r3
 8001250:	480d      	ldr	r0, [pc, #52]	; (8001288 <LEDMenu_UpdateState+0x290>)
 8001252:	f00d f9ef 	bl	800e634 <CDC_Transmit_FS>
		break;
 8001256:	bf00      	nop
	}
	}

	LEDMenu_UpdateDisplay(lcd);
 8001258:	6838      	ldr	r0, [r7, #0]
 800125a:	f000 f821 	bl	80012a0 <LEDMenu_UpdateDisplay>
}
 800125e:	bf00      	nop
 8001260:	3710      	adds	r7, #16
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	200002fd 	.word	0x200002fd
 800126c:	20000324 	.word	0x20000324
 8001270:	200002f4 	.word	0x200002f4
 8001274:	200002f0 	.word	0x200002f0
 8001278:	08012ef8 	.word	0x08012ef8
 800127c:	08012f20 	.word	0x08012f20
 8001280:	08012f34 	.word	0x08012f34
 8001284:	08012cf0 	.word	0x08012cf0
 8001288:	20010438 	.word	0x20010438
 800128c:	08012d18 	.word	0x08012d18
 8001290:	08012d24 	.word	0x08012d24
 8001294:	08012d2c 	.word	0x08012d2c
 8001298:	2001063c 	.word	0x2001063c
 800129c:	08012d34 	.word	0x08012d34

080012a0 <LEDMenu_UpdateDisplay>:

void LEDMenu_UpdateDisplay(LCD2004_I2C *lcd)
{
 80012a0:	b590      	push	{r4, r7, lr}
 80012a2:	b085      	sub	sp, #20
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]

	switch (LEDSelectionMenu_State)
 80012a8:	4bb9      	ldr	r3, [pc, #740]	; (8001590 <LEDMenu_UpdateDisplay+0x2f0>)
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	2b03      	cmp	r3, #3
 80012ae:	f200 815d 	bhi.w	800156c <LEDMenu_UpdateDisplay+0x2cc>
 80012b2:	a201      	add	r2, pc, #4	; (adr r2, 80012b8 <LEDMenu_UpdateDisplay+0x18>)
 80012b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012b8:	080012c9 	.word	0x080012c9
 80012bc:	080012ef 	.word	0x080012ef
 80012c0:	08001379 	.word	0x08001379
 80012c4:	080014a1 	.word	0x080014a1
	{
	case LEDMENU_START:
		LCD_Clear(lcd);
 80012c8:	6878      	ldr	r0, [r7, #4]
 80012ca:	f002 fa39 	bl	8003740 <LCD_Clear>
		LCD_DisplayStringLineCentered2(lcd, "LED Config", 0);
 80012ce:	2200      	movs	r2, #0
 80012d0:	49b0      	ldr	r1, [pc, #704]	; (8001594 <LEDMenu_UpdateDisplay+0x2f4>)
 80012d2:	6878      	ldr	r0, [r7, #4]
 80012d4:	f002 f9c5 	bl	8003662 <LCD_DisplayStringLineCentered2>

		LCD_DisplayStringLineCentered2(lcd, "Press Select to", 2);
 80012d8:	2202      	movs	r2, #2
 80012da:	49af      	ldr	r1, [pc, #700]	; (8001598 <LEDMenu_UpdateDisplay+0x2f8>)
 80012dc:	6878      	ldr	r0, [r7, #4]
 80012de:	f002 f9c0 	bl	8003662 <LCD_DisplayStringLineCentered2>
		LCD_DisplayStringLineCentered2(lcd, "start configuration", 3);
 80012e2:	2203      	movs	r2, #3
 80012e4:	49ad      	ldr	r1, [pc, #692]	; (800159c <LEDMenu_UpdateDisplay+0x2fc>)
 80012e6:	6878      	ldr	r0, [r7, #4]
 80012e8:	f002 f9bb 	bl	8003662 <LCD_DisplayStringLineCentered2>
		break;
 80012ec:	e14c      	b.n	8001588 <LEDMenu_UpdateDisplay+0x2e8>

	case LEDMENU_STRIP_SELECTION:
		// print selection list

		LCD_DisplayStringLineCentered2(lcd, "Select Strip:", 0);
 80012ee:	2200      	movs	r2, #0
 80012f0:	49ab      	ldr	r1, [pc, #684]	; (80015a0 <LEDMenu_UpdateDisplay+0x300>)
 80012f2:	6878      	ldr	r0, [r7, #4]
 80012f4:	f002 f9b5 	bl	8003662 <LCD_DisplayStringLineCentered2>

		for (uint8_t menuNr = 0; menuNr < 3; menuNr++)
 80012f8:	2300      	movs	r3, #0
 80012fa:	73fb      	strb	r3, [r7, #15]
 80012fc:	e02f      	b.n	800135e <LEDMenu_UpdateDisplay+0xbe>
		{
			int8_t stripNamesIndex = (LEDSelectionMenu_Memory[LEDMENU_STRIP_SELECTION] + menuNr - 1 + LED_NUM_STRIPS) % LED_NUM_STRIPS;
 80012fe:	4ba9      	ldr	r3, [pc, #676]	; (80015a4 <LEDMenu_UpdateDisplay+0x304>)
 8001300:	785b      	ldrb	r3, [r3, #1]
 8001302:	461a      	mov	r2, r3
 8001304:	7bfb      	ldrb	r3, [r7, #15]
 8001306:	4413      	add	r3, r2
 8001308:	1c9a      	adds	r2, r3, #2
 800130a:	4ba7      	ldr	r3, [pc, #668]	; (80015a8 <LEDMenu_UpdateDisplay+0x308>)
 800130c:	fb83 3102 	smull	r3, r1, r3, r2
 8001310:	17d3      	asrs	r3, r2, #31
 8001312:	1ac9      	subs	r1, r1, r3
 8001314:	460b      	mov	r3, r1
 8001316:	005b      	lsls	r3, r3, #1
 8001318:	440b      	add	r3, r1
 800131a:	1ad1      	subs	r1, r2, r3
 800131c:	460b      	mov	r3, r1
 800131e:	727b      	strb	r3, [r7, #9]
			sprintf(lcd->printBuffer, "%s    ", LED_StripNames_Long[stripNamesIndex]);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	f103 0055 	add.w	r0, r3, #85	; 0x55
 8001326:	f997 2009 	ldrsb.w	r2, [r7, #9]
 800132a:	4613      	mov	r3, r2
 800132c:	00db      	lsls	r3, r3, #3
 800132e:	4413      	add	r3, r2
 8001330:	4a9e      	ldr	r2, [pc, #632]	; (80015ac <LEDMenu_UpdateDisplay+0x30c>)
 8001332:	4413      	add	r3, r2
 8001334:	461a      	mov	r2, r3
 8001336:	499e      	ldr	r1, [pc, #632]	; (80015b0 <LEDMenu_UpdateDisplay+0x310>)
 8001338:	f00f fa54 	bl	80107e4 <siprintf>
			LCD_SetCursor(lcd, menuNr + 1, 6);
 800133c:	7bfb      	ldrb	r3, [r7, #15]
 800133e:	3301      	adds	r3, #1
 8001340:	b2db      	uxtb	r3, r3
 8001342:	2206      	movs	r2, #6
 8001344:	4619      	mov	r1, r3
 8001346:	6878      	ldr	r0, [r7, #4]
 8001348:	f002 f9ab 	bl	80036a2 <LCD_SetCursor>
			LCD_DisplayString2(lcd, lcd->printBuffer);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	3355      	adds	r3, #85	; 0x55
 8001350:	4619      	mov	r1, r3
 8001352:	6878      	ldr	r0, [r7, #4]
 8001354:	f002 f937 	bl	80035c6 <LCD_DisplayString2>
		for (uint8_t menuNr = 0; menuNr < 3; menuNr++)
 8001358:	7bfb      	ldrb	r3, [r7, #15]
 800135a:	3301      	adds	r3, #1
 800135c:	73fb      	strb	r3, [r7, #15]
 800135e:	7bfb      	ldrb	r3, [r7, #15]
 8001360:	2b02      	cmp	r3, #2
 8001362:	d9cc      	bls.n	80012fe <LEDMenu_UpdateDisplay+0x5e>
		}

		LCD_SetCursor(lcd, 2, 2);
 8001364:	2202      	movs	r2, #2
 8001366:	2102      	movs	r1, #2
 8001368:	6878      	ldr	r0, [r7, #4]
 800136a:	f002 f99a 	bl	80036a2 <LCD_SetCursor>
		LCD_DisplayString2(lcd, "->");
 800136e:	4991      	ldr	r1, [pc, #580]	; (80015b4 <LEDMenu_UpdateDisplay+0x314>)
 8001370:	6878      	ldr	r0, [r7, #4]
 8001372:	f002 f928 	bl	80035c6 <LCD_DisplayString2>

		break;
 8001376:	e107      	b.n	8001588 <LEDMenu_UpdateDisplay+0x2e8>

	case LEDMENU_COLOR_SELECTION:
		sprintf(lcd->printBuffer, "[%s] Select Color:", LED_StripNames_Short[LEDSelectionMenu_Memory[LEDMENU_STRIP_SELECTION]]);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	f103 0055 	add.w	r0, r3, #85	; 0x55
 800137e:	4b89      	ldr	r3, [pc, #548]	; (80015a4 <LEDMenu_UpdateDisplay+0x304>)
 8001380:	785b      	ldrb	r3, [r3, #1]
 8001382:	009b      	lsls	r3, r3, #2
 8001384:	4a8c      	ldr	r2, [pc, #560]	; (80015b8 <LEDMenu_UpdateDisplay+0x318>)
 8001386:	4413      	add	r3, r2
 8001388:	461a      	mov	r2, r3
 800138a:	498c      	ldr	r1, [pc, #560]	; (80015bc <LEDMenu_UpdateDisplay+0x31c>)
 800138c:	f00f fa2a 	bl	80107e4 <siprintf>
		LCD_DisplayStringLineCentered2(lcd, lcd->printBuffer, 0);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	3355      	adds	r3, #85	; 0x55
 8001394:	2200      	movs	r2, #0
 8001396:	4619      	mov	r1, r3
 8001398:	6878      	ldr	r0, [r7, #4]
 800139a:	f002 f962 	bl	8003662 <LCD_DisplayStringLineCentered2>

		for (uint8_t menuNr = 0; menuNr < 3; menuNr++)
 800139e:	2300      	movs	r3, #0
 80013a0:	73bb      	strb	r3, [r7, #14]
 80013a2:	e062      	b.n	800146a <LEDMenu_UpdateDisplay+0x1ca>
		{
			int8_t colorNamesIndex = (LEDSelectionMenu_Memory[LEDMENU_COLOR_SELECTION] + menuNr - 1 + LED_NUM_COLORS) % LED_NUM_COLORS;
 80013a4:	4b7f      	ldr	r3, [pc, #508]	; (80015a4 <LEDMenu_UpdateDisplay+0x304>)
 80013a6:	789b      	ldrb	r3, [r3, #2]
 80013a8:	461a      	mov	r2, r3
 80013aa:	7bbb      	ldrb	r3, [r7, #14]
 80013ac:	4413      	add	r3, r2
 80013ae:	1c9a      	adds	r2, r3, #2
 80013b0:	4b7d      	ldr	r3, [pc, #500]	; (80015a8 <LEDMenu_UpdateDisplay+0x308>)
 80013b2:	fb83 3102 	smull	r3, r1, r3, r2
 80013b6:	17d3      	asrs	r3, r2, #31
 80013b8:	1ac9      	subs	r1, r1, r3
 80013ba:	460b      	mov	r3, r1
 80013bc:	005b      	lsls	r3, r3, #1
 80013be:	440b      	add	r3, r1
 80013c0:	1ad1      	subs	r1, r2, r3
 80013c2:	460b      	mov	r3, r1
 80013c4:	72fb      	strb	r3, [r7, #11]

			uint8_t stripIndex = LEDSelectionMenu_Memory[LEDMENU_STRIP_SELECTION];
 80013c6:	4b77      	ldr	r3, [pc, #476]	; (80015a4 <LEDMenu_UpdateDisplay+0x304>)
 80013c8:	785b      	ldrb	r3, [r3, #1]
 80013ca:	72bb      	strb	r3, [r7, #10]

			sprintf(lcd->printBuffer, "%s     ", LED_ColorNames_Long[colorNamesIndex]);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	f103 0055 	add.w	r0, r3, #85	; 0x55
 80013d2:	f997 200b 	ldrsb.w	r2, [r7, #11]
 80013d6:	4613      	mov	r3, r2
 80013d8:	005b      	lsls	r3, r3, #1
 80013da:	4413      	add	r3, r2
 80013dc:	005b      	lsls	r3, r3, #1
 80013de:	4a78      	ldr	r2, [pc, #480]	; (80015c0 <LEDMenu_UpdateDisplay+0x320>)
 80013e0:	4413      	add	r3, r2
 80013e2:	461a      	mov	r2, r3
 80013e4:	4977      	ldr	r1, [pc, #476]	; (80015c4 <LEDMenu_UpdateDisplay+0x324>)
 80013e6:	f00f f9fd 	bl	80107e4 <siprintf>

			LCD_SetCursor(lcd, menuNr + 1, 8);
 80013ea:	7bbb      	ldrb	r3, [r7, #14]
 80013ec:	3301      	adds	r3, #1
 80013ee:	b2db      	uxtb	r3, r3
 80013f0:	2208      	movs	r2, #8
 80013f2:	4619      	mov	r1, r3
 80013f4:	6878      	ldr	r0, [r7, #4]
 80013f6:	f002 f954 	bl	80036a2 <LCD_SetCursor>
			LCD_DisplayString2(lcd, lcd->printBuffer);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	3355      	adds	r3, #85	; 0x55
 80013fe:	4619      	mov	r1, r3
 8001400:	6878      	ldr	r0, [r7, #4]
 8001402:	f002 f8e0 	bl	80035c6 <LCD_DisplayString2>

			sprintf(lcd->printBuffer, "(%s)", LED_ConfigNames[LEDStrips_Config[stripIndex][colorNamesIndex]]);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	f103 0055 	add.w	r0, r3, #85	; 0x55
 800140c:	7aba      	ldrb	r2, [r7, #10]
 800140e:	f997 100b 	ldrsb.w	r1, [r7, #11]
 8001412:	4c6d      	ldr	r4, [pc, #436]	; (80015c8 <LEDMenu_UpdateDisplay+0x328>)
 8001414:	4613      	mov	r3, r2
 8001416:	005b      	lsls	r3, r3, #1
 8001418:	4413      	add	r3, r2
 800141a:	4423      	add	r3, r4
 800141c:	440b      	add	r3, r1
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	461a      	mov	r2, r3
 8001422:	4613      	mov	r3, r2
 8001424:	009b      	lsls	r3, r3, #2
 8001426:	4413      	add	r3, r2
 8001428:	4a68      	ldr	r2, [pc, #416]	; (80015cc <LEDMenu_UpdateDisplay+0x32c>)
 800142a:	4413      	add	r3, r2
 800142c:	461a      	mov	r2, r3
 800142e:	4968      	ldr	r1, [pc, #416]	; (80015d0 <LEDMenu_UpdateDisplay+0x330>)
 8001430:	f00f f9d8 	bl	80107e4 <siprintf>
			LCD_SetCursor(lcd, menuNr + 1, 20 - strlen(lcd->printBuffer));
 8001434:	7bbb      	ldrb	r3, [r7, #14]
 8001436:	3301      	adds	r3, #1
 8001438:	b2dc      	uxtb	r4, r3
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	3355      	adds	r3, #85	; 0x55
 800143e:	4618      	mov	r0, r3
 8001440:	f7fe ff2e 	bl	80002a0 <strlen>
 8001444:	4603      	mov	r3, r0
 8001446:	b2db      	uxtb	r3, r3
 8001448:	f1c3 0314 	rsb	r3, r3, #20
 800144c:	b2db      	uxtb	r3, r3
 800144e:	461a      	mov	r2, r3
 8001450:	4621      	mov	r1, r4
 8001452:	6878      	ldr	r0, [r7, #4]
 8001454:	f002 f925 	bl	80036a2 <LCD_SetCursor>
			LCD_DisplayString2(lcd, lcd->printBuffer);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	3355      	adds	r3, #85	; 0x55
 800145c:	4619      	mov	r1, r3
 800145e:	6878      	ldr	r0, [r7, #4]
 8001460:	f002 f8b1 	bl	80035c6 <LCD_DisplayString2>
		for (uint8_t menuNr = 0; menuNr < 3; menuNr++)
 8001464:	7bbb      	ldrb	r3, [r7, #14]
 8001466:	3301      	adds	r3, #1
 8001468:	73bb      	strb	r3, [r7, #14]
 800146a:	7bbb      	ldrb	r3, [r7, #14]
 800146c:	2b02      	cmp	r3, #2
 800146e:	d999      	bls.n	80013a4 <LEDMenu_UpdateDisplay+0x104>
		}

		sprintf(lcd->printBuffer, "%s->", LED_StripNames_Short[LEDSelectionMenu_Memory[LEDMENU_STRIP_SELECTION]]);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	f103 0055 	add.w	r0, r3, #85	; 0x55
 8001476:	4b4b      	ldr	r3, [pc, #300]	; (80015a4 <LEDMenu_UpdateDisplay+0x304>)
 8001478:	785b      	ldrb	r3, [r3, #1]
 800147a:	009b      	lsls	r3, r3, #2
 800147c:	4a4e      	ldr	r2, [pc, #312]	; (80015b8 <LEDMenu_UpdateDisplay+0x318>)
 800147e:	4413      	add	r3, r2
 8001480:	461a      	mov	r2, r3
 8001482:	4954      	ldr	r1, [pc, #336]	; (80015d4 <LEDMenu_UpdateDisplay+0x334>)
 8001484:	f00f f9ae 	bl	80107e4 <siprintf>
		LCD_SetCursor(lcd, 2, 0);
 8001488:	2200      	movs	r2, #0
 800148a:	2102      	movs	r1, #2
 800148c:	6878      	ldr	r0, [r7, #4]
 800148e:	f002 f908 	bl	80036a2 <LCD_SetCursor>
		LCD_DisplayString2(lcd, lcd->printBuffer);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	3355      	adds	r3, #85	; 0x55
 8001496:	4619      	mov	r1, r3
 8001498:	6878      	ldr	r0, [r7, #4]
 800149a:	f002 f894 	bl	80035c6 <LCD_DisplayString2>

		break;
 800149e:	e073      	b.n	8001588 <LEDMenu_UpdateDisplay+0x2e8>

	case LEDMENU_CONFIG_SELECTION:
		sprintf(lcd->printBuffer, "[%s] Select Input:", LED_StripNames_Short[LEDSelectionMenu_Memory[LEDMENU_STRIP_SELECTION]]);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	f103 0055 	add.w	r0, r3, #85	; 0x55
 80014a6:	4b3f      	ldr	r3, [pc, #252]	; (80015a4 <LEDMenu_UpdateDisplay+0x304>)
 80014a8:	785b      	ldrb	r3, [r3, #1]
 80014aa:	009b      	lsls	r3, r3, #2
 80014ac:	4a42      	ldr	r2, [pc, #264]	; (80015b8 <LEDMenu_UpdateDisplay+0x318>)
 80014ae:	4413      	add	r3, r2
 80014b0:	461a      	mov	r2, r3
 80014b2:	4949      	ldr	r1, [pc, #292]	; (80015d8 <LEDMenu_UpdateDisplay+0x338>)
 80014b4:	f00f f996 	bl	80107e4 <siprintf>
		LCD_DisplayStringLineCentered2(lcd, lcd->printBuffer, 0);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	3355      	adds	r3, #85	; 0x55
 80014bc:	2200      	movs	r2, #0
 80014be:	4619      	mov	r1, r3
 80014c0:	6878      	ldr	r0, [r7, #4]
 80014c2:	f002 f8ce 	bl	8003662 <LCD_DisplayStringLineCentered2>

		for (uint8_t menuNr = 0; menuNr < 3; menuNr++)
 80014c6:	2300      	movs	r3, #0
 80014c8:	737b      	strb	r3, [r7, #13]
 80014ca:	e030      	b.n	800152e <LEDMenu_UpdateDisplay+0x28e>
		{
			int8_t configNamesIndex = (LEDSelectionMenu_Memory[LEDMENU_CONFIG_SELECTION] + menuNr - 1 + LEDCONFIG_NUM) % LEDCONFIG_NUM;
 80014cc:	4b35      	ldr	r3, [pc, #212]	; (80015a4 <LEDMenu_UpdateDisplay+0x304>)
 80014ce:	78db      	ldrb	r3, [r3, #3]
 80014d0:	461a      	mov	r2, r3
 80014d2:	7b7b      	ldrb	r3, [r7, #13]
 80014d4:	4413      	add	r3, r2
 80014d6:	1d1a      	adds	r2, r3, #4
 80014d8:	4b40      	ldr	r3, [pc, #256]	; (80015dc <LEDMenu_UpdateDisplay+0x33c>)
 80014da:	fb83 1302 	smull	r1, r3, r3, r2
 80014de:	1059      	asrs	r1, r3, #1
 80014e0:	17d3      	asrs	r3, r2, #31
 80014e2:	1ac9      	subs	r1, r1, r3
 80014e4:	460b      	mov	r3, r1
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	440b      	add	r3, r1
 80014ea:	1ad1      	subs	r1, r2, r3
 80014ec:	460b      	mov	r3, r1
 80014ee:	733b      	strb	r3, [r7, #12]
			sprintf(lcd->printBuffer, "%s   ", LED_ConfigNames[configNamesIndex]);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	f103 0055 	add.w	r0, r3, #85	; 0x55
 80014f6:	f997 200c 	ldrsb.w	r2, [r7, #12]
 80014fa:	4613      	mov	r3, r2
 80014fc:	009b      	lsls	r3, r3, #2
 80014fe:	4413      	add	r3, r2
 8001500:	4a32      	ldr	r2, [pc, #200]	; (80015cc <LEDMenu_UpdateDisplay+0x32c>)
 8001502:	4413      	add	r3, r2
 8001504:	461a      	mov	r2, r3
 8001506:	4936      	ldr	r1, [pc, #216]	; (80015e0 <LEDMenu_UpdateDisplay+0x340>)
 8001508:	f00f f96c 	bl	80107e4 <siprintf>
			LCD_SetCursor(lcd, menuNr + 1, 8);
 800150c:	7b7b      	ldrb	r3, [r7, #13]
 800150e:	3301      	adds	r3, #1
 8001510:	b2db      	uxtb	r3, r3
 8001512:	2208      	movs	r2, #8
 8001514:	4619      	mov	r1, r3
 8001516:	6878      	ldr	r0, [r7, #4]
 8001518:	f002 f8c3 	bl	80036a2 <LCD_SetCursor>
			LCD_DisplayString2(lcd, lcd->printBuffer);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	3355      	adds	r3, #85	; 0x55
 8001520:	4619      	mov	r1, r3
 8001522:	6878      	ldr	r0, [r7, #4]
 8001524:	f002 f84f 	bl	80035c6 <LCD_DisplayString2>
		for (uint8_t menuNr = 0; menuNr < 3; menuNr++)
 8001528:	7b7b      	ldrb	r3, [r7, #13]
 800152a:	3301      	adds	r3, #1
 800152c:	737b      	strb	r3, [r7, #13]
 800152e:	7b7b      	ldrb	r3, [r7, #13]
 8001530:	2b02      	cmp	r3, #2
 8001532:	d9cb      	bls.n	80014cc <LEDMenu_UpdateDisplay+0x22c>
		}

		sprintf(lcd->printBuffer, "%s->", LED_ColorNames_Long[LEDSelectionMenu_Memory[LEDMENU_COLOR_SELECTION]]);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	f103 0055 	add.w	r0, r3, #85	; 0x55
 800153a:	4b1a      	ldr	r3, [pc, #104]	; (80015a4 <LEDMenu_UpdateDisplay+0x304>)
 800153c:	789b      	ldrb	r3, [r3, #2]
 800153e:	461a      	mov	r2, r3
 8001540:	4613      	mov	r3, r2
 8001542:	005b      	lsls	r3, r3, #1
 8001544:	4413      	add	r3, r2
 8001546:	005b      	lsls	r3, r3, #1
 8001548:	4a1d      	ldr	r2, [pc, #116]	; (80015c0 <LEDMenu_UpdateDisplay+0x320>)
 800154a:	4413      	add	r3, r2
 800154c:	461a      	mov	r2, r3
 800154e:	4921      	ldr	r1, [pc, #132]	; (80015d4 <LEDMenu_UpdateDisplay+0x334>)
 8001550:	f00f f948 	bl	80107e4 <siprintf>
		LCD_SetCursor(lcd, 2, 0);
 8001554:	2200      	movs	r2, #0
 8001556:	2102      	movs	r1, #2
 8001558:	6878      	ldr	r0, [r7, #4]
 800155a:	f002 f8a2 	bl	80036a2 <LCD_SetCursor>
		LCD_DisplayString2(lcd, lcd->printBuffer);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	3355      	adds	r3, #85	; 0x55
 8001562:	4619      	mov	r1, r3
 8001564:	6878      	ldr	r0, [r7, #4]
 8001566:	f002 f82e 	bl	80035c6 <LCD_DisplayString2>

		break;
 800156a:	e00d      	b.n	8001588 <LEDMenu_UpdateDisplay+0x2e8>

	case LEDMENU_NUM:
	default:
		// invalid menu title
		LCD_Clear(lcd);
 800156c:	6878      	ldr	r0, [r7, #4]
 800156e:	f002 f8e7 	bl	8003740 <LCD_Clear>

		LCD_DisplayStringLineCentered2(lcd, "invalid state!", 1);
 8001572:	2201      	movs	r2, #1
 8001574:	491b      	ldr	r1, [pc, #108]	; (80015e4 <LEDMenu_UpdateDisplay+0x344>)
 8001576:	6878      	ldr	r0, [r7, #4]
 8001578:	f002 f873 	bl	8003662 <LCD_DisplayStringLineCentered2>
		LCD_DisplayStringLineCentered2(lcd, "press Select", 2);
 800157c:	2202      	movs	r2, #2
 800157e:	491a      	ldr	r1, [pc, #104]	; (80015e8 <LEDMenu_UpdateDisplay+0x348>)
 8001580:	6878      	ldr	r0, [r7, #4]
 8001582:	f002 f86e 	bl	8003662 <LCD_DisplayStringLineCentered2>

		break;
 8001586:	bf00      	nop
	}
}
 8001588:	bf00      	nop
 800158a:	3714      	adds	r7, #20
 800158c:	46bd      	mov	sp, r7
 800158e:	bd90      	pop	{r4, r7, pc}
 8001590:	200002fd 	.word	0x200002fd
 8001594:	08012d50 	.word	0x08012d50
 8001598:	08012d5c 	.word	0x08012d5c
 800159c:	08012d6c 	.word	0x08012d6c
 80015a0:	08012d80 	.word	0x08012d80
 80015a4:	20000324 	.word	0x20000324
 80015a8:	55555556 	.word	0x55555556
 80015ac:	08012ef8 	.word	0x08012ef8
 80015b0:	08012d90 	.word	0x08012d90
 80015b4:	08012d98 	.word	0x08012d98
 80015b8:	08012f14 	.word	0x08012f14
 80015bc:	08012d9c 	.word	0x08012d9c
 80015c0:	08012f20 	.word	0x08012f20
 80015c4:	08012db0 	.word	0x08012db0
 80015c8:	200002f4 	.word	0x200002f4
 80015cc:	08012f34 	.word	0x08012f34
 80015d0:	08012db8 	.word	0x08012db8
 80015d4:	08012dc0 	.word	0x08012dc0
 80015d8:	08012dc8 	.word	0x08012dc8
 80015dc:	66666667 	.word	0x66666667
 80015e0:	08012ddc 	.word	0x08012ddc
 80015e4:	08012de4 	.word	0x08012de4
 80015e8:	08012df4 	.word	0x08012df4

080015ec <LEDStrips_Update_StripColorCounter>:

/*
 * Output functions
 */
static inline void LEDStrips_Update_StripColorCounter(uint8_t strip, uint8_t color, uint32_t newVal)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	4603      	mov	r3, r0
 80015f4:	603a      	str	r2, [r7, #0]
 80015f6:	71fb      	strb	r3, [r7, #7]
 80015f8:	460b      	mov	r3, r1
 80015fa:	71bb      	strb	r3, [r7, #6]
	*(LEDStrips_Config_Counter[strip][color]) = newVal;
 80015fc:	79fa      	ldrb	r2, [r7, #7]
 80015fe:	79b9      	ldrb	r1, [r7, #6]
 8001600:	4807      	ldr	r0, [pc, #28]	; (8001620 <LEDStrips_Update_StripColorCounter+0x34>)
 8001602:	4613      	mov	r3, r2
 8001604:	005b      	lsls	r3, r3, #1
 8001606:	4413      	add	r3, r2
 8001608:	440b      	add	r3, r1
 800160a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800160e:	683a      	ldr	r2, [r7, #0]
 8001610:	601a      	str	r2, [r3, #0]
}
 8001612:	bf00      	nop
 8001614:	370c      	adds	r7, #12
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr
 800161e:	bf00      	nop
 8001620:	20000300 	.word	0x20000300

08001624 <LEDStrips_Init>:

void LEDStrips_Init()
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
	 *
	 * R: TIM2 CH3
	 * G: TIM3 CH4
	 * B: TIM3 CH3
	 */
	LEDStrips_Config_Counter[0][0] = &TIM2->CCR3;
 8001628:	4b25      	ldr	r3, [pc, #148]	; (80016c0 <LEDStrips_Init+0x9c>)
 800162a:	4a26      	ldr	r2, [pc, #152]	; (80016c4 <LEDStrips_Init+0xa0>)
 800162c:	601a      	str	r2, [r3, #0]
	LEDStrips_Config_Counter[0][1] = &TIM3->CCR4;
 800162e:	4b24      	ldr	r3, [pc, #144]	; (80016c0 <LEDStrips_Init+0x9c>)
 8001630:	4a25      	ldr	r2, [pc, #148]	; (80016c8 <LEDStrips_Init+0xa4>)
 8001632:	605a      	str	r2, [r3, #4]
	LEDStrips_Config_Counter[0][2] = &TIM3->CCR3;
 8001634:	4b22      	ldr	r3, [pc, #136]	; (80016c0 <LEDStrips_Init+0x9c>)
 8001636:	4a25      	ldr	r2, [pc, #148]	; (80016cc <LEDStrips_Init+0xa8>)
 8001638:	609a      	str	r2, [r3, #8]

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 800163a:	2108      	movs	r1, #8
 800163c:	4824      	ldr	r0, [pc, #144]	; (80016d0 <LEDStrips_Init+0xac>)
 800163e:	f007 fbf9 	bl	8008e34 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8001642:	210c      	movs	r1, #12
 8001644:	4823      	ldr	r0, [pc, #140]	; (80016d4 <LEDStrips_Init+0xb0>)
 8001646:	f007 fbf5 	bl	8008e34 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 800164a:	2108      	movs	r1, #8
 800164c:	4821      	ldr	r0, [pc, #132]	; (80016d4 <LEDStrips_Init+0xb0>)
 800164e:	f007 fbf1 	bl	8008e34 <HAL_TIM_PWM_Start>
	 *
	 * R: TIM2 CH1
	 * G: TIM2 CH2
	 * B: TIM3 CH1
	 */
	LEDStrips_Config_Counter[1][0] = &TIM2->CCR1;
 8001652:	4b1b      	ldr	r3, [pc, #108]	; (80016c0 <LEDStrips_Init+0x9c>)
 8001654:	4a20      	ldr	r2, [pc, #128]	; (80016d8 <LEDStrips_Init+0xb4>)
 8001656:	60da      	str	r2, [r3, #12]
	LEDStrips_Config_Counter[1][1] = &TIM2->CCR2;
 8001658:	4b19      	ldr	r3, [pc, #100]	; (80016c0 <LEDStrips_Init+0x9c>)
 800165a:	4a20      	ldr	r2, [pc, #128]	; (80016dc <LEDStrips_Init+0xb8>)
 800165c:	611a      	str	r2, [r3, #16]
	LEDStrips_Config_Counter[1][2] = &TIM3->CCR1;
 800165e:	4b18      	ldr	r3, [pc, #96]	; (80016c0 <LEDStrips_Init+0x9c>)
 8001660:	4a1f      	ldr	r2, [pc, #124]	; (80016e0 <LEDStrips_Init+0xbc>)
 8001662:	615a      	str	r2, [r3, #20]

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001664:	2100      	movs	r1, #0
 8001666:	481a      	ldr	r0, [pc, #104]	; (80016d0 <LEDStrips_Init+0xac>)
 8001668:	f007 fbe4 	bl	8008e34 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800166c:	2104      	movs	r1, #4
 800166e:	4818      	ldr	r0, [pc, #96]	; (80016d0 <LEDStrips_Init+0xac>)
 8001670:	f007 fbe0 	bl	8008e34 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001674:	2100      	movs	r1, #0
 8001676:	4817      	ldr	r0, [pc, #92]	; (80016d4 <LEDStrips_Init+0xb0>)
 8001678:	f007 fbdc 	bl	8008e34 <HAL_TIM_PWM_Start>
	 *
	 * R: TIM3 CH2
	 * G: TIM4 CH1
	 * B: TIM4 CH2
	 */
	LEDStrips_Config_Counter[2][0] = &TIM3->CCR2;
 800167c:	4b10      	ldr	r3, [pc, #64]	; (80016c0 <LEDStrips_Init+0x9c>)
 800167e:	4a19      	ldr	r2, [pc, #100]	; (80016e4 <LEDStrips_Init+0xc0>)
 8001680:	619a      	str	r2, [r3, #24]
	LEDStrips_Config_Counter[2][1] = &TIM4->CCR1;
 8001682:	4b0f      	ldr	r3, [pc, #60]	; (80016c0 <LEDStrips_Init+0x9c>)
 8001684:	4a18      	ldr	r2, [pc, #96]	; (80016e8 <LEDStrips_Init+0xc4>)
 8001686:	61da      	str	r2, [r3, #28]
	LEDStrips_Config_Counter[2][2] = &TIM4->CCR2;
 8001688:	4b0d      	ldr	r3, [pc, #52]	; (80016c0 <LEDStrips_Init+0x9c>)
 800168a:	4a18      	ldr	r2, [pc, #96]	; (80016ec <LEDStrips_Init+0xc8>)
 800168c:	621a      	str	r2, [r3, #32]

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800168e:	2104      	movs	r1, #4
 8001690:	4810      	ldr	r0, [pc, #64]	; (80016d4 <LEDStrips_Init+0xb0>)
 8001692:	f007 fbcf 	bl	8008e34 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001696:	2100      	movs	r1, #0
 8001698:	4815      	ldr	r0, [pc, #84]	; (80016f0 <LEDStrips_Init+0xcc>)
 800169a:	f007 fbcb 	bl	8008e34 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 800169e:	2104      	movs	r1, #4
 80016a0:	4813      	ldr	r0, [pc, #76]	; (80016f0 <LEDStrips_Init+0xcc>)
 80016a2:	f007 fbc7 	bl	8008e34 <HAL_TIM_PWM_Start>

	LEDStrips_Config[0][0] = LEDCONFIG_PWM1;
 80016a6:	4b13      	ldr	r3, [pc, #76]	; (80016f4 <LEDStrips_Init+0xd0>)
 80016a8:	2202      	movs	r2, #2
 80016aa:	701a      	strb	r2, [r3, #0]
	LEDStrips_Config[0][1] = LEDCONFIG_PWM2;
 80016ac:	4b11      	ldr	r3, [pc, #68]	; (80016f4 <LEDStrips_Init+0xd0>)
 80016ae:	2203      	movs	r2, #3
 80016b0:	705a      	strb	r2, [r3, #1]
	LEDStrips_Config[0][2] = LEDCONFIG_PWM3;
 80016b2:	4b10      	ldr	r3, [pc, #64]	; (80016f4 <LEDStrips_Init+0xd0>)
 80016b4:	2204      	movs	r2, #4
 80016b6:	709a      	strb	r2, [r3, #2]

	LEDStrips_Update();
 80016b8:	f000 f81e 	bl	80016f8 <LEDStrips_Update>
}
 80016bc:	bf00      	nop
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	20000300 	.word	0x20000300
 80016c4:	4000003c 	.word	0x4000003c
 80016c8:	40000440 	.word	0x40000440
 80016cc:	4000043c 	.word	0x4000043c
 80016d0:	20010648 	.word	0x20010648
 80016d4:	20010690 	.word	0x20010690
 80016d8:	40000034 	.word	0x40000034
 80016dc:	40000038 	.word	0x40000038
 80016e0:	40000434 	.word	0x40000434
 80016e4:	40000438 	.word	0x40000438
 80016e8:	40000834 	.word	0x40000834
 80016ec:	40000838 	.word	0x40000838
 80016f0:	200106d8 	.word	0x200106d8
 80016f4:	200002f4 	.word	0x200002f4

080016f8 <LEDStrips_Update>:

void LEDStrips_Update()
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
	for (uint8_t stripIndex = 0; stripIndex < LED_NUM_STRIPS; stripIndex++)
 80016fe:	2300      	movs	r3, #0
 8001700:	71fb      	strb	r3, [r7, #7]
 8001702:	e04a      	b.n	800179a <LEDStrips_Update+0xa2>
	{
		for (uint8_t colorIndex = 0; colorIndex < LED_NUM_COLORS; colorIndex++)
 8001704:	2300      	movs	r3, #0
 8001706:	71bb      	strb	r3, [r7, #6]
 8001708:	e041      	b.n	800178e <LEDStrips_Update+0x96>
		{
			switch (LEDStrips_Config[stripIndex][colorIndex])
 800170a:	79fa      	ldrb	r2, [r7, #7]
 800170c:	79b9      	ldrb	r1, [r7, #6]
 800170e:	4827      	ldr	r0, [pc, #156]	; (80017ac <LEDStrips_Update+0xb4>)
 8001710:	4613      	mov	r3, r2
 8001712:	005b      	lsls	r3, r3, #1
 8001714:	4413      	add	r3, r2
 8001716:	4403      	add	r3, r0
 8001718:	440b      	add	r3, r1
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	2b04      	cmp	r3, #4
 800171e:	d832      	bhi.n	8001786 <LEDStrips_Update+0x8e>
 8001720:	a201      	add	r2, pc, #4	; (adr r2, 8001728 <LEDStrips_Update+0x30>)
 8001722:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001726:	bf00      	nop
 8001728:	0800173d 	.word	0x0800173d
 800172c:	0800174b 	.word	0x0800174b
 8001730:	0800175b 	.word	0x0800175b
 8001734:	08001769 	.word	0x08001769
 8001738:	08001777 	.word	0x08001777
			{
			case LEDCONFIG_OFF:
				LEDStrips_Update_StripColorCounter(stripIndex, colorIndex, 0);
 800173c:	79b9      	ldrb	r1, [r7, #6]
 800173e:	79fb      	ldrb	r3, [r7, #7]
 8001740:	2200      	movs	r2, #0
 8001742:	4618      	mov	r0, r3
 8001744:	f7ff ff52 	bl	80015ec <LEDStrips_Update_StripColorCounter>
				break;
 8001748:	e01e      	b.n	8001788 <LEDStrips_Update+0x90>
			case LEDCONFIG_ON:
				LEDStrips_Update_StripColorCounter(stripIndex, colorIndex, LEDSTRIPS_MAX_PWMDC);
 800174a:	79b9      	ldrb	r1, [r7, #6]
 800174c:	79fb      	ldrb	r3, [r7, #7]
 800174e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001752:	4618      	mov	r0, r3
 8001754:	f7ff ff4a 	bl	80015ec <LEDStrips_Update_StripColorCounter>
				break;
 8001758:	e016      	b.n	8001788 <LEDStrips_Update+0x90>
			case LEDCONFIG_PWM1:
				LEDStrips_Update_StripColorCounter(stripIndex, colorIndex, LEDSTRIPS_LOW_PWMDC);
 800175a:	79b9      	ldrb	r1, [r7, #6]
 800175c:	79fb      	ldrb	r3, [r7, #7]
 800175e:	220a      	movs	r2, #10
 8001760:	4618      	mov	r0, r3
 8001762:	f7ff ff43 	bl	80015ec <LEDStrips_Update_StripColorCounter>
				break;
 8001766:	e00f      	b.n	8001788 <LEDStrips_Update+0x90>
			case LEDCONFIG_PWM2:
				LEDStrips_Update_StripColorCounter(stripIndex, colorIndex, LEDSTRIPS_MID_PWMDC);
 8001768:	79b9      	ldrb	r1, [r7, #6]
 800176a:	79fb      	ldrb	r3, [r7, #7]
 800176c:	22c8      	movs	r2, #200	; 0xc8
 800176e:	4618      	mov	r0, r3
 8001770:	f7ff ff3c 	bl	80015ec <LEDStrips_Update_StripColorCounter>
				break;
 8001774:	e008      	b.n	8001788 <LEDStrips_Update+0x90>
			case LEDCONFIG_PWM3:
				LEDStrips_Update_StripColorCounter(stripIndex, colorIndex, LEDSTRIPS_HIGH_PWMDC);
 8001776:	79b9      	ldrb	r1, [r7, #6]
 8001778:	79fb      	ldrb	r3, [r7, #7]
 800177a:	f240 22ee 	movw	r2, #750	; 0x2ee
 800177e:	4618      	mov	r0, r3
 8001780:	f7ff ff34 	bl	80015ec <LEDStrips_Update_StripColorCounter>
				break;
 8001784:	e000      	b.n	8001788 <LEDStrips_Update+0x90>
			case LEDCONFIG_NUM:
			default:
				break;
 8001786:	bf00      	nop
		for (uint8_t colorIndex = 0; colorIndex < LED_NUM_COLORS; colorIndex++)
 8001788:	79bb      	ldrb	r3, [r7, #6]
 800178a:	3301      	adds	r3, #1
 800178c:	71bb      	strb	r3, [r7, #6]
 800178e:	79bb      	ldrb	r3, [r7, #6]
 8001790:	2b02      	cmp	r3, #2
 8001792:	d9ba      	bls.n	800170a <LEDStrips_Update+0x12>
	for (uint8_t stripIndex = 0; stripIndex < LED_NUM_STRIPS; stripIndex++)
 8001794:	79fb      	ldrb	r3, [r7, #7]
 8001796:	3301      	adds	r3, #1
 8001798:	71fb      	strb	r3, [r7, #7]
 800179a:	79fb      	ldrb	r3, [r7, #7]
 800179c:	2b02      	cmp	r3, #2
 800179e:	d9b1      	bls.n	8001704 <LEDStrips_Update+0xc>
			}
		}
	}
}
 80017a0:	bf00      	nop
 80017a2:	bf00      	nop
 80017a4:	3708      	adds	r7, #8
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	200002f4 	.word	0x200002f4

080017b0 <LEDStrips_UpdateFFT>:

void LEDStrips_UpdateFFT(uint16_t low, uint16_t mid, uint16_t high)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b084      	sub	sp, #16
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	4603      	mov	r3, r0
 80017b8:	80fb      	strh	r3, [r7, #6]
 80017ba:	460b      	mov	r3, r1
 80017bc:	80bb      	strh	r3, [r7, #4]
 80017be:	4613      	mov	r3, r2
 80017c0:	807b      	strh	r3, [r7, #2]
	for (uint8_t stripIndex = 0; stripIndex < LED_NUM_STRIPS; stripIndex++)
 80017c2:	2300      	movs	r3, #0
 80017c4:	73fb      	strb	r3, [r7, #15]
 80017c6:	e049      	b.n	800185c <LEDStrips_UpdateFFT+0xac>
	{
		for (uint8_t colorIndex = 0; colorIndex < LED_NUM_COLORS; colorIndex++)
 80017c8:	2300      	movs	r3, #0
 80017ca:	73bb      	strb	r3, [r7, #14]
 80017cc:	e040      	b.n	8001850 <LEDStrips_UpdateFFT+0xa0>
		{
			switch (LEDStrips_Config[stripIndex][colorIndex])
 80017ce:	7bfa      	ldrb	r2, [r7, #15]
 80017d0:	7bb9      	ldrb	r1, [r7, #14]
 80017d2:	4826      	ldr	r0, [pc, #152]	; (800186c <LEDStrips_UpdateFFT+0xbc>)
 80017d4:	4613      	mov	r3, r2
 80017d6:	005b      	lsls	r3, r3, #1
 80017d8:	4413      	add	r3, r2
 80017da:	4403      	add	r3, r0
 80017dc:	440b      	add	r3, r1
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	2b04      	cmp	r3, #4
 80017e2:	d831      	bhi.n	8001848 <LEDStrips_UpdateFFT+0x98>
 80017e4:	a201      	add	r2, pc, #4	; (adr r2, 80017ec <LEDStrips_UpdateFFT+0x3c>)
 80017e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017ea:	bf00      	nop
 80017ec:	08001801 	.word	0x08001801
 80017f0:	0800180f 	.word	0x0800180f
 80017f4:	0800181f 	.word	0x0800181f
 80017f8:	0800182d 	.word	0x0800182d
 80017fc:	0800183b 	.word	0x0800183b
			{
			case LEDCONFIG_OFF:
				LEDStrips_Update_StripColorCounter(stripIndex, colorIndex, 0);
 8001800:	7bb9      	ldrb	r1, [r7, #14]
 8001802:	7bfb      	ldrb	r3, [r7, #15]
 8001804:	2200      	movs	r2, #0
 8001806:	4618      	mov	r0, r3
 8001808:	f7ff fef0 	bl	80015ec <LEDStrips_Update_StripColorCounter>
				break;
 800180c:	e01d      	b.n	800184a <LEDStrips_UpdateFFT+0x9a>
			case LEDCONFIG_ON:
				LEDStrips_Update_StripColorCounter(stripIndex, colorIndex, LEDSTRIPS_MAX_PWMDC);
 800180e:	7bb9      	ldrb	r1, [r7, #14]
 8001810:	7bfb      	ldrb	r3, [r7, #15]
 8001812:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001816:	4618      	mov	r0, r3
 8001818:	f7ff fee8 	bl	80015ec <LEDStrips_Update_StripColorCounter>
				break;
 800181c:	e015      	b.n	800184a <LEDStrips_UpdateFFT+0x9a>
			case LEDCONFIG_PWM1:
				LEDStrips_Update_StripColorCounter(stripIndex, colorIndex, low);
 800181e:	88fa      	ldrh	r2, [r7, #6]
 8001820:	7bb9      	ldrb	r1, [r7, #14]
 8001822:	7bfb      	ldrb	r3, [r7, #15]
 8001824:	4618      	mov	r0, r3
 8001826:	f7ff fee1 	bl	80015ec <LEDStrips_Update_StripColorCounter>
				break;
 800182a:	e00e      	b.n	800184a <LEDStrips_UpdateFFT+0x9a>
			case LEDCONFIG_PWM2:
				LEDStrips_Update_StripColorCounter(stripIndex, colorIndex, mid);
 800182c:	88ba      	ldrh	r2, [r7, #4]
 800182e:	7bb9      	ldrb	r1, [r7, #14]
 8001830:	7bfb      	ldrb	r3, [r7, #15]
 8001832:	4618      	mov	r0, r3
 8001834:	f7ff feda 	bl	80015ec <LEDStrips_Update_StripColorCounter>
				break;
 8001838:	e007      	b.n	800184a <LEDStrips_UpdateFFT+0x9a>
			case LEDCONFIG_PWM3:
				LEDStrips_Update_StripColorCounter(stripIndex, colorIndex, high);
 800183a:	887a      	ldrh	r2, [r7, #2]
 800183c:	7bb9      	ldrb	r1, [r7, #14]
 800183e:	7bfb      	ldrb	r3, [r7, #15]
 8001840:	4618      	mov	r0, r3
 8001842:	f7ff fed3 	bl	80015ec <LEDStrips_Update_StripColorCounter>
				break;
 8001846:	e000      	b.n	800184a <LEDStrips_UpdateFFT+0x9a>
			case LEDCONFIG_NUM:
			default:
				break;
 8001848:	bf00      	nop
		for (uint8_t colorIndex = 0; colorIndex < LED_NUM_COLORS; colorIndex++)
 800184a:	7bbb      	ldrb	r3, [r7, #14]
 800184c:	3301      	adds	r3, #1
 800184e:	73bb      	strb	r3, [r7, #14]
 8001850:	7bbb      	ldrb	r3, [r7, #14]
 8001852:	2b02      	cmp	r3, #2
 8001854:	d9bb      	bls.n	80017ce <LEDStrips_UpdateFFT+0x1e>
	for (uint8_t stripIndex = 0; stripIndex < LED_NUM_STRIPS; stripIndex++)
 8001856:	7bfb      	ldrb	r3, [r7, #15]
 8001858:	3301      	adds	r3, #1
 800185a:	73fb      	strb	r3, [r7, #15]
 800185c:	7bfb      	ldrb	r3, [r7, #15]
 800185e:	2b02      	cmp	r3, #2
 8001860:	d9b2      	bls.n	80017c8 <LEDStrips_UpdateFFT+0x18>
			}
		}
	}
}
 8001862:	bf00      	nop
 8001864:	bf00      	nop
 8001866:	3710      	adds	r7, #16
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	200002f4 	.word	0x200002f4

08001870 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b084      	sub	sp, #16
 8001874:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001876:	463b      	mov	r3, r7
 8001878:	2200      	movs	r2, #0
 800187a:	601a      	str	r2, [r3, #0]
 800187c:	605a      	str	r2, [r3, #4]
 800187e:	609a      	str	r2, [r3, #8]
 8001880:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001882:	4b21      	ldr	r3, [pc, #132]	; (8001908 <MX_ADC1_Init+0x98>)
 8001884:	4a21      	ldr	r2, [pc, #132]	; (800190c <MX_ADC1_Init+0x9c>)
 8001886:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001888:	4b1f      	ldr	r3, [pc, #124]	; (8001908 <MX_ADC1_Init+0x98>)
 800188a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800188e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001890:	4b1d      	ldr	r3, [pc, #116]	; (8001908 <MX_ADC1_Init+0x98>)
 8001892:	2200      	movs	r2, #0
 8001894:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001896:	4b1c      	ldr	r3, [pc, #112]	; (8001908 <MX_ADC1_Init+0x98>)
 8001898:	2200      	movs	r2, #0
 800189a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800189c:	4b1a      	ldr	r3, [pc, #104]	; (8001908 <MX_ADC1_Init+0x98>)
 800189e:	2201      	movs	r2, #1
 80018a0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80018a2:	4b19      	ldr	r3, [pc, #100]	; (8001908 <MX_ADC1_Init+0x98>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80018aa:	4b17      	ldr	r3, [pc, #92]	; (8001908 <MX_ADC1_Init+0x98>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80018b0:	4b15      	ldr	r3, [pc, #84]	; (8001908 <MX_ADC1_Init+0x98>)
 80018b2:	4a17      	ldr	r2, [pc, #92]	; (8001910 <MX_ADC1_Init+0xa0>)
 80018b4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80018b6:	4b14      	ldr	r3, [pc, #80]	; (8001908 <MX_ADC1_Init+0x98>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80018bc:	4b12      	ldr	r3, [pc, #72]	; (8001908 <MX_ADC1_Init+0x98>)
 80018be:	2201      	movs	r2, #1
 80018c0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80018c2:	4b11      	ldr	r3, [pc, #68]	; (8001908 <MX_ADC1_Init+0x98>)
 80018c4:	2201      	movs	r2, #1
 80018c6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80018ca:	4b0f      	ldr	r3, [pc, #60]	; (8001908 <MX_ADC1_Init+0x98>)
 80018cc:	2201      	movs	r2, #1
 80018ce:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80018d0:	480d      	ldr	r0, [pc, #52]	; (8001908 <MX_ADC1_Init+0x98>)
 80018d2:	f002 f811 	bl	80038f8 <HAL_ADC_Init>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d001      	beq.n	80018e0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80018dc:	f000 ff78 	bl	80027d0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80018e0:	2301      	movs	r3, #1
 80018e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80018e4:	2301      	movs	r3, #1
 80018e6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 80018e8:	2306      	movs	r3, #6
 80018ea:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018ec:	463b      	mov	r3, r7
 80018ee:	4619      	mov	r1, r3
 80018f0:	4805      	ldr	r0, [pc, #20]	; (8001908 <MX_ADC1_Init+0x98>)
 80018f2:	f002 f93f 	bl	8003b74 <HAL_ADC_ConfigChannel>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d001      	beq.n	8001900 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80018fc:	f000 ff68 	bl	80027d0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001900:	bf00      	nop
 8001902:	3710      	adds	r7, #16
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	20000328 	.word	0x20000328
 800190c:	40012000 	.word	0x40012000
 8001910:	0f000001 	.word	0x0f000001

08001914 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b08a      	sub	sp, #40	; 0x28
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800191c:	f107 0314 	add.w	r3, r7, #20
 8001920:	2200      	movs	r2, #0
 8001922:	601a      	str	r2, [r3, #0]
 8001924:	605a      	str	r2, [r3, #4]
 8001926:	609a      	str	r2, [r3, #8]
 8001928:	60da      	str	r2, [r3, #12]
 800192a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a2f      	ldr	r2, [pc, #188]	; (80019f0 <HAL_ADC_MspInit+0xdc>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d158      	bne.n	80019e8 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001936:	2300      	movs	r3, #0
 8001938:	613b      	str	r3, [r7, #16]
 800193a:	4b2e      	ldr	r3, [pc, #184]	; (80019f4 <HAL_ADC_MspInit+0xe0>)
 800193c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800193e:	4a2d      	ldr	r2, [pc, #180]	; (80019f4 <HAL_ADC_MspInit+0xe0>)
 8001940:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001944:	6453      	str	r3, [r2, #68]	; 0x44
 8001946:	4b2b      	ldr	r3, [pc, #172]	; (80019f4 <HAL_ADC_MspInit+0xe0>)
 8001948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800194a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800194e:	613b      	str	r3, [r7, #16]
 8001950:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001952:	2300      	movs	r3, #0
 8001954:	60fb      	str	r3, [r7, #12]
 8001956:	4b27      	ldr	r3, [pc, #156]	; (80019f4 <HAL_ADC_MspInit+0xe0>)
 8001958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195a:	4a26      	ldr	r2, [pc, #152]	; (80019f4 <HAL_ADC_MspInit+0xe0>)
 800195c:	f043 0301 	orr.w	r3, r3, #1
 8001960:	6313      	str	r3, [r2, #48]	; 0x30
 8001962:	4b24      	ldr	r3, [pc, #144]	; (80019f4 <HAL_ADC_MspInit+0xe0>)
 8001964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001966:	f003 0301 	and.w	r3, r3, #1
 800196a:	60fb      	str	r3, [r7, #12]
 800196c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800196e:	2302      	movs	r3, #2
 8001970:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001972:	2303      	movs	r3, #3
 8001974:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001976:	2300      	movs	r3, #0
 8001978:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800197a:	f107 0314 	add.w	r3, r7, #20
 800197e:	4619      	mov	r1, r3
 8001980:	481d      	ldr	r0, [pc, #116]	; (80019f8 <HAL_ADC_MspInit+0xe4>)
 8001982:	f003 f8b9 	bl	8004af8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001986:	4b1d      	ldr	r3, [pc, #116]	; (80019fc <HAL_ADC_MspInit+0xe8>)
 8001988:	4a1d      	ldr	r2, [pc, #116]	; (8001a00 <HAL_ADC_MspInit+0xec>)
 800198a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800198c:	4b1b      	ldr	r3, [pc, #108]	; (80019fc <HAL_ADC_MspInit+0xe8>)
 800198e:	2200      	movs	r2, #0
 8001990:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001992:	4b1a      	ldr	r3, [pc, #104]	; (80019fc <HAL_ADC_MspInit+0xe8>)
 8001994:	2200      	movs	r2, #0
 8001996:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001998:	4b18      	ldr	r3, [pc, #96]	; (80019fc <HAL_ADC_MspInit+0xe8>)
 800199a:	2200      	movs	r2, #0
 800199c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800199e:	4b17      	ldr	r3, [pc, #92]	; (80019fc <HAL_ADC_MspInit+0xe8>)
 80019a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019a4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80019a6:	4b15      	ldr	r3, [pc, #84]	; (80019fc <HAL_ADC_MspInit+0xe8>)
 80019a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80019ac:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80019ae:	4b13      	ldr	r3, [pc, #76]	; (80019fc <HAL_ADC_MspInit+0xe8>)
 80019b0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019b4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80019b6:	4b11      	ldr	r3, [pc, #68]	; (80019fc <HAL_ADC_MspInit+0xe8>)
 80019b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019bc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80019be:	4b0f      	ldr	r3, [pc, #60]	; (80019fc <HAL_ADC_MspInit+0xe8>)
 80019c0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80019c4:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80019c6:	4b0d      	ldr	r3, [pc, #52]	; (80019fc <HAL_ADC_MspInit+0xe8>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80019cc:	480b      	ldr	r0, [pc, #44]	; (80019fc <HAL_ADC_MspInit+0xe8>)
 80019ce:	f002 fc83 	bl	80042d8 <HAL_DMA_Init>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d001      	beq.n	80019dc <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 80019d8:	f000 fefa 	bl	80027d0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	4a07      	ldr	r2, [pc, #28]	; (80019fc <HAL_ADC_MspInit+0xe8>)
 80019e0:	639a      	str	r2, [r3, #56]	; 0x38
 80019e2:	4a06      	ldr	r2, [pc, #24]	; (80019fc <HAL_ADC_MspInit+0xe8>)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80019e8:	bf00      	nop
 80019ea:	3728      	adds	r7, #40	; 0x28
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	40012000 	.word	0x40012000
 80019f4:	40023800 	.word	0x40023800
 80019f8:	40020000 	.word	0x40020000
 80019fc:	20000370 	.word	0x20000370
 8001a00:	40026410 	.word	0x40026410

08001a04 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	607b      	str	r3, [r7, #4]
 8001a0e:	4b10      	ldr	r3, [pc, #64]	; (8001a50 <MX_DMA_Init+0x4c>)
 8001a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a12:	4a0f      	ldr	r2, [pc, #60]	; (8001a50 <MX_DMA_Init+0x4c>)
 8001a14:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a18:	6313      	str	r3, [r2, #48]	; 0x30
 8001a1a:	4b0d      	ldr	r3, [pc, #52]	; (8001a50 <MX_DMA_Init+0x4c>)
 8001a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a22:	607b      	str	r3, [r7, #4]
 8001a24:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001a26:	2200      	movs	r2, #0
 8001a28:	2100      	movs	r1, #0
 8001a2a:	2038      	movs	r0, #56	; 0x38
 8001a2c:	f002 fc1d 	bl	800426a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001a30:	2038      	movs	r0, #56	; 0x38
 8001a32:	f002 fc36 	bl	80042a2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8001a36:	2200      	movs	r2, #0
 8001a38:	2100      	movs	r1, #0
 8001a3a:	2046      	movs	r0, #70	; 0x46
 8001a3c:	f002 fc15 	bl	800426a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8001a40:	2046      	movs	r0, #70	; 0x46
 8001a42:	f002 fc2e 	bl	80042a2 <HAL_NVIC_EnableIRQ>

}
 8001a46:	bf00      	nop
 8001a48:	3708      	adds	r7, #8
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	40023800 	.word	0x40023800

08001a54 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b08a      	sub	sp, #40	; 0x28
 8001a58:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a5a:	f107 0314 	add.w	r3, r7, #20
 8001a5e:	2200      	movs	r2, #0
 8001a60:	601a      	str	r2, [r3, #0]
 8001a62:	605a      	str	r2, [r3, #4]
 8001a64:	609a      	str	r2, [r3, #8]
 8001a66:	60da      	str	r2, [r3, #12]
 8001a68:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	613b      	str	r3, [r7, #16]
 8001a6e:	4b47      	ldr	r3, [pc, #284]	; (8001b8c <MX_GPIO_Init+0x138>)
 8001a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a72:	4a46      	ldr	r2, [pc, #280]	; (8001b8c <MX_GPIO_Init+0x138>)
 8001a74:	f043 0304 	orr.w	r3, r3, #4
 8001a78:	6313      	str	r3, [r2, #48]	; 0x30
 8001a7a:	4b44      	ldr	r3, [pc, #272]	; (8001b8c <MX_GPIO_Init+0x138>)
 8001a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7e:	f003 0304 	and.w	r3, r3, #4
 8001a82:	613b      	str	r3, [r7, #16]
 8001a84:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a86:	2300      	movs	r3, #0
 8001a88:	60fb      	str	r3, [r7, #12]
 8001a8a:	4b40      	ldr	r3, [pc, #256]	; (8001b8c <MX_GPIO_Init+0x138>)
 8001a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8e:	4a3f      	ldr	r2, [pc, #252]	; (8001b8c <MX_GPIO_Init+0x138>)
 8001a90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a94:	6313      	str	r3, [r2, #48]	; 0x30
 8001a96:	4b3d      	ldr	r3, [pc, #244]	; (8001b8c <MX_GPIO_Init+0x138>)
 8001a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a9e:	60fb      	str	r3, [r7, #12]
 8001aa0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	60bb      	str	r3, [r7, #8]
 8001aa6:	4b39      	ldr	r3, [pc, #228]	; (8001b8c <MX_GPIO_Init+0x138>)
 8001aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aaa:	4a38      	ldr	r2, [pc, #224]	; (8001b8c <MX_GPIO_Init+0x138>)
 8001aac:	f043 0301 	orr.w	r3, r3, #1
 8001ab0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ab2:	4b36      	ldr	r3, [pc, #216]	; (8001b8c <MX_GPIO_Init+0x138>)
 8001ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab6:	f003 0301 	and.w	r3, r3, #1
 8001aba:	60bb      	str	r3, [r7, #8]
 8001abc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001abe:	2300      	movs	r3, #0
 8001ac0:	607b      	str	r3, [r7, #4]
 8001ac2:	4b32      	ldr	r3, [pc, #200]	; (8001b8c <MX_GPIO_Init+0x138>)
 8001ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac6:	4a31      	ldr	r2, [pc, #196]	; (8001b8c <MX_GPIO_Init+0x138>)
 8001ac8:	f043 0302 	orr.w	r3, r3, #2
 8001acc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ace:	4b2f      	ldr	r3, [pc, #188]	; (8001b8c <MX_GPIO_Init+0x138>)
 8001ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad2:	f003 0302 	and.w	r3, r3, #2
 8001ad6:	607b      	str	r3, [r7, #4]
 8001ad8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_ONBOARD_GPIO_Port, LED_ONBOARD_Pin, GPIO_PIN_RESET);
 8001ada:	2200      	movs	r2, #0
 8001adc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ae0:	482b      	ldr	r0, [pc, #172]	; (8001b90 <MX_GPIO_Init+0x13c>)
 8001ae2:	f003 f9a5 	bl	8004e30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_ONBOARD_Pin;
 8001ae6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001aea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aec:	2301      	movs	r3, #1
 8001aee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af0:	2300      	movs	r3, #0
 8001af2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af4:	2300      	movs	r3, #0
 8001af6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_ONBOARD_GPIO_Port, &GPIO_InitStruct);
 8001af8:	f107 0314 	add.w	r3, r7, #20
 8001afc:	4619      	mov	r1, r3
 8001afe:	4824      	ldr	r0, [pc, #144]	; (8001b90 <MX_GPIO_Init+0x13c>)
 8001b00:	f002 fffa 	bl	8004af8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001b04:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001b08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b12:	f107 0314 	add.w	r3, r7, #20
 8001b16:	4619      	mov	r1, r3
 8001b18:	481d      	ldr	r0, [pc, #116]	; (8001b90 <MX_GPIO_Init+0x13c>)
 8001b1a:	f002 ffed 	bl	8004af8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_ONBOARD_Pin;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b22:	2300      	movs	r3, #0
 8001b24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b26:	2300      	movs	r3, #0
 8001b28:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_ONBOARD_GPIO_Port, &GPIO_InitStruct);
 8001b2a:	f107 0314 	add.w	r3, r7, #20
 8001b2e:	4619      	mov	r1, r3
 8001b30:	4818      	ldr	r0, [pc, #96]	; (8001b94 <MX_GPIO_Init+0x140>)
 8001b32:	f002 ffe1 	bl	8004af8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 PA4 PA5
                           PA6 PA7 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8001b36:	f44f 73fe 	mov.w	r3, #508	; 0x1fc
 8001b3a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b40:	2300      	movs	r3, #0
 8001b42:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b44:	f107 0314 	add.w	r3, r7, #20
 8001b48:	4619      	mov	r1, r3
 8001b4a:	4812      	ldr	r0, [pc, #72]	; (8001b94 <MX_GPIO_Init+0x140>)
 8001b4c:	f002 ffd4 	bl	8004af8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 8001b50:	f248 0304 	movw	r3, #32772	; 0x8004
 8001b54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b56:	2303      	movs	r3, #3
 8001b58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b5e:	f107 0314 	add.w	r3, r7, #20
 8001b62:	4619      	mov	r1, r3
 8001b64:	480c      	ldr	r0, [pc, #48]	; (8001b98 <MX_GPIO_Init+0x144>)
 8001b66:	f002 ffc7 	bl	8004af8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = BTN_C_Pin|BTN_B_Pin|BTN_A_Pin;
 8001b6a:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8001b6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b70:	2300      	movs	r3, #0
 8001b72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b74:	2301      	movs	r3, #1
 8001b76:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b78:	f107 0314 	add.w	r3, r7, #20
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	4806      	ldr	r0, [pc, #24]	; (8001b98 <MX_GPIO_Init+0x144>)
 8001b80:	f002 ffba 	bl	8004af8 <HAL_GPIO_Init>

}
 8001b84:	bf00      	nop
 8001b86:	3728      	adds	r7, #40	; 0x28
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	40023800 	.word	0x40023800
 8001b90:	40020800 	.word	0x40020800
 8001b94:	40020000 	.word	0x40020000
 8001b98:	40020400 	.word	0x40020400

08001b9c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001ba0:	4b12      	ldr	r3, [pc, #72]	; (8001bec <MX_I2C1_Init+0x50>)
 8001ba2:	4a13      	ldr	r2, [pc, #76]	; (8001bf0 <MX_I2C1_Init+0x54>)
 8001ba4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001ba6:	4b11      	ldr	r3, [pc, #68]	; (8001bec <MX_I2C1_Init+0x50>)
 8001ba8:	4a12      	ldr	r2, [pc, #72]	; (8001bf4 <MX_I2C1_Init+0x58>)
 8001baa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001bac:	4b0f      	ldr	r3, [pc, #60]	; (8001bec <MX_I2C1_Init+0x50>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001bb2:	4b0e      	ldr	r3, [pc, #56]	; (8001bec <MX_I2C1_Init+0x50>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001bb8:	4b0c      	ldr	r3, [pc, #48]	; (8001bec <MX_I2C1_Init+0x50>)
 8001bba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001bbe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001bc0:	4b0a      	ldr	r3, [pc, #40]	; (8001bec <MX_I2C1_Init+0x50>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001bc6:	4b09      	ldr	r3, [pc, #36]	; (8001bec <MX_I2C1_Init+0x50>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001bcc:	4b07      	ldr	r3, [pc, #28]	; (8001bec <MX_I2C1_Init+0x50>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001bd2:	4b06      	ldr	r3, [pc, #24]	; (8001bec <MX_I2C1_Init+0x50>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001bd8:	4804      	ldr	r0, [pc, #16]	; (8001bec <MX_I2C1_Init+0x50>)
 8001bda:	f003 f943 	bl	8004e64 <HAL_I2C_Init>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d001      	beq.n	8001be8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001be4:	f000 fdf4 	bl	80027d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001be8:	bf00      	nop
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	200003d0 	.word	0x200003d0
 8001bf0:	40005400 	.word	0x40005400
 8001bf4:	000186a0 	.word	0x000186a0

08001bf8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b08a      	sub	sp, #40	; 0x28
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c00:	f107 0314 	add.w	r3, r7, #20
 8001c04:	2200      	movs	r2, #0
 8001c06:	601a      	str	r2, [r3, #0]
 8001c08:	605a      	str	r2, [r3, #4]
 8001c0a:	609a      	str	r2, [r3, #8]
 8001c0c:	60da      	str	r2, [r3, #12]
 8001c0e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a1d      	ldr	r2, [pc, #116]	; (8001c8c <HAL_I2C_MspInit+0x94>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d134      	bne.n	8001c84 <HAL_I2C_MspInit+0x8c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	613b      	str	r3, [r7, #16]
 8001c1e:	4b1c      	ldr	r3, [pc, #112]	; (8001c90 <HAL_I2C_MspInit+0x98>)
 8001c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c22:	4a1b      	ldr	r2, [pc, #108]	; (8001c90 <HAL_I2C_MspInit+0x98>)
 8001c24:	f043 0302 	orr.w	r3, r3, #2
 8001c28:	6313      	str	r3, [r2, #48]	; 0x30
 8001c2a:	4b19      	ldr	r3, [pc, #100]	; (8001c90 <HAL_I2C_MspInit+0x98>)
 8001c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2e:	f003 0302 	and.w	r3, r3, #2
 8001c32:	613b      	str	r3, [r7, #16]
 8001c34:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001c36:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001c3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c3c:	2312      	movs	r3, #18
 8001c3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c40:	2300      	movs	r3, #0
 8001c42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c44:	2303      	movs	r3, #3
 8001c46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c48:	2304      	movs	r3, #4
 8001c4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c4c:	f107 0314 	add.w	r3, r7, #20
 8001c50:	4619      	mov	r1, r3
 8001c52:	4810      	ldr	r0, [pc, #64]	; (8001c94 <HAL_I2C_MspInit+0x9c>)
 8001c54:	f002 ff50 	bl	8004af8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c58:	2300      	movs	r3, #0
 8001c5a:	60fb      	str	r3, [r7, #12]
 8001c5c:	4b0c      	ldr	r3, [pc, #48]	; (8001c90 <HAL_I2C_MspInit+0x98>)
 8001c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c60:	4a0b      	ldr	r2, [pc, #44]	; (8001c90 <HAL_I2C_MspInit+0x98>)
 8001c62:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c66:	6413      	str	r3, [r2, #64]	; 0x40
 8001c68:	4b09      	ldr	r3, [pc, #36]	; (8001c90 <HAL_I2C_MspInit+0x98>)
 8001c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c70:	60fb      	str	r3, [r7, #12]
 8001c72:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001c74:	2200      	movs	r2, #0
 8001c76:	2100      	movs	r1, #0
 8001c78:	201f      	movs	r0, #31
 8001c7a:	f002 faf6 	bl	800426a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001c7e:	201f      	movs	r0, #31
 8001c80:	f002 fb0f 	bl	80042a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001c84:	bf00      	nop
 8001c86:	3728      	adds	r7, #40	; 0x28
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	40005400 	.word	0x40005400
 8001c90:	40023800 	.word	0x40023800
 8001c94:	40020400 	.word	0x40020400

08001c98 <USB_PrintDebugForce>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void USB_PrintDebugForce(const char *str)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001ca4:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8001ca8:	6018      	str	r0, [r3, #0]
	char txTmpBuffer[USB_TX_BUFFERSIZE + 2];

	sprintf(txTmpBuffer, "%s", str);
 8001caa:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001cae:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8001cb2:	f107 000c 	add.w	r0, r7, #12
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	4911      	ldr	r1, [pc, #68]	; (8001d00 <USB_PrintDebugForce+0x68>)
 8001cba:	f00e fd93 	bl	80107e4 <siprintf>
	uint16_t length = strlen(txTmpBuffer);
 8001cbe:	f107 030c 	add.w	r3, r7, #12
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f7fe faec 	bl	80002a0 <strlen>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e

	txTmpBuffer[USB_TX_BUFFERSIZE + 1] = 0;
 8001cce:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001cd2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201

	while (CDC_Transmit_FS((uint8_t*) txTmpBuffer, length) != USBD_OK)
 8001cdc:	bf00      	nop
 8001cde:	f8b7 220e 	ldrh.w	r2, [r7, #526]	; 0x20e
 8001ce2:	f107 030c 	add.w	r3, r7, #12
 8001ce6:	4611      	mov	r1, r2
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f00c fca3 	bl	800e634 <CDC_Transmit_FS>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d1f4      	bne.n	8001cde <USB_PrintDebugForce+0x46>
		;
}
 8001cf4:	bf00      	nop
 8001cf6:	bf00      	nop
 8001cf8:	f507 7704 	add.w	r7, r7, #528	; 0x210
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	08012e04 	.word	0x08012e04

08001d04 <USB_PrintDebug>:

void USB_PrintDebug(const char *str)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001d10:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8001d14:	6018      	str	r0, [r3, #0]
	char txTmpBuffer[USB_TX_BUFFERSIZE + 2];

	sprintf(txTmpBuffer, "%s", str);
 8001d16:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001d1a:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8001d1e:	f107 0008 	add.w	r0, r7, #8
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	491a      	ldr	r1, [pc, #104]	; (8001d90 <USB_PrintDebug+0x8c>)
 8001d26:	f00e fd5d 	bl	80107e4 <siprintf>
	uint16_t length = strlen(txTmpBuffer);
 8001d2a:	f107 0308 	add.w	r3, r7, #8
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f7fe fab6 	bl	80002a0 <strlen>
 8001d34:	4603      	mov	r3, r0
 8001d36:	f8a7 320c 	strh.w	r3, [r7, #524]	; 0x20c

	txTmpBuffer[USB_TX_BUFFERSIZE + 1] = 0;
 8001d3a:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001d3e:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8001d42:	2200      	movs	r2, #0
 8001d44:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201

	uint8_t counter = 0, result;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
	while (counter < 3)
 8001d4e:	e013      	b.n	8001d78 <USB_PrintDebug+0x74>
	{
		result = CDC_Transmit_FS((uint8_t*) txTmpBuffer, length);
 8001d50:	f8b7 220c 	ldrh.w	r2, [r7, #524]	; 0x20c
 8001d54:	f107 0308 	add.w	r3, r7, #8
 8001d58:	4611      	mov	r1, r2
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f00c fc6a 	bl	800e634 <CDC_Transmit_FS>
 8001d60:	4603      	mov	r3, r0
 8001d62:	f887 320b 	strb.w	r3, [r7, #523]	; 0x20b
		if (result == USBD_OK)
 8001d66:	f897 320b 	ldrb.w	r3, [r7, #523]	; 0x20b
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d009      	beq.n	8001d82 <USB_PrintDebug+0x7e>
			break;

		counter++;
 8001d6e:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 8001d72:	3301      	adds	r3, #1
 8001d74:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
	while (counter < 3)
 8001d78:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 8001d7c:	2b02      	cmp	r3, #2
 8001d7e:	d9e7      	bls.n	8001d50 <USB_PrintDebug+0x4c>
		if (counter > 0)
		{

		}
	}
}
 8001d80:	e000      	b.n	8001d84 <USB_PrintDebug+0x80>
			break;
 8001d82:	bf00      	nop
}
 8001d84:	bf00      	nop
 8001d86:	f507 7704 	add.w	r7, r7, #528	; 0x210
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	08012e04 	.word	0x08012e04

08001d94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d96:	b0c5      	sub	sp, #276	; 0x114
 8001d98:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d9a:	f001 fd17 	bl	80037cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d9e:	f000 faf1 	bl	8002384 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001da2:	f7ff fe57 	bl	8001a54 <MX_GPIO_Init>
  MX_DMA_Init();
 8001da6:	f7ff fe2d 	bl	8001a04 <MX_DMA_Init>
  MX_ADC1_Init();
 8001daa:	f7ff fd61 	bl	8001870 <MX_ADC1_Init>
  MX_TIM2_Init();
 8001dae:	f000 fe7d 	bl	8002aac <MX_TIM2_Init>
  MX_TIM3_Init();
 8001db2:	f000 ff07 	bl	8002bc4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001db6:	f000 ff9d 	bl	8002cf4 <MX_TIM4_Init>
  MX_USB_DEVICE_Init();
 8001dba:	f00c fb7d 	bl	800e4b8 <MX_USB_DEVICE_Init>
  MX_I2C1_Init();
 8001dbe:	f7ff feed 	bl	8001b9c <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001dc2:	f001 f939 	bl	8003038 <MX_USART1_UART_Init>
  MX_TIM11_Init();
 8001dc6:	f000 fff9 	bl	8002dbc <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */

	/*
	 * USB Transmission safety stuff
	 */
	USB_TxBuffer[USB_TX_BUFFERSIZE - 1] = 0;
 8001dca:	4bcc      	ldr	r3, [pc, #816]	; (80020fc <main+0x368>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff

	/*
	 * FFT Buffers and Instance
	 */
	FFT_CallbackFlag = FFT_NODATA;
 8001dd2:	4bcb      	ldr	r3, [pc, #812]	; (8002100 <main+0x36c>)
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	701a      	strb	r2, [r3, #0]

	arm_rfft_fast_instance_f32 fft_Instance;
	arm_rfft_fast_init_f32(&fft_Instance, FFT_NUM_SAMPLES);
 8001dd8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001ddc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001de0:	4618      	mov	r0, r3
 8001de2:	f00d f883 	bl	800eeec <arm_rfft_fast_init_f32>

	uint32_t fftTransformsCompleted = 0, fftTransformsCompletedOld = 0;
 8001de6:	2300      	movs	r3, #0
 8001de8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001dec:	2300      	movs	r3, #0
 8001dee:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
	/*
	 * LCD 20x04 I2C
	 */
	LCD2004_I2C lcd;

	LCD_Init(&lcd, LCD_DEFAULT_ADDR);
 8001df2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001df6:	214e      	movs	r1, #78	; 0x4e
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f001 fb9d 	bl	8003538 <LCD_Init>
	LCD_CursorOff(&lcd);
 8001dfe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e02:	4618      	mov	r0, r3
 8001e04:	f001 fcab 	bl	800375e <LCD_CursorOff>

	HAL_Delay(2000);
 8001e08:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001e0c:	f001 fd50 	bl	80038b0 <HAL_Delay>
	LCD_Clear(&lcd);
 8001e10:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e14:	4618      	mov	r0, r3
 8001e16:	f001 fc93 	bl	8003740 <LCD_Clear>

	// Init LED stuff
	LEDMenu_Init(&lcd);
 8001e1a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f7ff f8ac 	bl	8000f7c <LEDMenu_Init>
	LEDStrips_Init();
 8001e24:	f7ff fbfe 	bl	8001624 <LEDStrips_Init>

	// Button stuff
	ButtonChange_Flag = 0;
 8001e28:	4bb6      	ldr	r3, [pc, #728]	; (8002104 <main+0x370>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	701a      	strb	r2, [r3, #0]
	ButtonStatus = 0xFF;
 8001e2e:	4bb6      	ldr	r3, [pc, #728]	; (8002108 <main+0x374>)
 8001e30:	22ff      	movs	r2, #255	; 0xff
 8001e32:	701a      	strb	r2, [r3, #0]
	ButtonStatus_Flag = 0;
 8001e34:	4bb5      	ldr	r3, [pc, #724]	; (800210c <main+0x378>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	701a      	strb	r2, [r3, #0]

	// this will be incremented every 1 ms; check in loop if lcd kathode off or on
	LCD_TimeoutCounter = 0;
 8001e3a:	4bb5      	ldr	r3, [pc, #724]	; (8002110 <main+0x37c>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	601a      	str	r2, [r3, #0]

	// ms interrupt timer
	HAL_TIM_Base_Start_IT(&htim11);
 8001e40:	48b4      	ldr	r0, [pc, #720]	; (8002114 <main+0x380>)
 8001e42:	f006 ff45 	bl	8008cd0 <HAL_TIM_Base_Start_IT>

	/*
	 * Init UART for continuous FFT Data Stream
	 */
	*((uint32_t*) &FFT_OutputBuffer[FFT_NUM_SAMPLES]) = 0x55555555;
 8001e46:	4bb4      	ldr	r3, [pc, #720]	; (8002118 <main+0x384>)
 8001e48:	f04f 3255 	mov.w	r2, #1431655765	; 0x55555555
 8001e4c:	601a      	str	r2, [r3, #0]
	uint8_t uartTxSkipCounter = 0;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
	uint32_t uartTxStarted = 0, uartTxStartedOld = 0;
 8001e54:	2300      	movs	r3, #0
 8001e56:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
	uint32_t uartTxMissed = 0, uartTxMissedOld = 0;
 8001e60:	2300      	movs	r3, #0
 8001e62:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001e66:	2300      	movs	r3, #0
 8001e68:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

	/*
	 * ADC DMA init
	 */
	ADC_CallbackCounter = 0;
 8001e6c:	4bab      	ldr	r3, [pc, #684]	; (800211c <main+0x388>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	601a      	str	r2, [r3, #0]
	uint32_t adcCallbackCounterOld = 0;
 8001e72:	2300      	movs	r3, #0
 8001e74:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
	ADC_CallbackResultsSkippedCounter = 0;
 8001e78:	4ba9      	ldr	r3, [pc, #676]	; (8002120 <main+0x38c>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	601a      	str	r2, [r3, #0]
	uint32_t adcCallbackResultsSkippedCounterOld = 0;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	ADC_ReadMax = 0;
 8001e84:	4ba7      	ldr	r3, [pc, #668]	; (8002124 <main+0x390>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	801a      	strh	r2, [r3, #0]
	ADC_ReadMin = 0 - 1;
 8001e8a:	4ba7      	ldr	r3, [pc, #668]	; (8002128 <main+0x394>)
 8001e8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e90:	801a      	strh	r2, [r3, #0]

	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADC_ReadBuffer, FFT_NUM_SAMPLES * 2);
 8001e92:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e96:	49a5      	ldr	r1, [pc, #660]	; (800212c <main+0x398>)
 8001e98:	48a5      	ldr	r0, [pc, #660]	; (8002130 <main+0x39c>)
 8001e9a:	f001 fd71 	bl	8003980 <HAL_ADC_Start_DMA>

	float32_t bassHistory[10];
	for (uint8_t i = 0; i < 10; i++)
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
 8001ea4:	e00e      	b.n	8001ec4 <main+0x130>
		bassHistory[i] = 0.0f;
 8001ea6:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001eb0:	443b      	add	r3, r7
 8001eb2:	3bfc      	subs	r3, #252	; 0xfc
 8001eb4:	f04f 0200 	mov.w	r2, #0
 8001eb8:	601a      	str	r2, [r3, #0]
	for (uint8_t i = 0; i < 10; i++)
 8001eba:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8001ebe:	3301      	adds	r3, #1
 8001ec0:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
 8001ec4:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8001ec8:	2b09      	cmp	r3, #9
 8001eca:	d9ec      	bls.n	8001ea6 <main+0x112>
	float32_t bassAvg = 0.0f;
 8001ecc:	f04f 0300 	mov.w	r3, #0
 8001ed0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

	uint8_t bassHistoryCounter = 0;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3

	/*
	 * Timing main loop
	 */
	uint32_t timerLast = HAL_GetTick(), timerNow;
 8001eda:	f001 fcdd 	bl	8003898 <HAL_GetTick>
 8001ede:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

	volatile uint8_t FFT_Print_Output = 0; // change via debugger to enable fft output; dont forget breakpoints!
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	70fb      	strb	r3, [r7, #3]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		// do fft
		if (FFT_CallbackFlag != FFT_NODATA)
 8001ee6:	4b86      	ldr	r3, [pc, #536]	; (8002100 <main+0x36c>)
 8001ee8:	781b      	ldrb	r3, [r3, #0]
 8001eea:	b2db      	uxtb	r3, r3
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	f000 8158 	beq.w	80021a2 <main+0x40e>
		{
			FFT_CallbackFlag = FFT_NODATA;
 8001ef2:	4b83      	ldr	r3, [pc, #524]	; (8002100 <main+0x36c>)
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	701a      	strb	r2, [r3, #0]
			float32_t *fft_InputBuffer = FFT_CallbackFlag == FFT_CALLBACK_HALF ? FFT_InputBufferLower : FFT_InputBufferUpper;
 8001ef8:	4b81      	ldr	r3, [pc, #516]	; (8002100 <main+0x36c>)
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	b2db      	uxtb	r3, r3
 8001efe:	2b02      	cmp	r3, #2
 8001f00:	d102      	bne.n	8001f08 <main+0x174>
 8001f02:	4b8c      	ldr	r3, [pc, #560]	; (8002134 <main+0x3a0>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	e001      	b.n	8001f0c <main+0x178>
 8001f08:	4b8b      	ldr	r3, [pc, #556]	; (8002138 <main+0x3a4>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

			arm_rfft_fast_f32(&fft_Instance, fft_InputBuffer, FFT_OutputBuffer, 0);
 8001f10:	f107 0098 	add.w	r0, r7, #152	; 0x98
 8001f14:	2300      	movs	r3, #0
 8001f16:	4a89      	ldr	r2, [pc, #548]	; (800213c <main+0x3a8>)
 8001f18:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 8001f1c:	f00d f868 	bl	800eff0 <arm_rfft_fast_f32>

			if (FFT_Print_Output) // change via debugger to enable fft output; dont forget breakpoints!
 8001f20:	78fb      	ldrb	r3, [r7, #3]
 8001f22:	b2db      	uxtb	r3, r3
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d02d      	beq.n	8001f84 <main+0x1f0>
			{
				sprintf(USB_TxBuffer, "\r\n-- FFT Data START --\r\n");
 8001f28:	4985      	ldr	r1, [pc, #532]	; (8002140 <main+0x3ac>)
 8001f2a:	4874      	ldr	r0, [pc, #464]	; (80020fc <main+0x368>)
 8001f2c:	f00e fc5a 	bl	80107e4 <siprintf>
				USB_PrintDebugForce(USB_TxBuffer);
 8001f30:	4872      	ldr	r0, [pc, #456]	; (80020fc <main+0x368>)
 8001f32:	f7ff feb1 	bl	8001c98 <USB_PrintDebugForce>

				for (uint32_t i = 0; i < FFT_NUM_SAMPLES; i++)
 8001f36:	2300      	movs	r3, #0
 8001f38:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001f3c:	e016      	b.n	8001f6c <main+0x1d8>
				{
					sprintf(USB_TxBuffer, "%f ", FFT_OutputBuffer[i]);
 8001f3e:	4a7f      	ldr	r2, [pc, #508]	; (800213c <main+0x3a8>)
 8001f40:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001f44:	009b      	lsls	r3, r3, #2
 8001f46:	4413      	add	r3, r2
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f7fe fb64 	bl	8000618 <__aeabi_f2d>
 8001f50:	4602      	mov	r2, r0
 8001f52:	460b      	mov	r3, r1
 8001f54:	497b      	ldr	r1, [pc, #492]	; (8002144 <main+0x3b0>)
 8001f56:	4869      	ldr	r0, [pc, #420]	; (80020fc <main+0x368>)
 8001f58:	f00e fc44 	bl	80107e4 <siprintf>
					USB_PrintDebugForce(USB_TxBuffer);
 8001f5c:	4867      	ldr	r0, [pc, #412]	; (80020fc <main+0x368>)
 8001f5e:	f7ff fe9b 	bl	8001c98 <USB_PrintDebugForce>
				for (uint32_t i = 0; i < FFT_NUM_SAMPLES; i++)
 8001f62:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001f66:	3301      	adds	r3, #1
 8001f68:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001f6c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001f70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f74:	d3e3      	bcc.n	8001f3e <main+0x1aa>
				}

				sprintf(USB_TxBuffer, "\r\n-- FFT Data END --\r\n");
 8001f76:	4974      	ldr	r1, [pc, #464]	; (8002148 <main+0x3b4>)
 8001f78:	4860      	ldr	r0, [pc, #384]	; (80020fc <main+0x368>)
 8001f7a:	f00e fc33 	bl	80107e4 <siprintf>
				USB_PrintDebugForce(USB_TxBuffer);
 8001f7e:	485f      	ldr	r0, [pc, #380]	; (80020fc <main+0x368>)
 8001f80:	f7ff fe8a 	bl	8001c98 <USB_PrintDebugForce>
			}

			uartTxSkipCounter++;
 8001f84:	f897 30f7 	ldrb.w	r3, [r7, #247]	; 0xf7
 8001f88:	3301      	adds	r3, #1
 8001f8a:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
			if (uartTxSkipCounter >= UART_TXSKIP)
 8001f8e:	f897 30f7 	ldrb.w	r3, [r7, #247]	; 0xf7
 8001f92:	2b09      	cmp	r3, #9
 8001f94:	d916      	bls.n	8001fc4 <main+0x230>
			{
				if (HAL_UART_Transmit_DMA(&huart1, (uint8_t*) FFT_OutputBuffer, (FFT_NUM_SAMPLES + 1) * sizeof(float32_t)) != HAL_BUSY)
 8001f96:	f244 0204 	movw	r2, #16388	; 0x4004
 8001f9a:	4968      	ldr	r1, [pc, #416]	; (800213c <main+0x3a8>)
 8001f9c:	486b      	ldr	r0, [pc, #428]	; (800214c <main+0x3b8>)
 8001f9e:	f007 fe59 	bl	8009c54 <HAL_UART_Transmit_DMA>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b02      	cmp	r3, #2
 8001fa6:	d005      	beq.n	8001fb4 <main+0x220>
					uartTxStarted++;
 8001fa8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001fac:	3301      	adds	r3, #1
 8001fae:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8001fb2:	e004      	b.n	8001fbe <main+0x22a>
				else
					uartTxMissed++;
 8001fb4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001fb8:	3301      	adds	r3, #1
 8001fba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8

				uartTxSkipCounter = 0;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
			}

			uint16_t fftPeak = 0;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	f8a7 30ba 	strh.w	r3, [r7, #186]	; 0xba
			float32_t curValue, curPeak = 0.0f, bassMax = 0.0;
 8001fca:	f04f 0300 	mov.w	r3, #0
 8001fce:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001fd2:	f04f 0300 	mov.w	r3, #0
 8001fd6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

			for (uint16_t i = 1; i < FFT_NUM_SAMPLES; i++)
 8001fda:	2301      	movs	r3, #1
 8001fdc:	f8a7 30c2 	strh.w	r3, [r7, #194]	; 0xc2
 8001fe0:	e03a      	b.n	8002058 <main+0x2c4>
			{
				if (FFT_OutputBuffer[i] < 0.0f)
 8001fe2:	f8b7 30c2 	ldrh.w	r3, [r7, #194]	; 0xc2
 8001fe6:	4a55      	ldr	r2, [pc, #340]	; (800213c <main+0x3a8>)
 8001fe8:	009b      	lsls	r3, r3, #2
 8001fea:	4413      	add	r3, r2
 8001fec:	edd3 7a00 	vldr	s15, [r3]
 8001ff0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ff4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ff8:	d50f      	bpl.n	800201a <main+0x286>
					FFT_OutputBuffer[i] = -FFT_OutputBuffer[i];
 8001ffa:	f8b7 30c2 	ldrh.w	r3, [r7, #194]	; 0xc2
 8001ffe:	4a4f      	ldr	r2, [pc, #316]	; (800213c <main+0x3a8>)
 8002000:	009b      	lsls	r3, r3, #2
 8002002:	4413      	add	r3, r2
 8002004:	edd3 7a00 	vldr	s15, [r3]
 8002008:	f8b7 30c2 	ldrh.w	r3, [r7, #194]	; 0xc2
 800200c:	eef1 7a67 	vneg.f32	s15, s15
 8002010:	4a4a      	ldr	r2, [pc, #296]	; (800213c <main+0x3a8>)
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	4413      	add	r3, r2
 8002016:	edc3 7a00 	vstr	s15, [r3]

				if (i < 10)
 800201a:	f8b7 30c2 	ldrh.w	r3, [r7, #194]	; 0xc2
 800201e:	2b09      	cmp	r3, #9
 8002020:	d815      	bhi.n	800204e <main+0x2ba>
				{
					if (FFT_OutputBuffer[i] > bassMax)
 8002022:	f8b7 30c2 	ldrh.w	r3, [r7, #194]	; 0xc2
 8002026:	4a45      	ldr	r2, [pc, #276]	; (800213c <main+0x3a8>)
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	4413      	add	r3, r2
 800202c:	edd3 7a00 	vldr	s15, [r3]
 8002030:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 8002034:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002038:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800203c:	d507      	bpl.n	800204e <main+0x2ba>
						bassMax = FFT_OutputBuffer[i];
 800203e:	f8b7 30c2 	ldrh.w	r3, [r7, #194]	; 0xc2
 8002042:	4a3e      	ldr	r2, [pc, #248]	; (800213c <main+0x3a8>)
 8002044:	009b      	lsls	r3, r3, #2
 8002046:	4413      	add	r3, r2
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
			for (uint16_t i = 1; i < FFT_NUM_SAMPLES; i++)
 800204e:	f8b7 30c2 	ldrh.w	r3, [r7, #194]	; 0xc2
 8002052:	3301      	adds	r3, #1
 8002054:	f8a7 30c2 	strh.w	r3, [r7, #194]	; 0xc2
 8002058:	f8b7 30c2 	ldrh.w	r3, [r7, #194]	; 0xc2
 800205c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002060:	d3bf      	bcc.n	8001fe2 <main+0x24e>
				}
			}

			bassAvg -= bassHistory[bassHistoryCounter];
 8002062:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800206c:	443b      	add	r3, r7
 800206e:	3bfc      	subs	r3, #252	; 0xfc
 8002070:	edd3 7a00 	vldr	s15, [r3]
 8002074:	ed97 7a35 	vldr	s14, [r7, #212]	; 0xd4
 8002078:	ee77 7a67 	vsub.f32	s15, s14, s15
 800207c:	edc7 7a35 	vstr	s15, [r7, #212]	; 0xd4
			bassAvg += bassMax;
 8002080:	ed97 7a35 	vldr	s14, [r7, #212]	; 0xd4
 8002084:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8002088:	ee77 7a27 	vadd.f32	s15, s14, s15
 800208c:	edc7 7a35 	vstr	s15, [r7, #212]	; 0xd4
			bassHistory[bassHistoryCounter] = bassMax;
 8002090:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800209a:	443b      	add	r3, r7
 800209c:	3bfc      	subs	r3, #252	; 0xfc
 800209e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80020a2:	601a      	str	r2, [r3, #0]
			bassHistoryCounter = (bassHistoryCounter + 1) % 7;
 80020a4:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 80020a8:	1c5a      	adds	r2, r3, #1
 80020aa:	4b29      	ldr	r3, [pc, #164]	; (8002150 <main+0x3bc>)
 80020ac:	fb83 1302 	smull	r1, r3, r3, r2
 80020b0:	4413      	add	r3, r2
 80020b2:	1099      	asrs	r1, r3, #2
 80020b4:	17d3      	asrs	r3, r2, #31
 80020b6:	1ac9      	subs	r1, r1, r3
 80020b8:	460b      	mov	r3, r1
 80020ba:	00db      	lsls	r3, r3, #3
 80020bc:	1a5b      	subs	r3, r3, r1
 80020be:	1ad1      	subs	r1, r2, r3
 80020c0:	460b      	mov	r3, r1
 80020c2:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3

			uint16_t bassVal = 0;
 80020c6:	2300      	movs	r3, #0
 80020c8:	f8a7 30c0 	strh.w	r3, [r7, #192]	; 0xc0

			if (bassAvg > 1500.0f)
 80020cc:	edd7 7a35 	vldr	s15, [r7, #212]	; 0xd4
 80020d0:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8002154 <main+0x3c0>
 80020d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020dc:	dd51      	ble.n	8002182 <main+0x3ee>
			{
				if (bassAvg > 3000.0f)
 80020de:	edd7 7a35 	vldr	s15, [r7, #212]	; 0xd4
 80020e2:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8002158 <main+0x3c4>
 80020e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020ee:	dd37      	ble.n	8002160 <main+0x3cc>
					bassVal = LEDSTRIPS_MAX_PWMDC;
 80020f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020f4:	f8a7 30c0 	strh.w	r3, [r7, #192]	; 0xc0
 80020f8:	e046      	b.n	8002188 <main+0x3f4>
 80020fa:	bf00      	nop
 80020fc:	20010438 	.word	0x20010438
 8002100:	20000424 	.word	0x20000424
 8002104:	20010638 	.word	0x20010638
 8002108:	2001063a 	.word	0x2001063a
 800210c:	20010639 	.word	0x20010639
 8002110:	2001063c 	.word	0x2001063c
 8002114:	20010720 	.word	0x20010720
 8002118:	20008428 	.word	0x20008428
 800211c:	2001042c 	.word	0x2001042c
 8002120:	20010430 	.word	0x20010430
 8002124:	20010436 	.word	0x20010436
 8002128:	20010434 	.word	0x20010434
 800212c:	20000428 	.word	0x20000428
 8002130:	20000328 	.word	0x20000328
 8002134:	20000000 	.word	0x20000000
 8002138:	20000004 	.word	0x20000004
 800213c:	20004428 	.word	0x20004428
 8002140:	08012e08 	.word	0x08012e08
 8002144:	08012e24 	.word	0x08012e24
 8002148:	08012e28 	.word	0x08012e28
 800214c:	20010768 	.word	0x20010768
 8002150:	92492493 	.word	0x92492493
 8002154:	44bb8000 	.word	0x44bb8000
 8002158:	453b8000 	.word	0x453b8000
 800215c:	44fa0000 	.word	0x44fa0000
				else
					bassVal = (uint16_t) ((bassAvg - 2000.0f) * 0.75f);
 8002160:	edd7 7a35 	vldr	s15, [r7, #212]	; 0xd4
 8002164:	ed1f 7a03 	vldr	s14, [pc, #-12]	; 800215c <main+0x3c8>
 8002168:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800216c:	eeb6 7a08 	vmov.f32	s14, #104	; 0x3f400000  0.750
 8002170:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002174:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002178:	ee17 3a90 	vmov	r3, s15
 800217c:	f8a7 30c0 	strh.w	r3, [r7, #192]	; 0xc0
 8002180:	e002      	b.n	8002188 <main+0x3f4>
			}
			else
				bassVal = LEDSTRIPS_MIN_PWMDC;
 8002182:	2300      	movs	r3, #0
 8002184:	f8a7 30c0 	strh.w	r3, [r7, #192]	; 0xc0

			LEDStrips_UpdateFFT(bassVal, 0, 500);
 8002188:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
 800218c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002190:	2100      	movs	r1, #0
 8002192:	4618      	mov	r0, r3
 8002194:	f7ff fb0c 	bl	80017b0 <LEDStrips_UpdateFFT>

			fftTransformsCompleted++;
 8002198:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800219c:	3301      	adds	r3, #1
 800219e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
		}

		// check if afk
		if (LCD_TimeoutCounter >= LCD_TIMEOUT && lcd.lcd_backlight == LCD_BACKLIGHT_ON)
 80021a2:	4b6d      	ldr	r3, [pc, #436]	; (8002358 <main+0x5c4>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d908      	bls.n	80021c0 <main+0x42c>
 80021ae:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d104      	bne.n	80021c0 <main+0x42c>
		{
			LCD_BacklightOff(&lcd);
 80021b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80021ba:	4618      	mov	r0, r3
 80021bc:	f001 faf3 	bl	80037a6 <LCD_BacklightOff>
		}

		// Handle Button events
		if (ButtonChange_Flag)
 80021c0:	4b66      	ldr	r3, [pc, #408]	; (800235c <main+0x5c8>)
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d063      	beq.n	8002292 <main+0x4fe>
		{
			// if lcd is on, use btn events as menu input
			// else, wake up lcd
			if (lcd.lcd_backlight == LCD_BACKLIGHT_ON)
 80021ca:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d14c      	bne.n	800226c <main+0x4d8>
			{
				if (ButtonStatus_Flag & (1 << BTN_A_FLAG))
 80021d2:	4b63      	ldr	r3, [pc, #396]	; (8002360 <main+0x5cc>)
 80021d4:	781b      	ldrb	r3, [r3, #0]
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	f003 0301 	and.w	r3, r3, #1
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d00d      	beq.n	80021fc <main+0x468>
				{
					ButtonStatus_Flag &= ~(1 << BTN_A_FLAG);
 80021e0:	4b5f      	ldr	r3, [pc, #380]	; (8002360 <main+0x5cc>)
 80021e2:	781b      	ldrb	r3, [r3, #0]
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	f023 0301 	bic.w	r3, r3, #1
 80021ea:	b2da      	uxtb	r2, r3
 80021ec:	4b5c      	ldr	r3, [pc, #368]	; (8002360 <main+0x5cc>)
 80021ee:	701a      	strb	r2, [r3, #0]

					// btn back
					LEDMenu_UpdateState(LEDMENU_BTN_BACK, &lcd);
 80021f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80021f4:	4619      	mov	r1, r3
 80021f6:	2000      	movs	r0, #0
 80021f8:	f7fe fefe 	bl	8000ff8 <LEDMenu_UpdateState>
				}

				if (ButtonStatus_Flag & (1 << BTN_B_FLAG))
 80021fc:	4b58      	ldr	r3, [pc, #352]	; (8002360 <main+0x5cc>)
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	b2db      	uxtb	r3, r3
 8002202:	f003 0302 	and.w	r3, r3, #2
 8002206:	2b00      	cmp	r3, #0
 8002208:	d00d      	beq.n	8002226 <main+0x492>
				{
					ButtonStatus_Flag &= ~(1 << BTN_B_FLAG);
 800220a:	4b55      	ldr	r3, [pc, #340]	; (8002360 <main+0x5cc>)
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	b2db      	uxtb	r3, r3
 8002210:	f023 0302 	bic.w	r3, r3, #2
 8002214:	b2da      	uxtb	r2, r3
 8002216:	4b52      	ldr	r3, [pc, #328]	; (8002360 <main+0x5cc>)
 8002218:	701a      	strb	r2, [r3, #0]

					// btn select
					LEDMenu_UpdateState(LEDMENU_BTN_SELECT, &lcd);
 800221a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800221e:	4619      	mov	r1, r3
 8002220:	2001      	movs	r0, #1
 8002222:	f7fe fee9 	bl	8000ff8 <LEDMenu_UpdateState>
				}

				if (ButtonStatus_Flag & (1 << BTN_C_FLAG))
 8002226:	4b4e      	ldr	r3, [pc, #312]	; (8002360 <main+0x5cc>)
 8002228:	781b      	ldrb	r3, [r3, #0]
 800222a:	b2db      	uxtb	r3, r3
 800222c:	f003 0304 	and.w	r3, r3, #4
 8002230:	2b00      	cmp	r3, #0
 8002232:	d00d      	beq.n	8002250 <main+0x4bc>
				{
					ButtonStatus_Flag &= ~(1 << BTN_C_FLAG);
 8002234:	4b4a      	ldr	r3, [pc, #296]	; (8002360 <main+0x5cc>)
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	b2db      	uxtb	r3, r3
 800223a:	f023 0304 	bic.w	r3, r3, #4
 800223e:	b2da      	uxtb	r2, r3
 8002240:	4b47      	ldr	r3, [pc, #284]	; (8002360 <main+0x5cc>)
 8002242:	701a      	strb	r2, [r3, #0]

					// btn next item
					LEDMenu_UpdateState(LEDMENU_BTN_NEXTITEM, &lcd);
 8002244:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002248:	4619      	mov	r1, r3
 800224a:	2002      	movs	r0, #2
 800224c:	f7fe fed4 	bl	8000ff8 <LEDMenu_UpdateState>
				}

				if (LEDMenu_StatusFlags & LEDMENU_FLAG_STATECHANGE)
 8002250:	4b44      	ldr	r3, [pc, #272]	; (8002364 <main+0x5d0>)
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	f003 0301 	and.w	r3, r3, #1
 8002258:	2b00      	cmp	r3, #0
 800225a:	d00f      	beq.n	800227c <main+0x4e8>
				{
					LEDMenu_StatusFlags &= ~LEDMENU_FLAG_STATECHANGE;
 800225c:	4b41      	ldr	r3, [pc, #260]	; (8002364 <main+0x5d0>)
 800225e:	781b      	ldrb	r3, [r3, #0]
 8002260:	f023 0301 	bic.w	r3, r3, #1
 8002264:	b2da      	uxtb	r2, r3
 8002266:	4b3f      	ldr	r3, [pc, #252]	; (8002364 <main+0x5d0>)
 8002268:	701a      	strb	r2, [r3, #0]
 800226a:	e007      	b.n	800227c <main+0x4e8>
				}
			}
			else
			{
				// backlight is off -> turn it on
				LCD_BacklightOn(&lcd);
 800226c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002270:	4618      	mov	r0, r3
 8002272:	f001 fa86 	bl	8003782 <LCD_BacklightOn>
				ButtonStatus_Flag = 0;
 8002276:	4b3a      	ldr	r3, [pc, #232]	; (8002360 <main+0x5cc>)
 8002278:	2200      	movs	r2, #0
 800227a:	701a      	strb	r2, [r3, #0]
			}

			LCD_TimeoutCounter = 0;
 800227c:	4b36      	ldr	r3, [pc, #216]	; (8002358 <main+0x5c4>)
 800227e:	2200      	movs	r2, #0
 8002280:	601a      	str	r2, [r3, #0]

			ButtonChange_Flag &= ~BTN_EVENT_FLAG;
 8002282:	4b36      	ldr	r3, [pc, #216]	; (800235c <main+0x5c8>)
 8002284:	781b      	ldrb	r3, [r3, #0]
 8002286:	b2db      	uxtb	r3, r3
 8002288:	f023 0301 	bic.w	r3, r3, #1
 800228c:	b2da      	uxtb	r2, r3
 800228e:	4b33      	ldr	r3, [pc, #204]	; (800235c <main+0x5c8>)
 8002290:	701a      	strb	r2, [r3, #0]
		}

		// Debugging
		timerNow = HAL_GetTick();
 8002292:	f001 fb01 	bl	8003898 <HAL_GetTick>
 8002296:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
		if (timerNow - timerLast >= 1000)
 800229a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800229e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80022a2:	1ad3      	subs	r3, r2, r3
 80022a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80022a8:	f4ff ae1d 	bcc.w	8001ee6 <main+0x152>
		{
			if ((ADC_CallbackResultsSkippedCounter - adcCallbackResultsSkippedCounterOld) != 0)
 80022ac:	4b2e      	ldr	r3, [pc, #184]	; (8002368 <main+0x5d4>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d011      	beq.n	80022dc <main+0x548>
			{
				sprintf(USB_TxBuffer, "FFT can't keep up! Skipped %lu ADC reads (%lu total).\r\n", ADC_CallbackResultsSkippedCounter - adcCallbackResultsSkippedCounterOld, ADC_CallbackResultsSkippedCounter);
 80022b8:	4b2b      	ldr	r3, [pc, #172]	; (8002368 <main+0x5d4>)
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80022c0:	1ad2      	subs	r2, r2, r3
 80022c2:	4b29      	ldr	r3, [pc, #164]	; (8002368 <main+0x5d4>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4929      	ldr	r1, [pc, #164]	; (800236c <main+0x5d8>)
 80022c8:	4829      	ldr	r0, [pc, #164]	; (8002370 <main+0x5dc>)
 80022ca:	f00e fa8b 	bl	80107e4 <siprintf>
				USB_PrintDebug(USB_TxBuffer);
 80022ce:	4828      	ldr	r0, [pc, #160]	; (8002370 <main+0x5dc>)
 80022d0:	f7ff fd18 	bl	8001d04 <USB_PrintDebug>

				adcCallbackResultsSkippedCounterOld = ADC_CallbackResultsSkippedCounter;
 80022d4:	4b24      	ldr	r3, [pc, #144]	; (8002368 <main+0x5d4>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
			}

			sprintf(USB_TxBuffer, "1/s: FFT = %lu , ADC = %lu (%u %u), UART = %lu (%lu)\r\n", fftTransformsCompleted - fftTransformsCompletedOld, ADC_CallbackCounter - adcCallbackCounterOld, ADC_ReadMin, ADC_ReadMax, uartTxStarted - uartTxStartedOld, uartTxMissed - uartTxMissedOld);
 80022dc:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 80022e0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80022e4:	1ad0      	subs	r0, r2, r3
 80022e6:	4b23      	ldr	r3, [pc, #140]	; (8002374 <main+0x5e0>)
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80022ee:	1ad4      	subs	r4, r2, r3
 80022f0:	4b21      	ldr	r3, [pc, #132]	; (8002378 <main+0x5e4>)
 80022f2:	881b      	ldrh	r3, [r3, #0]
 80022f4:	b29b      	uxth	r3, r3
 80022f6:	461d      	mov	r5, r3
 80022f8:	4b20      	ldr	r3, [pc, #128]	; (800237c <main+0x5e8>)
 80022fa:	881b      	ldrh	r3, [r3, #0]
 80022fc:	b29b      	uxth	r3, r3
 80022fe:	461e      	mov	r6, r3
 8002300:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8002304:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 800230e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002312:	1a8a      	subs	r2, r1, r2
 8002314:	9203      	str	r2, [sp, #12]
 8002316:	9302      	str	r3, [sp, #8]
 8002318:	9601      	str	r6, [sp, #4]
 800231a:	9500      	str	r5, [sp, #0]
 800231c:	4623      	mov	r3, r4
 800231e:	4602      	mov	r2, r0
 8002320:	4917      	ldr	r1, [pc, #92]	; (8002380 <main+0x5ec>)
 8002322:	4813      	ldr	r0, [pc, #76]	; (8002370 <main+0x5dc>)
 8002324:	f00e fa5e 	bl	80107e4 <siprintf>
			USB_PrintDebug(USB_TxBuffer);
 8002328:	4811      	ldr	r0, [pc, #68]	; (8002370 <main+0x5dc>)
 800232a:	f7ff fceb 	bl	8001d04 <USB_PrintDebug>

			adcCallbackCounterOld = ADC_CallbackCounter;
 800232e:	4b11      	ldr	r3, [pc, #68]	; (8002374 <main+0x5e0>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
			fftTransformsCompletedOld = fftTransformsCompleted;
 8002336:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800233a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
			uartTxStartedOld = uartTxStarted;
 800233e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8002342:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
			uartTxMissedOld = uartTxMissed;
 8002346:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800234a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

			timerLast = timerNow;
 800234e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002352:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
		if (FFT_CallbackFlag != FFT_NODATA)
 8002356:	e5c6      	b.n	8001ee6 <main+0x152>
 8002358:	2001063c 	.word	0x2001063c
 800235c:	20010638 	.word	0x20010638
 8002360:	20010639 	.word	0x20010639
 8002364:	200002f0 	.word	0x200002f0
 8002368:	20010430 	.word	0x20010430
 800236c:	08012e40 	.word	0x08012e40
 8002370:	20010438 	.word	0x20010438
 8002374:	2001042c 	.word	0x2001042c
 8002378:	20010434 	.word	0x20010434
 800237c:	20010436 	.word	0x20010436
 8002380:	08012e78 	.word	0x08012e78

08002384 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b094      	sub	sp, #80	; 0x50
 8002388:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800238a:	f107 0320 	add.w	r3, r7, #32
 800238e:	2230      	movs	r2, #48	; 0x30
 8002390:	2100      	movs	r1, #0
 8002392:	4618      	mov	r0, r3
 8002394:	f00d fdb4 	bl	800ff00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002398:	f107 030c 	add.w	r3, r7, #12
 800239c:	2200      	movs	r2, #0
 800239e:	601a      	str	r2, [r3, #0]
 80023a0:	605a      	str	r2, [r3, #4]
 80023a2:	609a      	str	r2, [r3, #8]
 80023a4:	60da      	str	r2, [r3, #12]
 80023a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80023a8:	2300      	movs	r3, #0
 80023aa:	60bb      	str	r3, [r7, #8]
 80023ac:	4b29      	ldr	r3, [pc, #164]	; (8002454 <SystemClock_Config+0xd0>)
 80023ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b0:	4a28      	ldr	r2, [pc, #160]	; (8002454 <SystemClock_Config+0xd0>)
 80023b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023b6:	6413      	str	r3, [r2, #64]	; 0x40
 80023b8:	4b26      	ldr	r3, [pc, #152]	; (8002454 <SystemClock_Config+0xd0>)
 80023ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023c0:	60bb      	str	r3, [r7, #8]
 80023c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80023c4:	2300      	movs	r3, #0
 80023c6:	607b      	str	r3, [r7, #4]
 80023c8:	4b23      	ldr	r3, [pc, #140]	; (8002458 <SystemClock_Config+0xd4>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80023d0:	4a21      	ldr	r2, [pc, #132]	; (8002458 <SystemClock_Config+0xd4>)
 80023d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023d6:	6013      	str	r3, [r2, #0]
 80023d8:	4b1f      	ldr	r3, [pc, #124]	; (8002458 <SystemClock_Config+0xd4>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80023e0:	607b      	str	r3, [r7, #4]
 80023e2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80023e4:	2301      	movs	r3, #1
 80023e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80023e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80023ec:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80023ee:	2302      	movs	r3, #2
 80023f0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80023f2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80023f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80023f8:	2319      	movs	r3, #25
 80023fa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80023fc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8002400:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002402:	2304      	movs	r3, #4
 8002404:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002406:	2307      	movs	r3, #7
 8002408:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800240a:	f107 0320 	add.w	r3, r7, #32
 800240e:	4618      	mov	r0, r3
 8002410:	f005 ffb6 	bl	8008380 <HAL_RCC_OscConfig>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d001      	beq.n	800241e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800241a:	f000 f9d9 	bl	80027d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800241e:	230f      	movs	r3, #15
 8002420:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002422:	2302      	movs	r3, #2
 8002424:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002426:	2300      	movs	r3, #0
 8002428:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800242a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800242e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002430:	2300      	movs	r3, #0
 8002432:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002434:	f107 030c 	add.w	r3, r7, #12
 8002438:	2102      	movs	r1, #2
 800243a:	4618      	mov	r0, r3
 800243c:	f006 fa18 	bl	8008870 <HAL_RCC_ClockConfig>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d001      	beq.n	800244a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8002446:	f000 f9c3 	bl	80027d0 <Error_Handler>
  }
}
 800244a:	bf00      	nop
 800244c:	3750      	adds	r7, #80	; 0x50
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	40023800 	.word	0x40023800
 8002458:	40007000 	.word	0x40007000

0800245c <IRQ_TIM11>:
/*
 * IRQ for TIM11
 * used for button polling
 */
void IRQ_TIM11()
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b082      	sub	sp, #8
 8002460:	af00      	add	r7, sp, #0
	/*
	 * This IRQ is called every 1ms
	 * Use for counters etc
	 */

	LCD_TimeoutCounter++;
 8002462:	4b6c      	ldr	r3, [pc, #432]	; (8002614 <IRQ_TIM11+0x1b8>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	3301      	adds	r3, #1
 8002468:	4a6a      	ldr	r2, [pc, #424]	; (8002614 <IRQ_TIM11+0x1b8>)
 800246a:	6013      	str	r3, [r2, #0]

	static uint32_t counterButtons = 0;

	counterButtons++;
 800246c:	4b6a      	ldr	r3, [pc, #424]	; (8002618 <IRQ_TIM11+0x1bc>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	3301      	adds	r3, #1
 8002472:	4a69      	ldr	r2, [pc, #420]	; (8002618 <IRQ_TIM11+0x1bc>)
 8002474:	6013      	str	r3, [r2, #0]
	if (counterButtons >= 20)
 8002476:	4b68      	ldr	r3, [pc, #416]	; (8002618 <IRQ_TIM11+0x1bc>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	2b13      	cmp	r3, #19
 800247c:	f240 80c6 	bls.w	800260c <IRQ_TIM11+0x1b0>
	{
		uint8_t ButtonRead_A = HAL_GPIO_ReadPin(BTN_A_GPIO_Port, BTN_A_Pin) == GPIO_PIN_SET ? 1 : 0;
 8002480:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002484:	4865      	ldr	r0, [pc, #404]	; (800261c <IRQ_TIM11+0x1c0>)
 8002486:	f002 fcbb 	bl	8004e00 <HAL_GPIO_ReadPin>
 800248a:	4603      	mov	r3, r0
 800248c:	2b01      	cmp	r3, #1
 800248e:	bf0c      	ite	eq
 8002490:	2301      	moveq	r3, #1
 8002492:	2300      	movne	r3, #0
 8002494:	b2db      	uxtb	r3, r3
 8002496:	71fb      	strb	r3, [r7, #7]
		if (ButtonRead_A == 1 && (ButtonStatus & (1 << BTN_A_FLAG)) == 0)
 8002498:	79fb      	ldrb	r3, [r7, #7]
 800249a:	2b01      	cmp	r3, #1
 800249c:	d10f      	bne.n	80024be <IRQ_TIM11+0x62>
 800249e:	4b60      	ldr	r3, [pc, #384]	; (8002620 <IRQ_TIM11+0x1c4>)
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	b2db      	uxtb	r3, r3
 80024a4:	f003 0301 	and.w	r3, r3, #1
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d108      	bne.n	80024be <IRQ_TIM11+0x62>
		{
			ButtonStatus |= (1 << BTN_A_FLAG);
 80024ac:	4b5c      	ldr	r3, [pc, #368]	; (8002620 <IRQ_TIM11+0x1c4>)
 80024ae:	781b      	ldrb	r3, [r3, #0]
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	f043 0301 	orr.w	r3, r3, #1
 80024b6:	b2da      	uxtb	r2, r3
 80024b8:	4b59      	ldr	r3, [pc, #356]	; (8002620 <IRQ_TIM11+0x1c4>)
 80024ba:	701a      	strb	r2, [r3, #0]
 80024bc:	e021      	b.n	8002502 <IRQ_TIM11+0xa6>
		}
		else if (ButtonRead_A == 0 && (ButtonStatus & (1 << BTN_A_FLAG)) != 0)
 80024be:	79fb      	ldrb	r3, [r7, #7]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d11e      	bne.n	8002502 <IRQ_TIM11+0xa6>
 80024c4:	4b56      	ldr	r3, [pc, #344]	; (8002620 <IRQ_TIM11+0x1c4>)
 80024c6:	781b      	ldrb	r3, [r3, #0]
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	f003 0301 	and.w	r3, r3, #1
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d017      	beq.n	8002502 <IRQ_TIM11+0xa6>
		{
			ButtonStatus &= ~(1 << BTN_A_FLAG);
 80024d2:	4b53      	ldr	r3, [pc, #332]	; (8002620 <IRQ_TIM11+0x1c4>)
 80024d4:	781b      	ldrb	r3, [r3, #0]
 80024d6:	b2db      	uxtb	r3, r3
 80024d8:	f023 0301 	bic.w	r3, r3, #1
 80024dc:	b2da      	uxtb	r2, r3
 80024de:	4b50      	ldr	r3, [pc, #320]	; (8002620 <IRQ_TIM11+0x1c4>)
 80024e0:	701a      	strb	r2, [r3, #0]
			ButtonStatus_Flag |= (1 << BTN_A_FLAG);
 80024e2:	4b50      	ldr	r3, [pc, #320]	; (8002624 <IRQ_TIM11+0x1c8>)
 80024e4:	781b      	ldrb	r3, [r3, #0]
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	f043 0301 	orr.w	r3, r3, #1
 80024ec:	b2da      	uxtb	r2, r3
 80024ee:	4b4d      	ldr	r3, [pc, #308]	; (8002624 <IRQ_TIM11+0x1c8>)
 80024f0:	701a      	strb	r2, [r3, #0]
			ButtonChange_Flag |= BTN_EVENT_FLAG;
 80024f2:	4b4d      	ldr	r3, [pc, #308]	; (8002628 <IRQ_TIM11+0x1cc>)
 80024f4:	781b      	ldrb	r3, [r3, #0]
 80024f6:	b2db      	uxtb	r3, r3
 80024f8:	f043 0301 	orr.w	r3, r3, #1
 80024fc:	b2da      	uxtb	r2, r3
 80024fe:	4b4a      	ldr	r3, [pc, #296]	; (8002628 <IRQ_TIM11+0x1cc>)
 8002500:	701a      	strb	r2, [r3, #0]
		}

		uint8_t ButtonRead_B = HAL_GPIO_ReadPin(BTN_B_GPIO_Port, BTN_B_Pin) == GPIO_PIN_SET ? 1 : 0;
 8002502:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002506:	4845      	ldr	r0, [pc, #276]	; (800261c <IRQ_TIM11+0x1c0>)
 8002508:	f002 fc7a 	bl	8004e00 <HAL_GPIO_ReadPin>
 800250c:	4603      	mov	r3, r0
 800250e:	2b01      	cmp	r3, #1
 8002510:	bf0c      	ite	eq
 8002512:	2301      	moveq	r3, #1
 8002514:	2300      	movne	r3, #0
 8002516:	b2db      	uxtb	r3, r3
 8002518:	71bb      	strb	r3, [r7, #6]
		if (ButtonRead_B == 1 && (ButtonStatus & (1 << BTN_B_FLAG)) == 0)
 800251a:	79bb      	ldrb	r3, [r7, #6]
 800251c:	2b01      	cmp	r3, #1
 800251e:	d10f      	bne.n	8002540 <IRQ_TIM11+0xe4>
 8002520:	4b3f      	ldr	r3, [pc, #252]	; (8002620 <IRQ_TIM11+0x1c4>)
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	b2db      	uxtb	r3, r3
 8002526:	f003 0302 	and.w	r3, r3, #2
 800252a:	2b00      	cmp	r3, #0
 800252c:	d108      	bne.n	8002540 <IRQ_TIM11+0xe4>
		{
			ButtonStatus |= (1 << BTN_B_FLAG);
 800252e:	4b3c      	ldr	r3, [pc, #240]	; (8002620 <IRQ_TIM11+0x1c4>)
 8002530:	781b      	ldrb	r3, [r3, #0]
 8002532:	b2db      	uxtb	r3, r3
 8002534:	f043 0302 	orr.w	r3, r3, #2
 8002538:	b2da      	uxtb	r2, r3
 800253a:	4b39      	ldr	r3, [pc, #228]	; (8002620 <IRQ_TIM11+0x1c4>)
 800253c:	701a      	strb	r2, [r3, #0]
 800253e:	e021      	b.n	8002584 <IRQ_TIM11+0x128>
		}
		else if (ButtonRead_B == 0 && (ButtonStatus & (1 << BTN_B_FLAG)) != 0)
 8002540:	79bb      	ldrb	r3, [r7, #6]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d11e      	bne.n	8002584 <IRQ_TIM11+0x128>
 8002546:	4b36      	ldr	r3, [pc, #216]	; (8002620 <IRQ_TIM11+0x1c4>)
 8002548:	781b      	ldrb	r3, [r3, #0]
 800254a:	b2db      	uxtb	r3, r3
 800254c:	f003 0302 	and.w	r3, r3, #2
 8002550:	2b00      	cmp	r3, #0
 8002552:	d017      	beq.n	8002584 <IRQ_TIM11+0x128>
		{
			ButtonStatus &= ~(1 << BTN_B_FLAG);
 8002554:	4b32      	ldr	r3, [pc, #200]	; (8002620 <IRQ_TIM11+0x1c4>)
 8002556:	781b      	ldrb	r3, [r3, #0]
 8002558:	b2db      	uxtb	r3, r3
 800255a:	f023 0302 	bic.w	r3, r3, #2
 800255e:	b2da      	uxtb	r2, r3
 8002560:	4b2f      	ldr	r3, [pc, #188]	; (8002620 <IRQ_TIM11+0x1c4>)
 8002562:	701a      	strb	r2, [r3, #0]
			ButtonStatus_Flag |= (1 << BTN_B_FLAG);
 8002564:	4b2f      	ldr	r3, [pc, #188]	; (8002624 <IRQ_TIM11+0x1c8>)
 8002566:	781b      	ldrb	r3, [r3, #0]
 8002568:	b2db      	uxtb	r3, r3
 800256a:	f043 0302 	orr.w	r3, r3, #2
 800256e:	b2da      	uxtb	r2, r3
 8002570:	4b2c      	ldr	r3, [pc, #176]	; (8002624 <IRQ_TIM11+0x1c8>)
 8002572:	701a      	strb	r2, [r3, #0]
			ButtonChange_Flag |= BTN_EVENT_FLAG;
 8002574:	4b2c      	ldr	r3, [pc, #176]	; (8002628 <IRQ_TIM11+0x1cc>)
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	b2db      	uxtb	r3, r3
 800257a:	f043 0301 	orr.w	r3, r3, #1
 800257e:	b2da      	uxtb	r2, r3
 8002580:	4b29      	ldr	r3, [pc, #164]	; (8002628 <IRQ_TIM11+0x1cc>)
 8002582:	701a      	strb	r2, [r3, #0]
		}

		uint8_t ButtonRead_C = HAL_GPIO_ReadPin(BTN_C_GPIO_Port, BTN_C_Pin) == GPIO_PIN_SET ? 1 : 0;
 8002584:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002588:	4824      	ldr	r0, [pc, #144]	; (800261c <IRQ_TIM11+0x1c0>)
 800258a:	f002 fc39 	bl	8004e00 <HAL_GPIO_ReadPin>
 800258e:	4603      	mov	r3, r0
 8002590:	2b01      	cmp	r3, #1
 8002592:	bf0c      	ite	eq
 8002594:	2301      	moveq	r3, #1
 8002596:	2300      	movne	r3, #0
 8002598:	b2db      	uxtb	r3, r3
 800259a:	717b      	strb	r3, [r7, #5]
		if (ButtonRead_C == 1 && (ButtonStatus & (1 << BTN_C_FLAG)) == 0)
 800259c:	797b      	ldrb	r3, [r7, #5]
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d10f      	bne.n	80025c2 <IRQ_TIM11+0x166>
 80025a2:	4b1f      	ldr	r3, [pc, #124]	; (8002620 <IRQ_TIM11+0x1c4>)
 80025a4:	781b      	ldrb	r3, [r3, #0]
 80025a6:	b2db      	uxtb	r3, r3
 80025a8:	f003 0304 	and.w	r3, r3, #4
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d108      	bne.n	80025c2 <IRQ_TIM11+0x166>
		{
			ButtonStatus |= (1 << BTN_C_FLAG);
 80025b0:	4b1b      	ldr	r3, [pc, #108]	; (8002620 <IRQ_TIM11+0x1c4>)
 80025b2:	781b      	ldrb	r3, [r3, #0]
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	f043 0304 	orr.w	r3, r3, #4
 80025ba:	b2da      	uxtb	r2, r3
 80025bc:	4b18      	ldr	r3, [pc, #96]	; (8002620 <IRQ_TIM11+0x1c4>)
 80025be:	701a      	strb	r2, [r3, #0]
 80025c0:	e021      	b.n	8002606 <IRQ_TIM11+0x1aa>
		}
		else if (ButtonRead_C == 0 && (ButtonStatus & (1 << BTN_C_FLAG)) != 0)
 80025c2:	797b      	ldrb	r3, [r7, #5]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d11e      	bne.n	8002606 <IRQ_TIM11+0x1aa>
 80025c8:	4b15      	ldr	r3, [pc, #84]	; (8002620 <IRQ_TIM11+0x1c4>)
 80025ca:	781b      	ldrb	r3, [r3, #0]
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	f003 0304 	and.w	r3, r3, #4
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d017      	beq.n	8002606 <IRQ_TIM11+0x1aa>
		{
			ButtonStatus &= ~(1 << BTN_C_FLAG);
 80025d6:	4b12      	ldr	r3, [pc, #72]	; (8002620 <IRQ_TIM11+0x1c4>)
 80025d8:	781b      	ldrb	r3, [r3, #0]
 80025da:	b2db      	uxtb	r3, r3
 80025dc:	f023 0304 	bic.w	r3, r3, #4
 80025e0:	b2da      	uxtb	r2, r3
 80025e2:	4b0f      	ldr	r3, [pc, #60]	; (8002620 <IRQ_TIM11+0x1c4>)
 80025e4:	701a      	strb	r2, [r3, #0]
			ButtonStatus_Flag |= (1 << BTN_C_FLAG);
 80025e6:	4b0f      	ldr	r3, [pc, #60]	; (8002624 <IRQ_TIM11+0x1c8>)
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	b2db      	uxtb	r3, r3
 80025ec:	f043 0304 	orr.w	r3, r3, #4
 80025f0:	b2da      	uxtb	r2, r3
 80025f2:	4b0c      	ldr	r3, [pc, #48]	; (8002624 <IRQ_TIM11+0x1c8>)
 80025f4:	701a      	strb	r2, [r3, #0]
			ButtonChange_Flag |= BTN_EVENT_FLAG;
 80025f6:	4b0c      	ldr	r3, [pc, #48]	; (8002628 <IRQ_TIM11+0x1cc>)
 80025f8:	781b      	ldrb	r3, [r3, #0]
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	f043 0301 	orr.w	r3, r3, #1
 8002600:	b2da      	uxtb	r2, r3
 8002602:	4b09      	ldr	r3, [pc, #36]	; (8002628 <IRQ_TIM11+0x1cc>)
 8002604:	701a      	strb	r2, [r3, #0]
		}

		counterButtons = 0;
 8002606:	4b04      	ldr	r3, [pc, #16]	; (8002618 <IRQ_TIM11+0x1bc>)
 8002608:	2200      	movs	r2, #0
 800260a:	601a      	str	r2, [r3, #0]
	}
}
 800260c:	bf00      	nop
 800260e:	3708      	adds	r7, #8
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}
 8002614:	2001063c 	.word	0x2001063c
 8002618:	20010640 	.word	0x20010640
 800261c:	40020400 	.word	0x40020400
 8002620:	2001063a 	.word	0x2001063a
 8002624:	20010639 	.word	0x20010639
 8002628:	20010638 	.word	0x20010638

0800262c <TransformFFTData>:

// ADC & FFT data interrupts and transformation

static inline void TransformFFTData(uint16_t offset)
{
 800262c:	b480      	push	{r7}
 800262e:	b085      	sub	sp, #20
 8002630:	af00      	add	r7, sp, #0
 8002632:	4603      	mov	r3, r0
 8002634:	80fb      	strh	r3, [r7, #6]
	ADC_ReadMin = 0 - 1;
 8002636:	4b2e      	ldr	r3, [pc, #184]	; (80026f0 <TransformFFTData+0xc4>)
 8002638:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800263c:	801a      	strh	r2, [r3, #0]
	ADC_ReadMax = 0;
 800263e:	4b2d      	ldr	r3, [pc, #180]	; (80026f4 <TransformFFTData+0xc8>)
 8002640:	2200      	movs	r2, #0
 8002642:	801a      	strh	r2, [r3, #0]

	for (uint16_t i = 0; i < FFT_NUM_SAMPLES; i++)
 8002644:	2300      	movs	r3, #0
 8002646:	81fb      	strh	r3, [r7, #14]
 8002648:	e047      	b.n	80026da <TransformFFTData+0xae>
	{
		FFT_InputDoubleBuffer[i + offset] = (float) ADC_ReadBuffer[i + offset] * (2.0f / 4096.0f) - 1.0f;
 800264a:	89fa      	ldrh	r2, [r7, #14]
 800264c:	88fb      	ldrh	r3, [r7, #6]
 800264e:	4413      	add	r3, r2
 8002650:	4a29      	ldr	r2, [pc, #164]	; (80026f8 <TransformFFTData+0xcc>)
 8002652:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002656:	b29b      	uxth	r3, r3
 8002658:	ee07 3a90 	vmov	s15, r3
 800265c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002660:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80026fc <TransformFFTData+0xd0>
 8002664:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002668:	89fa      	ldrh	r2, [r7, #14]
 800266a:	88fb      	ldrh	r3, [r7, #6]
 800266c:	4413      	add	r3, r2
 800266e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002672:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002676:	4a22      	ldr	r2, [pc, #136]	; (8002700 <TransformFFTData+0xd4>)
 8002678:	009b      	lsls	r3, r3, #2
 800267a:	4413      	add	r3, r2
 800267c:	edc3 7a00 	vstr	s15, [r3]

		if (ADC_ReadBuffer[i + offset] < ADC_ReadMin)
 8002680:	89fa      	ldrh	r2, [r7, #14]
 8002682:	88fb      	ldrh	r3, [r7, #6]
 8002684:	4413      	add	r3, r2
 8002686:	4a1c      	ldr	r2, [pc, #112]	; (80026f8 <TransformFFTData+0xcc>)
 8002688:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800268c:	b29a      	uxth	r2, r3
 800268e:	4b18      	ldr	r3, [pc, #96]	; (80026f0 <TransformFFTData+0xc4>)
 8002690:	881b      	ldrh	r3, [r3, #0]
 8002692:	b29b      	uxth	r3, r3
 8002694:	429a      	cmp	r2, r3
 8002696:	d208      	bcs.n	80026aa <TransformFFTData+0x7e>
			ADC_ReadMin = ADC_ReadBuffer[i + offset];
 8002698:	89fa      	ldrh	r2, [r7, #14]
 800269a:	88fb      	ldrh	r3, [r7, #6]
 800269c:	4413      	add	r3, r2
 800269e:	4a16      	ldr	r2, [pc, #88]	; (80026f8 <TransformFFTData+0xcc>)
 80026a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80026a4:	b29a      	uxth	r2, r3
 80026a6:	4b12      	ldr	r3, [pc, #72]	; (80026f0 <TransformFFTData+0xc4>)
 80026a8:	801a      	strh	r2, [r3, #0]
		if (ADC_ReadBuffer[i + offset] > ADC_ReadMax)
 80026aa:	89fa      	ldrh	r2, [r7, #14]
 80026ac:	88fb      	ldrh	r3, [r7, #6]
 80026ae:	4413      	add	r3, r2
 80026b0:	4a11      	ldr	r2, [pc, #68]	; (80026f8 <TransformFFTData+0xcc>)
 80026b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80026b6:	b29a      	uxth	r2, r3
 80026b8:	4b0e      	ldr	r3, [pc, #56]	; (80026f4 <TransformFFTData+0xc8>)
 80026ba:	881b      	ldrh	r3, [r3, #0]
 80026bc:	b29b      	uxth	r3, r3
 80026be:	429a      	cmp	r2, r3
 80026c0:	d908      	bls.n	80026d4 <TransformFFTData+0xa8>
			ADC_ReadMax = ADC_ReadBuffer[i + offset];
 80026c2:	89fa      	ldrh	r2, [r7, #14]
 80026c4:	88fb      	ldrh	r3, [r7, #6]
 80026c6:	4413      	add	r3, r2
 80026c8:	4a0b      	ldr	r2, [pc, #44]	; (80026f8 <TransformFFTData+0xcc>)
 80026ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80026ce:	b29a      	uxth	r2, r3
 80026d0:	4b08      	ldr	r3, [pc, #32]	; (80026f4 <TransformFFTData+0xc8>)
 80026d2:	801a      	strh	r2, [r3, #0]
	for (uint16_t i = 0; i < FFT_NUM_SAMPLES; i++)
 80026d4:	89fb      	ldrh	r3, [r7, #14]
 80026d6:	3301      	adds	r3, #1
 80026d8:	81fb      	strh	r3, [r7, #14]
 80026da:	89fb      	ldrh	r3, [r7, #14]
 80026dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026e0:	d3b3      	bcc.n	800264a <TransformFFTData+0x1e>
	}
}
 80026e2:	bf00      	nop
 80026e4:	bf00      	nop
 80026e6:	3714      	adds	r7, #20
 80026e8:	46bd      	mov	sp, r7
 80026ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ee:	4770      	bx	lr
 80026f0:	20010434 	.word	0x20010434
 80026f4:	20010436 	.word	0x20010436
 80026f8:	20000428 	.word	0x20000428
 80026fc:	3a000000 	.word	0x3a000000
 8002700:	2000842c 	.word	0x2000842c

08002704 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b082      	sub	sp, #8
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
	if (hadc == &hadc1)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	4a0e      	ldr	r2, [pc, #56]	; (8002748 <HAL_ADC_ConvCpltCallback+0x44>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d115      	bne.n	8002740 <HAL_ADC_ConvCpltCallback+0x3c>
	{
		ADC_CallbackCounter++;
 8002714:	4b0d      	ldr	r3, [pc, #52]	; (800274c <HAL_ADC_ConvCpltCallback+0x48>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	3301      	adds	r3, #1
 800271a:	4a0c      	ldr	r2, [pc, #48]	; (800274c <HAL_ADC_ConvCpltCallback+0x48>)
 800271c:	6013      	str	r3, [r2, #0]
		TransformFFTData(FFT_NUM_SAMPLES);
 800271e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002722:	f7ff ff83 	bl	800262c <TransformFFTData>
		if (FFT_CallbackFlag != FFT_NODATA)
 8002726:	4b0a      	ldr	r3, [pc, #40]	; (8002750 <HAL_ADC_ConvCpltCallback+0x4c>)
 8002728:	781b      	ldrb	r3, [r3, #0]
 800272a:	b2db      	uxtb	r3, r3
 800272c:	2b01      	cmp	r3, #1
 800272e:	d004      	beq.n	800273a <HAL_ADC_ConvCpltCallback+0x36>
			ADC_CallbackResultsSkippedCounter++;
 8002730:	4b08      	ldr	r3, [pc, #32]	; (8002754 <HAL_ADC_ConvCpltCallback+0x50>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	3301      	adds	r3, #1
 8002736:	4a07      	ldr	r2, [pc, #28]	; (8002754 <HAL_ADC_ConvCpltCallback+0x50>)
 8002738:	6013      	str	r3, [r2, #0]
		FFT_CallbackFlag = FFT_CALLBACK_FULL;
 800273a:	4b05      	ldr	r3, [pc, #20]	; (8002750 <HAL_ADC_ConvCpltCallback+0x4c>)
 800273c:	2204      	movs	r2, #4
 800273e:	701a      	strb	r2, [r3, #0]
	}
}
 8002740:	bf00      	nop
 8002742:	3708      	adds	r7, #8
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}
 8002748:	20000328 	.word	0x20000328
 800274c:	2001042c 	.word	0x2001042c
 8002750:	20000424 	.word	0x20000424
 8002754:	20010430 	.word	0x20010430

08002758 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b082      	sub	sp, #8
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
	if (hadc == &hadc1)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	4a0e      	ldr	r2, [pc, #56]	; (800279c <HAL_ADC_ConvHalfCpltCallback+0x44>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d114      	bne.n	8002792 <HAL_ADC_ConvHalfCpltCallback+0x3a>
	{
		ADC_CallbackCounter++;
 8002768:	4b0d      	ldr	r3, [pc, #52]	; (80027a0 <HAL_ADC_ConvHalfCpltCallback+0x48>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	3301      	adds	r3, #1
 800276e:	4a0c      	ldr	r2, [pc, #48]	; (80027a0 <HAL_ADC_ConvHalfCpltCallback+0x48>)
 8002770:	6013      	str	r3, [r2, #0]
		TransformFFTData(0);
 8002772:	2000      	movs	r0, #0
 8002774:	f7ff ff5a 	bl	800262c <TransformFFTData>
		if (FFT_CallbackFlag != FFT_NODATA)
 8002778:	4b0a      	ldr	r3, [pc, #40]	; (80027a4 <HAL_ADC_ConvHalfCpltCallback+0x4c>)
 800277a:	781b      	ldrb	r3, [r3, #0]
 800277c:	b2db      	uxtb	r3, r3
 800277e:	2b01      	cmp	r3, #1
 8002780:	d004      	beq.n	800278c <HAL_ADC_ConvHalfCpltCallback+0x34>
			ADC_CallbackResultsSkippedCounter++;
 8002782:	4b09      	ldr	r3, [pc, #36]	; (80027a8 <HAL_ADC_ConvHalfCpltCallback+0x50>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	3301      	adds	r3, #1
 8002788:	4a07      	ldr	r2, [pc, #28]	; (80027a8 <HAL_ADC_ConvHalfCpltCallback+0x50>)
 800278a:	6013      	str	r3, [r2, #0]
		FFT_CallbackFlag = FFT_CALLBACK_HALF;
 800278c:	4b05      	ldr	r3, [pc, #20]	; (80027a4 <HAL_ADC_ConvHalfCpltCallback+0x4c>)
 800278e:	2202      	movs	r2, #2
 8002790:	701a      	strb	r2, [r3, #0]
	}
}
 8002792:	bf00      	nop
 8002794:	3708      	adds	r7, #8
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	20000328 	.word	0x20000328
 80027a0:	2001042c 	.word	0x2001042c
 80027a4:	20000424 	.word	0x20000424
 80027a8:	20010430 	.word	0x20010430

080027ac <Buttons_ResetFlags>:
// IRQ end

// Reset all button flags

void Buttons_ResetFlags()
{
 80027ac:	b480      	push	{r7}
 80027ae:	af00      	add	r7, sp, #0
	ButtonChange_Flag = 0;
 80027b0:	4b05      	ldr	r3, [pc, #20]	; (80027c8 <Buttons_ResetFlags+0x1c>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	701a      	strb	r2, [r3, #0]
	ButtonStatus_Flag = 0;
 80027b6:	4b05      	ldr	r3, [pc, #20]	; (80027cc <Buttons_ResetFlags+0x20>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	701a      	strb	r2, [r3, #0]
}
 80027bc:	bf00      	nop
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr
 80027c6:	bf00      	nop
 80027c8:	20010638 	.word	0x20010638
 80027cc:	20010639 	.word	0x20010639

080027d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80027d0:	b480      	push	{r7}
 80027d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80027d4:	b672      	cpsid	i
}
 80027d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80027d8:	e7fe      	b.n	80027d8 <Error_Handler+0x8>
	...

080027dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027dc:	b480      	push	{r7}
 80027de:	b083      	sub	sp, #12
 80027e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027e2:	2300      	movs	r3, #0
 80027e4:	607b      	str	r3, [r7, #4]
 80027e6:	4b10      	ldr	r3, [pc, #64]	; (8002828 <HAL_MspInit+0x4c>)
 80027e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ea:	4a0f      	ldr	r2, [pc, #60]	; (8002828 <HAL_MspInit+0x4c>)
 80027ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027f0:	6453      	str	r3, [r2, #68]	; 0x44
 80027f2:	4b0d      	ldr	r3, [pc, #52]	; (8002828 <HAL_MspInit+0x4c>)
 80027f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027fa:	607b      	str	r3, [r7, #4]
 80027fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027fe:	2300      	movs	r3, #0
 8002800:	603b      	str	r3, [r7, #0]
 8002802:	4b09      	ldr	r3, [pc, #36]	; (8002828 <HAL_MspInit+0x4c>)
 8002804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002806:	4a08      	ldr	r2, [pc, #32]	; (8002828 <HAL_MspInit+0x4c>)
 8002808:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800280c:	6413      	str	r3, [r2, #64]	; 0x40
 800280e:	4b06      	ldr	r3, [pc, #24]	; (8002828 <HAL_MspInit+0x4c>)
 8002810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002812:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002816:	603b      	str	r3, [r7, #0]
 8002818:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800281a:	bf00      	nop
 800281c:	370c      	adds	r7, #12
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr
 8002826:	bf00      	nop
 8002828:	40023800 	.word	0x40023800

0800282c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800282c:	b480      	push	{r7}
 800282e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002830:	e7fe      	b.n	8002830 <NMI_Handler+0x4>

08002832 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002832:	b480      	push	{r7}
 8002834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002836:	e7fe      	b.n	8002836 <HardFault_Handler+0x4>

08002838 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002838:	b480      	push	{r7}
 800283a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800283c:	e7fe      	b.n	800283c <MemManage_Handler+0x4>

0800283e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800283e:	b480      	push	{r7}
 8002840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002842:	e7fe      	b.n	8002842 <BusFault_Handler+0x4>

08002844 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002844:	b480      	push	{r7}
 8002846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002848:	e7fe      	b.n	8002848 <UsageFault_Handler+0x4>

0800284a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800284a:	b480      	push	{r7}
 800284c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800284e:	bf00      	nop
 8002850:	46bd      	mov	sp, r7
 8002852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002856:	4770      	bx	lr

08002858 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002858:	b480      	push	{r7}
 800285a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800285c:	bf00      	nop
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr

08002866 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002866:	b480      	push	{r7}
 8002868:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800286a:	bf00      	nop
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr

08002874 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002878:	f000 fffa 	bl	8003870 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800287c:	bf00      	nop
 800287e:	bd80      	pop	{r7, pc}

08002880 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

	IRQ_TIM11();
 8002884:	f7ff fdea 	bl	800245c <IRQ_TIM11>

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8002888:	4802      	ldr	r0, [pc, #8]	; (8002894 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 800288a:	f006 fb83 	bl	8008f94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800288e:	bf00      	nop
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	20010720 	.word	0x20010720

08002898 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800289c:	4802      	ldr	r0, [pc, #8]	; (80028a8 <I2C1_EV_IRQHandler+0x10>)
 800289e:	f002 fd23 	bl	80052e8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80028a2:	bf00      	nop
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop
 80028a8:	200003d0 	.word	0x200003d0

080028ac <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80028b0:	4802      	ldr	r0, [pc, #8]	; (80028bc <USART1_IRQHandler+0x10>)
 80028b2:	f007 fa4d 	bl	8009d50 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80028b6:	bf00      	nop
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	bf00      	nop
 80028bc:	20010768 	.word	0x20010768

080028c0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80028c4:	4802      	ldr	r0, [pc, #8]	; (80028d0 <DMA2_Stream0_IRQHandler+0x10>)
 80028c6:	f001 fe9f 	bl	8004608 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80028ca:	bf00      	nop
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	bf00      	nop
 80028d0:	20000370 	.word	0x20000370

080028d4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80028d8:	4802      	ldr	r0, [pc, #8]	; (80028e4 <OTG_FS_IRQHandler+0x10>)
 80028da:	f004 fc23 	bl	8007124 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80028de:	bf00      	nop
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	bf00      	nop
 80028e4:	20011cf0 	.word	0x20011cf0

080028e8 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80028ec:	4802      	ldr	r0, [pc, #8]	; (80028f8 <DMA2_Stream7_IRQHandler+0x10>)
 80028ee:	f001 fe8b 	bl	8004608 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 80028f2:	bf00      	nop
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	200107ac 	.word	0x200107ac

080028fc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80028fc:	b480      	push	{r7}
 80028fe:	af00      	add	r7, sp, #0
	return 1;
 8002900:	2301      	movs	r3, #1
}
 8002902:	4618      	mov	r0, r3
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr

0800290c <_kill>:

int _kill(int pid, int sig)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b082      	sub	sp, #8
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
 8002914:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002916:	f00d fac9 	bl	800feac <__errno>
 800291a:	4603      	mov	r3, r0
 800291c:	2216      	movs	r2, #22
 800291e:	601a      	str	r2, [r3, #0]
	return -1;
 8002920:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002924:	4618      	mov	r0, r3
 8002926:	3708      	adds	r7, #8
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}

0800292c <_exit>:

void _exit (int status)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b082      	sub	sp, #8
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002934:	f04f 31ff 	mov.w	r1, #4294967295
 8002938:	6878      	ldr	r0, [r7, #4]
 800293a:	f7ff ffe7 	bl	800290c <_kill>
	while (1) {}		/* Make sure we hang here */
 800293e:	e7fe      	b.n	800293e <_exit+0x12>

08002940 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b086      	sub	sp, #24
 8002944:	af00      	add	r7, sp, #0
 8002946:	60f8      	str	r0, [r7, #12]
 8002948:	60b9      	str	r1, [r7, #8]
 800294a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800294c:	2300      	movs	r3, #0
 800294e:	617b      	str	r3, [r7, #20]
 8002950:	e00a      	b.n	8002968 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002952:	f3af 8000 	nop.w
 8002956:	4601      	mov	r1, r0
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	1c5a      	adds	r2, r3, #1
 800295c:	60ba      	str	r2, [r7, #8]
 800295e:	b2ca      	uxtb	r2, r1
 8002960:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	3301      	adds	r3, #1
 8002966:	617b      	str	r3, [r7, #20]
 8002968:	697a      	ldr	r2, [r7, #20]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	429a      	cmp	r2, r3
 800296e:	dbf0      	blt.n	8002952 <_read+0x12>
	}

return len;
 8002970:	687b      	ldr	r3, [r7, #4]
}
 8002972:	4618      	mov	r0, r3
 8002974:	3718      	adds	r7, #24
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}

0800297a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800297a:	b580      	push	{r7, lr}
 800297c:	b086      	sub	sp, #24
 800297e:	af00      	add	r7, sp, #0
 8002980:	60f8      	str	r0, [r7, #12]
 8002982:	60b9      	str	r1, [r7, #8]
 8002984:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002986:	2300      	movs	r3, #0
 8002988:	617b      	str	r3, [r7, #20]
 800298a:	e009      	b.n	80029a0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	1c5a      	adds	r2, r3, #1
 8002990:	60ba      	str	r2, [r7, #8]
 8002992:	781b      	ldrb	r3, [r3, #0]
 8002994:	4618      	mov	r0, r3
 8002996:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	3301      	adds	r3, #1
 800299e:	617b      	str	r3, [r7, #20]
 80029a0:	697a      	ldr	r2, [r7, #20]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	429a      	cmp	r2, r3
 80029a6:	dbf1      	blt.n	800298c <_write+0x12>
	}
	return len;
 80029a8:	687b      	ldr	r3, [r7, #4]
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3718      	adds	r7, #24
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}

080029b2 <_close>:

int _close(int file)
{
 80029b2:	b480      	push	{r7}
 80029b4:	b083      	sub	sp, #12
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	6078      	str	r0, [r7, #4]
	return -1;
 80029ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80029be:	4618      	mov	r0, r3
 80029c0:	370c      	adds	r7, #12
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr

080029ca <_fstat>:


int _fstat(int file, struct stat *st)
{
 80029ca:	b480      	push	{r7}
 80029cc:	b083      	sub	sp, #12
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	6078      	str	r0, [r7, #4]
 80029d2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80029da:	605a      	str	r2, [r3, #4]
	return 0;
 80029dc:	2300      	movs	r3, #0
}
 80029de:	4618      	mov	r0, r3
 80029e0:	370c      	adds	r7, #12
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr

080029ea <_isatty>:

int _isatty(int file)
{
 80029ea:	b480      	push	{r7}
 80029ec:	b083      	sub	sp, #12
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	6078      	str	r0, [r7, #4]
	return 1;
 80029f2:	2301      	movs	r3, #1
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	370c      	adds	r7, #12
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr

08002a00 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b085      	sub	sp, #20
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	60f8      	str	r0, [r7, #12]
 8002a08:	60b9      	str	r1, [r7, #8]
 8002a0a:	607a      	str	r2, [r7, #4]
	return 0;
 8002a0c:	2300      	movs	r3, #0
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3714      	adds	r7, #20
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr
	...

08002a1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b086      	sub	sp, #24
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a24:	4a14      	ldr	r2, [pc, #80]	; (8002a78 <_sbrk+0x5c>)
 8002a26:	4b15      	ldr	r3, [pc, #84]	; (8002a7c <_sbrk+0x60>)
 8002a28:	1ad3      	subs	r3, r2, r3
 8002a2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a30:	4b13      	ldr	r3, [pc, #76]	; (8002a80 <_sbrk+0x64>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d102      	bne.n	8002a3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a38:	4b11      	ldr	r3, [pc, #68]	; (8002a80 <_sbrk+0x64>)
 8002a3a:	4a12      	ldr	r2, [pc, #72]	; (8002a84 <_sbrk+0x68>)
 8002a3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a3e:	4b10      	ldr	r3, [pc, #64]	; (8002a80 <_sbrk+0x64>)
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	4413      	add	r3, r2
 8002a46:	693a      	ldr	r2, [r7, #16]
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	d207      	bcs.n	8002a5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a4c:	f00d fa2e 	bl	800feac <__errno>
 8002a50:	4603      	mov	r3, r0
 8002a52:	220c      	movs	r2, #12
 8002a54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a56:	f04f 33ff 	mov.w	r3, #4294967295
 8002a5a:	e009      	b.n	8002a70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a5c:	4b08      	ldr	r3, [pc, #32]	; (8002a80 <_sbrk+0x64>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a62:	4b07      	ldr	r3, [pc, #28]	; (8002a80 <_sbrk+0x64>)
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	4413      	add	r3, r2
 8002a6a:	4a05      	ldr	r2, [pc, #20]	; (8002a80 <_sbrk+0x64>)
 8002a6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	3718      	adds	r7, #24
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}
 8002a78:	20018000 	.word	0x20018000
 8002a7c:	00000400 	.word	0x00000400
 8002a80:	20010644 	.word	0x20010644
 8002a84:	20012430 	.word	0x20012430

08002a88 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a8c:	4b06      	ldr	r3, [pc, #24]	; (8002aa8 <SystemInit+0x20>)
 8002a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a92:	4a05      	ldr	r2, [pc, #20]	; (8002aa8 <SystemInit+0x20>)
 8002a94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a9c:	bf00      	nop
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr
 8002aa6:	bf00      	nop
 8002aa8:	e000ed00 	.word	0xe000ed00

08002aac <MX_TIM2_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim11;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b08e      	sub	sp, #56	; 0x38
 8002ab0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ab2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	601a      	str	r2, [r3, #0]
 8002aba:	605a      	str	r2, [r3, #4]
 8002abc:	609a      	str	r2, [r3, #8]
 8002abe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ac0:	f107 0320 	add.w	r3, r7, #32
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	601a      	str	r2, [r3, #0]
 8002ac8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002aca:	1d3b      	adds	r3, r7, #4
 8002acc:	2200      	movs	r2, #0
 8002ace:	601a      	str	r2, [r3, #0]
 8002ad0:	605a      	str	r2, [r3, #4]
 8002ad2:	609a      	str	r2, [r3, #8]
 8002ad4:	60da      	str	r2, [r3, #12]
 8002ad6:	611a      	str	r2, [r3, #16]
 8002ad8:	615a      	str	r2, [r3, #20]
 8002ada:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002adc:	4b38      	ldr	r3, [pc, #224]	; (8002bc0 <MX_TIM2_Init+0x114>)
 8002ade:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002ae2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84 - 1;
 8002ae4:	4b36      	ldr	r3, [pc, #216]	; (8002bc0 <MX_TIM2_Init+0x114>)
 8002ae6:	2253      	movs	r2, #83	; 0x53
 8002ae8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002aea:	4b35      	ldr	r3, [pc, #212]	; (8002bc0 <MX_TIM2_Init+0x114>)
 8002aec:	2200      	movs	r2, #0
 8002aee:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000 - 1;
 8002af0:	4b33      	ldr	r3, [pc, #204]	; (8002bc0 <MX_TIM2_Init+0x114>)
 8002af2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002af6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002af8:	4b31      	ldr	r3, [pc, #196]	; (8002bc0 <MX_TIM2_Init+0x114>)
 8002afa:	2200      	movs	r2, #0
 8002afc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002afe:	4b30      	ldr	r3, [pc, #192]	; (8002bc0 <MX_TIM2_Init+0x114>)
 8002b00:	2200      	movs	r2, #0
 8002b02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002b04:	482e      	ldr	r0, [pc, #184]	; (8002bc0 <MX_TIM2_Init+0x114>)
 8002b06:	f006 f893 	bl	8008c30 <HAL_TIM_Base_Init>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d001      	beq.n	8002b14 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8002b10:	f7ff fe5e 	bl	80027d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b18:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002b1a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002b1e:	4619      	mov	r1, r3
 8002b20:	4827      	ldr	r0, [pc, #156]	; (8002bc0 <MX_TIM2_Init+0x114>)
 8002b22:	f006 fc01 	bl	8009328 <HAL_TIM_ConfigClockSource>
 8002b26:	4603      	mov	r3, r0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d001      	beq.n	8002b30 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8002b2c:	f7ff fe50 	bl	80027d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002b30:	4823      	ldr	r0, [pc, #140]	; (8002bc0 <MX_TIM2_Init+0x114>)
 8002b32:	f006 f92f 	bl	8008d94 <HAL_TIM_PWM_Init>
 8002b36:	4603      	mov	r3, r0
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d001      	beq.n	8002b40 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8002b3c:	f7ff fe48 	bl	80027d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b40:	2300      	movs	r3, #0
 8002b42:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b44:	2300      	movs	r3, #0
 8002b46:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002b48:	f107 0320 	add.w	r3, r7, #32
 8002b4c:	4619      	mov	r1, r3
 8002b4e:	481c      	ldr	r0, [pc, #112]	; (8002bc0 <MX_TIM2_Init+0x114>)
 8002b50:	f006 ffb0 	bl	8009ab4 <HAL_TIMEx_MasterConfigSynchronization>
 8002b54:	4603      	mov	r3, r0
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d001      	beq.n	8002b5e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8002b5a:	f7ff fe39 	bl	80027d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002b5e:	2360      	movs	r3, #96	; 0x60
 8002b60:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002b62:	2300      	movs	r3, #0
 8002b64:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002b66:	2300      	movs	r3, #0
 8002b68:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002b6e:	1d3b      	adds	r3, r7, #4
 8002b70:	2200      	movs	r2, #0
 8002b72:	4619      	mov	r1, r3
 8002b74:	4812      	ldr	r0, [pc, #72]	; (8002bc0 <MX_TIM2_Init+0x114>)
 8002b76:	f006 fb15 	bl	80091a4 <HAL_TIM_PWM_ConfigChannel>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d001      	beq.n	8002b84 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8002b80:	f7ff fe26 	bl	80027d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002b84:	1d3b      	adds	r3, r7, #4
 8002b86:	2204      	movs	r2, #4
 8002b88:	4619      	mov	r1, r3
 8002b8a:	480d      	ldr	r0, [pc, #52]	; (8002bc0 <MX_TIM2_Init+0x114>)
 8002b8c:	f006 fb0a 	bl	80091a4 <HAL_TIM_PWM_ConfigChannel>
 8002b90:	4603      	mov	r3, r0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d001      	beq.n	8002b9a <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8002b96:	f7ff fe1b 	bl	80027d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002b9a:	1d3b      	adds	r3, r7, #4
 8002b9c:	2208      	movs	r2, #8
 8002b9e:	4619      	mov	r1, r3
 8002ba0:	4807      	ldr	r0, [pc, #28]	; (8002bc0 <MX_TIM2_Init+0x114>)
 8002ba2:	f006 faff 	bl	80091a4 <HAL_TIM_PWM_ConfigChannel>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d001      	beq.n	8002bb0 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 8002bac:	f7ff fe10 	bl	80027d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002bb0:	4803      	ldr	r0, [pc, #12]	; (8002bc0 <MX_TIM2_Init+0x114>)
 8002bb2:	f000 f99b 	bl	8002eec <HAL_TIM_MspPostInit>

}
 8002bb6:	bf00      	nop
 8002bb8:	3738      	adds	r7, #56	; 0x38
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	20010648 	.word	0x20010648

08002bc4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b08e      	sub	sp, #56	; 0x38
 8002bc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002bca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002bce:	2200      	movs	r2, #0
 8002bd0:	601a      	str	r2, [r3, #0]
 8002bd2:	605a      	str	r2, [r3, #4]
 8002bd4:	609a      	str	r2, [r3, #8]
 8002bd6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002bd8:	f107 0320 	add.w	r3, r7, #32
 8002bdc:	2200      	movs	r2, #0
 8002bde:	601a      	str	r2, [r3, #0]
 8002be0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002be2:	1d3b      	adds	r3, r7, #4
 8002be4:	2200      	movs	r2, #0
 8002be6:	601a      	str	r2, [r3, #0]
 8002be8:	605a      	str	r2, [r3, #4]
 8002bea:	609a      	str	r2, [r3, #8]
 8002bec:	60da      	str	r2, [r3, #12]
 8002bee:	611a      	str	r2, [r3, #16]
 8002bf0:	615a      	str	r2, [r3, #20]
 8002bf2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002bf4:	4b3d      	ldr	r3, [pc, #244]	; (8002cec <MX_TIM3_Init+0x128>)
 8002bf6:	4a3e      	ldr	r2, [pc, #248]	; (8002cf0 <MX_TIM3_Init+0x12c>)
 8002bf8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84 - 1;
 8002bfa:	4b3c      	ldr	r3, [pc, #240]	; (8002cec <MX_TIM3_Init+0x128>)
 8002bfc:	2253      	movs	r2, #83	; 0x53
 8002bfe:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c00:	4b3a      	ldr	r3, [pc, #232]	; (8002cec <MX_TIM3_Init+0x128>)
 8002c02:	2200      	movs	r2, #0
 8002c04:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000 - 1;
 8002c06:	4b39      	ldr	r3, [pc, #228]	; (8002cec <MX_TIM3_Init+0x128>)
 8002c08:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002c0c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c0e:	4b37      	ldr	r3, [pc, #220]	; (8002cec <MX_TIM3_Init+0x128>)
 8002c10:	2200      	movs	r2, #0
 8002c12:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c14:	4b35      	ldr	r3, [pc, #212]	; (8002cec <MX_TIM3_Init+0x128>)
 8002c16:	2200      	movs	r2, #0
 8002c18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002c1a:	4834      	ldr	r0, [pc, #208]	; (8002cec <MX_TIM3_Init+0x128>)
 8002c1c:	f006 f808 	bl	8008c30 <HAL_TIM_Base_Init>
 8002c20:	4603      	mov	r3, r0
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d001      	beq.n	8002c2a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8002c26:	f7ff fdd3 	bl	80027d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c2e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002c30:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002c34:	4619      	mov	r1, r3
 8002c36:	482d      	ldr	r0, [pc, #180]	; (8002cec <MX_TIM3_Init+0x128>)
 8002c38:	f006 fb76 	bl	8009328 <HAL_TIM_ConfigClockSource>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d001      	beq.n	8002c46 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8002c42:	f7ff fdc5 	bl	80027d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002c46:	4829      	ldr	r0, [pc, #164]	; (8002cec <MX_TIM3_Init+0x128>)
 8002c48:	f006 f8a4 	bl	8008d94 <HAL_TIM_PWM_Init>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d001      	beq.n	8002c56 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8002c52:	f7ff fdbd 	bl	80027d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c56:	2300      	movs	r3, #0
 8002c58:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002c5e:	f107 0320 	add.w	r3, r7, #32
 8002c62:	4619      	mov	r1, r3
 8002c64:	4821      	ldr	r0, [pc, #132]	; (8002cec <MX_TIM3_Init+0x128>)
 8002c66:	f006 ff25 	bl	8009ab4 <HAL_TIMEx_MasterConfigSynchronization>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d001      	beq.n	8002c74 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002c70:	f7ff fdae 	bl	80027d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002c74:	2360      	movs	r3, #96	; 0x60
 8002c76:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002c80:	2300      	movs	r3, #0
 8002c82:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002c84:	1d3b      	adds	r3, r7, #4
 8002c86:	2200      	movs	r2, #0
 8002c88:	4619      	mov	r1, r3
 8002c8a:	4818      	ldr	r0, [pc, #96]	; (8002cec <MX_TIM3_Init+0x128>)
 8002c8c:	f006 fa8a 	bl	80091a4 <HAL_TIM_PWM_ConfigChannel>
 8002c90:	4603      	mov	r3, r0
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d001      	beq.n	8002c9a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8002c96:	f7ff fd9b 	bl	80027d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002c9a:	1d3b      	adds	r3, r7, #4
 8002c9c:	2204      	movs	r2, #4
 8002c9e:	4619      	mov	r1, r3
 8002ca0:	4812      	ldr	r0, [pc, #72]	; (8002cec <MX_TIM3_Init+0x128>)
 8002ca2:	f006 fa7f 	bl	80091a4 <HAL_TIM_PWM_ConfigChannel>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d001      	beq.n	8002cb0 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8002cac:	f7ff fd90 	bl	80027d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002cb0:	1d3b      	adds	r3, r7, #4
 8002cb2:	2208      	movs	r2, #8
 8002cb4:	4619      	mov	r1, r3
 8002cb6:	480d      	ldr	r0, [pc, #52]	; (8002cec <MX_TIM3_Init+0x128>)
 8002cb8:	f006 fa74 	bl	80091a4 <HAL_TIM_PWM_ConfigChannel>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d001      	beq.n	8002cc6 <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 8002cc2:	f7ff fd85 	bl	80027d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002cc6:	1d3b      	adds	r3, r7, #4
 8002cc8:	220c      	movs	r2, #12
 8002cca:	4619      	mov	r1, r3
 8002ccc:	4807      	ldr	r0, [pc, #28]	; (8002cec <MX_TIM3_Init+0x128>)
 8002cce:	f006 fa69 	bl	80091a4 <HAL_TIM_PWM_ConfigChannel>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d001      	beq.n	8002cdc <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 8002cd8:	f7ff fd7a 	bl	80027d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002cdc:	4803      	ldr	r0, [pc, #12]	; (8002cec <MX_TIM3_Init+0x128>)
 8002cde:	f000 f905 	bl	8002eec <HAL_TIM_MspPostInit>

}
 8002ce2:	bf00      	nop
 8002ce4:	3738      	adds	r7, #56	; 0x38
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop
 8002cec:	20010690 	.word	0x20010690
 8002cf0:	40000400 	.word	0x40000400

08002cf4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b08a      	sub	sp, #40	; 0x28
 8002cf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002cfa:	f107 0320 	add.w	r3, r7, #32
 8002cfe:	2200      	movs	r2, #0
 8002d00:	601a      	str	r2, [r3, #0]
 8002d02:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002d04:	1d3b      	adds	r3, r7, #4
 8002d06:	2200      	movs	r2, #0
 8002d08:	601a      	str	r2, [r3, #0]
 8002d0a:	605a      	str	r2, [r3, #4]
 8002d0c:	609a      	str	r2, [r3, #8]
 8002d0e:	60da      	str	r2, [r3, #12]
 8002d10:	611a      	str	r2, [r3, #16]
 8002d12:	615a      	str	r2, [r3, #20]
 8002d14:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002d16:	4b27      	ldr	r3, [pc, #156]	; (8002db4 <MX_TIM4_Init+0xc0>)
 8002d18:	4a27      	ldr	r2, [pc, #156]	; (8002db8 <MX_TIM4_Init+0xc4>)
 8002d1a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 84 - 1;
 8002d1c:	4b25      	ldr	r3, [pc, #148]	; (8002db4 <MX_TIM4_Init+0xc0>)
 8002d1e:	2253      	movs	r2, #83	; 0x53
 8002d20:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d22:	4b24      	ldr	r3, [pc, #144]	; (8002db4 <MX_TIM4_Init+0xc0>)
 8002d24:	2200      	movs	r2, #0
 8002d26:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000 - 1;
 8002d28:	4b22      	ldr	r3, [pc, #136]	; (8002db4 <MX_TIM4_Init+0xc0>)
 8002d2a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002d2e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d30:	4b20      	ldr	r3, [pc, #128]	; (8002db4 <MX_TIM4_Init+0xc0>)
 8002d32:	2200      	movs	r2, #0
 8002d34:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d36:	4b1f      	ldr	r3, [pc, #124]	; (8002db4 <MX_TIM4_Init+0xc0>)
 8002d38:	2200      	movs	r2, #0
 8002d3a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002d3c:	481d      	ldr	r0, [pc, #116]	; (8002db4 <MX_TIM4_Init+0xc0>)
 8002d3e:	f006 f829 	bl	8008d94 <HAL_TIM_PWM_Init>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d001      	beq.n	8002d4c <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8002d48:	f7ff fd42 	bl	80027d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d50:	2300      	movs	r3, #0
 8002d52:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002d54:	f107 0320 	add.w	r3, r7, #32
 8002d58:	4619      	mov	r1, r3
 8002d5a:	4816      	ldr	r0, [pc, #88]	; (8002db4 <MX_TIM4_Init+0xc0>)
 8002d5c:	f006 feaa 	bl	8009ab4 <HAL_TIMEx_MasterConfigSynchronization>
 8002d60:	4603      	mov	r3, r0
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d001      	beq.n	8002d6a <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8002d66:	f7ff fd33 	bl	80027d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002d6a:	2360      	movs	r3, #96	; 0x60
 8002d6c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002d72:	2300      	movs	r3, #0
 8002d74:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002d76:	2300      	movs	r3, #0
 8002d78:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002d7a:	1d3b      	adds	r3, r7, #4
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	4619      	mov	r1, r3
 8002d80:	480c      	ldr	r0, [pc, #48]	; (8002db4 <MX_TIM4_Init+0xc0>)
 8002d82:	f006 fa0f 	bl	80091a4 <HAL_TIM_PWM_ConfigChannel>
 8002d86:	4603      	mov	r3, r0
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d001      	beq.n	8002d90 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8002d8c:	f7ff fd20 	bl	80027d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002d90:	1d3b      	adds	r3, r7, #4
 8002d92:	2204      	movs	r2, #4
 8002d94:	4619      	mov	r1, r3
 8002d96:	4807      	ldr	r0, [pc, #28]	; (8002db4 <MX_TIM4_Init+0xc0>)
 8002d98:	f006 fa04 	bl	80091a4 <HAL_TIM_PWM_ConfigChannel>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d001      	beq.n	8002da6 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8002da2:	f7ff fd15 	bl	80027d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002da6:	4803      	ldr	r0, [pc, #12]	; (8002db4 <MX_TIM4_Init+0xc0>)
 8002da8:	f000 f8a0 	bl	8002eec <HAL_TIM_MspPostInit>

}
 8002dac:	bf00      	nop
 8002dae:	3728      	adds	r7, #40	; 0x28
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}
 8002db4:	200106d8 	.word	0x200106d8
 8002db8:	40000800 	.word	0x40000800

08002dbc <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8002dc0:	4b0e      	ldr	r3, [pc, #56]	; (8002dfc <MX_TIM11_Init+0x40>)
 8002dc2:	4a0f      	ldr	r2, [pc, #60]	; (8002e00 <MX_TIM11_Init+0x44>)
 8002dc4:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 840-1;
 8002dc6:	4b0d      	ldr	r3, [pc, #52]	; (8002dfc <MX_TIM11_Init+0x40>)
 8002dc8:	f240 3247 	movw	r2, #839	; 0x347
 8002dcc:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002dce:	4b0b      	ldr	r3, [pc, #44]	; (8002dfc <MX_TIM11_Init+0x40>)
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 100-1;
 8002dd4:	4b09      	ldr	r3, [pc, #36]	; (8002dfc <MX_TIM11_Init+0x40>)
 8002dd6:	2263      	movs	r2, #99	; 0x63
 8002dd8:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002dda:	4b08      	ldr	r3, [pc, #32]	; (8002dfc <MX_TIM11_Init+0x40>)
 8002ddc:	2200      	movs	r2, #0
 8002dde:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002de0:	4b06      	ldr	r3, [pc, #24]	; (8002dfc <MX_TIM11_Init+0x40>)
 8002de2:	2200      	movs	r2, #0
 8002de4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8002de6:	4805      	ldr	r0, [pc, #20]	; (8002dfc <MX_TIM11_Init+0x40>)
 8002de8:	f005 ff22 	bl	8008c30 <HAL_TIM_Base_Init>
 8002dec:	4603      	mov	r3, r0
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d001      	beq.n	8002df6 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8002df2:	f7ff fced 	bl	80027d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8002df6:	bf00      	nop
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	20010720 	.word	0x20010720
 8002e00:	40014800 	.word	0x40014800

08002e04 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b086      	sub	sp, #24
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e14:	d10e      	bne.n	8002e34 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002e16:	2300      	movs	r3, #0
 8002e18:	617b      	str	r3, [r7, #20]
 8002e1a:	4b20      	ldr	r3, [pc, #128]	; (8002e9c <HAL_TIM_Base_MspInit+0x98>)
 8002e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1e:	4a1f      	ldr	r2, [pc, #124]	; (8002e9c <HAL_TIM_Base_MspInit+0x98>)
 8002e20:	f043 0301 	orr.w	r3, r3, #1
 8002e24:	6413      	str	r3, [r2, #64]	; 0x40
 8002e26:	4b1d      	ldr	r3, [pc, #116]	; (8002e9c <HAL_TIM_Base_MspInit+0x98>)
 8002e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2a:	f003 0301 	and.w	r3, r3, #1
 8002e2e:	617b      	str	r3, [r7, #20]
 8002e30:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8002e32:	e02e      	b.n	8002e92 <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM3)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a19      	ldr	r2, [pc, #100]	; (8002ea0 <HAL_TIM_Base_MspInit+0x9c>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d10e      	bne.n	8002e5c <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002e3e:	2300      	movs	r3, #0
 8002e40:	613b      	str	r3, [r7, #16]
 8002e42:	4b16      	ldr	r3, [pc, #88]	; (8002e9c <HAL_TIM_Base_MspInit+0x98>)
 8002e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e46:	4a15      	ldr	r2, [pc, #84]	; (8002e9c <HAL_TIM_Base_MspInit+0x98>)
 8002e48:	f043 0302 	orr.w	r3, r3, #2
 8002e4c:	6413      	str	r3, [r2, #64]	; 0x40
 8002e4e:	4b13      	ldr	r3, [pc, #76]	; (8002e9c <HAL_TIM_Base_MspInit+0x98>)
 8002e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e52:	f003 0302 	and.w	r3, r3, #2
 8002e56:	613b      	str	r3, [r7, #16]
 8002e58:	693b      	ldr	r3, [r7, #16]
}
 8002e5a:	e01a      	b.n	8002e92 <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM11)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a10      	ldr	r2, [pc, #64]	; (8002ea4 <HAL_TIM_Base_MspInit+0xa0>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d115      	bne.n	8002e92 <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002e66:	2300      	movs	r3, #0
 8002e68:	60fb      	str	r3, [r7, #12]
 8002e6a:	4b0c      	ldr	r3, [pc, #48]	; (8002e9c <HAL_TIM_Base_MspInit+0x98>)
 8002e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e6e:	4a0b      	ldr	r2, [pc, #44]	; (8002e9c <HAL_TIM_Base_MspInit+0x98>)
 8002e70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e74:	6453      	str	r3, [r2, #68]	; 0x44
 8002e76:	4b09      	ldr	r3, [pc, #36]	; (8002e9c <HAL_TIM_Base_MspInit+0x98>)
 8002e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e7e:	60fb      	str	r3, [r7, #12]
 8002e80:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8002e82:	2200      	movs	r2, #0
 8002e84:	2100      	movs	r1, #0
 8002e86:	201a      	movs	r0, #26
 8002e88:	f001 f9ef 	bl	800426a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002e8c:	201a      	movs	r0, #26
 8002e8e:	f001 fa08 	bl	80042a2 <HAL_NVIC_EnableIRQ>
}
 8002e92:	bf00      	nop
 8002e94:	3718      	adds	r7, #24
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	bf00      	nop
 8002e9c:	40023800 	.word	0x40023800
 8002ea0:	40000400 	.word	0x40000400
 8002ea4:	40014800 	.word	0x40014800

08002ea8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b085      	sub	sp, #20
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM4)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a0b      	ldr	r2, [pc, #44]	; (8002ee4 <HAL_TIM_PWM_MspInit+0x3c>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d10d      	bne.n	8002ed6 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002eba:	2300      	movs	r3, #0
 8002ebc:	60fb      	str	r3, [r7, #12]
 8002ebe:	4b0a      	ldr	r3, [pc, #40]	; (8002ee8 <HAL_TIM_PWM_MspInit+0x40>)
 8002ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec2:	4a09      	ldr	r2, [pc, #36]	; (8002ee8 <HAL_TIM_PWM_MspInit+0x40>)
 8002ec4:	f043 0304 	orr.w	r3, r3, #4
 8002ec8:	6413      	str	r3, [r2, #64]	; 0x40
 8002eca:	4b07      	ldr	r3, [pc, #28]	; (8002ee8 <HAL_TIM_PWM_MspInit+0x40>)
 8002ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ece:	f003 0304 	and.w	r3, r3, #4
 8002ed2:	60fb      	str	r3, [r7, #12]
 8002ed4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002ed6:	bf00      	nop
 8002ed8:	3714      	adds	r7, #20
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr
 8002ee2:	bf00      	nop
 8002ee4:	40000800 	.word	0x40000800
 8002ee8:	40023800 	.word	0x40023800

08002eec <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b08c      	sub	sp, #48	; 0x30
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ef4:	f107 031c 	add.w	r3, r7, #28
 8002ef8:	2200      	movs	r2, #0
 8002efa:	601a      	str	r2, [r3, #0]
 8002efc:	605a      	str	r2, [r3, #4]
 8002efe:	609a      	str	r2, [r3, #8]
 8002f00:	60da      	str	r2, [r3, #12]
 8002f02:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f0c:	d13e      	bne.n	8002f8c <HAL_TIM_MspPostInit+0xa0>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f0e:	2300      	movs	r3, #0
 8002f10:	61bb      	str	r3, [r7, #24]
 8002f12:	4b44      	ldr	r3, [pc, #272]	; (8003024 <HAL_TIM_MspPostInit+0x138>)
 8002f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f16:	4a43      	ldr	r2, [pc, #268]	; (8003024 <HAL_TIM_MspPostInit+0x138>)
 8002f18:	f043 0302 	orr.w	r3, r3, #2
 8002f1c:	6313      	str	r3, [r2, #48]	; 0x30
 8002f1e:	4b41      	ldr	r3, [pc, #260]	; (8003024 <HAL_TIM_MspPostInit+0x138>)
 8002f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f22:	f003 0302 	and.w	r3, r3, #2
 8002f26:	61bb      	str	r3, [r7, #24]
 8002f28:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	617b      	str	r3, [r7, #20]
 8002f2e:	4b3d      	ldr	r3, [pc, #244]	; (8003024 <HAL_TIM_MspPostInit+0x138>)
 8002f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f32:	4a3c      	ldr	r2, [pc, #240]	; (8003024 <HAL_TIM_MspPostInit+0x138>)
 8002f34:	f043 0301 	orr.w	r3, r3, #1
 8002f38:	6313      	str	r3, [r2, #48]	; 0x30
 8002f3a:	4b3a      	ldr	r3, [pc, #232]	; (8003024 <HAL_TIM_MspPostInit+0x138>)
 8002f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f3e:	f003 0301 	and.w	r3, r3, #1
 8002f42:	617b      	str	r3, [r7, #20]
 8002f44:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = LED_1_R_Pin|LED_2_G_Pin;
 8002f46:	f44f 6381 	mov.w	r3, #1032	; 0x408
 8002f4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f4c:	2302      	movs	r3, #2
 8002f4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f50:	2300      	movs	r3, #0
 8002f52:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f54:	2300      	movs	r3, #0
 8002f56:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f5c:	f107 031c 	add.w	r3, r7, #28
 8002f60:	4619      	mov	r1, r3
 8002f62:	4831      	ldr	r0, [pc, #196]	; (8003028 <HAL_TIM_MspPostInit+0x13c>)
 8002f64:	f001 fdc8 	bl	8004af8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LED_2_R_Pin;
 8002f68:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f6e:	2302      	movs	r3, #2
 8002f70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f72:	2300      	movs	r3, #0
 8002f74:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f76:	2300      	movs	r3, #0
 8002f78:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(LED_2_R_GPIO_Port, &GPIO_InitStruct);
 8002f7e:	f107 031c 	add.w	r3, r7, #28
 8002f82:	4619      	mov	r1, r3
 8002f84:	4829      	ldr	r0, [pc, #164]	; (800302c <HAL_TIM_MspPostInit+0x140>)
 8002f86:	f001 fdb7 	bl	8004af8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002f8a:	e046      	b.n	800301a <HAL_TIM_MspPostInit+0x12e>
  else if(timHandle->Instance==TIM3)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a27      	ldr	r2, [pc, #156]	; (8003030 <HAL_TIM_MspPostInit+0x144>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d11e      	bne.n	8002fd4 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f96:	2300      	movs	r3, #0
 8002f98:	613b      	str	r3, [r7, #16]
 8002f9a:	4b22      	ldr	r3, [pc, #136]	; (8003024 <HAL_TIM_MspPostInit+0x138>)
 8002f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f9e:	4a21      	ldr	r2, [pc, #132]	; (8003024 <HAL_TIM_MspPostInit+0x138>)
 8002fa0:	f043 0302 	orr.w	r3, r3, #2
 8002fa4:	6313      	str	r3, [r2, #48]	; 0x30
 8002fa6:	4b1f      	ldr	r3, [pc, #124]	; (8003024 <HAL_TIM_MspPostInit+0x138>)
 8002fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002faa:	f003 0302 	and.w	r3, r3, #2
 8002fae:	613b      	str	r3, [r7, #16]
 8002fb0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LED_1_B_Pin|LED_1_G_Pin|LED_2_B_Pin|LED_3_R_Pin;
 8002fb2:	2333      	movs	r3, #51	; 0x33
 8002fb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fb6:	2302      	movs	r3, #2
 8002fb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002fc2:	2302      	movs	r3, #2
 8002fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fc6:	f107 031c 	add.w	r3, r7, #28
 8002fca:	4619      	mov	r1, r3
 8002fcc:	4816      	ldr	r0, [pc, #88]	; (8003028 <HAL_TIM_MspPostInit+0x13c>)
 8002fce:	f001 fd93 	bl	8004af8 <HAL_GPIO_Init>
}
 8002fd2:	e022      	b.n	800301a <HAL_TIM_MspPostInit+0x12e>
  else if(timHandle->Instance==TIM4)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a16      	ldr	r2, [pc, #88]	; (8003034 <HAL_TIM_MspPostInit+0x148>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d11d      	bne.n	800301a <HAL_TIM_MspPostInit+0x12e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fde:	2300      	movs	r3, #0
 8002fe0:	60fb      	str	r3, [r7, #12]
 8002fe2:	4b10      	ldr	r3, [pc, #64]	; (8003024 <HAL_TIM_MspPostInit+0x138>)
 8002fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe6:	4a0f      	ldr	r2, [pc, #60]	; (8003024 <HAL_TIM_MspPostInit+0x138>)
 8002fe8:	f043 0302 	orr.w	r3, r3, #2
 8002fec:	6313      	str	r3, [r2, #48]	; 0x30
 8002fee:	4b0d      	ldr	r3, [pc, #52]	; (8003024 <HAL_TIM_MspPostInit+0x138>)
 8002ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff2:	f003 0302 	and.w	r3, r3, #2
 8002ff6:	60fb      	str	r3, [r7, #12]
 8002ff8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LED_3_G_Pin|LED_3_B_Pin;
 8002ffa:	23c0      	movs	r3, #192	; 0xc0
 8002ffc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ffe:	2302      	movs	r3, #2
 8003000:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003002:	2300      	movs	r3, #0
 8003004:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003006:	2300      	movs	r3, #0
 8003008:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800300a:	2302      	movs	r3, #2
 800300c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800300e:	f107 031c 	add.w	r3, r7, #28
 8003012:	4619      	mov	r1, r3
 8003014:	4804      	ldr	r0, [pc, #16]	; (8003028 <HAL_TIM_MspPostInit+0x13c>)
 8003016:	f001 fd6f 	bl	8004af8 <HAL_GPIO_Init>
}
 800301a:	bf00      	nop
 800301c:	3730      	adds	r7, #48	; 0x30
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
 8003022:	bf00      	nop
 8003024:	40023800 	.word	0x40023800
 8003028:	40020400 	.word	0x40020400
 800302c:	40020000 	.word	0x40020000
 8003030:	40000400 	.word	0x40000400
 8003034:	40000800 	.word	0x40000800

08003038 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800303c:	4b10      	ldr	r3, [pc, #64]	; (8003080 <MX_USART1_UART_Init+0x48>)
 800303e:	4a11      	ldr	r2, [pc, #68]	; (8003084 <MX_USART1_UART_Init+0x4c>)
 8003040:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 2000000;
 8003042:	4b0f      	ldr	r3, [pc, #60]	; (8003080 <MX_USART1_UART_Init+0x48>)
 8003044:	4a10      	ldr	r2, [pc, #64]	; (8003088 <MX_USART1_UART_Init+0x50>)
 8003046:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003048:	4b0d      	ldr	r3, [pc, #52]	; (8003080 <MX_USART1_UART_Init+0x48>)
 800304a:	2200      	movs	r2, #0
 800304c:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800304e:	4b0c      	ldr	r3, [pc, #48]	; (8003080 <MX_USART1_UART_Init+0x48>)
 8003050:	2200      	movs	r2, #0
 8003052:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003054:	4b0a      	ldr	r3, [pc, #40]	; (8003080 <MX_USART1_UART_Init+0x48>)
 8003056:	2200      	movs	r2, #0
 8003058:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800305a:	4b09      	ldr	r3, [pc, #36]	; (8003080 <MX_USART1_UART_Init+0x48>)
 800305c:	220c      	movs	r2, #12
 800305e:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003060:	4b07      	ldr	r3, [pc, #28]	; (8003080 <MX_USART1_UART_Init+0x48>)
 8003062:	2200      	movs	r2, #0
 8003064:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003066:	4b06      	ldr	r3, [pc, #24]	; (8003080 <MX_USART1_UART_Init+0x48>)
 8003068:	2200      	movs	r2, #0
 800306a:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800306c:	4804      	ldr	r0, [pc, #16]	; (8003080 <MX_USART1_UART_Init+0x48>)
 800306e:	f006 fda3 	bl	8009bb8 <HAL_UART_Init>
 8003072:	4603      	mov	r3, r0
 8003074:	2b00      	cmp	r3, #0
 8003076:	d001      	beq.n	800307c <MX_USART1_UART_Init+0x44>
  {
    Error_Handler();
 8003078:	f7ff fbaa 	bl	80027d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800307c:	bf00      	nop
 800307e:	bd80      	pop	{r7, pc}
 8003080:	20010768 	.word	0x20010768
 8003084:	40011000 	.word	0x40011000
 8003088:	001e8480 	.word	0x001e8480

0800308c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b08a      	sub	sp, #40	; 0x28
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003094:	f107 0314 	add.w	r3, r7, #20
 8003098:	2200      	movs	r2, #0
 800309a:	601a      	str	r2, [r3, #0]
 800309c:	605a      	str	r2, [r3, #4]
 800309e:	609a      	str	r2, [r3, #8]
 80030a0:	60da      	str	r2, [r3, #12]
 80030a2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a34      	ldr	r2, [pc, #208]	; (800317c <HAL_UART_MspInit+0xf0>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d162      	bne.n	8003174 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80030ae:	2300      	movs	r3, #0
 80030b0:	613b      	str	r3, [r7, #16]
 80030b2:	4b33      	ldr	r3, [pc, #204]	; (8003180 <HAL_UART_MspInit+0xf4>)
 80030b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030b6:	4a32      	ldr	r2, [pc, #200]	; (8003180 <HAL_UART_MspInit+0xf4>)
 80030b8:	f043 0310 	orr.w	r3, r3, #16
 80030bc:	6453      	str	r3, [r2, #68]	; 0x44
 80030be:	4b30      	ldr	r3, [pc, #192]	; (8003180 <HAL_UART_MspInit+0xf4>)
 80030c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030c2:	f003 0310 	and.w	r3, r3, #16
 80030c6:	613b      	str	r3, [r7, #16]
 80030c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030ca:	2300      	movs	r3, #0
 80030cc:	60fb      	str	r3, [r7, #12]
 80030ce:	4b2c      	ldr	r3, [pc, #176]	; (8003180 <HAL_UART_MspInit+0xf4>)
 80030d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d2:	4a2b      	ldr	r2, [pc, #172]	; (8003180 <HAL_UART_MspInit+0xf4>)
 80030d4:	f043 0301 	orr.w	r3, r3, #1
 80030d8:	6313      	str	r3, [r2, #48]	; 0x30
 80030da:	4b29      	ldr	r3, [pc, #164]	; (8003180 <HAL_UART_MspInit+0xf4>)
 80030dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030de:	f003 0301 	and.w	r3, r3, #1
 80030e2:	60fb      	str	r3, [r7, #12]
 80030e4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80030e6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80030ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030ec:	2302      	movs	r3, #2
 80030ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030f0:	2300      	movs	r3, #0
 80030f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030f4:	2303      	movs	r3, #3
 80030f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80030f8:	2307      	movs	r3, #7
 80030fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030fc:	f107 0314 	add.w	r3, r7, #20
 8003100:	4619      	mov	r1, r3
 8003102:	4820      	ldr	r0, [pc, #128]	; (8003184 <HAL_UART_MspInit+0xf8>)
 8003104:	f001 fcf8 	bl	8004af8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8003108:	4b1f      	ldr	r3, [pc, #124]	; (8003188 <HAL_UART_MspInit+0xfc>)
 800310a:	4a20      	ldr	r2, [pc, #128]	; (800318c <HAL_UART_MspInit+0x100>)
 800310c:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 800310e:	4b1e      	ldr	r3, [pc, #120]	; (8003188 <HAL_UART_MspInit+0xfc>)
 8003110:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003114:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003116:	4b1c      	ldr	r3, [pc, #112]	; (8003188 <HAL_UART_MspInit+0xfc>)
 8003118:	2240      	movs	r2, #64	; 0x40
 800311a:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800311c:	4b1a      	ldr	r3, [pc, #104]	; (8003188 <HAL_UART_MspInit+0xfc>)
 800311e:	2200      	movs	r2, #0
 8003120:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003122:	4b19      	ldr	r3, [pc, #100]	; (8003188 <HAL_UART_MspInit+0xfc>)
 8003124:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003128:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800312a:	4b17      	ldr	r3, [pc, #92]	; (8003188 <HAL_UART_MspInit+0xfc>)
 800312c:	2200      	movs	r2, #0
 800312e:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003130:	4b15      	ldr	r3, [pc, #84]	; (8003188 <HAL_UART_MspInit+0xfc>)
 8003132:	2200      	movs	r2, #0
 8003134:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8003136:	4b14      	ldr	r3, [pc, #80]	; (8003188 <HAL_UART_MspInit+0xfc>)
 8003138:	2200      	movs	r2, #0
 800313a:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800313c:	4b12      	ldr	r3, [pc, #72]	; (8003188 <HAL_UART_MspInit+0xfc>)
 800313e:	2200      	movs	r2, #0
 8003140:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003142:	4b11      	ldr	r3, [pc, #68]	; (8003188 <HAL_UART_MspInit+0xfc>)
 8003144:	2200      	movs	r2, #0
 8003146:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003148:	480f      	ldr	r0, [pc, #60]	; (8003188 <HAL_UART_MspInit+0xfc>)
 800314a:	f001 f8c5 	bl	80042d8 <HAL_DMA_Init>
 800314e:	4603      	mov	r3, r0
 8003150:	2b00      	cmp	r3, #0
 8003152:	d001      	beq.n	8003158 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8003154:	f7ff fb3c 	bl	80027d0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	4a0b      	ldr	r2, [pc, #44]	; (8003188 <HAL_UART_MspInit+0xfc>)
 800315c:	635a      	str	r2, [r3, #52]	; 0x34
 800315e:	4a0a      	ldr	r2, [pc, #40]	; (8003188 <HAL_UART_MspInit+0xfc>)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003164:	2200      	movs	r2, #0
 8003166:	2100      	movs	r1, #0
 8003168:	2025      	movs	r0, #37	; 0x25
 800316a:	f001 f87e 	bl	800426a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800316e:	2025      	movs	r0, #37	; 0x25
 8003170:	f001 f897 	bl	80042a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003174:	bf00      	nop
 8003176:	3728      	adds	r7, #40	; 0x28
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}
 800317c:	40011000 	.word	0x40011000
 8003180:	40023800 	.word	0x40023800
 8003184:	40020000 	.word	0x40020000
 8003188:	200107ac 	.word	0x200107ac
 800318c:	400264b8 	.word	0x400264b8

08003190 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003190:	f8df d034 	ldr.w	sp, [pc, #52]	; 80031c8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003194:	480d      	ldr	r0, [pc, #52]	; (80031cc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003196:	490e      	ldr	r1, [pc, #56]	; (80031d0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003198:	4a0e      	ldr	r2, [pc, #56]	; (80031d4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800319a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800319c:	e002      	b.n	80031a4 <LoopCopyDataInit>

0800319e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800319e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80031a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80031a2:	3304      	adds	r3, #4

080031a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80031a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80031a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80031a8:	d3f9      	bcc.n	800319e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80031aa:	4a0b      	ldr	r2, [pc, #44]	; (80031d8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80031ac:	4c0b      	ldr	r4, [pc, #44]	; (80031dc <LoopFillZerobss+0x26>)
  movs r3, #0
 80031ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80031b0:	e001      	b.n	80031b6 <LoopFillZerobss>

080031b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80031b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80031b4:	3204      	adds	r2, #4

080031b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80031b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80031b8:	d3fb      	bcc.n	80031b2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80031ba:	f7ff fc65 	bl	8002a88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80031be:	f00c fe7b 	bl	800feb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80031c2:	f7fe fde7 	bl	8001d94 <main>
  bx  lr    
 80031c6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80031c8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80031cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80031d0:	200002d4 	.word	0x200002d4
  ldr r2, =_sidata
 80031d4:	080267b4 	.word	0x080267b4
  ldr r2, =_sbss
 80031d8:	200002d4 	.word	0x200002d4
  ldr r4, =_ebss
 80031dc:	2001242c 	.word	0x2001242c

080031e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80031e0:	e7fe      	b.n	80031e0 <ADC_IRQHandler>
	...

080031e4 <LCDSet4BitOperation>:
/*
 * LCD communication wrapper functions
 */

static inline void LCDSet4BitOperation(LCD2004_I2C *lcd)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b086      	sub	sp, #24
 80031e8:	af02      	add	r7, sp, #8
 80031ea:	6078      	str	r0, [r7, #4]
	uint8_t i2cData = 0, dataBits = LCD_CMD_FunctionSet;
 80031ec:	2300      	movs	r3, #0
 80031ee:	73fb      	strb	r3, [r7, #15]
 80031f0:	2320      	movs	r3, #32
 80031f2:	73bb      	strb	r3, [r7, #14]

	// prepare non-data pins
	// RW & RS = 0 => nothing to be done

	// backlight
	i2cData |= (lcd->lcd_backlight & 1) << 3;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	785b      	ldrb	r3, [r3, #1]
 80031f8:	00db      	lsls	r3, r3, #3
 80031fa:	b25b      	sxtb	r3, r3
 80031fc:	f003 0308 	and.w	r3, r3, #8
 8003200:	b25a      	sxtb	r2, r3
 8003202:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003206:	4313      	orrs	r3, r2
 8003208:	b25b      	sxtb	r3, r3
 800320a:	73fb      	strb	r3, [r7, #15]

	// compose array
	uint8_t i2cDataArray[2];
	// 1: dataHigh Transmit
	i2cDataArray[0] = i2cData | (dataBits & 0xF0) | LCD_BIT_ENABLE;
 800320c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003210:	f023 030f 	bic.w	r3, r3, #15
 8003214:	b25a      	sxtb	r2, r3
 8003216:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800321a:	4313      	orrs	r3, r2
 800321c:	b25b      	sxtb	r3, r3
 800321e:	f043 0304 	orr.w	r3, r3, #4
 8003222:	b25b      	sxtb	r3, r3
 8003224:	b2db      	uxtb	r3, r3
 8003226:	733b      	strb	r3, [r7, #12]
	// 2: dataHigh latch
	i2cDataArray[1] = i2cData | (dataBits & 0xF0); // Enable 1->0 => Data latches
 8003228:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800322c:	f023 030f 	bic.w	r3, r3, #15
 8003230:	b25a      	sxtb	r2, r3
 8003232:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003236:	4313      	orrs	r3, r2
 8003238:	b25b      	sxtb	r3, r3
 800323a:	b2db      	uxtb	r3, r3
 800323c:	737b      	strb	r3, [r7, #13]

	// send array
	HAL_I2C_Master_Transmit(&hi2c1, lcd->i2cAddress, i2cDataArray, 2, 1000); //Sending in Blocking mode
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	781b      	ldrb	r3, [r3, #0]
 8003242:	b299      	uxth	r1, r3
 8003244:	f107 020c 	add.w	r2, r7, #12
 8003248:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800324c:	9300      	str	r3, [sp, #0]
 800324e:	2302      	movs	r3, #2
 8003250:	4803      	ldr	r0, [pc, #12]	; (8003260 <LCDSet4BitOperation+0x7c>)
 8003252:	f001 ff4b 	bl	80050ec <HAL_I2C_Master_Transmit>
}
 8003256:	bf00      	nop
 8003258:	3710      	adds	r7, #16
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}
 800325e:	bf00      	nop
 8003260:	200003d0 	.word	0x200003d0

08003264 <SendLCDData>:

static void SendLCDData(LCD2004_I2C *lcd, uint8_t dataBits, uint8_t RS, uint8_t RW)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b086      	sub	sp, #24
 8003268:	af02      	add	r7, sp, #8
 800326a:	6078      	str	r0, [r7, #4]
 800326c:	4608      	mov	r0, r1
 800326e:	4611      	mov	r1, r2
 8003270:	461a      	mov	r2, r3
 8003272:	4603      	mov	r3, r0
 8003274:	70fb      	strb	r3, [r7, #3]
 8003276:	460b      	mov	r3, r1
 8003278:	70bb      	strb	r3, [r7, #2]
 800327a:	4613      	mov	r3, r2
 800327c:	707b      	strb	r3, [r7, #1]


	 Have to send DB7-DB4 first, then DB3-DB0

	 */
	uint8_t i2cData = 0;
 800327e:	2300      	movs	r3, #0
 8003280:	73fb      	strb	r3, [r7, #15]

	// prepare non-data pins
	// RW & RS
	i2cData |= (RS & 1) | ((RW & 1) << 1);
 8003282:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003286:	f003 0301 	and.w	r3, r3, #1
 800328a:	b25a      	sxtb	r2, r3
 800328c:	787b      	ldrb	r3, [r7, #1]
 800328e:	005b      	lsls	r3, r3, #1
 8003290:	b25b      	sxtb	r3, r3
 8003292:	f003 0302 	and.w	r3, r3, #2
 8003296:	b25b      	sxtb	r3, r3
 8003298:	4313      	orrs	r3, r2
 800329a:	b25a      	sxtb	r2, r3
 800329c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032a0:	4313      	orrs	r3, r2
 80032a2:	b25b      	sxtb	r3, r3
 80032a4:	73fb      	strb	r3, [r7, #15]

	// backlight
	i2cData |= (lcd->lcd_backlight & 1) << 3;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	785b      	ldrb	r3, [r3, #1]
 80032aa:	00db      	lsls	r3, r3, #3
 80032ac:	b25b      	sxtb	r3, r3
 80032ae:	f003 0308 	and.w	r3, r3, #8
 80032b2:	b25a      	sxtb	r2, r3
 80032b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032b8:	4313      	orrs	r3, r2
 80032ba:	b25b      	sxtb	r3, r3
 80032bc:	73fb      	strb	r3, [r7, #15]

	// compose array
	uint8_t i2cDataArray[4];
	// 1: dataHigh Transmit
	i2cDataArray[0] = i2cData | (dataBits & 0xF0) | LCD_BIT_ENABLE;
 80032be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80032c2:	f023 030f 	bic.w	r3, r3, #15
 80032c6:	b25a      	sxtb	r2, r3
 80032c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032cc:	4313      	orrs	r3, r2
 80032ce:	b25b      	sxtb	r3, r3
 80032d0:	f043 0304 	orr.w	r3, r3, #4
 80032d4:	b25b      	sxtb	r3, r3
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	723b      	strb	r3, [r7, #8]
	// 2: dataHigh latch
	i2cDataArray[1] = i2cData | (dataBits & 0xF0); // Enable 1->0 => Data latches
 80032da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80032de:	f023 030f 	bic.w	r3, r3, #15
 80032e2:	b25a      	sxtb	r2, r3
 80032e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032e8:	4313      	orrs	r3, r2
 80032ea:	b25b      	sxtb	r3, r3
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	727b      	strb	r3, [r7, #9]
	// 3: dataLow Transmit
	i2cDataArray[2] = i2cData | ((dataBits & 0x0F) << 4) | LCD_BIT_ENABLE;
 80032f0:	78fb      	ldrb	r3, [r7, #3]
 80032f2:	011b      	lsls	r3, r3, #4
 80032f4:	b25a      	sxtb	r2, r3
 80032f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032fa:	4313      	orrs	r3, r2
 80032fc:	b25b      	sxtb	r3, r3
 80032fe:	f043 0304 	orr.w	r3, r3, #4
 8003302:	b25b      	sxtb	r3, r3
 8003304:	b2db      	uxtb	r3, r3
 8003306:	72bb      	strb	r3, [r7, #10]
	// 4: dataLow latch
	i2cDataArray[3] = i2cData | ((dataBits & 0x0F) << 4);
 8003308:	78fb      	ldrb	r3, [r7, #3]
 800330a:	011b      	lsls	r3, r3, #4
 800330c:	b25a      	sxtb	r2, r3
 800330e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003312:	4313      	orrs	r3, r2
 8003314:	b25b      	sxtb	r3, r3
 8003316:	b2db      	uxtb	r3, r3
 8003318:	72fb      	strb	r3, [r7, #11]

	// send array
	HAL_I2C_Master_Transmit(&hi2c1, lcd->i2cAddress, i2cDataArray, 4, 1000); //Sending in Blocking mode
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	781b      	ldrb	r3, [r3, #0]
 800331e:	b299      	uxth	r1, r3
 8003320:	f107 0208 	add.w	r2, r7, #8
 8003324:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003328:	9300      	str	r3, [sp, #0]
 800332a:	2304      	movs	r3, #4
 800332c:	4803      	ldr	r0, [pc, #12]	; (800333c <SendLCDData+0xd8>)
 800332e:	f001 fedd 	bl	80050ec <HAL_I2C_Master_Transmit>
}
 8003332:	bf00      	nop
 8003334:	3710      	adds	r7, #16
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}
 800333a:	bf00      	nop
 800333c:	200003d0 	.word	0x200003d0

08003340 <SendLCDDataMultiple>:

static void SendLCDDataMultiple(LCD2004_I2C *lcd, uint8_t *data, uint8_t dataLen, uint8_t RS, uint8_t RW)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b088      	sub	sp, #32
 8003344:	af02      	add	r7, sp, #8
 8003346:	60f8      	str	r0, [r7, #12]
 8003348:	60b9      	str	r1, [r7, #8]
 800334a:	4611      	mov	r1, r2
 800334c:	461a      	mov	r2, r3
 800334e:	460b      	mov	r3, r1
 8003350:	71fb      	strb	r3, [r7, #7]
 8003352:	4613      	mov	r3, r2
 8003354:	71bb      	strb	r3, [r7, #6]
	uint8_t i2cData = 0;
 8003356:	2300      	movs	r3, #0
 8003358:	753b      	strb	r3, [r7, #20]

	// prepare non-data pins
	// RW & RS
	i2cData |= (RS & 1) | ((RW & 1) << 1);
 800335a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800335e:	f003 0301 	and.w	r3, r3, #1
 8003362:	b25a      	sxtb	r2, r3
 8003364:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003368:	005b      	lsls	r3, r3, #1
 800336a:	b25b      	sxtb	r3, r3
 800336c:	f003 0302 	and.w	r3, r3, #2
 8003370:	b25b      	sxtb	r3, r3
 8003372:	4313      	orrs	r3, r2
 8003374:	b25a      	sxtb	r2, r3
 8003376:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800337a:	4313      	orrs	r3, r2
 800337c:	b25b      	sxtb	r3, r3
 800337e:	753b      	strb	r3, [r7, #20]

	// backlight
	i2cData |= (lcd->lcd_backlight & 1) << 3;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	785b      	ldrb	r3, [r3, #1]
 8003384:	00db      	lsls	r3, r3, #3
 8003386:	b25b      	sxtb	r3, r3
 8003388:	f003 0308 	and.w	r3, r3, #8
 800338c:	b25a      	sxtb	r2, r3
 800338e:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8003392:	4313      	orrs	r3, r2
 8003394:	b25b      	sxtb	r3, r3
 8003396:	753b      	strb	r3, [r7, #20]

	uint8_t index, charsToSend;

	// compose array
	for (uint8_t j = 0; j < dataLen; j += LCD_BUFFER_NUMCHARS)
 8003398:	2300      	movs	r3, #0
 800339a:	75bb      	strb	r3, [r7, #22]
 800339c:	e079      	b.n	8003492 <SendLCDDataMultiple+0x152>
	{
		for (uint8_t i = 0; i < dataLen; i++)
 800339e:	2300      	movs	r3, #0
 80033a0:	757b      	strb	r3, [r7, #21]
 80033a2:	e057      	b.n	8003454 <SendLCDDataMultiple+0x114>
		{
			index = j + i;
 80033a4:	7dba      	ldrb	r2, [r7, #22]
 80033a6:	7d7b      	ldrb	r3, [r7, #21]
 80033a8:	4413      	add	r3, r2
 80033aa:	74fb      	strb	r3, [r7, #19]
			// 1: dataHigh Transmit
			lcd->displayDataBuffer[4 * i + 0] = i2cData | (data[index] & 0xF0) | LCD_BIT_ENABLE;
 80033ac:	7cfb      	ldrb	r3, [r7, #19]
 80033ae:	68ba      	ldr	r2, [r7, #8]
 80033b0:	4413      	add	r3, r2
 80033b2:	781b      	ldrb	r3, [r3, #0]
 80033b4:	b25b      	sxtb	r3, r3
 80033b6:	f023 030f 	bic.w	r3, r3, #15
 80033ba:	b25a      	sxtb	r2, r3
 80033bc:	f997 3014 	ldrsb.w	r3, [r7, #20]
 80033c0:	4313      	orrs	r3, r2
 80033c2:	b25b      	sxtb	r3, r3
 80033c4:	f043 0304 	orr.w	r3, r3, #4
 80033c8:	b25a      	sxtb	r2, r3
 80033ca:	7d7b      	ldrb	r3, [r7, #21]
 80033cc:	009b      	lsls	r3, r3, #2
 80033ce:	b2d1      	uxtb	r1, r2
 80033d0:	68fa      	ldr	r2, [r7, #12]
 80033d2:	4413      	add	r3, r2
 80033d4:	460a      	mov	r2, r1
 80033d6:	715a      	strb	r2, [r3, #5]
			// 2: dataHigh latch
			lcd->displayDataBuffer[4 * i + 1] = i2cData | (data[index] & 0xF0); // Enable 1->0 => Data latches
 80033d8:	7cfb      	ldrb	r3, [r7, #19]
 80033da:	68ba      	ldr	r2, [r7, #8]
 80033dc:	4413      	add	r3, r2
 80033de:	781b      	ldrb	r3, [r3, #0]
 80033e0:	b25b      	sxtb	r3, r3
 80033e2:	f023 030f 	bic.w	r3, r3, #15
 80033e6:	b25a      	sxtb	r2, r3
 80033e8:	f997 3014 	ldrsb.w	r3, [r7, #20]
 80033ec:	4313      	orrs	r3, r2
 80033ee:	b25a      	sxtb	r2, r3
 80033f0:	7d7b      	ldrb	r3, [r7, #21]
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	3301      	adds	r3, #1
 80033f6:	b2d1      	uxtb	r1, r2
 80033f8:	68fa      	ldr	r2, [r7, #12]
 80033fa:	4413      	add	r3, r2
 80033fc:	460a      	mov	r2, r1
 80033fe:	715a      	strb	r2, [r3, #5]
			// 3: dataLow Transmit
			lcd->displayDataBuffer[4 * i + 2] = i2cData | ((data[index] & 0x0F) << 4) | LCD_BIT_ENABLE;
 8003400:	7cfb      	ldrb	r3, [r7, #19]
 8003402:	68ba      	ldr	r2, [r7, #8]
 8003404:	4413      	add	r3, r2
 8003406:	781b      	ldrb	r3, [r3, #0]
 8003408:	011b      	lsls	r3, r3, #4
 800340a:	b25a      	sxtb	r2, r3
 800340c:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8003410:	4313      	orrs	r3, r2
 8003412:	b25b      	sxtb	r3, r3
 8003414:	f043 0304 	orr.w	r3, r3, #4
 8003418:	b25a      	sxtb	r2, r3
 800341a:	7d7b      	ldrb	r3, [r7, #21]
 800341c:	009b      	lsls	r3, r3, #2
 800341e:	3302      	adds	r3, #2
 8003420:	b2d1      	uxtb	r1, r2
 8003422:	68fa      	ldr	r2, [r7, #12]
 8003424:	4413      	add	r3, r2
 8003426:	460a      	mov	r2, r1
 8003428:	715a      	strb	r2, [r3, #5]
			// 4: dataLow latch
			lcd->displayDataBuffer[4 * i + 3] = i2cData | ((data[index] & 0x0F) << 4);
 800342a:	7cfb      	ldrb	r3, [r7, #19]
 800342c:	68ba      	ldr	r2, [r7, #8]
 800342e:	4413      	add	r3, r2
 8003430:	781b      	ldrb	r3, [r3, #0]
 8003432:	011b      	lsls	r3, r3, #4
 8003434:	b25a      	sxtb	r2, r3
 8003436:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800343a:	4313      	orrs	r3, r2
 800343c:	b25a      	sxtb	r2, r3
 800343e:	7d7b      	ldrb	r3, [r7, #21]
 8003440:	009b      	lsls	r3, r3, #2
 8003442:	3303      	adds	r3, #3
 8003444:	b2d1      	uxtb	r1, r2
 8003446:	68fa      	ldr	r2, [r7, #12]
 8003448:	4413      	add	r3, r2
 800344a:	460a      	mov	r2, r1
 800344c:	715a      	strb	r2, [r3, #5]
		for (uint8_t i = 0; i < dataLen; i++)
 800344e:	7d7b      	ldrb	r3, [r7, #21]
 8003450:	3301      	adds	r3, #1
 8003452:	757b      	strb	r3, [r7, #21]
 8003454:	7d7a      	ldrb	r2, [r7, #21]
 8003456:	79fb      	ldrb	r3, [r7, #7]
 8003458:	429a      	cmp	r2, r3
 800345a:	d3a3      	bcc.n	80033a4 <SendLCDDataMultiple+0x64>
		}

		charsToSend = dataLen - j;
 800345c:	79fa      	ldrb	r2, [r7, #7]
 800345e:	7dbb      	ldrb	r3, [r7, #22]
 8003460:	1ad3      	subs	r3, r2, r3
 8003462:	75fb      	strb	r3, [r7, #23]
		if (charsToSend > LCD_BUFFER_NUMCHARS)
 8003464:	7dfb      	ldrb	r3, [r7, #23]
 8003466:	2b14      	cmp	r3, #20
 8003468:	d901      	bls.n	800346e <SendLCDDataMultiple+0x12e>
			charsToSend = LCD_BUFFER_NUMCHARS;
 800346a:	2314      	movs	r3, #20
 800346c:	75fb      	strb	r3, [r7, #23]

		// send array
		HAL_I2C_Master_Transmit(&hi2c1, lcd->i2cAddress, lcd->displayDataBuffer, charsToSend * 4, 1000); //Sending in Blocking mode
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	781b      	ldrb	r3, [r3, #0]
 8003472:	b299      	uxth	r1, r3
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	1d5a      	adds	r2, r3, #5
 8003478:	7dfb      	ldrb	r3, [r7, #23]
 800347a:	b29b      	uxth	r3, r3
 800347c:	009b      	lsls	r3, r3, #2
 800347e:	b29b      	uxth	r3, r3
 8003480:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003484:	9000      	str	r0, [sp, #0]
 8003486:	4807      	ldr	r0, [pc, #28]	; (80034a4 <SendLCDDataMultiple+0x164>)
 8003488:	f001 fe30 	bl	80050ec <HAL_I2C_Master_Transmit>
	for (uint8_t j = 0; j < dataLen; j += LCD_BUFFER_NUMCHARS)
 800348c:	7dbb      	ldrb	r3, [r7, #22]
 800348e:	3314      	adds	r3, #20
 8003490:	75bb      	strb	r3, [r7, #22]
 8003492:	7dba      	ldrb	r2, [r7, #22]
 8003494:	79fb      	ldrb	r3, [r7, #7]
 8003496:	429a      	cmp	r2, r3
 8003498:	d381      	bcc.n	800339e <SendLCDDataMultiple+0x5e>
	}

}
 800349a:	bf00      	nop
 800349c:	bf00      	nop
 800349e:	3718      	adds	r7, #24
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}
 80034a4:	200003d0 	.word	0x200003d0

080034a8 <SendLCDInstruction>:

static inline void SendLCDInstruction(LCD2004_I2C *lcd, uint8_t dataBits)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b082      	sub	sp, #8
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
 80034b0:	460b      	mov	r3, r1
 80034b2:	70fb      	strb	r3, [r7, #3]
	SendLCDData(lcd, dataBits, 0, 0);
 80034b4:	78f9      	ldrb	r1, [r7, #3]
 80034b6:	2300      	movs	r3, #0
 80034b8:	2200      	movs	r2, #0
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f7ff fed2 	bl	8003264 <SendLCDData>
}
 80034c0:	bf00      	nop
 80034c2:	3708      	adds	r7, #8
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}

080034c8 <SendLCDDisplayData>:

static inline void SendLCDDisplayData(LCD2004_I2C *lcd, uint8_t dataBits)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b082      	sub	sp, #8
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
 80034d0:	460b      	mov	r3, r1
 80034d2:	70fb      	strb	r3, [r7, #3]
	SendLCDData(lcd, dataBits, 1, 0);
 80034d4:	78f9      	ldrb	r1, [r7, #3]
 80034d6:	2300      	movs	r3, #0
 80034d8:	2201      	movs	r2, #1
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f7ff fec2 	bl	8003264 <SendLCDData>
}
 80034e0:	bf00      	nop
 80034e2:	3708      	adds	r7, #8
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}

080034e8 <SendLCDDisplayCursorBlinkUpdate>:

static inline void SendLCDDisplayCursorBlinkUpdate(LCD2004_I2C *lcd)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b082      	sub	sp, #8
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
	SendLCDInstruction(lcd, LCD_CMD_DisplayOnOff | ((lcd->lcd_displayOnOff & 1) << 2) | ((lcd->lcd_cursorOnOff & 1) << 1) | (lcd->lcd_cursorBlink & 1));
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	789b      	ldrb	r3, [r3, #2]
 80034f4:	009b      	lsls	r3, r3, #2
 80034f6:	b25b      	sxtb	r3, r3
 80034f8:	f003 0304 	and.w	r3, r3, #4
 80034fc:	b25b      	sxtb	r3, r3
 80034fe:	f043 0308 	orr.w	r3, r3, #8
 8003502:	b25a      	sxtb	r2, r3
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	78db      	ldrb	r3, [r3, #3]
 8003508:	005b      	lsls	r3, r3, #1
 800350a:	b25b      	sxtb	r3, r3
 800350c:	f003 0302 	and.w	r3, r3, #2
 8003510:	b25b      	sxtb	r3, r3
 8003512:	4313      	orrs	r3, r2
 8003514:	b25a      	sxtb	r2, r3
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	791b      	ldrb	r3, [r3, #4]
 800351a:	b25b      	sxtb	r3, r3
 800351c:	f003 0301 	and.w	r3, r3, #1
 8003520:	b25b      	sxtb	r3, r3
 8003522:	4313      	orrs	r3, r2
 8003524:	b25b      	sxtb	r3, r3
 8003526:	b2db      	uxtb	r3, r3
 8003528:	4619      	mov	r1, r3
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f7ff ffbc 	bl	80034a8 <SendLCDInstruction>
}
 8003530:	bf00      	nop
 8003532:	3708      	adds	r7, #8
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}

08003538 <LCD_Init>:
/*
 * API functions
 */

void LCD_Init(LCD2004_I2C *lcd, uint8_t lcdI2CAddress)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b082      	sub	sp, #8
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
 8003540:	460b      	mov	r3, r1
 8003542:	70fb      	strb	r3, [r7, #3]
	// init state variables
	lcd->i2cAddress = lcdI2CAddress;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	78fa      	ldrb	r2, [r7, #3]
 8003548:	701a      	strb	r2, [r3, #0]

	lcd->lcd_backlight = LCD_BACKLIGHT_OFF;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2200      	movs	r2, #0
 800354e:	705a      	strb	r2, [r3, #1]
	lcd->lcd_displayOnOff = 1;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2201      	movs	r2, #1
 8003554:	709a      	strb	r2, [r3, #2]
	lcd->lcd_cursorOnOff = 1;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2201      	movs	r2, #1
 800355a:	70da      	strb	r2, [r3, #3]
	lcd->lcd_cursorBlink = 0;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2200      	movs	r2, #0
 8003560:	711a      	strb	r2, [r3, #4]

	HAL_Delay(10);
 8003562:	200a      	movs	r0, #10
 8003564:	f000 f9a4 	bl	80038b0 <HAL_Delay>

	// set interface data length control bit to 4 bit data length
	LCDSet4BitOperation(lcd);
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	f7ff fe3b 	bl	80031e4 <LCDSet4BitOperation>

	// interface length = 4bit, 2-line display mode, 5x8 format display mode
	SendLCDInstruction(lcd, LCD_CMD_FunctionSet | (1 << 3) | (0 << 2));
 800356e:	2128      	movs	r1, #40	; 0x28
 8003570:	6878      	ldr	r0, [r7, #4]
 8003572:	f7ff ff99 	bl	80034a8 <SendLCDInstruction>

	// display on, cursor on, cursor blink off
	SendLCDInstruction(lcd, LCD_CMD_DisplayOnOff | (1 << 2) | (1 << 1) | 0);
 8003576:	210e      	movs	r1, #14
 8003578:	6878      	ldr	r0, [r7, #4]
 800357a:	f7ff ff95 	bl	80034a8 <SendLCDInstruction>

	// cursor: move to right, dont shift display
	SendLCDInstruction(lcd, LCD_CMD_EntryModeSet | (1 << 1) | 0);
 800357e:	2106      	movs	r1, #6
 8003580:	6878      	ldr	r0, [r7, #4]
 8003582:	f7ff ff91 	bl	80034a8 <SendLCDInstruction>

	// clear display
	LCD_Clear(lcd);
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f000 f8da 	bl	8003740 <LCD_Clear>

	// display on
	LCD_BacklightOn(lcd);
 800358c:	6878      	ldr	r0, [r7, #4]
 800358e:	f000 f8f8 	bl	8003782 <LCD_BacklightOn>

	HAL_Delay(1);
 8003592:	2001      	movs	r0, #1
 8003594:	f000 f98c 	bl	80038b0 <HAL_Delay>
}
 8003598:	bf00      	nop
 800359a:	3708      	adds	r7, #8
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}

080035a0 <LCD_DisplayString1>:

void LCD_DisplayString1(LCD2004_I2C *lcd, char *string, uint8_t length)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b086      	sub	sp, #24
 80035a4:	af02      	add	r7, sp, #8
 80035a6:	60f8      	str	r0, [r7, #12]
 80035a8:	60b9      	str	r1, [r7, #8]
 80035aa:	4613      	mov	r3, r2
 80035ac:	71fb      	strb	r3, [r7, #7]
	SendLCDDataMultiple(lcd, (uint8_t*) string, length, 1, 0);
 80035ae:	79fa      	ldrb	r2, [r7, #7]
 80035b0:	2300      	movs	r3, #0
 80035b2:	9300      	str	r3, [sp, #0]
 80035b4:	2301      	movs	r3, #1
 80035b6:	68b9      	ldr	r1, [r7, #8]
 80035b8:	68f8      	ldr	r0, [r7, #12]
 80035ba:	f7ff fec1 	bl	8003340 <SendLCDDataMultiple>
}
 80035be:	bf00      	nop
 80035c0:	3710      	adds	r7, #16
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}

080035c6 <LCD_DisplayString2>:

void LCD_DisplayString2(LCD2004_I2C *lcd, const char *string)
{
 80035c6:	b580      	push	{r7, lr}
 80035c8:	b084      	sub	sp, #16
 80035ca:	af00      	add	r7, sp, #0
 80035cc:	6078      	str	r0, [r7, #4]
 80035ce:	6039      	str	r1, [r7, #0]
	uint8_t strlen = 0;
 80035d0:	2300      	movs	r3, #0
 80035d2:	73fb      	strb	r3, [r7, #15]
	while (string[strlen] != 0 && strlen < 40)
 80035d4:	e002      	b.n	80035dc <LCD_DisplayString2+0x16>
		strlen++;
 80035d6:	7bfb      	ldrb	r3, [r7, #15]
 80035d8:	3301      	adds	r3, #1
 80035da:	73fb      	strb	r3, [r7, #15]
	while (string[strlen] != 0 && strlen < 40)
 80035dc:	7bfb      	ldrb	r3, [r7, #15]
 80035de:	683a      	ldr	r2, [r7, #0]
 80035e0:	4413      	add	r3, r2
 80035e2:	781b      	ldrb	r3, [r3, #0]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d002      	beq.n	80035ee <LCD_DisplayString2+0x28>
 80035e8:	7bfb      	ldrb	r3, [r7, #15]
 80035ea:	2b27      	cmp	r3, #39	; 0x27
 80035ec:	d9f3      	bls.n	80035d6 <LCD_DisplayString2+0x10>

	LCD_DisplayString1(lcd, (char*) string, strlen);
 80035ee:	7bfb      	ldrb	r3, [r7, #15]
 80035f0:	461a      	mov	r2, r3
 80035f2:	6839      	ldr	r1, [r7, #0]
 80035f4:	6878      	ldr	r0, [r7, #4]
 80035f6:	f7ff ffd3 	bl	80035a0 <LCD_DisplayString1>
}
 80035fa:	bf00      	nop
 80035fc:	3710      	adds	r7, #16
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}

08003602 <LCD_DisplayStringLineCentered1>:

	LCD_DisplayStringLine1(lcd, string, strlen, lineNr);
}

void LCD_DisplayStringLineCentered1(LCD2004_I2C *lcd, char *string, uint8_t length, uint8_t lineNr)
{
 8003602:	b580      	push	{r7, lr}
 8003604:	b086      	sub	sp, #24
 8003606:	af00      	add	r7, sp, #0
 8003608:	60f8      	str	r0, [r7, #12]
 800360a:	60b9      	str	r1, [r7, #8]
 800360c:	4611      	mov	r1, r2
 800360e:	461a      	mov	r2, r3
 8003610:	460b      	mov	r3, r1
 8003612:	71fb      	strb	r3, [r7, #7]
 8003614:	4613      	mov	r3, r2
 8003616:	71bb      	strb	r3, [r7, #6]
	uint8_t offset = (20 - length) / 2;
 8003618:	79fb      	ldrb	r3, [r7, #7]
 800361a:	f1c3 0314 	rsb	r3, r3, #20
 800361e:	0fda      	lsrs	r2, r3, #31
 8003620:	4413      	add	r3, r2
 8003622:	105b      	asrs	r3, r3, #1
 8003624:	75bb      	strb	r3, [r7, #22]
	LCD_SetCursor(lcd, lineNr, 0);
 8003626:	79bb      	ldrb	r3, [r7, #6]
 8003628:	2200      	movs	r2, #0
 800362a:	4619      	mov	r1, r3
 800362c:	68f8      	ldr	r0, [r7, #12]
 800362e:	f000 f838 	bl	80036a2 <LCD_SetCursor>

	for(uint8_t i = 0; i < offset; i++)
 8003632:	2300      	movs	r3, #0
 8003634:	75fb      	strb	r3, [r7, #23]
 8003636:	e006      	b.n	8003646 <LCD_DisplayStringLineCentered1+0x44>
		SendLCDDisplayData(lcd, ' ');
 8003638:	2120      	movs	r1, #32
 800363a:	68f8      	ldr	r0, [r7, #12]
 800363c:	f7ff ff44 	bl	80034c8 <SendLCDDisplayData>
	for(uint8_t i = 0; i < offset; i++)
 8003640:	7dfb      	ldrb	r3, [r7, #23]
 8003642:	3301      	adds	r3, #1
 8003644:	75fb      	strb	r3, [r7, #23]
 8003646:	7dfa      	ldrb	r2, [r7, #23]
 8003648:	7dbb      	ldrb	r3, [r7, #22]
 800364a:	429a      	cmp	r2, r3
 800364c:	d3f4      	bcc.n	8003638 <LCD_DisplayStringLineCentered1+0x36>

	LCD_DisplayString1(lcd, string, length);
 800364e:	79fb      	ldrb	r3, [r7, #7]
 8003650:	461a      	mov	r2, r3
 8003652:	68b9      	ldr	r1, [r7, #8]
 8003654:	68f8      	ldr	r0, [r7, #12]
 8003656:	f7ff ffa3 	bl	80035a0 <LCD_DisplayString1>
}
 800365a:	bf00      	nop
 800365c:	3718      	adds	r7, #24
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}

08003662 <LCD_DisplayStringLineCentered2>:

void LCD_DisplayStringLineCentered2(LCD2004_I2C *lcd, char *string, uint8_t lineNr)
{
 8003662:	b580      	push	{r7, lr}
 8003664:	b086      	sub	sp, #24
 8003666:	af00      	add	r7, sp, #0
 8003668:	60f8      	str	r0, [r7, #12]
 800366a:	60b9      	str	r1, [r7, #8]
 800366c:	4613      	mov	r3, r2
 800366e:	71fb      	strb	r3, [r7, #7]
	uint8_t strlen = 0;
 8003670:	2300      	movs	r3, #0
 8003672:	75fb      	strb	r3, [r7, #23]
	while (string[strlen] != 0 && strlen < 40)
 8003674:	e002      	b.n	800367c <LCD_DisplayStringLineCentered2+0x1a>
		strlen++;
 8003676:	7dfb      	ldrb	r3, [r7, #23]
 8003678:	3301      	adds	r3, #1
 800367a:	75fb      	strb	r3, [r7, #23]
	while (string[strlen] != 0 && strlen < 40)
 800367c:	7dfb      	ldrb	r3, [r7, #23]
 800367e:	68ba      	ldr	r2, [r7, #8]
 8003680:	4413      	add	r3, r2
 8003682:	781b      	ldrb	r3, [r3, #0]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d002      	beq.n	800368e <LCD_DisplayStringLineCentered2+0x2c>
 8003688:	7dfb      	ldrb	r3, [r7, #23]
 800368a:	2b27      	cmp	r3, #39	; 0x27
 800368c:	d9f3      	bls.n	8003676 <LCD_DisplayStringLineCentered2+0x14>

	LCD_DisplayStringLineCentered1(lcd, string, strlen, lineNr);
 800368e:	79fb      	ldrb	r3, [r7, #7]
 8003690:	7dfa      	ldrb	r2, [r7, #23]
 8003692:	68b9      	ldr	r1, [r7, #8]
 8003694:	68f8      	ldr	r0, [r7, #12]
 8003696:	f7ff ffb4 	bl	8003602 <LCD_DisplayStringLineCentered1>
}
 800369a:	bf00      	nop
 800369c:	3718      	adds	r7, #24
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}

080036a2 <LCD_SetCursor>:

void LCD_SetCursor(LCD2004_I2C *lcd, uint8_t row, uint8_t column)
{
 80036a2:	b580      	push	{r7, lr}
 80036a4:	b082      	sub	sp, #8
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	6078      	str	r0, [r7, #4]
 80036aa:	460b      	mov	r3, r1
 80036ac:	70fb      	strb	r3, [r7, #3]
 80036ae:	4613      	mov	r3, r2
 80036b0:	70bb      	strb	r3, [r7, #2]
	// row = lineNr 0-4
	// column 0-19

	if (row >= 4)
 80036b2:	78fb      	ldrb	r3, [r7, #3]
 80036b4:	2b03      	cmp	r3, #3
 80036b6:	d901      	bls.n	80036bc <LCD_SetCursor+0x1a>
		row = 3;
 80036b8:	2303      	movs	r3, #3
 80036ba:	70fb      	strb	r3, [r7, #3]
	if (column >= 20)
 80036bc:	78bb      	ldrb	r3, [r7, #2]
 80036be:	2b13      	cmp	r3, #19
 80036c0:	d901      	bls.n	80036c6 <LCD_SetCursor+0x24>
		column = 19;
 80036c2:	2313      	movs	r3, #19
 80036c4:	70bb      	strb	r3, [r7, #2]

	switch (row)
 80036c6:	78fb      	ldrb	r3, [r7, #3]
 80036c8:	2b03      	cmp	r3, #3
 80036ca:	d028      	beq.n	800371e <LCD_SetCursor+0x7c>
 80036cc:	2b03      	cmp	r3, #3
 80036ce:	dc03      	bgt.n	80036d8 <LCD_SetCursor+0x36>
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d00a      	beq.n	80036ea <LCD_SetCursor+0x48>
 80036d4:	2b02      	cmp	r3, #2
 80036d6:	d015      	beq.n	8003704 <LCD_SetCursor+0x62>
	{
	case 0:
	default:
		SendLCDInstruction(lcd, LCD_CMD_SetDDRAMAddress | (0x00 + column));
 80036d8:	78bb      	ldrb	r3, [r7, #2]
 80036da:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80036de:	b2db      	uxtb	r3, r3
 80036e0:	4619      	mov	r1, r3
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f7ff fee0 	bl	80034a8 <SendLCDInstruction>
		break;
 80036e8:	e026      	b.n	8003738 <LCD_SetCursor+0x96>
	case 1:
		SendLCDInstruction(lcd, LCD_CMD_SetDDRAMAddress | (0x40 + column));
 80036ea:	78bb      	ldrb	r3, [r7, #2]
 80036ec:	3340      	adds	r3, #64	; 0x40
 80036ee:	b2db      	uxtb	r3, r3
 80036f0:	b25b      	sxtb	r3, r3
 80036f2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80036f6:	b25b      	sxtb	r3, r3
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	4619      	mov	r1, r3
 80036fc:	6878      	ldr	r0, [r7, #4]
 80036fe:	f7ff fed3 	bl	80034a8 <SendLCDInstruction>
		break;
 8003702:	e019      	b.n	8003738 <LCD_SetCursor+0x96>
	case 2:
		SendLCDInstruction(lcd, LCD_CMD_SetDDRAMAddress | (20 + column));
 8003704:	78bb      	ldrb	r3, [r7, #2]
 8003706:	3314      	adds	r3, #20
 8003708:	b2db      	uxtb	r3, r3
 800370a:	b25b      	sxtb	r3, r3
 800370c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003710:	b25b      	sxtb	r3, r3
 8003712:	b2db      	uxtb	r3, r3
 8003714:	4619      	mov	r1, r3
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f7ff fec6 	bl	80034a8 <SendLCDInstruction>
		break;
 800371c:	e00c      	b.n	8003738 <LCD_SetCursor+0x96>
	case 3:
		SendLCDInstruction(lcd, LCD_CMD_SetDDRAMAddress | (0x40 + 20 + column));
 800371e:	78bb      	ldrb	r3, [r7, #2]
 8003720:	3354      	adds	r3, #84	; 0x54
 8003722:	b2db      	uxtb	r3, r3
 8003724:	b25b      	sxtb	r3, r3
 8003726:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800372a:	b25b      	sxtb	r3, r3
 800372c:	b2db      	uxtb	r3, r3
 800372e:	4619      	mov	r1, r3
 8003730:	6878      	ldr	r0, [r7, #4]
 8003732:	f7ff feb9 	bl	80034a8 <SendLCDInstruction>
		break;
 8003736:	bf00      	nop
	}
}
 8003738:	bf00      	nop
 800373a:	3708      	adds	r7, #8
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}

08003740 <LCD_Clear>:
}

// basic management functions

void LCD_Clear(LCD2004_I2C *lcd)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b082      	sub	sp, #8
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
	SendLCDInstruction(lcd, LCD_CMD_ClearDisplay);
 8003748:	2101      	movs	r1, #1
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f7ff feac 	bl	80034a8 <SendLCDInstruction>
	HAL_Delay(2);
 8003750:	2002      	movs	r0, #2
 8003752:	f000 f8ad 	bl	80038b0 <HAL_Delay>
	//LCD_SetCursor(lcd, 0, 0);
}
 8003756:	bf00      	nop
 8003758:	3708      	adds	r7, #8
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}

0800375e <LCD_CursorOff>:
		SendLCDDisplayCursorBlinkUpdate(lcd);
	}
}

void LCD_CursorOff(LCD2004_I2C *lcd)
{
 800375e:	b580      	push	{r7, lr}
 8003760:	b082      	sub	sp, #8
 8003762:	af00      	add	r7, sp, #0
 8003764:	6078      	str	r0, [r7, #4]
	if (lcd->lcd_cursorOnOff)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	78db      	ldrb	r3, [r3, #3]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d005      	beq.n	800377a <LCD_CursorOff+0x1c>
	{
		lcd->lcd_cursorOnOff = 0;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2200      	movs	r2, #0
 8003772:	70da      	strb	r2, [r3, #3]
		SendLCDDisplayCursorBlinkUpdate(lcd);
 8003774:	6878      	ldr	r0, [r7, #4]
 8003776:	f7ff feb7 	bl	80034e8 <SendLCDDisplayCursorBlinkUpdate>
	}
}
 800377a:	bf00      	nop
 800377c:	3708      	adds	r7, #8
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}

08003782 <LCD_BacklightOn>:
void LCD_BacklightOn(LCD2004_I2C *lcd)
{
 8003782:	b580      	push	{r7, lr}
 8003784:	b082      	sub	sp, #8
 8003786:	af00      	add	r7, sp, #0
 8003788:	6078      	str	r0, [r7, #4]
	if (lcd->lcd_backlight == LCD_BACKLIGHT_OFF)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	785b      	ldrb	r3, [r3, #1]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d105      	bne.n	800379e <LCD_BacklightOn+0x1c>
	{
		lcd->lcd_backlight = LCD_BACKLIGHT_ON;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2201      	movs	r2, #1
 8003796:	705a      	strb	r2, [r3, #1]
		SendLCDDisplayCursorBlinkUpdate(lcd);
 8003798:	6878      	ldr	r0, [r7, #4]
 800379a:	f7ff fea5 	bl	80034e8 <SendLCDDisplayCursorBlinkUpdate>
	}
}
 800379e:	bf00      	nop
 80037a0:	3708      	adds	r7, #8
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}

080037a6 <LCD_BacklightOff>:

void LCD_BacklightOff(LCD2004_I2C *lcd)
{
 80037a6:	b580      	push	{r7, lr}
 80037a8:	b082      	sub	sp, #8
 80037aa:	af00      	add	r7, sp, #0
 80037ac:	6078      	str	r0, [r7, #4]
	if (lcd->lcd_backlight == LCD_BACKLIGHT_ON)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	785b      	ldrb	r3, [r3, #1]
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d105      	bne.n	80037c2 <LCD_BacklightOff+0x1c>
	{
		lcd->lcd_backlight = LCD_BACKLIGHT_OFF;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2200      	movs	r2, #0
 80037ba:	705a      	strb	r2, [r3, #1]
		SendLCDDisplayCursorBlinkUpdate(lcd);
 80037bc:	6878      	ldr	r0, [r7, #4]
 80037be:	f7ff fe93 	bl	80034e8 <SendLCDDisplayCursorBlinkUpdate>
	}
}
 80037c2:	bf00      	nop
 80037c4:	3708      	adds	r7, #8
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}
	...

080037cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80037d0:	4b0e      	ldr	r3, [pc, #56]	; (800380c <HAL_Init+0x40>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a0d      	ldr	r2, [pc, #52]	; (800380c <HAL_Init+0x40>)
 80037d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80037da:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80037dc:	4b0b      	ldr	r3, [pc, #44]	; (800380c <HAL_Init+0x40>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a0a      	ldr	r2, [pc, #40]	; (800380c <HAL_Init+0x40>)
 80037e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80037e6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80037e8:	4b08      	ldr	r3, [pc, #32]	; (800380c <HAL_Init+0x40>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a07      	ldr	r2, [pc, #28]	; (800380c <HAL_Init+0x40>)
 80037ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80037f4:	2003      	movs	r0, #3
 80037f6:	f000 fd2d 	bl	8004254 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80037fa:	200f      	movs	r0, #15
 80037fc:	f000 f808 	bl	8003810 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003800:	f7fe ffec 	bl	80027dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003804:	2300      	movs	r3, #0
}
 8003806:	4618      	mov	r0, r3
 8003808:	bd80      	pop	{r7, pc}
 800380a:	bf00      	nop
 800380c:	40023c00 	.word	0x40023c00

08003810 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b082      	sub	sp, #8
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003818:	4b12      	ldr	r3, [pc, #72]	; (8003864 <HAL_InitTick+0x54>)
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	4b12      	ldr	r3, [pc, #72]	; (8003868 <HAL_InitTick+0x58>)
 800381e:	781b      	ldrb	r3, [r3, #0]
 8003820:	4619      	mov	r1, r3
 8003822:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003826:	fbb3 f3f1 	udiv	r3, r3, r1
 800382a:	fbb2 f3f3 	udiv	r3, r2, r3
 800382e:	4618      	mov	r0, r3
 8003830:	f000 fd45 	bl	80042be <HAL_SYSTICK_Config>
 8003834:	4603      	mov	r3, r0
 8003836:	2b00      	cmp	r3, #0
 8003838:	d001      	beq.n	800383e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	e00e      	b.n	800385c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2b0f      	cmp	r3, #15
 8003842:	d80a      	bhi.n	800385a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003844:	2200      	movs	r2, #0
 8003846:	6879      	ldr	r1, [r7, #4]
 8003848:	f04f 30ff 	mov.w	r0, #4294967295
 800384c:	f000 fd0d 	bl	800426a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003850:	4a06      	ldr	r2, [pc, #24]	; (800386c <HAL_InitTick+0x5c>)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003856:	2300      	movs	r3, #0
 8003858:	e000      	b.n	800385c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800385a:	2301      	movs	r3, #1
}
 800385c:	4618      	mov	r0, r3
 800385e:	3708      	adds	r7, #8
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}
 8003864:	20000008 	.word	0x20000008
 8003868:	20000010 	.word	0x20000010
 800386c:	2000000c 	.word	0x2000000c

08003870 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003870:	b480      	push	{r7}
 8003872:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003874:	4b06      	ldr	r3, [pc, #24]	; (8003890 <HAL_IncTick+0x20>)
 8003876:	781b      	ldrb	r3, [r3, #0]
 8003878:	461a      	mov	r2, r3
 800387a:	4b06      	ldr	r3, [pc, #24]	; (8003894 <HAL_IncTick+0x24>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4413      	add	r3, r2
 8003880:	4a04      	ldr	r2, [pc, #16]	; (8003894 <HAL_IncTick+0x24>)
 8003882:	6013      	str	r3, [r2, #0]
}
 8003884:	bf00      	nop
 8003886:	46bd      	mov	sp, r7
 8003888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388c:	4770      	bx	lr
 800388e:	bf00      	nop
 8003890:	20000010 	.word	0x20000010
 8003894:	2001080c 	.word	0x2001080c

08003898 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003898:	b480      	push	{r7}
 800389a:	af00      	add	r7, sp, #0
  return uwTick;
 800389c:	4b03      	ldr	r3, [pc, #12]	; (80038ac <HAL_GetTick+0x14>)
 800389e:	681b      	ldr	r3, [r3, #0]
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	46bd      	mov	sp, r7
 80038a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a8:	4770      	bx	lr
 80038aa:	bf00      	nop
 80038ac:	2001080c 	.word	0x2001080c

080038b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b084      	sub	sp, #16
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80038b8:	f7ff ffee 	bl	8003898 <HAL_GetTick>
 80038bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038c8:	d005      	beq.n	80038d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80038ca:	4b0a      	ldr	r3, [pc, #40]	; (80038f4 <HAL_Delay+0x44>)
 80038cc:	781b      	ldrb	r3, [r3, #0]
 80038ce:	461a      	mov	r2, r3
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	4413      	add	r3, r2
 80038d4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80038d6:	bf00      	nop
 80038d8:	f7ff ffde 	bl	8003898 <HAL_GetTick>
 80038dc:	4602      	mov	r2, r0
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	1ad3      	subs	r3, r2, r3
 80038e2:	68fa      	ldr	r2, [r7, #12]
 80038e4:	429a      	cmp	r2, r3
 80038e6:	d8f7      	bhi.n	80038d8 <HAL_Delay+0x28>
  {
  }
}
 80038e8:	bf00      	nop
 80038ea:	bf00      	nop
 80038ec:	3710      	adds	r7, #16
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}
 80038f2:	bf00      	nop
 80038f4:	20000010 	.word	0x20000010

080038f8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b084      	sub	sp, #16
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003900:	2300      	movs	r3, #0
 8003902:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d101      	bne.n	800390e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	e033      	b.n	8003976 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003912:	2b00      	cmp	r3, #0
 8003914:	d109      	bne.n	800392a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f7fd fffc 	bl	8001914 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2200      	movs	r2, #0
 8003920:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2200      	movs	r2, #0
 8003926:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392e:	f003 0310 	and.w	r3, r3, #16
 8003932:	2b00      	cmp	r3, #0
 8003934:	d118      	bne.n	8003968 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800393a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800393e:	f023 0302 	bic.w	r3, r3, #2
 8003942:	f043 0202 	orr.w	r2, r3, #2
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f000 fa34 	bl	8003db8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2200      	movs	r2, #0
 8003954:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800395a:	f023 0303 	bic.w	r3, r3, #3
 800395e:	f043 0201 	orr.w	r2, r3, #1
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	641a      	str	r2, [r3, #64]	; 0x40
 8003966:	e001      	b.n	800396c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2200      	movs	r2, #0
 8003970:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003974:	7bfb      	ldrb	r3, [r7, #15]
}
 8003976:	4618      	mov	r0, r3
 8003978:	3710      	adds	r7, #16
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}
	...

08003980 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b086      	sub	sp, #24
 8003984:	af00      	add	r7, sp, #0
 8003986:	60f8      	str	r0, [r7, #12]
 8003988:	60b9      	str	r1, [r7, #8]
 800398a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800398c:	2300      	movs	r3, #0
 800398e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003996:	2b01      	cmp	r3, #1
 8003998:	d101      	bne.n	800399e <HAL_ADC_Start_DMA+0x1e>
 800399a:	2302      	movs	r3, #2
 800399c:	e0ce      	b.n	8003b3c <HAL_ADC_Start_DMA+0x1bc>
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	2201      	movs	r2, #1
 80039a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	f003 0301 	and.w	r3, r3, #1
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	d018      	beq.n	80039e6 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	689a      	ldr	r2, [r3, #8]
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f042 0201 	orr.w	r2, r2, #1
 80039c2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80039c4:	4b5f      	ldr	r3, [pc, #380]	; (8003b44 <HAL_ADC_Start_DMA+0x1c4>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a5f      	ldr	r2, [pc, #380]	; (8003b48 <HAL_ADC_Start_DMA+0x1c8>)
 80039ca:	fba2 2303 	umull	r2, r3, r2, r3
 80039ce:	0c9a      	lsrs	r2, r3, #18
 80039d0:	4613      	mov	r3, r2
 80039d2:	005b      	lsls	r3, r3, #1
 80039d4:	4413      	add	r3, r2
 80039d6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80039d8:	e002      	b.n	80039e0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	3b01      	subs	r3, #1
 80039de:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d1f9      	bne.n	80039da <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039f4:	d107      	bne.n	8003a06 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	689a      	ldr	r2, [r3, #8]
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a04:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	f003 0301 	and.w	r3, r3, #1
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	f040 8086 	bne.w	8003b22 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a1a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003a1e:	f023 0301 	bic.w	r3, r3, #1
 8003a22:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d007      	beq.n	8003a48 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003a40:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a54:	d106      	bne.n	8003a64 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a5a:	f023 0206 	bic.w	r2, r3, #6
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	645a      	str	r2, [r3, #68]	; 0x44
 8003a62:	e002      	b.n	8003a6a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2200      	movs	r2, #0
 8003a68:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003a72:	4b36      	ldr	r3, [pc, #216]	; (8003b4c <HAL_ADC_Start_DMA+0x1cc>)
 8003a74:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a7a:	4a35      	ldr	r2, [pc, #212]	; (8003b50 <HAL_ADC_Start_DMA+0x1d0>)
 8003a7c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a82:	4a34      	ldr	r2, [pc, #208]	; (8003b54 <HAL_ADC_Start_DMA+0x1d4>)
 8003a84:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a8a:	4a33      	ldr	r2, [pc, #204]	; (8003b58 <HAL_ADC_Start_DMA+0x1d8>)
 8003a8c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003a96:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	685a      	ldr	r2, [r3, #4]
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003aa6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	689a      	ldr	r2, [r3, #8]
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ab6:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	334c      	adds	r3, #76	; 0x4c
 8003ac2:	4619      	mov	r1, r3
 8003ac4:	68ba      	ldr	r2, [r7, #8]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	f000 fcb4 	bl	8004434 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	f003 031f 	and.w	r3, r3, #31
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d10f      	bne.n	8003af8 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d129      	bne.n	8003b3a <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	689a      	ldr	r2, [r3, #8]
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003af4:	609a      	str	r2, [r3, #8]
 8003af6:	e020      	b.n	8003b3a <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a17      	ldr	r2, [pc, #92]	; (8003b5c <HAL_ADC_Start_DMA+0x1dc>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d11b      	bne.n	8003b3a <HAL_ADC_Start_DMA+0x1ba>
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d114      	bne.n	8003b3a <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	689a      	ldr	r2, [r3, #8]
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003b1e:	609a      	str	r2, [r3, #8]
 8003b20:	e00b      	b.n	8003b3a <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b26:	f043 0210 	orr.w	r2, r3, #16
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b32:	f043 0201 	orr.w	r2, r3, #1
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003b3a:	2300      	movs	r3, #0
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	3718      	adds	r7, #24
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}
 8003b44:	20000008 	.word	0x20000008
 8003b48:	431bde83 	.word	0x431bde83
 8003b4c:	40012300 	.word	0x40012300
 8003b50:	08003fb1 	.word	0x08003fb1
 8003b54:	0800406b 	.word	0x0800406b
 8003b58:	08004087 	.word	0x08004087
 8003b5c:	40012000 	.word	0x40012000

08003b60 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b083      	sub	sp, #12
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003b68:	bf00      	nop
 8003b6a:	370c      	adds	r7, #12
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b72:	4770      	bx	lr

08003b74 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b085      	sub	sp, #20
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
 8003b7c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	d101      	bne.n	8003b90 <HAL_ADC_ConfigChannel+0x1c>
 8003b8c:	2302      	movs	r3, #2
 8003b8e:	e105      	b.n	8003d9c <HAL_ADC_ConfigChannel+0x228>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2201      	movs	r2, #1
 8003b94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	2b09      	cmp	r3, #9
 8003b9e:	d925      	bls.n	8003bec <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	68d9      	ldr	r1, [r3, #12]
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	b29b      	uxth	r3, r3
 8003bac:	461a      	mov	r2, r3
 8003bae:	4613      	mov	r3, r2
 8003bb0:	005b      	lsls	r3, r3, #1
 8003bb2:	4413      	add	r3, r2
 8003bb4:	3b1e      	subs	r3, #30
 8003bb6:	2207      	movs	r2, #7
 8003bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bbc:	43da      	mvns	r2, r3
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	400a      	ands	r2, r1
 8003bc4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	68d9      	ldr	r1, [r3, #12]
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	689a      	ldr	r2, [r3, #8]
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	b29b      	uxth	r3, r3
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	4603      	mov	r3, r0
 8003bda:	005b      	lsls	r3, r3, #1
 8003bdc:	4403      	add	r3, r0
 8003bde:	3b1e      	subs	r3, #30
 8003be0:	409a      	lsls	r2, r3
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	430a      	orrs	r2, r1
 8003be8:	60da      	str	r2, [r3, #12]
 8003bea:	e022      	b.n	8003c32 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	6919      	ldr	r1, [r3, #16]
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	b29b      	uxth	r3, r3
 8003bf8:	461a      	mov	r2, r3
 8003bfa:	4613      	mov	r3, r2
 8003bfc:	005b      	lsls	r3, r3, #1
 8003bfe:	4413      	add	r3, r2
 8003c00:	2207      	movs	r2, #7
 8003c02:	fa02 f303 	lsl.w	r3, r2, r3
 8003c06:	43da      	mvns	r2, r3
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	400a      	ands	r2, r1
 8003c0e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	6919      	ldr	r1, [r3, #16]
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	689a      	ldr	r2, [r3, #8]
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	b29b      	uxth	r3, r3
 8003c20:	4618      	mov	r0, r3
 8003c22:	4603      	mov	r3, r0
 8003c24:	005b      	lsls	r3, r3, #1
 8003c26:	4403      	add	r3, r0
 8003c28:	409a      	lsls	r2, r3
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	430a      	orrs	r2, r1
 8003c30:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	2b06      	cmp	r3, #6
 8003c38:	d824      	bhi.n	8003c84 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	685a      	ldr	r2, [r3, #4]
 8003c44:	4613      	mov	r3, r2
 8003c46:	009b      	lsls	r3, r3, #2
 8003c48:	4413      	add	r3, r2
 8003c4a:	3b05      	subs	r3, #5
 8003c4c:	221f      	movs	r2, #31
 8003c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c52:	43da      	mvns	r2, r3
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	400a      	ands	r2, r1
 8003c5a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	b29b      	uxth	r3, r3
 8003c68:	4618      	mov	r0, r3
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	685a      	ldr	r2, [r3, #4]
 8003c6e:	4613      	mov	r3, r2
 8003c70:	009b      	lsls	r3, r3, #2
 8003c72:	4413      	add	r3, r2
 8003c74:	3b05      	subs	r3, #5
 8003c76:	fa00 f203 	lsl.w	r2, r0, r3
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	430a      	orrs	r2, r1
 8003c80:	635a      	str	r2, [r3, #52]	; 0x34
 8003c82:	e04c      	b.n	8003d1e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	2b0c      	cmp	r3, #12
 8003c8a:	d824      	bhi.n	8003cd6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	685a      	ldr	r2, [r3, #4]
 8003c96:	4613      	mov	r3, r2
 8003c98:	009b      	lsls	r3, r3, #2
 8003c9a:	4413      	add	r3, r2
 8003c9c:	3b23      	subs	r3, #35	; 0x23
 8003c9e:	221f      	movs	r2, #31
 8003ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca4:	43da      	mvns	r2, r3
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	400a      	ands	r2, r1
 8003cac:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	b29b      	uxth	r3, r3
 8003cba:	4618      	mov	r0, r3
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	685a      	ldr	r2, [r3, #4]
 8003cc0:	4613      	mov	r3, r2
 8003cc2:	009b      	lsls	r3, r3, #2
 8003cc4:	4413      	add	r3, r2
 8003cc6:	3b23      	subs	r3, #35	; 0x23
 8003cc8:	fa00 f203 	lsl.w	r2, r0, r3
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	430a      	orrs	r2, r1
 8003cd2:	631a      	str	r2, [r3, #48]	; 0x30
 8003cd4:	e023      	b.n	8003d1e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	685a      	ldr	r2, [r3, #4]
 8003ce0:	4613      	mov	r3, r2
 8003ce2:	009b      	lsls	r3, r3, #2
 8003ce4:	4413      	add	r3, r2
 8003ce6:	3b41      	subs	r3, #65	; 0x41
 8003ce8:	221f      	movs	r2, #31
 8003cea:	fa02 f303 	lsl.w	r3, r2, r3
 8003cee:	43da      	mvns	r2, r3
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	400a      	ands	r2, r1
 8003cf6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	b29b      	uxth	r3, r3
 8003d04:	4618      	mov	r0, r3
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	685a      	ldr	r2, [r3, #4]
 8003d0a:	4613      	mov	r3, r2
 8003d0c:	009b      	lsls	r3, r3, #2
 8003d0e:	4413      	add	r3, r2
 8003d10:	3b41      	subs	r3, #65	; 0x41
 8003d12:	fa00 f203 	lsl.w	r2, r0, r3
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	430a      	orrs	r2, r1
 8003d1c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003d1e:	4b22      	ldr	r3, [pc, #136]	; (8003da8 <HAL_ADC_ConfigChannel+0x234>)
 8003d20:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a21      	ldr	r2, [pc, #132]	; (8003dac <HAL_ADC_ConfigChannel+0x238>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d109      	bne.n	8003d40 <HAL_ADC_ConfigChannel+0x1cc>
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	2b12      	cmp	r3, #18
 8003d32:	d105      	bne.n	8003d40 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a19      	ldr	r2, [pc, #100]	; (8003dac <HAL_ADC_ConfigChannel+0x238>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d123      	bne.n	8003d92 <HAL_ADC_ConfigChannel+0x21e>
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	2b10      	cmp	r3, #16
 8003d50:	d003      	beq.n	8003d5a <HAL_ADC_ConfigChannel+0x1e6>
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	2b11      	cmp	r3, #17
 8003d58:	d11b      	bne.n	8003d92 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	2b10      	cmp	r3, #16
 8003d6c:	d111      	bne.n	8003d92 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003d6e:	4b10      	ldr	r3, [pc, #64]	; (8003db0 <HAL_ADC_ConfigChannel+0x23c>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a10      	ldr	r2, [pc, #64]	; (8003db4 <HAL_ADC_ConfigChannel+0x240>)
 8003d74:	fba2 2303 	umull	r2, r3, r2, r3
 8003d78:	0c9a      	lsrs	r2, r3, #18
 8003d7a:	4613      	mov	r3, r2
 8003d7c:	009b      	lsls	r3, r3, #2
 8003d7e:	4413      	add	r3, r2
 8003d80:	005b      	lsls	r3, r3, #1
 8003d82:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003d84:	e002      	b.n	8003d8c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	3b01      	subs	r3, #1
 8003d8a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d1f9      	bne.n	8003d86 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2200      	movs	r2, #0
 8003d96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003d9a:	2300      	movs	r3, #0
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	3714      	adds	r7, #20
 8003da0:	46bd      	mov	sp, r7
 8003da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da6:	4770      	bx	lr
 8003da8:	40012300 	.word	0x40012300
 8003dac:	40012000 	.word	0x40012000
 8003db0:	20000008 	.word	0x20000008
 8003db4:	431bde83 	.word	0x431bde83

08003db8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b085      	sub	sp, #20
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003dc0:	4b79      	ldr	r3, [pc, #484]	; (8003fa8 <ADC_Init+0x1f0>)
 8003dc2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	685a      	ldr	r2, [r3, #4]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	431a      	orrs	r2, r3
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	685a      	ldr	r2, [r3, #4]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003dec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	6859      	ldr	r1, [r3, #4]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	691b      	ldr	r3, [r3, #16]
 8003df8:	021a      	lsls	r2, r3, #8
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	430a      	orrs	r2, r1
 8003e00:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	685a      	ldr	r2, [r3, #4]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003e10:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	6859      	ldr	r1, [r3, #4]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	689a      	ldr	r2, [r3, #8]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	430a      	orrs	r2, r1
 8003e22:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	689a      	ldr	r2, [r3, #8]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e32:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	6899      	ldr	r1, [r3, #8]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	68da      	ldr	r2, [r3, #12]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	430a      	orrs	r2, r1
 8003e44:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e4a:	4a58      	ldr	r2, [pc, #352]	; (8003fac <ADC_Init+0x1f4>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d022      	beq.n	8003e96 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	689a      	ldr	r2, [r3, #8]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003e5e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	6899      	ldr	r1, [r3, #8]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	430a      	orrs	r2, r1
 8003e70:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	689a      	ldr	r2, [r3, #8]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003e80:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	6899      	ldr	r1, [r3, #8]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	430a      	orrs	r2, r1
 8003e92:	609a      	str	r2, [r3, #8]
 8003e94:	e00f      	b.n	8003eb6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	689a      	ldr	r2, [r3, #8]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003ea4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	689a      	ldr	r2, [r3, #8]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003eb4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	689a      	ldr	r2, [r3, #8]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f022 0202 	bic.w	r2, r2, #2
 8003ec4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	6899      	ldr	r1, [r3, #8]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	7e1b      	ldrb	r3, [r3, #24]
 8003ed0:	005a      	lsls	r2, r3, #1
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	430a      	orrs	r2, r1
 8003ed8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d01b      	beq.n	8003f1c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	685a      	ldr	r2, [r3, #4]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ef2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	685a      	ldr	r2, [r3, #4]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003f02:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	6859      	ldr	r1, [r3, #4]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f0e:	3b01      	subs	r3, #1
 8003f10:	035a      	lsls	r2, r3, #13
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	430a      	orrs	r2, r1
 8003f18:	605a      	str	r2, [r3, #4]
 8003f1a:	e007      	b.n	8003f2c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	685a      	ldr	r2, [r3, #4]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f2a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003f3a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	69db      	ldr	r3, [r3, #28]
 8003f46:	3b01      	subs	r3, #1
 8003f48:	051a      	lsls	r2, r3, #20
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	430a      	orrs	r2, r1
 8003f50:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	689a      	ldr	r2, [r3, #8]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003f60:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	6899      	ldr	r1, [r3, #8]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003f6e:	025a      	lsls	r2, r3, #9
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	430a      	orrs	r2, r1
 8003f76:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	689a      	ldr	r2, [r3, #8]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f86:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	6899      	ldr	r1, [r3, #8]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	695b      	ldr	r3, [r3, #20]
 8003f92:	029a      	lsls	r2, r3, #10
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	430a      	orrs	r2, r1
 8003f9a:	609a      	str	r2, [r3, #8]
}
 8003f9c:	bf00      	nop
 8003f9e:	3714      	adds	r7, #20
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa6:	4770      	bx	lr
 8003fa8:	40012300 	.word	0x40012300
 8003fac:	0f000001 	.word	0x0f000001

08003fb0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b084      	sub	sp, #16
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fbc:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d13c      	bne.n	8004044 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fce:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d12b      	bne.n	800403c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d127      	bne.n	800403c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ff2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d006      	beq.n	8004008 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004004:	2b00      	cmp	r3, #0
 8004006:	d119      	bne.n	800403c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	685a      	ldr	r2, [r3, #4]
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f022 0220 	bic.w	r2, r2, #32
 8004016:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800401c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004028:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800402c:	2b00      	cmp	r3, #0
 800402e:	d105      	bne.n	800403c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004034:	f043 0201 	orr.w	r2, r3, #1
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800403c:	68f8      	ldr	r0, [r7, #12]
 800403e:	f7fe fb61 	bl	8002704 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004042:	e00e      	b.n	8004062 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004048:	f003 0310 	and.w	r3, r3, #16
 800404c:	2b00      	cmp	r3, #0
 800404e:	d003      	beq.n	8004058 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004050:	68f8      	ldr	r0, [r7, #12]
 8004052:	f7ff fd85 	bl	8003b60 <HAL_ADC_ErrorCallback>
}
 8004056:	e004      	b.n	8004062 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800405c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	4798      	blx	r3
}
 8004062:	bf00      	nop
 8004064:	3710      	adds	r7, #16
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}

0800406a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800406a:	b580      	push	{r7, lr}
 800406c:	b084      	sub	sp, #16
 800406e:	af00      	add	r7, sp, #0
 8004070:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004076:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004078:	68f8      	ldr	r0, [r7, #12]
 800407a:	f7fe fb6d 	bl	8002758 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800407e:	bf00      	nop
 8004080:	3710      	adds	r7, #16
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}

08004086 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004086:	b580      	push	{r7, lr}
 8004088:	b084      	sub	sp, #16
 800408a:	af00      	add	r7, sp, #0
 800408c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004092:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2240      	movs	r2, #64	; 0x40
 8004098:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800409e:	f043 0204 	orr.w	r2, r3, #4
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80040a6:	68f8      	ldr	r0, [r7, #12]
 80040a8:	f7ff fd5a 	bl	8003b60 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80040ac:	bf00      	nop
 80040ae:	3710      	adds	r7, #16
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}

080040b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b085      	sub	sp, #20
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	f003 0307 	and.w	r3, r3, #7
 80040c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80040c4:	4b0c      	ldr	r3, [pc, #48]	; (80040f8 <__NVIC_SetPriorityGrouping+0x44>)
 80040c6:	68db      	ldr	r3, [r3, #12]
 80040c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80040ca:	68ba      	ldr	r2, [r7, #8]
 80040cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80040d0:	4013      	ands	r3, r2
 80040d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80040dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80040e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80040e6:	4a04      	ldr	r2, [pc, #16]	; (80040f8 <__NVIC_SetPriorityGrouping+0x44>)
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	60d3      	str	r3, [r2, #12]
}
 80040ec:	bf00      	nop
 80040ee:	3714      	adds	r7, #20
 80040f0:	46bd      	mov	sp, r7
 80040f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f6:	4770      	bx	lr
 80040f8:	e000ed00 	.word	0xe000ed00

080040fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80040fc:	b480      	push	{r7}
 80040fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004100:	4b04      	ldr	r3, [pc, #16]	; (8004114 <__NVIC_GetPriorityGrouping+0x18>)
 8004102:	68db      	ldr	r3, [r3, #12]
 8004104:	0a1b      	lsrs	r3, r3, #8
 8004106:	f003 0307 	and.w	r3, r3, #7
}
 800410a:	4618      	mov	r0, r3
 800410c:	46bd      	mov	sp, r7
 800410e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004112:	4770      	bx	lr
 8004114:	e000ed00 	.word	0xe000ed00

08004118 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004118:	b480      	push	{r7}
 800411a:	b083      	sub	sp, #12
 800411c:	af00      	add	r7, sp, #0
 800411e:	4603      	mov	r3, r0
 8004120:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004126:	2b00      	cmp	r3, #0
 8004128:	db0b      	blt.n	8004142 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800412a:	79fb      	ldrb	r3, [r7, #7]
 800412c:	f003 021f 	and.w	r2, r3, #31
 8004130:	4907      	ldr	r1, [pc, #28]	; (8004150 <__NVIC_EnableIRQ+0x38>)
 8004132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004136:	095b      	lsrs	r3, r3, #5
 8004138:	2001      	movs	r0, #1
 800413a:	fa00 f202 	lsl.w	r2, r0, r2
 800413e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004142:	bf00      	nop
 8004144:	370c      	adds	r7, #12
 8004146:	46bd      	mov	sp, r7
 8004148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414c:	4770      	bx	lr
 800414e:	bf00      	nop
 8004150:	e000e100 	.word	0xe000e100

08004154 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004154:	b480      	push	{r7}
 8004156:	b083      	sub	sp, #12
 8004158:	af00      	add	r7, sp, #0
 800415a:	4603      	mov	r3, r0
 800415c:	6039      	str	r1, [r7, #0]
 800415e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004160:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004164:	2b00      	cmp	r3, #0
 8004166:	db0a      	blt.n	800417e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	b2da      	uxtb	r2, r3
 800416c:	490c      	ldr	r1, [pc, #48]	; (80041a0 <__NVIC_SetPriority+0x4c>)
 800416e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004172:	0112      	lsls	r2, r2, #4
 8004174:	b2d2      	uxtb	r2, r2
 8004176:	440b      	add	r3, r1
 8004178:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800417c:	e00a      	b.n	8004194 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	b2da      	uxtb	r2, r3
 8004182:	4908      	ldr	r1, [pc, #32]	; (80041a4 <__NVIC_SetPriority+0x50>)
 8004184:	79fb      	ldrb	r3, [r7, #7]
 8004186:	f003 030f 	and.w	r3, r3, #15
 800418a:	3b04      	subs	r3, #4
 800418c:	0112      	lsls	r2, r2, #4
 800418e:	b2d2      	uxtb	r2, r2
 8004190:	440b      	add	r3, r1
 8004192:	761a      	strb	r2, [r3, #24]
}
 8004194:	bf00      	nop
 8004196:	370c      	adds	r7, #12
 8004198:	46bd      	mov	sp, r7
 800419a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419e:	4770      	bx	lr
 80041a0:	e000e100 	.word	0xe000e100
 80041a4:	e000ed00 	.word	0xe000ed00

080041a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b089      	sub	sp, #36	; 0x24
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	60f8      	str	r0, [r7, #12]
 80041b0:	60b9      	str	r1, [r7, #8]
 80041b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	f003 0307 	and.w	r3, r3, #7
 80041ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80041bc:	69fb      	ldr	r3, [r7, #28]
 80041be:	f1c3 0307 	rsb	r3, r3, #7
 80041c2:	2b04      	cmp	r3, #4
 80041c4:	bf28      	it	cs
 80041c6:	2304      	movcs	r3, #4
 80041c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80041ca:	69fb      	ldr	r3, [r7, #28]
 80041cc:	3304      	adds	r3, #4
 80041ce:	2b06      	cmp	r3, #6
 80041d0:	d902      	bls.n	80041d8 <NVIC_EncodePriority+0x30>
 80041d2:	69fb      	ldr	r3, [r7, #28]
 80041d4:	3b03      	subs	r3, #3
 80041d6:	e000      	b.n	80041da <NVIC_EncodePriority+0x32>
 80041d8:	2300      	movs	r3, #0
 80041da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041dc:	f04f 32ff 	mov.w	r2, #4294967295
 80041e0:	69bb      	ldr	r3, [r7, #24]
 80041e2:	fa02 f303 	lsl.w	r3, r2, r3
 80041e6:	43da      	mvns	r2, r3
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	401a      	ands	r2, r3
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80041f0:	f04f 31ff 	mov.w	r1, #4294967295
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	fa01 f303 	lsl.w	r3, r1, r3
 80041fa:	43d9      	mvns	r1, r3
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004200:	4313      	orrs	r3, r2
         );
}
 8004202:	4618      	mov	r0, r3
 8004204:	3724      	adds	r7, #36	; 0x24
 8004206:	46bd      	mov	sp, r7
 8004208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420c:	4770      	bx	lr
	...

08004210 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b082      	sub	sp, #8
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	3b01      	subs	r3, #1
 800421c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004220:	d301      	bcc.n	8004226 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004222:	2301      	movs	r3, #1
 8004224:	e00f      	b.n	8004246 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004226:	4a0a      	ldr	r2, [pc, #40]	; (8004250 <SysTick_Config+0x40>)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	3b01      	subs	r3, #1
 800422c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800422e:	210f      	movs	r1, #15
 8004230:	f04f 30ff 	mov.w	r0, #4294967295
 8004234:	f7ff ff8e 	bl	8004154 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004238:	4b05      	ldr	r3, [pc, #20]	; (8004250 <SysTick_Config+0x40>)
 800423a:	2200      	movs	r2, #0
 800423c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800423e:	4b04      	ldr	r3, [pc, #16]	; (8004250 <SysTick_Config+0x40>)
 8004240:	2207      	movs	r2, #7
 8004242:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004244:	2300      	movs	r3, #0
}
 8004246:	4618      	mov	r0, r3
 8004248:	3708      	adds	r7, #8
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}
 800424e:	bf00      	nop
 8004250:	e000e010 	.word	0xe000e010

08004254 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b082      	sub	sp, #8
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800425c:	6878      	ldr	r0, [r7, #4]
 800425e:	f7ff ff29 	bl	80040b4 <__NVIC_SetPriorityGrouping>
}
 8004262:	bf00      	nop
 8004264:	3708      	adds	r7, #8
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}

0800426a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800426a:	b580      	push	{r7, lr}
 800426c:	b086      	sub	sp, #24
 800426e:	af00      	add	r7, sp, #0
 8004270:	4603      	mov	r3, r0
 8004272:	60b9      	str	r1, [r7, #8]
 8004274:	607a      	str	r2, [r7, #4]
 8004276:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004278:	2300      	movs	r3, #0
 800427a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800427c:	f7ff ff3e 	bl	80040fc <__NVIC_GetPriorityGrouping>
 8004280:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004282:	687a      	ldr	r2, [r7, #4]
 8004284:	68b9      	ldr	r1, [r7, #8]
 8004286:	6978      	ldr	r0, [r7, #20]
 8004288:	f7ff ff8e 	bl	80041a8 <NVIC_EncodePriority>
 800428c:	4602      	mov	r2, r0
 800428e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004292:	4611      	mov	r1, r2
 8004294:	4618      	mov	r0, r3
 8004296:	f7ff ff5d 	bl	8004154 <__NVIC_SetPriority>
}
 800429a:	bf00      	nop
 800429c:	3718      	adds	r7, #24
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}

080042a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80042a2:	b580      	push	{r7, lr}
 80042a4:	b082      	sub	sp, #8
 80042a6:	af00      	add	r7, sp, #0
 80042a8:	4603      	mov	r3, r0
 80042aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80042ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042b0:	4618      	mov	r0, r3
 80042b2:	f7ff ff31 	bl	8004118 <__NVIC_EnableIRQ>
}
 80042b6:	bf00      	nop
 80042b8:	3708      	adds	r7, #8
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}

080042be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80042be:	b580      	push	{r7, lr}
 80042c0:	b082      	sub	sp, #8
 80042c2:	af00      	add	r7, sp, #0
 80042c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	f7ff ffa2 	bl	8004210 <SysTick_Config>
 80042cc:	4603      	mov	r3, r0
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	3708      	adds	r7, #8
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}
	...

080042d8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b086      	sub	sp, #24
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80042e0:	2300      	movs	r3, #0
 80042e2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80042e4:	f7ff fad8 	bl	8003898 <HAL_GetTick>
 80042e8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d101      	bne.n	80042f4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80042f0:	2301      	movs	r3, #1
 80042f2:	e099      	b.n	8004428 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2202      	movs	r2, #2
 80042f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2200      	movs	r2, #0
 8004300:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	681a      	ldr	r2, [r3, #0]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f022 0201 	bic.w	r2, r2, #1
 8004312:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004314:	e00f      	b.n	8004336 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004316:	f7ff fabf 	bl	8003898 <HAL_GetTick>
 800431a:	4602      	mov	r2, r0
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	1ad3      	subs	r3, r2, r3
 8004320:	2b05      	cmp	r3, #5
 8004322:	d908      	bls.n	8004336 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2220      	movs	r2, #32
 8004328:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2203      	movs	r2, #3
 800432e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004332:	2303      	movs	r3, #3
 8004334:	e078      	b.n	8004428 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f003 0301 	and.w	r3, r3, #1
 8004340:	2b00      	cmp	r3, #0
 8004342:	d1e8      	bne.n	8004316 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800434c:	697a      	ldr	r2, [r7, #20]
 800434e:	4b38      	ldr	r3, [pc, #224]	; (8004430 <HAL_DMA_Init+0x158>)
 8004350:	4013      	ands	r3, r2
 8004352:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	685a      	ldr	r2, [r3, #4]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	689b      	ldr	r3, [r3, #8]
 800435c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004362:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	691b      	ldr	r3, [r3, #16]
 8004368:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800436e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	699b      	ldr	r3, [r3, #24]
 8004374:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800437a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6a1b      	ldr	r3, [r3, #32]
 8004380:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004382:	697a      	ldr	r2, [r7, #20]
 8004384:	4313      	orrs	r3, r2
 8004386:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800438c:	2b04      	cmp	r3, #4
 800438e:	d107      	bne.n	80043a0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004398:	4313      	orrs	r3, r2
 800439a:	697a      	ldr	r2, [r7, #20]
 800439c:	4313      	orrs	r3, r2
 800439e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	697a      	ldr	r2, [r7, #20]
 80043a6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	695b      	ldr	r3, [r3, #20]
 80043ae:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	f023 0307 	bic.w	r3, r3, #7
 80043b6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043bc:	697a      	ldr	r2, [r7, #20]
 80043be:	4313      	orrs	r3, r2
 80043c0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c6:	2b04      	cmp	r3, #4
 80043c8:	d117      	bne.n	80043fa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043ce:	697a      	ldr	r2, [r7, #20]
 80043d0:	4313      	orrs	r3, r2
 80043d2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d00e      	beq.n	80043fa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80043dc:	6878      	ldr	r0, [r7, #4]
 80043de:	f000 fb0f 	bl	8004a00 <DMA_CheckFifoParam>
 80043e2:	4603      	mov	r3, r0
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d008      	beq.n	80043fa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2240      	movs	r2, #64	; 0x40
 80043ec:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2201      	movs	r2, #1
 80043f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80043f6:	2301      	movs	r3, #1
 80043f8:	e016      	b.n	8004428 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	697a      	ldr	r2, [r7, #20]
 8004400:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004402:	6878      	ldr	r0, [r7, #4]
 8004404:	f000 fac6 	bl	8004994 <DMA_CalcBaseAndBitshift>
 8004408:	4603      	mov	r3, r0
 800440a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004410:	223f      	movs	r2, #63	; 0x3f
 8004412:	409a      	lsls	r2, r3
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2200      	movs	r2, #0
 800441c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2201      	movs	r2, #1
 8004422:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004426:	2300      	movs	r3, #0
}
 8004428:	4618      	mov	r0, r3
 800442a:	3718      	adds	r7, #24
 800442c:	46bd      	mov	sp, r7
 800442e:	bd80      	pop	{r7, pc}
 8004430:	f010803f 	.word	0xf010803f

08004434 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b086      	sub	sp, #24
 8004438:	af00      	add	r7, sp, #0
 800443a:	60f8      	str	r0, [r7, #12]
 800443c:	60b9      	str	r1, [r7, #8]
 800443e:	607a      	str	r2, [r7, #4]
 8004440:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004442:	2300      	movs	r3, #0
 8004444:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800444a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004452:	2b01      	cmp	r3, #1
 8004454:	d101      	bne.n	800445a <HAL_DMA_Start_IT+0x26>
 8004456:	2302      	movs	r3, #2
 8004458:	e040      	b.n	80044dc <HAL_DMA_Start_IT+0xa8>
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	2201      	movs	r2, #1
 800445e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004468:	b2db      	uxtb	r3, r3
 800446a:	2b01      	cmp	r3, #1
 800446c:	d12f      	bne.n	80044ce <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2202      	movs	r2, #2
 8004472:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2200      	movs	r2, #0
 800447a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	687a      	ldr	r2, [r7, #4]
 8004480:	68b9      	ldr	r1, [r7, #8]
 8004482:	68f8      	ldr	r0, [r7, #12]
 8004484:	f000 fa58 	bl	8004938 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800448c:	223f      	movs	r2, #63	; 0x3f
 800448e:	409a      	lsls	r2, r3
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	681a      	ldr	r2, [r3, #0]
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f042 0216 	orr.w	r2, r2, #22
 80044a2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d007      	beq.n	80044bc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	681a      	ldr	r2, [r3, #0]
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f042 0208 	orr.w	r2, r2, #8
 80044ba:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	681a      	ldr	r2, [r3, #0]
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f042 0201 	orr.w	r2, r2, #1
 80044ca:	601a      	str	r2, [r3, #0]
 80044cc:	e005      	b.n	80044da <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2200      	movs	r2, #0
 80044d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80044d6:	2302      	movs	r3, #2
 80044d8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80044da:	7dfb      	ldrb	r3, [r7, #23]
}
 80044dc:	4618      	mov	r0, r3
 80044de:	3718      	adds	r7, #24
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bd80      	pop	{r7, pc}

080044e4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b084      	sub	sp, #16
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044f0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80044f2:	f7ff f9d1 	bl	8003898 <HAL_GetTick>
 80044f6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80044fe:	b2db      	uxtb	r3, r3
 8004500:	2b02      	cmp	r3, #2
 8004502:	d008      	beq.n	8004516 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2280      	movs	r2, #128	; 0x80
 8004508:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2200      	movs	r2, #0
 800450e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	e052      	b.n	80045bc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f022 0216 	bic.w	r2, r2, #22
 8004524:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	695a      	ldr	r2, [r3, #20]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004534:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800453a:	2b00      	cmp	r3, #0
 800453c:	d103      	bne.n	8004546 <HAL_DMA_Abort+0x62>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004542:	2b00      	cmp	r3, #0
 8004544:	d007      	beq.n	8004556 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f022 0208 	bic.w	r2, r2, #8
 8004554:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	681a      	ldr	r2, [r3, #0]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f022 0201 	bic.w	r2, r2, #1
 8004564:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004566:	e013      	b.n	8004590 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004568:	f7ff f996 	bl	8003898 <HAL_GetTick>
 800456c:	4602      	mov	r2, r0
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	1ad3      	subs	r3, r2, r3
 8004572:	2b05      	cmp	r3, #5
 8004574:	d90c      	bls.n	8004590 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2220      	movs	r2, #32
 800457a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2203      	movs	r2, #3
 8004580:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2200      	movs	r2, #0
 8004588:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800458c:	2303      	movs	r3, #3
 800458e:	e015      	b.n	80045bc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f003 0301 	and.w	r3, r3, #1
 800459a:	2b00      	cmp	r3, #0
 800459c:	d1e4      	bne.n	8004568 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045a2:	223f      	movs	r2, #63	; 0x3f
 80045a4:	409a      	lsls	r2, r3
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2201      	movs	r2, #1
 80045ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2200      	movs	r2, #0
 80045b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80045ba:	2300      	movs	r3, #0
}
 80045bc:	4618      	mov	r0, r3
 80045be:	3710      	adds	r7, #16
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bd80      	pop	{r7, pc}

080045c4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80045c4:	b480      	push	{r7}
 80045c6:	b083      	sub	sp, #12
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80045d2:	b2db      	uxtb	r3, r3
 80045d4:	2b02      	cmp	r3, #2
 80045d6:	d004      	beq.n	80045e2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2280      	movs	r2, #128	; 0x80
 80045dc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	e00c      	b.n	80045fc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2205      	movs	r2, #5
 80045e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f022 0201 	bic.w	r2, r2, #1
 80045f8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80045fa:	2300      	movs	r3, #0
}
 80045fc:	4618      	mov	r0, r3
 80045fe:	370c      	adds	r7, #12
 8004600:	46bd      	mov	sp, r7
 8004602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004606:	4770      	bx	lr

08004608 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b086      	sub	sp, #24
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004610:	2300      	movs	r3, #0
 8004612:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004614:	4b8e      	ldr	r3, [pc, #568]	; (8004850 <HAL_DMA_IRQHandler+0x248>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a8e      	ldr	r2, [pc, #568]	; (8004854 <HAL_DMA_IRQHandler+0x24c>)
 800461a:	fba2 2303 	umull	r2, r3, r2, r3
 800461e:	0a9b      	lsrs	r3, r3, #10
 8004620:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004626:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004632:	2208      	movs	r2, #8
 8004634:	409a      	lsls	r2, r3
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	4013      	ands	r3, r2
 800463a:	2b00      	cmp	r3, #0
 800463c:	d01a      	beq.n	8004674 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f003 0304 	and.w	r3, r3, #4
 8004648:	2b00      	cmp	r3, #0
 800464a:	d013      	beq.n	8004674 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	681a      	ldr	r2, [r3, #0]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f022 0204 	bic.w	r2, r2, #4
 800465a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004660:	2208      	movs	r2, #8
 8004662:	409a      	lsls	r2, r3
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800466c:	f043 0201 	orr.w	r2, r3, #1
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004678:	2201      	movs	r2, #1
 800467a:	409a      	lsls	r2, r3
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	4013      	ands	r3, r2
 8004680:	2b00      	cmp	r3, #0
 8004682:	d012      	beq.n	80046aa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	695b      	ldr	r3, [r3, #20]
 800468a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800468e:	2b00      	cmp	r3, #0
 8004690:	d00b      	beq.n	80046aa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004696:	2201      	movs	r2, #1
 8004698:	409a      	lsls	r2, r3
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046a2:	f043 0202 	orr.w	r2, r3, #2
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046ae:	2204      	movs	r2, #4
 80046b0:	409a      	lsls	r2, r3
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	4013      	ands	r3, r2
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d012      	beq.n	80046e0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f003 0302 	and.w	r3, r3, #2
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d00b      	beq.n	80046e0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046cc:	2204      	movs	r2, #4
 80046ce:	409a      	lsls	r2, r3
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046d8:	f043 0204 	orr.w	r2, r3, #4
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046e4:	2210      	movs	r2, #16
 80046e6:	409a      	lsls	r2, r3
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	4013      	ands	r3, r2
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d043      	beq.n	8004778 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f003 0308 	and.w	r3, r3, #8
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d03c      	beq.n	8004778 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004702:	2210      	movs	r2, #16
 8004704:	409a      	lsls	r2, r3
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004714:	2b00      	cmp	r3, #0
 8004716:	d018      	beq.n	800474a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004722:	2b00      	cmp	r3, #0
 8004724:	d108      	bne.n	8004738 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800472a:	2b00      	cmp	r3, #0
 800472c:	d024      	beq.n	8004778 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	4798      	blx	r3
 8004736:	e01f      	b.n	8004778 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800473c:	2b00      	cmp	r3, #0
 800473e:	d01b      	beq.n	8004778 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004744:	6878      	ldr	r0, [r7, #4]
 8004746:	4798      	blx	r3
 8004748:	e016      	b.n	8004778 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004754:	2b00      	cmp	r3, #0
 8004756:	d107      	bne.n	8004768 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	681a      	ldr	r2, [r3, #0]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f022 0208 	bic.w	r2, r2, #8
 8004766:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800476c:	2b00      	cmp	r3, #0
 800476e:	d003      	beq.n	8004778 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004774:	6878      	ldr	r0, [r7, #4]
 8004776:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800477c:	2220      	movs	r2, #32
 800477e:	409a      	lsls	r2, r3
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	4013      	ands	r3, r2
 8004784:	2b00      	cmp	r3, #0
 8004786:	f000 808f 	beq.w	80048a8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f003 0310 	and.w	r3, r3, #16
 8004794:	2b00      	cmp	r3, #0
 8004796:	f000 8087 	beq.w	80048a8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800479e:	2220      	movs	r2, #32
 80047a0:	409a      	lsls	r2, r3
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80047ac:	b2db      	uxtb	r3, r3
 80047ae:	2b05      	cmp	r3, #5
 80047b0:	d136      	bne.n	8004820 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	681a      	ldr	r2, [r3, #0]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f022 0216 	bic.w	r2, r2, #22
 80047c0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	695a      	ldr	r2, [r3, #20]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80047d0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d103      	bne.n	80047e2 <HAL_DMA_IRQHandler+0x1da>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d007      	beq.n	80047f2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	681a      	ldr	r2, [r3, #0]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f022 0208 	bic.w	r2, r2, #8
 80047f0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047f6:	223f      	movs	r2, #63	; 0x3f
 80047f8:	409a      	lsls	r2, r3
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2201      	movs	r2, #1
 8004802:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2200      	movs	r2, #0
 800480a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004812:	2b00      	cmp	r3, #0
 8004814:	d07e      	beq.n	8004914 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	4798      	blx	r3
        }
        return;
 800481e:	e079      	b.n	8004914 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800482a:	2b00      	cmp	r3, #0
 800482c:	d01d      	beq.n	800486a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004838:	2b00      	cmp	r3, #0
 800483a:	d10d      	bne.n	8004858 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004840:	2b00      	cmp	r3, #0
 8004842:	d031      	beq.n	80048a8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004848:	6878      	ldr	r0, [r7, #4]
 800484a:	4798      	blx	r3
 800484c:	e02c      	b.n	80048a8 <HAL_DMA_IRQHandler+0x2a0>
 800484e:	bf00      	nop
 8004850:	20000008 	.word	0x20000008
 8004854:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800485c:	2b00      	cmp	r3, #0
 800485e:	d023      	beq.n	80048a8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004864:	6878      	ldr	r0, [r7, #4]
 8004866:	4798      	blx	r3
 8004868:	e01e      	b.n	80048a8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004874:	2b00      	cmp	r3, #0
 8004876:	d10f      	bne.n	8004898 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	681a      	ldr	r2, [r3, #0]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f022 0210 	bic.w	r2, r2, #16
 8004886:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2201      	movs	r2, #1
 800488c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2200      	movs	r2, #0
 8004894:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800489c:	2b00      	cmp	r3, #0
 800489e:	d003      	beq.n	80048a8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048a4:	6878      	ldr	r0, [r7, #4]
 80048a6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d032      	beq.n	8004916 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048b4:	f003 0301 	and.w	r3, r3, #1
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d022      	beq.n	8004902 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2205      	movs	r2, #5
 80048c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	681a      	ldr	r2, [r3, #0]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f022 0201 	bic.w	r2, r2, #1
 80048d2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	3301      	adds	r3, #1
 80048d8:	60bb      	str	r3, [r7, #8]
 80048da:	697a      	ldr	r2, [r7, #20]
 80048dc:	429a      	cmp	r2, r3
 80048de:	d307      	bcc.n	80048f0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f003 0301 	and.w	r3, r3, #1
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d1f2      	bne.n	80048d4 <HAL_DMA_IRQHandler+0x2cc>
 80048ee:	e000      	b.n	80048f2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80048f0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2201      	movs	r2, #1
 80048f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2200      	movs	r2, #0
 80048fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004906:	2b00      	cmp	r3, #0
 8004908:	d005      	beq.n	8004916 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	4798      	blx	r3
 8004912:	e000      	b.n	8004916 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004914:	bf00      	nop
    }
  }
}
 8004916:	3718      	adds	r7, #24
 8004918:	46bd      	mov	sp, r7
 800491a:	bd80      	pop	{r7, pc}

0800491c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800491c:	b480      	push	{r7}
 800491e:	b083      	sub	sp, #12
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800492a:	b2db      	uxtb	r3, r3
}
 800492c:	4618      	mov	r0, r3
 800492e:	370c      	adds	r7, #12
 8004930:	46bd      	mov	sp, r7
 8004932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004936:	4770      	bx	lr

08004938 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004938:	b480      	push	{r7}
 800493a:	b085      	sub	sp, #20
 800493c:	af00      	add	r7, sp, #0
 800493e:	60f8      	str	r0, [r7, #12]
 8004940:	60b9      	str	r1, [r7, #8]
 8004942:	607a      	str	r2, [r7, #4]
 8004944:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	681a      	ldr	r2, [r3, #0]
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004954:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	683a      	ldr	r2, [r7, #0]
 800495c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	2b40      	cmp	r3, #64	; 0x40
 8004964:	d108      	bne.n	8004978 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	687a      	ldr	r2, [r7, #4]
 800496c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	68ba      	ldr	r2, [r7, #8]
 8004974:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004976:	e007      	b.n	8004988 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	68ba      	ldr	r2, [r7, #8]
 800497e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	687a      	ldr	r2, [r7, #4]
 8004986:	60da      	str	r2, [r3, #12]
}
 8004988:	bf00      	nop
 800498a:	3714      	adds	r7, #20
 800498c:	46bd      	mov	sp, r7
 800498e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004992:	4770      	bx	lr

08004994 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004994:	b480      	push	{r7}
 8004996:	b085      	sub	sp, #20
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	b2db      	uxtb	r3, r3
 80049a2:	3b10      	subs	r3, #16
 80049a4:	4a14      	ldr	r2, [pc, #80]	; (80049f8 <DMA_CalcBaseAndBitshift+0x64>)
 80049a6:	fba2 2303 	umull	r2, r3, r2, r3
 80049aa:	091b      	lsrs	r3, r3, #4
 80049ac:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80049ae:	4a13      	ldr	r2, [pc, #76]	; (80049fc <DMA_CalcBaseAndBitshift+0x68>)
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	4413      	add	r3, r2
 80049b4:	781b      	ldrb	r3, [r3, #0]
 80049b6:	461a      	mov	r2, r3
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2b03      	cmp	r3, #3
 80049c0:	d909      	bls.n	80049d6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80049ca:	f023 0303 	bic.w	r3, r3, #3
 80049ce:	1d1a      	adds	r2, r3, #4
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	659a      	str	r2, [r3, #88]	; 0x58
 80049d4:	e007      	b.n	80049e6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80049de:	f023 0303 	bic.w	r3, r3, #3
 80049e2:	687a      	ldr	r2, [r7, #4]
 80049e4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80049ea:	4618      	mov	r0, r3
 80049ec:	3714      	adds	r7, #20
 80049ee:	46bd      	mov	sp, r7
 80049f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f4:	4770      	bx	lr
 80049f6:	bf00      	nop
 80049f8:	aaaaaaab 	.word	0xaaaaaaab
 80049fc:	08012f68 	.word	0x08012f68

08004a00 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b085      	sub	sp, #20
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a08:	2300      	movs	r3, #0
 8004a0a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a10:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	699b      	ldr	r3, [r3, #24]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d11f      	bne.n	8004a5a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	2b03      	cmp	r3, #3
 8004a1e:	d856      	bhi.n	8004ace <DMA_CheckFifoParam+0xce>
 8004a20:	a201      	add	r2, pc, #4	; (adr r2, 8004a28 <DMA_CheckFifoParam+0x28>)
 8004a22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a26:	bf00      	nop
 8004a28:	08004a39 	.word	0x08004a39
 8004a2c:	08004a4b 	.word	0x08004a4b
 8004a30:	08004a39 	.word	0x08004a39
 8004a34:	08004acf 	.word	0x08004acf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a3c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d046      	beq.n	8004ad2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004a44:	2301      	movs	r3, #1
 8004a46:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a48:	e043      	b.n	8004ad2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a4e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004a52:	d140      	bne.n	8004ad6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004a54:	2301      	movs	r3, #1
 8004a56:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a58:	e03d      	b.n	8004ad6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	699b      	ldr	r3, [r3, #24]
 8004a5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a62:	d121      	bne.n	8004aa8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	2b03      	cmp	r3, #3
 8004a68:	d837      	bhi.n	8004ada <DMA_CheckFifoParam+0xda>
 8004a6a:	a201      	add	r2, pc, #4	; (adr r2, 8004a70 <DMA_CheckFifoParam+0x70>)
 8004a6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a70:	08004a81 	.word	0x08004a81
 8004a74:	08004a87 	.word	0x08004a87
 8004a78:	08004a81 	.word	0x08004a81
 8004a7c:	08004a99 	.word	0x08004a99
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004a80:	2301      	movs	r3, #1
 8004a82:	73fb      	strb	r3, [r7, #15]
      break;
 8004a84:	e030      	b.n	8004ae8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a8a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d025      	beq.n	8004ade <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a96:	e022      	b.n	8004ade <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a9c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004aa0:	d11f      	bne.n	8004ae2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004aa6:	e01c      	b.n	8004ae2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	2b02      	cmp	r3, #2
 8004aac:	d903      	bls.n	8004ab6 <DMA_CheckFifoParam+0xb6>
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	2b03      	cmp	r3, #3
 8004ab2:	d003      	beq.n	8004abc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004ab4:	e018      	b.n	8004ae8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	73fb      	strb	r3, [r7, #15]
      break;
 8004aba:	e015      	b.n	8004ae8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ac0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d00e      	beq.n	8004ae6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	73fb      	strb	r3, [r7, #15]
      break;
 8004acc:	e00b      	b.n	8004ae6 <DMA_CheckFifoParam+0xe6>
      break;
 8004ace:	bf00      	nop
 8004ad0:	e00a      	b.n	8004ae8 <DMA_CheckFifoParam+0xe8>
      break;
 8004ad2:	bf00      	nop
 8004ad4:	e008      	b.n	8004ae8 <DMA_CheckFifoParam+0xe8>
      break;
 8004ad6:	bf00      	nop
 8004ad8:	e006      	b.n	8004ae8 <DMA_CheckFifoParam+0xe8>
      break;
 8004ada:	bf00      	nop
 8004adc:	e004      	b.n	8004ae8 <DMA_CheckFifoParam+0xe8>
      break;
 8004ade:	bf00      	nop
 8004ae0:	e002      	b.n	8004ae8 <DMA_CheckFifoParam+0xe8>
      break;   
 8004ae2:	bf00      	nop
 8004ae4:	e000      	b.n	8004ae8 <DMA_CheckFifoParam+0xe8>
      break;
 8004ae6:	bf00      	nop
    }
  } 
  
  return status; 
 8004ae8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004aea:	4618      	mov	r0, r3
 8004aec:	3714      	adds	r7, #20
 8004aee:	46bd      	mov	sp, r7
 8004af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af4:	4770      	bx	lr
 8004af6:	bf00      	nop

08004af8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b089      	sub	sp, #36	; 0x24
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
 8004b00:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004b02:	2300      	movs	r3, #0
 8004b04:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004b06:	2300      	movs	r3, #0
 8004b08:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004b0e:	2300      	movs	r3, #0
 8004b10:	61fb      	str	r3, [r7, #28]
 8004b12:	e159      	b.n	8004dc8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004b14:	2201      	movs	r2, #1
 8004b16:	69fb      	ldr	r3, [r7, #28]
 8004b18:	fa02 f303 	lsl.w	r3, r2, r3
 8004b1c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	697a      	ldr	r2, [r7, #20]
 8004b24:	4013      	ands	r3, r2
 8004b26:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004b28:	693a      	ldr	r2, [r7, #16]
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	429a      	cmp	r2, r3
 8004b2e:	f040 8148 	bne.w	8004dc2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	f003 0303 	and.w	r3, r3, #3
 8004b3a:	2b01      	cmp	r3, #1
 8004b3c:	d005      	beq.n	8004b4a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004b46:	2b02      	cmp	r3, #2
 8004b48:	d130      	bne.n	8004bac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	689b      	ldr	r3, [r3, #8]
 8004b4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004b50:	69fb      	ldr	r3, [r7, #28]
 8004b52:	005b      	lsls	r3, r3, #1
 8004b54:	2203      	movs	r2, #3
 8004b56:	fa02 f303 	lsl.w	r3, r2, r3
 8004b5a:	43db      	mvns	r3, r3
 8004b5c:	69ba      	ldr	r2, [r7, #24]
 8004b5e:	4013      	ands	r3, r2
 8004b60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	68da      	ldr	r2, [r3, #12]
 8004b66:	69fb      	ldr	r3, [r7, #28]
 8004b68:	005b      	lsls	r3, r3, #1
 8004b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b6e:	69ba      	ldr	r2, [r7, #24]
 8004b70:	4313      	orrs	r3, r2
 8004b72:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	69ba      	ldr	r2, [r7, #24]
 8004b78:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004b80:	2201      	movs	r2, #1
 8004b82:	69fb      	ldr	r3, [r7, #28]
 8004b84:	fa02 f303 	lsl.w	r3, r2, r3
 8004b88:	43db      	mvns	r3, r3
 8004b8a:	69ba      	ldr	r2, [r7, #24]
 8004b8c:	4013      	ands	r3, r2
 8004b8e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	091b      	lsrs	r3, r3, #4
 8004b96:	f003 0201 	and.w	r2, r3, #1
 8004b9a:	69fb      	ldr	r3, [r7, #28]
 8004b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8004ba0:	69ba      	ldr	r2, [r7, #24]
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	69ba      	ldr	r2, [r7, #24]
 8004baa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	f003 0303 	and.w	r3, r3, #3
 8004bb4:	2b03      	cmp	r3, #3
 8004bb6:	d017      	beq.n	8004be8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	68db      	ldr	r3, [r3, #12]
 8004bbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004bbe:	69fb      	ldr	r3, [r7, #28]
 8004bc0:	005b      	lsls	r3, r3, #1
 8004bc2:	2203      	movs	r2, #3
 8004bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8004bc8:	43db      	mvns	r3, r3
 8004bca:	69ba      	ldr	r2, [r7, #24]
 8004bcc:	4013      	ands	r3, r2
 8004bce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	689a      	ldr	r2, [r3, #8]
 8004bd4:	69fb      	ldr	r3, [r7, #28]
 8004bd6:	005b      	lsls	r3, r3, #1
 8004bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8004bdc:	69ba      	ldr	r2, [r7, #24]
 8004bde:	4313      	orrs	r3, r2
 8004be0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	69ba      	ldr	r2, [r7, #24]
 8004be6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	f003 0303 	and.w	r3, r3, #3
 8004bf0:	2b02      	cmp	r3, #2
 8004bf2:	d123      	bne.n	8004c3c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004bf4:	69fb      	ldr	r3, [r7, #28]
 8004bf6:	08da      	lsrs	r2, r3, #3
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	3208      	adds	r2, #8
 8004bfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c00:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004c02:	69fb      	ldr	r3, [r7, #28]
 8004c04:	f003 0307 	and.w	r3, r3, #7
 8004c08:	009b      	lsls	r3, r3, #2
 8004c0a:	220f      	movs	r2, #15
 8004c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c10:	43db      	mvns	r3, r3
 8004c12:	69ba      	ldr	r2, [r7, #24]
 8004c14:	4013      	ands	r3, r2
 8004c16:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	691a      	ldr	r2, [r3, #16]
 8004c1c:	69fb      	ldr	r3, [r7, #28]
 8004c1e:	f003 0307 	and.w	r3, r3, #7
 8004c22:	009b      	lsls	r3, r3, #2
 8004c24:	fa02 f303 	lsl.w	r3, r2, r3
 8004c28:	69ba      	ldr	r2, [r7, #24]
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004c2e:	69fb      	ldr	r3, [r7, #28]
 8004c30:	08da      	lsrs	r2, r3, #3
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	3208      	adds	r2, #8
 8004c36:	69b9      	ldr	r1, [r7, #24]
 8004c38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004c42:	69fb      	ldr	r3, [r7, #28]
 8004c44:	005b      	lsls	r3, r3, #1
 8004c46:	2203      	movs	r2, #3
 8004c48:	fa02 f303 	lsl.w	r3, r2, r3
 8004c4c:	43db      	mvns	r3, r3
 8004c4e:	69ba      	ldr	r2, [r7, #24]
 8004c50:	4013      	ands	r3, r2
 8004c52:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	f003 0203 	and.w	r2, r3, #3
 8004c5c:	69fb      	ldr	r3, [r7, #28]
 8004c5e:	005b      	lsls	r3, r3, #1
 8004c60:	fa02 f303 	lsl.w	r3, r2, r3
 8004c64:	69ba      	ldr	r2, [r7, #24]
 8004c66:	4313      	orrs	r3, r2
 8004c68:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	69ba      	ldr	r2, [r7, #24]
 8004c6e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	f000 80a2 	beq.w	8004dc2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c7e:	2300      	movs	r3, #0
 8004c80:	60fb      	str	r3, [r7, #12]
 8004c82:	4b57      	ldr	r3, [pc, #348]	; (8004de0 <HAL_GPIO_Init+0x2e8>)
 8004c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c86:	4a56      	ldr	r2, [pc, #344]	; (8004de0 <HAL_GPIO_Init+0x2e8>)
 8004c88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004c8c:	6453      	str	r3, [r2, #68]	; 0x44
 8004c8e:	4b54      	ldr	r3, [pc, #336]	; (8004de0 <HAL_GPIO_Init+0x2e8>)
 8004c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c96:	60fb      	str	r3, [r7, #12]
 8004c98:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004c9a:	4a52      	ldr	r2, [pc, #328]	; (8004de4 <HAL_GPIO_Init+0x2ec>)
 8004c9c:	69fb      	ldr	r3, [r7, #28]
 8004c9e:	089b      	lsrs	r3, r3, #2
 8004ca0:	3302      	adds	r3, #2
 8004ca2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ca6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004ca8:	69fb      	ldr	r3, [r7, #28]
 8004caa:	f003 0303 	and.w	r3, r3, #3
 8004cae:	009b      	lsls	r3, r3, #2
 8004cb0:	220f      	movs	r2, #15
 8004cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8004cb6:	43db      	mvns	r3, r3
 8004cb8:	69ba      	ldr	r2, [r7, #24]
 8004cba:	4013      	ands	r3, r2
 8004cbc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	4a49      	ldr	r2, [pc, #292]	; (8004de8 <HAL_GPIO_Init+0x2f0>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d019      	beq.n	8004cfa <HAL_GPIO_Init+0x202>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	4a48      	ldr	r2, [pc, #288]	; (8004dec <HAL_GPIO_Init+0x2f4>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d013      	beq.n	8004cf6 <HAL_GPIO_Init+0x1fe>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	4a47      	ldr	r2, [pc, #284]	; (8004df0 <HAL_GPIO_Init+0x2f8>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d00d      	beq.n	8004cf2 <HAL_GPIO_Init+0x1fa>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	4a46      	ldr	r2, [pc, #280]	; (8004df4 <HAL_GPIO_Init+0x2fc>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d007      	beq.n	8004cee <HAL_GPIO_Init+0x1f6>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	4a45      	ldr	r2, [pc, #276]	; (8004df8 <HAL_GPIO_Init+0x300>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d101      	bne.n	8004cea <HAL_GPIO_Init+0x1f2>
 8004ce6:	2304      	movs	r3, #4
 8004ce8:	e008      	b.n	8004cfc <HAL_GPIO_Init+0x204>
 8004cea:	2307      	movs	r3, #7
 8004cec:	e006      	b.n	8004cfc <HAL_GPIO_Init+0x204>
 8004cee:	2303      	movs	r3, #3
 8004cf0:	e004      	b.n	8004cfc <HAL_GPIO_Init+0x204>
 8004cf2:	2302      	movs	r3, #2
 8004cf4:	e002      	b.n	8004cfc <HAL_GPIO_Init+0x204>
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	e000      	b.n	8004cfc <HAL_GPIO_Init+0x204>
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	69fa      	ldr	r2, [r7, #28]
 8004cfe:	f002 0203 	and.w	r2, r2, #3
 8004d02:	0092      	lsls	r2, r2, #2
 8004d04:	4093      	lsls	r3, r2
 8004d06:	69ba      	ldr	r2, [r7, #24]
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004d0c:	4935      	ldr	r1, [pc, #212]	; (8004de4 <HAL_GPIO_Init+0x2ec>)
 8004d0e:	69fb      	ldr	r3, [r7, #28]
 8004d10:	089b      	lsrs	r3, r3, #2
 8004d12:	3302      	adds	r3, #2
 8004d14:	69ba      	ldr	r2, [r7, #24]
 8004d16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004d1a:	4b38      	ldr	r3, [pc, #224]	; (8004dfc <HAL_GPIO_Init+0x304>)
 8004d1c:	689b      	ldr	r3, [r3, #8]
 8004d1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d20:	693b      	ldr	r3, [r7, #16]
 8004d22:	43db      	mvns	r3, r3
 8004d24:	69ba      	ldr	r2, [r7, #24]
 8004d26:	4013      	ands	r3, r2
 8004d28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d003      	beq.n	8004d3e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004d36:	69ba      	ldr	r2, [r7, #24]
 8004d38:	693b      	ldr	r3, [r7, #16]
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004d3e:	4a2f      	ldr	r2, [pc, #188]	; (8004dfc <HAL_GPIO_Init+0x304>)
 8004d40:	69bb      	ldr	r3, [r7, #24]
 8004d42:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004d44:	4b2d      	ldr	r3, [pc, #180]	; (8004dfc <HAL_GPIO_Init+0x304>)
 8004d46:	68db      	ldr	r3, [r3, #12]
 8004d48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d4a:	693b      	ldr	r3, [r7, #16]
 8004d4c:	43db      	mvns	r3, r3
 8004d4e:	69ba      	ldr	r2, [r7, #24]
 8004d50:	4013      	ands	r3, r2
 8004d52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d003      	beq.n	8004d68 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004d60:	69ba      	ldr	r2, [r7, #24]
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	4313      	orrs	r3, r2
 8004d66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004d68:	4a24      	ldr	r2, [pc, #144]	; (8004dfc <HAL_GPIO_Init+0x304>)
 8004d6a:	69bb      	ldr	r3, [r7, #24]
 8004d6c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004d6e:	4b23      	ldr	r3, [pc, #140]	; (8004dfc <HAL_GPIO_Init+0x304>)
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	43db      	mvns	r3, r3
 8004d78:	69ba      	ldr	r2, [r7, #24]
 8004d7a:	4013      	ands	r3, r2
 8004d7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d003      	beq.n	8004d92 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004d8a:	69ba      	ldr	r2, [r7, #24]
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004d92:	4a1a      	ldr	r2, [pc, #104]	; (8004dfc <HAL_GPIO_Init+0x304>)
 8004d94:	69bb      	ldr	r3, [r7, #24]
 8004d96:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004d98:	4b18      	ldr	r3, [pc, #96]	; (8004dfc <HAL_GPIO_Init+0x304>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d9e:	693b      	ldr	r3, [r7, #16]
 8004da0:	43db      	mvns	r3, r3
 8004da2:	69ba      	ldr	r2, [r7, #24]
 8004da4:	4013      	ands	r3, r2
 8004da6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d003      	beq.n	8004dbc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004db4:	69ba      	ldr	r2, [r7, #24]
 8004db6:	693b      	ldr	r3, [r7, #16]
 8004db8:	4313      	orrs	r3, r2
 8004dba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004dbc:	4a0f      	ldr	r2, [pc, #60]	; (8004dfc <HAL_GPIO_Init+0x304>)
 8004dbe:	69bb      	ldr	r3, [r7, #24]
 8004dc0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004dc2:	69fb      	ldr	r3, [r7, #28]
 8004dc4:	3301      	adds	r3, #1
 8004dc6:	61fb      	str	r3, [r7, #28]
 8004dc8:	69fb      	ldr	r3, [r7, #28]
 8004dca:	2b0f      	cmp	r3, #15
 8004dcc:	f67f aea2 	bls.w	8004b14 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004dd0:	bf00      	nop
 8004dd2:	bf00      	nop
 8004dd4:	3724      	adds	r7, #36	; 0x24
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ddc:	4770      	bx	lr
 8004dde:	bf00      	nop
 8004de0:	40023800 	.word	0x40023800
 8004de4:	40013800 	.word	0x40013800
 8004de8:	40020000 	.word	0x40020000
 8004dec:	40020400 	.word	0x40020400
 8004df0:	40020800 	.word	0x40020800
 8004df4:	40020c00 	.word	0x40020c00
 8004df8:	40021000 	.word	0x40021000
 8004dfc:	40013c00 	.word	0x40013c00

08004e00 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004e00:	b480      	push	{r7}
 8004e02:	b085      	sub	sp, #20
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
 8004e08:	460b      	mov	r3, r1
 8004e0a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	691a      	ldr	r2, [r3, #16]
 8004e10:	887b      	ldrh	r3, [r7, #2]
 8004e12:	4013      	ands	r3, r2
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d002      	beq.n	8004e1e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004e18:	2301      	movs	r3, #1
 8004e1a:	73fb      	strb	r3, [r7, #15]
 8004e1c:	e001      	b.n	8004e22 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004e1e:	2300      	movs	r3, #0
 8004e20:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004e22:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	3714      	adds	r7, #20
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2e:	4770      	bx	lr

08004e30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004e30:	b480      	push	{r7}
 8004e32:	b083      	sub	sp, #12
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
 8004e38:	460b      	mov	r3, r1
 8004e3a:	807b      	strh	r3, [r7, #2]
 8004e3c:	4613      	mov	r3, r2
 8004e3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004e40:	787b      	ldrb	r3, [r7, #1]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d003      	beq.n	8004e4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004e46:	887a      	ldrh	r2, [r7, #2]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004e4c:	e003      	b.n	8004e56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004e4e:	887b      	ldrh	r3, [r7, #2]
 8004e50:	041a      	lsls	r2, r3, #16
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	619a      	str	r2, [r3, #24]
}
 8004e56:	bf00      	nop
 8004e58:	370c      	adds	r7, #12
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e60:	4770      	bx	lr
	...

08004e64 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b084      	sub	sp, #16
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d101      	bne.n	8004e76 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004e72:	2301      	movs	r3, #1
 8004e74:	e12b      	b.n	80050ce <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e7c:	b2db      	uxtb	r3, r3
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d106      	bne.n	8004e90 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2200      	movs	r2, #0
 8004e86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004e8a:	6878      	ldr	r0, [r7, #4]
 8004e8c:	f7fc feb4 	bl	8001bf8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2224      	movs	r2, #36	; 0x24
 8004e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	681a      	ldr	r2, [r3, #0]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f022 0201 	bic.w	r2, r2, #1
 8004ea6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	681a      	ldr	r2, [r3, #0]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004eb6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004ec6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004ec8:	f003 fe8a 	bl	8008be0 <HAL_RCC_GetPCLK1Freq>
 8004ecc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	4a81      	ldr	r2, [pc, #516]	; (80050d8 <HAL_I2C_Init+0x274>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d807      	bhi.n	8004ee8 <HAL_I2C_Init+0x84>
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	4a80      	ldr	r2, [pc, #512]	; (80050dc <HAL_I2C_Init+0x278>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	bf94      	ite	ls
 8004ee0:	2301      	movls	r3, #1
 8004ee2:	2300      	movhi	r3, #0
 8004ee4:	b2db      	uxtb	r3, r3
 8004ee6:	e006      	b.n	8004ef6 <HAL_I2C_Init+0x92>
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	4a7d      	ldr	r2, [pc, #500]	; (80050e0 <HAL_I2C_Init+0x27c>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	bf94      	ite	ls
 8004ef0:	2301      	movls	r3, #1
 8004ef2:	2300      	movhi	r3, #0
 8004ef4:	b2db      	uxtb	r3, r3
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d001      	beq.n	8004efe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004efa:	2301      	movs	r3, #1
 8004efc:	e0e7      	b.n	80050ce <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	4a78      	ldr	r2, [pc, #480]	; (80050e4 <HAL_I2C_Init+0x280>)
 8004f02:	fba2 2303 	umull	r2, r3, r2, r3
 8004f06:	0c9b      	lsrs	r3, r3, #18
 8004f08:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	68ba      	ldr	r2, [r7, #8]
 8004f1a:	430a      	orrs	r2, r1
 8004f1c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	6a1b      	ldr	r3, [r3, #32]
 8004f24:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	4a6a      	ldr	r2, [pc, #424]	; (80050d8 <HAL_I2C_Init+0x274>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d802      	bhi.n	8004f38 <HAL_I2C_Init+0xd4>
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	3301      	adds	r3, #1
 8004f36:	e009      	b.n	8004f4c <HAL_I2C_Init+0xe8>
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004f3e:	fb02 f303 	mul.w	r3, r2, r3
 8004f42:	4a69      	ldr	r2, [pc, #420]	; (80050e8 <HAL_I2C_Init+0x284>)
 8004f44:	fba2 2303 	umull	r2, r3, r2, r3
 8004f48:	099b      	lsrs	r3, r3, #6
 8004f4a:	3301      	adds	r3, #1
 8004f4c:	687a      	ldr	r2, [r7, #4]
 8004f4e:	6812      	ldr	r2, [r2, #0]
 8004f50:	430b      	orrs	r3, r1
 8004f52:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	69db      	ldr	r3, [r3, #28]
 8004f5a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004f5e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	495c      	ldr	r1, [pc, #368]	; (80050d8 <HAL_I2C_Init+0x274>)
 8004f68:	428b      	cmp	r3, r1
 8004f6a:	d819      	bhi.n	8004fa0 <HAL_I2C_Init+0x13c>
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	1e59      	subs	r1, r3, #1
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	005b      	lsls	r3, r3, #1
 8004f76:	fbb1 f3f3 	udiv	r3, r1, r3
 8004f7a:	1c59      	adds	r1, r3, #1
 8004f7c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004f80:	400b      	ands	r3, r1
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d00a      	beq.n	8004f9c <HAL_I2C_Init+0x138>
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	1e59      	subs	r1, r3, #1
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	005b      	lsls	r3, r3, #1
 8004f90:	fbb1 f3f3 	udiv	r3, r1, r3
 8004f94:	3301      	adds	r3, #1
 8004f96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f9a:	e051      	b.n	8005040 <HAL_I2C_Init+0x1dc>
 8004f9c:	2304      	movs	r3, #4
 8004f9e:	e04f      	b.n	8005040 <HAL_I2C_Init+0x1dc>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	689b      	ldr	r3, [r3, #8]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d111      	bne.n	8004fcc <HAL_I2C_Init+0x168>
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	1e58      	subs	r0, r3, #1
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6859      	ldr	r1, [r3, #4]
 8004fb0:	460b      	mov	r3, r1
 8004fb2:	005b      	lsls	r3, r3, #1
 8004fb4:	440b      	add	r3, r1
 8004fb6:	fbb0 f3f3 	udiv	r3, r0, r3
 8004fba:	3301      	adds	r3, #1
 8004fbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	bf0c      	ite	eq
 8004fc4:	2301      	moveq	r3, #1
 8004fc6:	2300      	movne	r3, #0
 8004fc8:	b2db      	uxtb	r3, r3
 8004fca:	e012      	b.n	8004ff2 <HAL_I2C_Init+0x18e>
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	1e58      	subs	r0, r3, #1
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6859      	ldr	r1, [r3, #4]
 8004fd4:	460b      	mov	r3, r1
 8004fd6:	009b      	lsls	r3, r3, #2
 8004fd8:	440b      	add	r3, r1
 8004fda:	0099      	lsls	r1, r3, #2
 8004fdc:	440b      	add	r3, r1
 8004fde:	fbb0 f3f3 	udiv	r3, r0, r3
 8004fe2:	3301      	adds	r3, #1
 8004fe4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	bf0c      	ite	eq
 8004fec:	2301      	moveq	r3, #1
 8004fee:	2300      	movne	r3, #0
 8004ff0:	b2db      	uxtb	r3, r3
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d001      	beq.n	8004ffa <HAL_I2C_Init+0x196>
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e022      	b.n	8005040 <HAL_I2C_Init+0x1dc>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	689b      	ldr	r3, [r3, #8]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d10e      	bne.n	8005020 <HAL_I2C_Init+0x1bc>
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	1e58      	subs	r0, r3, #1
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6859      	ldr	r1, [r3, #4]
 800500a:	460b      	mov	r3, r1
 800500c:	005b      	lsls	r3, r3, #1
 800500e:	440b      	add	r3, r1
 8005010:	fbb0 f3f3 	udiv	r3, r0, r3
 8005014:	3301      	adds	r3, #1
 8005016:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800501a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800501e:	e00f      	b.n	8005040 <HAL_I2C_Init+0x1dc>
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	1e58      	subs	r0, r3, #1
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6859      	ldr	r1, [r3, #4]
 8005028:	460b      	mov	r3, r1
 800502a:	009b      	lsls	r3, r3, #2
 800502c:	440b      	add	r3, r1
 800502e:	0099      	lsls	r1, r3, #2
 8005030:	440b      	add	r3, r1
 8005032:	fbb0 f3f3 	udiv	r3, r0, r3
 8005036:	3301      	adds	r3, #1
 8005038:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800503c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005040:	6879      	ldr	r1, [r7, #4]
 8005042:	6809      	ldr	r1, [r1, #0]
 8005044:	4313      	orrs	r3, r2
 8005046:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	69da      	ldr	r2, [r3, #28]
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6a1b      	ldr	r3, [r3, #32]
 800505a:	431a      	orrs	r2, r3
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	430a      	orrs	r2, r1
 8005062:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	689b      	ldr	r3, [r3, #8]
 800506a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800506e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005072:	687a      	ldr	r2, [r7, #4]
 8005074:	6911      	ldr	r1, [r2, #16]
 8005076:	687a      	ldr	r2, [r7, #4]
 8005078:	68d2      	ldr	r2, [r2, #12]
 800507a:	4311      	orrs	r1, r2
 800507c:	687a      	ldr	r2, [r7, #4]
 800507e:	6812      	ldr	r2, [r2, #0]
 8005080:	430b      	orrs	r3, r1
 8005082:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	68db      	ldr	r3, [r3, #12]
 800508a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	695a      	ldr	r2, [r3, #20]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	699b      	ldr	r3, [r3, #24]
 8005096:	431a      	orrs	r2, r3
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	430a      	orrs	r2, r1
 800509e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	681a      	ldr	r2, [r3, #0]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f042 0201 	orr.w	r2, r2, #1
 80050ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2200      	movs	r2, #0
 80050b4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2220      	movs	r2, #32
 80050ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2200      	movs	r2, #0
 80050c2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2200      	movs	r2, #0
 80050c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80050cc:	2300      	movs	r3, #0
}
 80050ce:	4618      	mov	r0, r3
 80050d0:	3710      	adds	r7, #16
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd80      	pop	{r7, pc}
 80050d6:	bf00      	nop
 80050d8:	000186a0 	.word	0x000186a0
 80050dc:	001e847f 	.word	0x001e847f
 80050e0:	003d08ff 	.word	0x003d08ff
 80050e4:	431bde83 	.word	0x431bde83
 80050e8:	10624dd3 	.word	0x10624dd3

080050ec <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b088      	sub	sp, #32
 80050f0:	af02      	add	r7, sp, #8
 80050f2:	60f8      	str	r0, [r7, #12]
 80050f4:	607a      	str	r2, [r7, #4]
 80050f6:	461a      	mov	r2, r3
 80050f8:	460b      	mov	r3, r1
 80050fa:	817b      	strh	r3, [r7, #10]
 80050fc:	4613      	mov	r3, r2
 80050fe:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005100:	f7fe fbca 	bl	8003898 <HAL_GetTick>
 8005104:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800510c:	b2db      	uxtb	r3, r3
 800510e:	2b20      	cmp	r3, #32
 8005110:	f040 80e0 	bne.w	80052d4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005114:	697b      	ldr	r3, [r7, #20]
 8005116:	9300      	str	r3, [sp, #0]
 8005118:	2319      	movs	r3, #25
 800511a:	2201      	movs	r2, #1
 800511c:	4970      	ldr	r1, [pc, #448]	; (80052e0 <HAL_I2C_Master_Transmit+0x1f4>)
 800511e:	68f8      	ldr	r0, [r7, #12]
 8005120:	f001 fcdc 	bl	8006adc <I2C_WaitOnFlagUntilTimeout>
 8005124:	4603      	mov	r3, r0
 8005126:	2b00      	cmp	r3, #0
 8005128:	d001      	beq.n	800512e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800512a:	2302      	movs	r3, #2
 800512c:	e0d3      	b.n	80052d6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005134:	2b01      	cmp	r3, #1
 8005136:	d101      	bne.n	800513c <HAL_I2C_Master_Transmit+0x50>
 8005138:	2302      	movs	r3, #2
 800513a:	e0cc      	b.n	80052d6 <HAL_I2C_Master_Transmit+0x1ea>
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	2201      	movs	r2, #1
 8005140:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f003 0301 	and.w	r3, r3, #1
 800514e:	2b01      	cmp	r3, #1
 8005150:	d007      	beq.n	8005162 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	681a      	ldr	r2, [r3, #0]
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f042 0201 	orr.w	r2, r2, #1
 8005160:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	681a      	ldr	r2, [r3, #0]
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005170:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	2221      	movs	r2, #33	; 0x21
 8005176:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	2210      	movs	r2, #16
 800517e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	2200      	movs	r2, #0
 8005186:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	687a      	ldr	r2, [r7, #4]
 800518c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	893a      	ldrh	r2, [r7, #8]
 8005192:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005198:	b29a      	uxth	r2, r3
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	4a50      	ldr	r2, [pc, #320]	; (80052e4 <HAL_I2C_Master_Transmit+0x1f8>)
 80051a2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80051a4:	8979      	ldrh	r1, [r7, #10]
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	6a3a      	ldr	r2, [r7, #32]
 80051aa:	68f8      	ldr	r0, [r7, #12]
 80051ac:	f001 fb6c 	bl	8006888 <I2C_MasterRequestWrite>
 80051b0:	4603      	mov	r3, r0
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d001      	beq.n	80051ba <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80051b6:	2301      	movs	r3, #1
 80051b8:	e08d      	b.n	80052d6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051ba:	2300      	movs	r3, #0
 80051bc:	613b      	str	r3, [r7, #16]
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	695b      	ldr	r3, [r3, #20]
 80051c4:	613b      	str	r3, [r7, #16]
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	699b      	ldr	r3, [r3, #24]
 80051cc:	613b      	str	r3, [r7, #16]
 80051ce:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80051d0:	e066      	b.n	80052a0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80051d2:	697a      	ldr	r2, [r7, #20]
 80051d4:	6a39      	ldr	r1, [r7, #32]
 80051d6:	68f8      	ldr	r0, [r7, #12]
 80051d8:	f001 fd56 	bl	8006c88 <I2C_WaitOnTXEFlagUntilTimeout>
 80051dc:	4603      	mov	r3, r0
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d00d      	beq.n	80051fe <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051e6:	2b04      	cmp	r3, #4
 80051e8:	d107      	bne.n	80051fa <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	681a      	ldr	r2, [r3, #0]
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051f8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80051fa:	2301      	movs	r3, #1
 80051fc:	e06b      	b.n	80052d6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005202:	781a      	ldrb	r2, [r3, #0]
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800520e:	1c5a      	adds	r2, r3, #1
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005218:	b29b      	uxth	r3, r3
 800521a:	3b01      	subs	r3, #1
 800521c:	b29a      	uxth	r2, r3
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005226:	3b01      	subs	r3, #1
 8005228:	b29a      	uxth	r2, r3
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	695b      	ldr	r3, [r3, #20]
 8005234:	f003 0304 	and.w	r3, r3, #4
 8005238:	2b04      	cmp	r3, #4
 800523a:	d11b      	bne.n	8005274 <HAL_I2C_Master_Transmit+0x188>
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005240:	2b00      	cmp	r3, #0
 8005242:	d017      	beq.n	8005274 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005248:	781a      	ldrb	r2, [r3, #0]
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005254:	1c5a      	adds	r2, r3, #1
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800525e:	b29b      	uxth	r3, r3
 8005260:	3b01      	subs	r3, #1
 8005262:	b29a      	uxth	r2, r3
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800526c:	3b01      	subs	r3, #1
 800526e:	b29a      	uxth	r2, r3
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005274:	697a      	ldr	r2, [r7, #20]
 8005276:	6a39      	ldr	r1, [r7, #32]
 8005278:	68f8      	ldr	r0, [r7, #12]
 800527a:	f001 fd46 	bl	8006d0a <I2C_WaitOnBTFFlagUntilTimeout>
 800527e:	4603      	mov	r3, r0
 8005280:	2b00      	cmp	r3, #0
 8005282:	d00d      	beq.n	80052a0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005288:	2b04      	cmp	r3, #4
 800528a:	d107      	bne.n	800529c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	681a      	ldr	r2, [r3, #0]
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800529a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800529c:	2301      	movs	r3, #1
 800529e:	e01a      	b.n	80052d6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d194      	bne.n	80051d2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	681a      	ldr	r2, [r3, #0]
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	2220      	movs	r2, #32
 80052bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	2200      	movs	r2, #0
 80052c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	2200      	movs	r2, #0
 80052cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80052d0:	2300      	movs	r3, #0
 80052d2:	e000      	b.n	80052d6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80052d4:	2302      	movs	r3, #2
  }
}
 80052d6:	4618      	mov	r0, r3
 80052d8:	3718      	adds	r7, #24
 80052da:	46bd      	mov	sp, r7
 80052dc:	bd80      	pop	{r7, pc}
 80052de:	bf00      	nop
 80052e0:	00100002 	.word	0x00100002
 80052e4:	ffff0000 	.word	0xffff0000

080052e8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b088      	sub	sp, #32
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80052f0:	2300      	movs	r3, #0
 80052f2:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005300:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005308:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005310:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8005312:	7bfb      	ldrb	r3, [r7, #15]
 8005314:	2b10      	cmp	r3, #16
 8005316:	d003      	beq.n	8005320 <HAL_I2C_EV_IRQHandler+0x38>
 8005318:	7bfb      	ldrb	r3, [r7, #15]
 800531a:	2b40      	cmp	r3, #64	; 0x40
 800531c:	f040 80c1 	bne.w	80054a2 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	699b      	ldr	r3, [r3, #24]
 8005326:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	695b      	ldr	r3, [r3, #20]
 800532e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8005330:	69fb      	ldr	r3, [r7, #28]
 8005332:	f003 0301 	and.w	r3, r3, #1
 8005336:	2b00      	cmp	r3, #0
 8005338:	d10d      	bne.n	8005356 <HAL_I2C_EV_IRQHandler+0x6e>
 800533a:	693b      	ldr	r3, [r7, #16]
 800533c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005340:	d003      	beq.n	800534a <HAL_I2C_EV_IRQHandler+0x62>
 8005342:	693b      	ldr	r3, [r7, #16]
 8005344:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005348:	d101      	bne.n	800534e <HAL_I2C_EV_IRQHandler+0x66>
 800534a:	2301      	movs	r3, #1
 800534c:	e000      	b.n	8005350 <HAL_I2C_EV_IRQHandler+0x68>
 800534e:	2300      	movs	r3, #0
 8005350:	2b01      	cmp	r3, #1
 8005352:	f000 8132 	beq.w	80055ba <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005356:	69fb      	ldr	r3, [r7, #28]
 8005358:	f003 0301 	and.w	r3, r3, #1
 800535c:	2b00      	cmp	r3, #0
 800535e:	d00c      	beq.n	800537a <HAL_I2C_EV_IRQHandler+0x92>
 8005360:	697b      	ldr	r3, [r7, #20]
 8005362:	0a5b      	lsrs	r3, r3, #9
 8005364:	f003 0301 	and.w	r3, r3, #1
 8005368:	2b00      	cmp	r3, #0
 800536a:	d006      	beq.n	800537a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800536c:	6878      	ldr	r0, [r7, #4]
 800536e:	f001 fd6e 	bl	8006e4e <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8005372:	6878      	ldr	r0, [r7, #4]
 8005374:	f000 fcdc 	bl	8005d30 <I2C_Master_SB>
 8005378:	e092      	b.n	80054a0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800537a:	69fb      	ldr	r3, [r7, #28]
 800537c:	08db      	lsrs	r3, r3, #3
 800537e:	f003 0301 	and.w	r3, r3, #1
 8005382:	2b00      	cmp	r3, #0
 8005384:	d009      	beq.n	800539a <HAL_I2C_EV_IRQHandler+0xb2>
 8005386:	697b      	ldr	r3, [r7, #20]
 8005388:	0a5b      	lsrs	r3, r3, #9
 800538a:	f003 0301 	and.w	r3, r3, #1
 800538e:	2b00      	cmp	r3, #0
 8005390:	d003      	beq.n	800539a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	f000 fd52 	bl	8005e3c <I2C_Master_ADD10>
 8005398:	e082      	b.n	80054a0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800539a:	69fb      	ldr	r3, [r7, #28]
 800539c:	085b      	lsrs	r3, r3, #1
 800539e:	f003 0301 	and.w	r3, r3, #1
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d009      	beq.n	80053ba <HAL_I2C_EV_IRQHandler+0xd2>
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	0a5b      	lsrs	r3, r3, #9
 80053aa:	f003 0301 	and.w	r3, r3, #1
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d003      	beq.n	80053ba <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	f000 fd6c 	bl	8005e90 <I2C_Master_ADDR>
 80053b8:	e072      	b.n	80054a0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80053ba:	69bb      	ldr	r3, [r7, #24]
 80053bc:	089b      	lsrs	r3, r3, #2
 80053be:	f003 0301 	and.w	r3, r3, #1
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d03b      	beq.n	800543e <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053d4:	f000 80f3 	beq.w	80055be <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80053d8:	69fb      	ldr	r3, [r7, #28]
 80053da:	09db      	lsrs	r3, r3, #7
 80053dc:	f003 0301 	and.w	r3, r3, #1
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d00f      	beq.n	8005404 <HAL_I2C_EV_IRQHandler+0x11c>
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	0a9b      	lsrs	r3, r3, #10
 80053e8:	f003 0301 	and.w	r3, r3, #1
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d009      	beq.n	8005404 <HAL_I2C_EV_IRQHandler+0x11c>
 80053f0:	69fb      	ldr	r3, [r7, #28]
 80053f2:	089b      	lsrs	r3, r3, #2
 80053f4:	f003 0301 	and.w	r3, r3, #1
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d103      	bne.n	8005404 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80053fc:	6878      	ldr	r0, [r7, #4]
 80053fe:	f000 f94c 	bl	800569a <I2C_MasterTransmit_TXE>
 8005402:	e04d      	b.n	80054a0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005404:	69fb      	ldr	r3, [r7, #28]
 8005406:	089b      	lsrs	r3, r3, #2
 8005408:	f003 0301 	and.w	r3, r3, #1
 800540c:	2b00      	cmp	r3, #0
 800540e:	f000 80d6 	beq.w	80055be <HAL_I2C_EV_IRQHandler+0x2d6>
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	0a5b      	lsrs	r3, r3, #9
 8005416:	f003 0301 	and.w	r3, r3, #1
 800541a:	2b00      	cmp	r3, #0
 800541c:	f000 80cf 	beq.w	80055be <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005420:	7bbb      	ldrb	r3, [r7, #14]
 8005422:	2b21      	cmp	r3, #33	; 0x21
 8005424:	d103      	bne.n	800542e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f000 f9d3 	bl	80057d2 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800542c:	e0c7      	b.n	80055be <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800542e:	7bfb      	ldrb	r3, [r7, #15]
 8005430:	2b40      	cmp	r3, #64	; 0x40
 8005432:	f040 80c4 	bne.w	80055be <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	f000 fa41 	bl	80058be <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800543c:	e0bf      	b.n	80055be <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005448:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800544c:	f000 80b7 	beq.w	80055be <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005450:	69fb      	ldr	r3, [r7, #28]
 8005452:	099b      	lsrs	r3, r3, #6
 8005454:	f003 0301 	and.w	r3, r3, #1
 8005458:	2b00      	cmp	r3, #0
 800545a:	d00f      	beq.n	800547c <HAL_I2C_EV_IRQHandler+0x194>
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	0a9b      	lsrs	r3, r3, #10
 8005460:	f003 0301 	and.w	r3, r3, #1
 8005464:	2b00      	cmp	r3, #0
 8005466:	d009      	beq.n	800547c <HAL_I2C_EV_IRQHandler+0x194>
 8005468:	69fb      	ldr	r3, [r7, #28]
 800546a:	089b      	lsrs	r3, r3, #2
 800546c:	f003 0301 	and.w	r3, r3, #1
 8005470:	2b00      	cmp	r3, #0
 8005472:	d103      	bne.n	800547c <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8005474:	6878      	ldr	r0, [r7, #4]
 8005476:	f000 fab6 	bl	80059e6 <I2C_MasterReceive_RXNE>
 800547a:	e011      	b.n	80054a0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800547c:	69fb      	ldr	r3, [r7, #28]
 800547e:	089b      	lsrs	r3, r3, #2
 8005480:	f003 0301 	and.w	r3, r3, #1
 8005484:	2b00      	cmp	r3, #0
 8005486:	f000 809a 	beq.w	80055be <HAL_I2C_EV_IRQHandler+0x2d6>
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	0a5b      	lsrs	r3, r3, #9
 800548e:	f003 0301 	and.w	r3, r3, #1
 8005492:	2b00      	cmp	r3, #0
 8005494:	f000 8093 	beq.w	80055be <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8005498:	6878      	ldr	r0, [r7, #4]
 800549a:	f000 fb5f 	bl	8005b5c <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800549e:	e08e      	b.n	80055be <HAL_I2C_EV_IRQHandler+0x2d6>
 80054a0:	e08d      	b.n	80055be <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d004      	beq.n	80054b4 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	695b      	ldr	r3, [r3, #20]
 80054b0:	61fb      	str	r3, [r7, #28]
 80054b2:	e007      	b.n	80054c4 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	699b      	ldr	r3, [r3, #24]
 80054ba:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	695b      	ldr	r3, [r3, #20]
 80054c2:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80054c4:	69fb      	ldr	r3, [r7, #28]
 80054c6:	085b      	lsrs	r3, r3, #1
 80054c8:	f003 0301 	and.w	r3, r3, #1
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d012      	beq.n	80054f6 <HAL_I2C_EV_IRQHandler+0x20e>
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	0a5b      	lsrs	r3, r3, #9
 80054d4:	f003 0301 	and.w	r3, r3, #1
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d00c      	beq.n	80054f6 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d003      	beq.n	80054ec <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	699b      	ldr	r3, [r3, #24]
 80054ea:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80054ec:	69b9      	ldr	r1, [r7, #24]
 80054ee:	6878      	ldr	r0, [r7, #4]
 80054f0:	f000 ff1d 	bl	800632e <I2C_Slave_ADDR>
 80054f4:	e066      	b.n	80055c4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80054f6:	69fb      	ldr	r3, [r7, #28]
 80054f8:	091b      	lsrs	r3, r3, #4
 80054fa:	f003 0301 	and.w	r3, r3, #1
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d009      	beq.n	8005516 <HAL_I2C_EV_IRQHandler+0x22e>
 8005502:	697b      	ldr	r3, [r7, #20]
 8005504:	0a5b      	lsrs	r3, r3, #9
 8005506:	f003 0301 	and.w	r3, r3, #1
 800550a:	2b00      	cmp	r3, #0
 800550c:	d003      	beq.n	8005516 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	f000 ff58 	bl	80063c4 <I2C_Slave_STOPF>
 8005514:	e056      	b.n	80055c4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005516:	7bbb      	ldrb	r3, [r7, #14]
 8005518:	2b21      	cmp	r3, #33	; 0x21
 800551a:	d002      	beq.n	8005522 <HAL_I2C_EV_IRQHandler+0x23a>
 800551c:	7bbb      	ldrb	r3, [r7, #14]
 800551e:	2b29      	cmp	r3, #41	; 0x29
 8005520:	d125      	bne.n	800556e <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005522:	69fb      	ldr	r3, [r7, #28]
 8005524:	09db      	lsrs	r3, r3, #7
 8005526:	f003 0301 	and.w	r3, r3, #1
 800552a:	2b00      	cmp	r3, #0
 800552c:	d00f      	beq.n	800554e <HAL_I2C_EV_IRQHandler+0x266>
 800552e:	697b      	ldr	r3, [r7, #20]
 8005530:	0a9b      	lsrs	r3, r3, #10
 8005532:	f003 0301 	and.w	r3, r3, #1
 8005536:	2b00      	cmp	r3, #0
 8005538:	d009      	beq.n	800554e <HAL_I2C_EV_IRQHandler+0x266>
 800553a:	69fb      	ldr	r3, [r7, #28]
 800553c:	089b      	lsrs	r3, r3, #2
 800553e:	f003 0301 	and.w	r3, r3, #1
 8005542:	2b00      	cmp	r3, #0
 8005544:	d103      	bne.n	800554e <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8005546:	6878      	ldr	r0, [r7, #4]
 8005548:	f000 fe33 	bl	80061b2 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800554c:	e039      	b.n	80055c2 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800554e:	69fb      	ldr	r3, [r7, #28]
 8005550:	089b      	lsrs	r3, r3, #2
 8005552:	f003 0301 	and.w	r3, r3, #1
 8005556:	2b00      	cmp	r3, #0
 8005558:	d033      	beq.n	80055c2 <HAL_I2C_EV_IRQHandler+0x2da>
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	0a5b      	lsrs	r3, r3, #9
 800555e:	f003 0301 	and.w	r3, r3, #1
 8005562:	2b00      	cmp	r3, #0
 8005564:	d02d      	beq.n	80055c2 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8005566:	6878      	ldr	r0, [r7, #4]
 8005568:	f000 fe60 	bl	800622c <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800556c:	e029      	b.n	80055c2 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800556e:	69fb      	ldr	r3, [r7, #28]
 8005570:	099b      	lsrs	r3, r3, #6
 8005572:	f003 0301 	and.w	r3, r3, #1
 8005576:	2b00      	cmp	r3, #0
 8005578:	d00f      	beq.n	800559a <HAL_I2C_EV_IRQHandler+0x2b2>
 800557a:	697b      	ldr	r3, [r7, #20]
 800557c:	0a9b      	lsrs	r3, r3, #10
 800557e:	f003 0301 	and.w	r3, r3, #1
 8005582:	2b00      	cmp	r3, #0
 8005584:	d009      	beq.n	800559a <HAL_I2C_EV_IRQHandler+0x2b2>
 8005586:	69fb      	ldr	r3, [r7, #28]
 8005588:	089b      	lsrs	r3, r3, #2
 800558a:	f003 0301 	and.w	r3, r3, #1
 800558e:	2b00      	cmp	r3, #0
 8005590:	d103      	bne.n	800559a <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f000 fe6b 	bl	800626e <I2C_SlaveReceive_RXNE>
 8005598:	e014      	b.n	80055c4 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800559a:	69fb      	ldr	r3, [r7, #28]
 800559c:	089b      	lsrs	r3, r3, #2
 800559e:	f003 0301 	and.w	r3, r3, #1
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d00e      	beq.n	80055c4 <HAL_I2C_EV_IRQHandler+0x2dc>
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	0a5b      	lsrs	r3, r3, #9
 80055aa:	f003 0301 	and.w	r3, r3, #1
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d008      	beq.n	80055c4 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	f000 fe99 	bl	80062ea <I2C_SlaveReceive_BTF>
 80055b8:	e004      	b.n	80055c4 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80055ba:	bf00      	nop
 80055bc:	e002      	b.n	80055c4 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80055be:	bf00      	nop
 80055c0:	e000      	b.n	80055c4 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80055c2:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80055c4:	3720      	adds	r7, #32
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bd80      	pop	{r7, pc}

080055ca <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80055ca:	b480      	push	{r7}
 80055cc:	b083      	sub	sp, #12
 80055ce:	af00      	add	r7, sp, #0
 80055d0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80055d2:	bf00      	nop
 80055d4:	370c      	adds	r7, #12
 80055d6:	46bd      	mov	sp, r7
 80055d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055dc:	4770      	bx	lr

080055de <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80055de:	b480      	push	{r7}
 80055e0:	b083      	sub	sp, #12
 80055e2:	af00      	add	r7, sp, #0
 80055e4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80055e6:	bf00      	nop
 80055e8:	370c      	adds	r7, #12
 80055ea:	46bd      	mov	sp, r7
 80055ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f0:	4770      	bx	lr

080055f2 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80055f2:	b480      	push	{r7}
 80055f4:	b083      	sub	sp, #12
 80055f6:	af00      	add	r7, sp, #0
 80055f8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80055fa:	bf00      	nop
 80055fc:	370c      	adds	r7, #12
 80055fe:	46bd      	mov	sp, r7
 8005600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005604:	4770      	bx	lr

08005606 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005606:	b480      	push	{r7}
 8005608:	b083      	sub	sp, #12
 800560a:	af00      	add	r7, sp, #0
 800560c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800560e:	bf00      	nop
 8005610:	370c      	adds	r7, #12
 8005612:	46bd      	mov	sp, r7
 8005614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005618:	4770      	bx	lr

0800561a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800561a:	b480      	push	{r7}
 800561c:	b083      	sub	sp, #12
 800561e:	af00      	add	r7, sp, #0
 8005620:	6078      	str	r0, [r7, #4]
 8005622:	460b      	mov	r3, r1
 8005624:	70fb      	strb	r3, [r7, #3]
 8005626:	4613      	mov	r3, r2
 8005628:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800562a:	bf00      	nop
 800562c:	370c      	adds	r7, #12
 800562e:	46bd      	mov	sp, r7
 8005630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005634:	4770      	bx	lr

08005636 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005636:	b480      	push	{r7}
 8005638:	b083      	sub	sp, #12
 800563a:	af00      	add	r7, sp, #0
 800563c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800563e:	bf00      	nop
 8005640:	370c      	adds	r7, #12
 8005642:	46bd      	mov	sp, r7
 8005644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005648:	4770      	bx	lr

0800564a <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800564a:	b480      	push	{r7}
 800564c:	b083      	sub	sp, #12
 800564e:	af00      	add	r7, sp, #0
 8005650:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8005652:	bf00      	nop
 8005654:	370c      	adds	r7, #12
 8005656:	46bd      	mov	sp, r7
 8005658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565c:	4770      	bx	lr

0800565e <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800565e:	b480      	push	{r7}
 8005660:	b083      	sub	sp, #12
 8005662:	af00      	add	r7, sp, #0
 8005664:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8005666:	bf00      	nop
 8005668:	370c      	adds	r7, #12
 800566a:	46bd      	mov	sp, r7
 800566c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005670:	4770      	bx	lr

08005672 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005672:	b480      	push	{r7}
 8005674:	b083      	sub	sp, #12
 8005676:	af00      	add	r7, sp, #0
 8005678:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800567a:	bf00      	nop
 800567c:	370c      	adds	r7, #12
 800567e:	46bd      	mov	sp, r7
 8005680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005684:	4770      	bx	lr

08005686 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005686:	b480      	push	{r7}
 8005688:	b083      	sub	sp, #12
 800568a:	af00      	add	r7, sp, #0
 800568c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800568e:	bf00      	nop
 8005690:	370c      	adds	r7, #12
 8005692:	46bd      	mov	sp, r7
 8005694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005698:	4770      	bx	lr

0800569a <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800569a:	b580      	push	{r7, lr}
 800569c:	b084      	sub	sp, #16
 800569e:	af00      	add	r7, sp, #0
 80056a0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056a8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80056b0:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056b6:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d150      	bne.n	8005762 <I2C_MasterTransmit_TXE+0xc8>
 80056c0:	7bfb      	ldrb	r3, [r7, #15]
 80056c2:	2b21      	cmp	r3, #33	; 0x21
 80056c4:	d14d      	bne.n	8005762 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	2b08      	cmp	r3, #8
 80056ca:	d01d      	beq.n	8005708 <I2C_MasterTransmit_TXE+0x6e>
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	2b20      	cmp	r3, #32
 80056d0:	d01a      	beq.n	8005708 <I2C_MasterTransmit_TXE+0x6e>
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80056d8:	d016      	beq.n	8005708 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	685a      	ldr	r2, [r3, #4]
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80056e8:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2211      	movs	r2, #17
 80056ee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2200      	movs	r2, #0
 80056f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2220      	movs	r2, #32
 80056fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8005700:	6878      	ldr	r0, [r7, #4]
 8005702:	f7ff ff62 	bl	80055ca <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005706:	e060      	b.n	80057ca <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	685a      	ldr	r2, [r3, #4]
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005716:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	681a      	ldr	r2, [r3, #0]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005726:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2200      	movs	r2, #0
 800572c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2220      	movs	r2, #32
 8005732:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800573c:	b2db      	uxtb	r3, r3
 800573e:	2b40      	cmp	r3, #64	; 0x40
 8005740:	d107      	bne.n	8005752 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2200      	movs	r2, #0
 8005746:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800574a:	6878      	ldr	r0, [r7, #4]
 800574c:	f7ff ff7d 	bl	800564a <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005750:	e03b      	b.n	80057ca <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2200      	movs	r2, #0
 8005756:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f7ff ff35 	bl	80055ca <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005760:	e033      	b.n	80057ca <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8005762:	7bfb      	ldrb	r3, [r7, #15]
 8005764:	2b21      	cmp	r3, #33	; 0x21
 8005766:	d005      	beq.n	8005774 <I2C_MasterTransmit_TXE+0xda>
 8005768:	7bbb      	ldrb	r3, [r7, #14]
 800576a:	2b40      	cmp	r3, #64	; 0x40
 800576c:	d12d      	bne.n	80057ca <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800576e:	7bfb      	ldrb	r3, [r7, #15]
 8005770:	2b22      	cmp	r3, #34	; 0x22
 8005772:	d12a      	bne.n	80057ca <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005778:	b29b      	uxth	r3, r3
 800577a:	2b00      	cmp	r3, #0
 800577c:	d108      	bne.n	8005790 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	685a      	ldr	r2, [r3, #4]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800578c:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800578e:	e01c      	b.n	80057ca <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005796:	b2db      	uxtb	r3, r3
 8005798:	2b40      	cmp	r3, #64	; 0x40
 800579a:	d103      	bne.n	80057a4 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800579c:	6878      	ldr	r0, [r7, #4]
 800579e:	f000 f88e 	bl	80058be <I2C_MemoryTransmit_TXE_BTF>
}
 80057a2:	e012      	b.n	80057ca <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a8:	781a      	ldrb	r2, [r3, #0]
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b4:	1c5a      	adds	r2, r3, #1
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057be:	b29b      	uxth	r3, r3
 80057c0:	3b01      	subs	r3, #1
 80057c2:	b29a      	uxth	r2, r3
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80057c8:	e7ff      	b.n	80057ca <I2C_MasterTransmit_TXE+0x130>
 80057ca:	bf00      	nop
 80057cc:	3710      	adds	r7, #16
 80057ce:	46bd      	mov	sp, r7
 80057d0:	bd80      	pop	{r7, pc}

080057d2 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80057d2:	b580      	push	{r7, lr}
 80057d4:	b084      	sub	sp, #16
 80057d6:	af00      	add	r7, sp, #0
 80057d8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057de:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057e6:	b2db      	uxtb	r3, r3
 80057e8:	2b21      	cmp	r3, #33	; 0x21
 80057ea:	d164      	bne.n	80058b6 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057f0:	b29b      	uxth	r3, r3
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d012      	beq.n	800581c <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057fa:	781a      	ldrb	r2, [r3, #0]
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005806:	1c5a      	adds	r2, r3, #1
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005810:	b29b      	uxth	r3, r3
 8005812:	3b01      	subs	r3, #1
 8005814:	b29a      	uxth	r2, r3
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800581a:	e04c      	b.n	80058b6 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	2b08      	cmp	r3, #8
 8005820:	d01d      	beq.n	800585e <I2C_MasterTransmit_BTF+0x8c>
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	2b20      	cmp	r3, #32
 8005826:	d01a      	beq.n	800585e <I2C_MasterTransmit_BTF+0x8c>
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800582e:	d016      	beq.n	800585e <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	685a      	ldr	r2, [r3, #4]
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800583e:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2211      	movs	r2, #17
 8005844:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2200      	movs	r2, #0
 800584a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2220      	movs	r2, #32
 8005852:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005856:	6878      	ldr	r0, [r7, #4]
 8005858:	f7ff feb7 	bl	80055ca <HAL_I2C_MasterTxCpltCallback>
}
 800585c:	e02b      	b.n	80058b6 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	685a      	ldr	r2, [r3, #4]
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800586c:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	681a      	ldr	r2, [r3, #0]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800587c:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2200      	movs	r2, #0
 8005882:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2220      	movs	r2, #32
 8005888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005892:	b2db      	uxtb	r3, r3
 8005894:	2b40      	cmp	r3, #64	; 0x40
 8005896:	d107      	bne.n	80058a8 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2200      	movs	r2, #0
 800589c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80058a0:	6878      	ldr	r0, [r7, #4]
 80058a2:	f7ff fed2 	bl	800564a <HAL_I2C_MemTxCpltCallback>
}
 80058a6:	e006      	b.n	80058b6 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2200      	movs	r2, #0
 80058ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80058b0:	6878      	ldr	r0, [r7, #4]
 80058b2:	f7ff fe8a 	bl	80055ca <HAL_I2C_MasterTxCpltCallback>
}
 80058b6:	bf00      	nop
 80058b8:	3710      	adds	r7, #16
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bd80      	pop	{r7, pc}

080058be <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80058be:	b580      	push	{r7, lr}
 80058c0:	b084      	sub	sp, #16
 80058c2:	af00      	add	r7, sp, #0
 80058c4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058cc:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d11d      	bne.n	8005912 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058da:	2b01      	cmp	r3, #1
 80058dc:	d10b      	bne.n	80058f6 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058e2:	b2da      	uxtb	r2, r3
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058ee:	1c9a      	adds	r2, r3, #2
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80058f4:	e073      	b.n	80059de <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058fa:	b29b      	uxth	r3, r3
 80058fc:	121b      	asrs	r3, r3, #8
 80058fe:	b2da      	uxtb	r2, r3
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800590a:	1c5a      	adds	r2, r3, #1
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005910:	e065      	b.n	80059de <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005916:	2b01      	cmp	r3, #1
 8005918:	d10b      	bne.n	8005932 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800591e:	b2da      	uxtb	r2, r3
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800592a:	1c5a      	adds	r2, r3, #1
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005930:	e055      	b.n	80059de <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005936:	2b02      	cmp	r3, #2
 8005938:	d151      	bne.n	80059de <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800593a:	7bfb      	ldrb	r3, [r7, #15]
 800593c:	2b22      	cmp	r3, #34	; 0x22
 800593e:	d10d      	bne.n	800595c <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	681a      	ldr	r2, [r3, #0]
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800594e:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005954:	1c5a      	adds	r2, r3, #1
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	651a      	str	r2, [r3, #80]	; 0x50
}
 800595a:	e040      	b.n	80059de <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005960:	b29b      	uxth	r3, r3
 8005962:	2b00      	cmp	r3, #0
 8005964:	d015      	beq.n	8005992 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8005966:	7bfb      	ldrb	r3, [r7, #15]
 8005968:	2b21      	cmp	r3, #33	; 0x21
 800596a:	d112      	bne.n	8005992 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005970:	781a      	ldrb	r2, [r3, #0]
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800597c:	1c5a      	adds	r2, r3, #1
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005986:	b29b      	uxth	r3, r3
 8005988:	3b01      	subs	r3, #1
 800598a:	b29a      	uxth	r2, r3
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005990:	e025      	b.n	80059de <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005996:	b29b      	uxth	r3, r3
 8005998:	2b00      	cmp	r3, #0
 800599a:	d120      	bne.n	80059de <I2C_MemoryTransmit_TXE_BTF+0x120>
 800599c:	7bfb      	ldrb	r3, [r7, #15]
 800599e:	2b21      	cmp	r3, #33	; 0x21
 80059a0:	d11d      	bne.n	80059de <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	685a      	ldr	r2, [r3, #4]
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80059b0:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	681a      	ldr	r2, [r3, #0]
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059c0:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2200      	movs	r2, #0
 80059c6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2220      	movs	r2, #32
 80059cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2200      	movs	r2, #0
 80059d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80059d8:	6878      	ldr	r0, [r7, #4]
 80059da:	f7ff fe36 	bl	800564a <HAL_I2C_MemTxCpltCallback>
}
 80059de:	bf00      	nop
 80059e0:	3710      	adds	r7, #16
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}

080059e6 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80059e6:	b580      	push	{r7, lr}
 80059e8:	b084      	sub	sp, #16
 80059ea:	af00      	add	r7, sp, #0
 80059ec:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059f4:	b2db      	uxtb	r3, r3
 80059f6:	2b22      	cmp	r3, #34	; 0x22
 80059f8:	f040 80ac 	bne.w	8005b54 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a00:	b29b      	uxth	r3, r3
 8005a02:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	2b03      	cmp	r3, #3
 8005a08:	d921      	bls.n	8005a4e <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	691a      	ldr	r2, [r3, #16]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a14:	b2d2      	uxtb	r2, r2
 8005a16:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a1c:	1c5a      	adds	r2, r3, #1
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a26:	b29b      	uxth	r3, r3
 8005a28:	3b01      	subs	r3, #1
 8005a2a:	b29a      	uxth	r2, r3
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a34:	b29b      	uxth	r3, r3
 8005a36:	2b03      	cmp	r3, #3
 8005a38:	f040 808c 	bne.w	8005b54 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	685a      	ldr	r2, [r3, #4]
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a4a:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8005a4c:	e082      	b.n	8005b54 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a52:	2b02      	cmp	r3, #2
 8005a54:	d075      	beq.n	8005b42 <I2C_MasterReceive_RXNE+0x15c>
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	2b01      	cmp	r3, #1
 8005a5a:	d002      	beq.n	8005a62 <I2C_MasterReceive_RXNE+0x7c>
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d16f      	bne.n	8005b42 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005a62:	6878      	ldr	r0, [r7, #4]
 8005a64:	f001 f992 	bl	8006d8c <I2C_WaitOnSTOPRequestThroughIT>
 8005a68:	4603      	mov	r3, r0
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d142      	bne.n	8005af4 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	681a      	ldr	r2, [r3, #0]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a7c:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	685a      	ldr	r2, [r3, #4]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005a8c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	691a      	ldr	r2, [r3, #16]
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a98:	b2d2      	uxtb	r2, r2
 8005a9a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aa0:	1c5a      	adds	r2, r3, #1
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005aaa:	b29b      	uxth	r3, r3
 8005aac:	3b01      	subs	r3, #1
 8005aae:	b29a      	uxth	r2, r3
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2220      	movs	r2, #32
 8005ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ac2:	b2db      	uxtb	r3, r3
 8005ac4:	2b40      	cmp	r3, #64	; 0x40
 8005ac6:	d10a      	bne.n	8005ade <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2200      	movs	r2, #0
 8005acc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	f7ff fdc1 	bl	800565e <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005adc:	e03a      	b.n	8005b54 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2212      	movs	r2, #18
 8005aea:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8005aec:	6878      	ldr	r0, [r7, #4]
 8005aee:	f7ff fd76 	bl	80055de <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005af2:	e02f      	b.n	8005b54 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	685a      	ldr	r2, [r3, #4]
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005b02:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	691a      	ldr	r2, [r3, #16]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b0e:	b2d2      	uxtb	r2, r2
 8005b10:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b16:	1c5a      	adds	r2, r3, #1
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b20:	b29b      	uxth	r3, r3
 8005b22:	3b01      	subs	r3, #1
 8005b24:	b29a      	uxth	r2, r3
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2220      	movs	r2, #32
 8005b2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2200      	movs	r2, #0
 8005b36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	f7ff fd99 	bl	8005672 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005b40:	e008      	b.n	8005b54 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	685a      	ldr	r2, [r3, #4]
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b50:	605a      	str	r2, [r3, #4]
}
 8005b52:	e7ff      	b.n	8005b54 <I2C_MasterReceive_RXNE+0x16e>
 8005b54:	bf00      	nop
 8005b56:	3710      	adds	r7, #16
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	bd80      	pop	{r7, pc}

08005b5c <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b084      	sub	sp, #16
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b68:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b6e:	b29b      	uxth	r3, r3
 8005b70:	2b04      	cmp	r3, #4
 8005b72:	d11b      	bne.n	8005bac <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	685a      	ldr	r2, [r3, #4]
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b82:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	691a      	ldr	r2, [r3, #16]
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b8e:	b2d2      	uxtb	r2, r2
 8005b90:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b96:	1c5a      	adds	r2, r3, #1
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ba0:	b29b      	uxth	r3, r3
 8005ba2:	3b01      	subs	r3, #1
 8005ba4:	b29a      	uxth	r2, r3
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8005baa:	e0bd      	b.n	8005d28 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bb0:	b29b      	uxth	r3, r3
 8005bb2:	2b03      	cmp	r3, #3
 8005bb4:	d129      	bne.n	8005c0a <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	685a      	ldr	r2, [r3, #4]
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005bc4:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	2b04      	cmp	r3, #4
 8005bca:	d00a      	beq.n	8005be2 <I2C_MasterReceive_BTF+0x86>
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	2b02      	cmp	r3, #2
 8005bd0:	d007      	beq.n	8005be2 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	681a      	ldr	r2, [r3, #0]
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005be0:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	691a      	ldr	r2, [r3, #16]
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bec:	b2d2      	uxtb	r2, r2
 8005bee:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bf4:	1c5a      	adds	r2, r3, #1
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bfe:	b29b      	uxth	r3, r3
 8005c00:	3b01      	subs	r3, #1
 8005c02:	b29a      	uxth	r2, r3
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005c08:	e08e      	b.n	8005d28 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c0e:	b29b      	uxth	r3, r3
 8005c10:	2b02      	cmp	r3, #2
 8005c12:	d176      	bne.n	8005d02 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	2b01      	cmp	r3, #1
 8005c18:	d002      	beq.n	8005c20 <I2C_MasterReceive_BTF+0xc4>
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	2b10      	cmp	r3, #16
 8005c1e:	d108      	bne.n	8005c32 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	681a      	ldr	r2, [r3, #0]
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c2e:	601a      	str	r2, [r3, #0]
 8005c30:	e019      	b.n	8005c66 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	2b04      	cmp	r3, #4
 8005c36:	d002      	beq.n	8005c3e <I2C_MasterReceive_BTF+0xe2>
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	2b02      	cmp	r3, #2
 8005c3c:	d108      	bne.n	8005c50 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	681a      	ldr	r2, [r3, #0]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005c4c:	601a      	str	r2, [r3, #0]
 8005c4e:	e00a      	b.n	8005c66 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	2b10      	cmp	r3, #16
 8005c54:	d007      	beq.n	8005c66 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	681a      	ldr	r2, [r3, #0]
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c64:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	691a      	ldr	r2, [r3, #16]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c70:	b2d2      	uxtb	r2, r2
 8005c72:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c78:	1c5a      	adds	r2, r3, #1
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c82:	b29b      	uxth	r3, r3
 8005c84:	3b01      	subs	r3, #1
 8005c86:	b29a      	uxth	r2, r3
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	691a      	ldr	r2, [r3, #16]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c96:	b2d2      	uxtb	r2, r2
 8005c98:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c9e:	1c5a      	adds	r2, r3, #1
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ca8:	b29b      	uxth	r3, r3
 8005caa:	3b01      	subs	r3, #1
 8005cac:	b29a      	uxth	r2, r3
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	685a      	ldr	r2, [r3, #4]
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005cc0:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2220      	movs	r2, #32
 8005cc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005cd0:	b2db      	uxtb	r3, r3
 8005cd2:	2b40      	cmp	r3, #64	; 0x40
 8005cd4:	d10a      	bne.n	8005cec <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	f7ff fcba 	bl	800565e <HAL_I2C_MemRxCpltCallback>
}
 8005cea:	e01d      	b.n	8005d28 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2200      	movs	r2, #0
 8005cf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2212      	movs	r2, #18
 8005cf8:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005cfa:	6878      	ldr	r0, [r7, #4]
 8005cfc:	f7ff fc6f 	bl	80055de <HAL_I2C_MasterRxCpltCallback>
}
 8005d00:	e012      	b.n	8005d28 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	691a      	ldr	r2, [r3, #16]
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d0c:	b2d2      	uxtb	r2, r2
 8005d0e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d14:	1c5a      	adds	r2, r3, #1
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d1e:	b29b      	uxth	r3, r3
 8005d20:	3b01      	subs	r3, #1
 8005d22:	b29a      	uxth	r2, r3
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005d28:	bf00      	nop
 8005d2a:	3710      	adds	r7, #16
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	bd80      	pop	{r7, pc}

08005d30 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8005d30:	b480      	push	{r7}
 8005d32:	b083      	sub	sp, #12
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d3e:	b2db      	uxtb	r3, r3
 8005d40:	2b40      	cmp	r3, #64	; 0x40
 8005d42:	d117      	bne.n	8005d74 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d109      	bne.n	8005d60 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d50:	b2db      	uxtb	r3, r3
 8005d52:	461a      	mov	r2, r3
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005d5c:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8005d5e:	e067      	b.n	8005e30 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d64:	b2db      	uxtb	r3, r3
 8005d66:	f043 0301 	orr.w	r3, r3, #1
 8005d6a:	b2da      	uxtb	r2, r3
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	611a      	str	r2, [r3, #16]
}
 8005d72:	e05d      	b.n	8005e30 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	691b      	ldr	r3, [r3, #16]
 8005d78:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005d7c:	d133      	bne.n	8005de6 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d84:	b2db      	uxtb	r3, r3
 8005d86:	2b21      	cmp	r3, #33	; 0x21
 8005d88:	d109      	bne.n	8005d9e <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d8e:	b2db      	uxtb	r3, r3
 8005d90:	461a      	mov	r2, r3
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005d9a:	611a      	str	r2, [r3, #16]
 8005d9c:	e008      	b.n	8005db0 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005da2:	b2db      	uxtb	r3, r3
 8005da4:	f043 0301 	orr.w	r3, r3, #1
 8005da8:	b2da      	uxtb	r2, r3
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d004      	beq.n	8005dc2 <I2C_Master_SB+0x92>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d108      	bne.n	8005dd4 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d032      	beq.n	8005e30 <I2C_Master_SB+0x100>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d02d      	beq.n	8005e30 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	685a      	ldr	r2, [r3, #4]
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005de2:	605a      	str	r2, [r3, #4]
}
 8005de4:	e024      	b.n	8005e30 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d10e      	bne.n	8005e0c <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005df2:	b29b      	uxth	r3, r3
 8005df4:	11db      	asrs	r3, r3, #7
 8005df6:	b2db      	uxtb	r3, r3
 8005df8:	f003 0306 	and.w	r3, r3, #6
 8005dfc:	b2db      	uxtb	r3, r3
 8005dfe:	f063 030f 	orn	r3, r3, #15
 8005e02:	b2da      	uxtb	r2, r3
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	611a      	str	r2, [r3, #16]
}
 8005e0a:	e011      	b.n	8005e30 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e10:	2b01      	cmp	r3, #1
 8005e12:	d10d      	bne.n	8005e30 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e18:	b29b      	uxth	r3, r3
 8005e1a:	11db      	asrs	r3, r3, #7
 8005e1c:	b2db      	uxtb	r3, r3
 8005e1e:	f003 0306 	and.w	r3, r3, #6
 8005e22:	b2db      	uxtb	r3, r3
 8005e24:	f063 030e 	orn	r3, r3, #14
 8005e28:	b2da      	uxtb	r2, r3
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	611a      	str	r2, [r3, #16]
}
 8005e30:	bf00      	nop
 8005e32:	370c      	adds	r7, #12
 8005e34:	46bd      	mov	sp, r7
 8005e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3a:	4770      	bx	lr

08005e3c <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b083      	sub	sp, #12
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e48:	b2da      	uxtb	r2, r3
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d004      	beq.n	8005e62 <I2C_Master_ADD10+0x26>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d108      	bne.n	8005e74 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d00c      	beq.n	8005e84 <I2C_Master_ADD10+0x48>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d007      	beq.n	8005e84 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	685a      	ldr	r2, [r3, #4]
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e82:	605a      	str	r2, [r3, #4]
  }
}
 8005e84:	bf00      	nop
 8005e86:	370c      	adds	r7, #12
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8e:	4770      	bx	lr

08005e90 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8005e90:	b480      	push	{r7}
 8005e92:	b091      	sub	sp, #68	; 0x44
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e9e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ea6:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eac:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005eb4:	b2db      	uxtb	r3, r3
 8005eb6:	2b22      	cmp	r3, #34	; 0x22
 8005eb8:	f040 8169 	bne.w	800618e <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d10f      	bne.n	8005ee4 <I2C_Master_ADDR+0x54>
 8005ec4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005ec8:	2b40      	cmp	r3, #64	; 0x40
 8005eca:	d10b      	bne.n	8005ee4 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ecc:	2300      	movs	r3, #0
 8005ece:	633b      	str	r3, [r7, #48]	; 0x30
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	695b      	ldr	r3, [r3, #20]
 8005ed6:	633b      	str	r3, [r7, #48]	; 0x30
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	699b      	ldr	r3, [r3, #24]
 8005ede:	633b      	str	r3, [r7, #48]	; 0x30
 8005ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ee2:	e160      	b.n	80061a6 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d11d      	bne.n	8005f28 <I2C_Master_ADDR+0x98>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	691b      	ldr	r3, [r3, #16]
 8005ef0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005ef4:	d118      	bne.n	8005f28 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	695b      	ldr	r3, [r3, #20]
 8005f00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	699b      	ldr	r3, [r3, #24]
 8005f08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	681a      	ldr	r2, [r3, #0]
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f1a:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f20:	1c5a      	adds	r2, r3, #1
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	651a      	str	r2, [r3, #80]	; 0x50
 8005f26:	e13e      	b.n	80061a6 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f2c:	b29b      	uxth	r3, r3
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d113      	bne.n	8005f5a <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f32:	2300      	movs	r3, #0
 8005f34:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	695b      	ldr	r3, [r3, #20]
 8005f3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	699b      	ldr	r3, [r3, #24]
 8005f44:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f46:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	681a      	ldr	r2, [r3, #0]
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f56:	601a      	str	r2, [r3, #0]
 8005f58:	e115      	b.n	8006186 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f5e:	b29b      	uxth	r3, r3
 8005f60:	2b01      	cmp	r3, #1
 8005f62:	f040 808a 	bne.w	800607a <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8005f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f68:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005f6c:	d137      	bne.n	8005fde <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	681a      	ldr	r2, [r3, #0]
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f7c:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	685b      	ldr	r3, [r3, #4]
 8005f84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f8c:	d113      	bne.n	8005fb6 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	681a      	ldr	r2, [r3, #0]
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f9c:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	627b      	str	r3, [r7, #36]	; 0x24
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	695b      	ldr	r3, [r3, #20]
 8005fa8:	627b      	str	r3, [r7, #36]	; 0x24
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	699b      	ldr	r3, [r3, #24]
 8005fb0:	627b      	str	r3, [r7, #36]	; 0x24
 8005fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb4:	e0e7      	b.n	8006186 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	623b      	str	r3, [r7, #32]
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	695b      	ldr	r3, [r3, #20]
 8005fc0:	623b      	str	r3, [r7, #32]
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	699b      	ldr	r3, [r3, #24]
 8005fc8:	623b      	str	r3, [r7, #32]
 8005fca:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	681a      	ldr	r2, [r3, #0]
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005fda:	601a      	str	r2, [r3, #0]
 8005fdc:	e0d3      	b.n	8006186 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8005fde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fe0:	2b08      	cmp	r3, #8
 8005fe2:	d02e      	beq.n	8006042 <I2C_Master_ADDR+0x1b2>
 8005fe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fe6:	2b20      	cmp	r3, #32
 8005fe8:	d02b      	beq.n	8006042 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8005fea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fec:	2b12      	cmp	r3, #18
 8005fee:	d102      	bne.n	8005ff6 <I2C_Master_ADDR+0x166>
 8005ff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ff2:	2b01      	cmp	r3, #1
 8005ff4:	d125      	bne.n	8006042 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005ff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ff8:	2b04      	cmp	r3, #4
 8005ffa:	d00e      	beq.n	800601a <I2C_Master_ADDR+0x18a>
 8005ffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ffe:	2b02      	cmp	r3, #2
 8006000:	d00b      	beq.n	800601a <I2C_Master_ADDR+0x18a>
 8006002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006004:	2b10      	cmp	r3, #16
 8006006:	d008      	beq.n	800601a <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	681a      	ldr	r2, [r3, #0]
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006016:	601a      	str	r2, [r3, #0]
 8006018:	e007      	b.n	800602a <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	681a      	ldr	r2, [r3, #0]
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006028:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800602a:	2300      	movs	r3, #0
 800602c:	61fb      	str	r3, [r7, #28]
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	695b      	ldr	r3, [r3, #20]
 8006034:	61fb      	str	r3, [r7, #28]
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	699b      	ldr	r3, [r3, #24]
 800603c:	61fb      	str	r3, [r7, #28]
 800603e:	69fb      	ldr	r3, [r7, #28]
 8006040:	e0a1      	b.n	8006186 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	681a      	ldr	r2, [r3, #0]
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006050:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006052:	2300      	movs	r3, #0
 8006054:	61bb      	str	r3, [r7, #24]
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	695b      	ldr	r3, [r3, #20]
 800605c:	61bb      	str	r3, [r7, #24]
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	699b      	ldr	r3, [r3, #24]
 8006064:	61bb      	str	r3, [r7, #24]
 8006066:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	681a      	ldr	r2, [r3, #0]
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006076:	601a      	str	r2, [r3, #0]
 8006078:	e085      	b.n	8006186 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800607e:	b29b      	uxth	r3, r3
 8006080:	2b02      	cmp	r3, #2
 8006082:	d14d      	bne.n	8006120 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006086:	2b04      	cmp	r3, #4
 8006088:	d016      	beq.n	80060b8 <I2C_Master_ADDR+0x228>
 800608a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800608c:	2b02      	cmp	r3, #2
 800608e:	d013      	beq.n	80060b8 <I2C_Master_ADDR+0x228>
 8006090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006092:	2b10      	cmp	r3, #16
 8006094:	d010      	beq.n	80060b8 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	681a      	ldr	r2, [r3, #0]
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060a4:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	681a      	ldr	r2, [r3, #0]
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80060b4:	601a      	str	r2, [r3, #0]
 80060b6:	e007      	b.n	80060c8 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	681a      	ldr	r2, [r3, #0]
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80060c6:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	685b      	ldr	r3, [r3, #4]
 80060ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80060d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060d6:	d117      	bne.n	8006108 <I2C_Master_ADDR+0x278>
 80060d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060da:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80060de:	d00b      	beq.n	80060f8 <I2C_Master_ADDR+0x268>
 80060e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060e2:	2b01      	cmp	r3, #1
 80060e4:	d008      	beq.n	80060f8 <I2C_Master_ADDR+0x268>
 80060e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060e8:	2b08      	cmp	r3, #8
 80060ea:	d005      	beq.n	80060f8 <I2C_Master_ADDR+0x268>
 80060ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060ee:	2b10      	cmp	r3, #16
 80060f0:	d002      	beq.n	80060f8 <I2C_Master_ADDR+0x268>
 80060f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060f4:	2b20      	cmp	r3, #32
 80060f6:	d107      	bne.n	8006108 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	685a      	ldr	r2, [r3, #4]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006106:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006108:	2300      	movs	r3, #0
 800610a:	617b      	str	r3, [r7, #20]
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	695b      	ldr	r3, [r3, #20]
 8006112:	617b      	str	r3, [r7, #20]
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	699b      	ldr	r3, [r3, #24]
 800611a:	617b      	str	r3, [r7, #20]
 800611c:	697b      	ldr	r3, [r7, #20]
 800611e:	e032      	b.n	8006186 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	681a      	ldr	r2, [r3, #0]
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800612e:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	685b      	ldr	r3, [r3, #4]
 8006136:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800613a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800613e:	d117      	bne.n	8006170 <I2C_Master_ADDR+0x2e0>
 8006140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006142:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006146:	d00b      	beq.n	8006160 <I2C_Master_ADDR+0x2d0>
 8006148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800614a:	2b01      	cmp	r3, #1
 800614c:	d008      	beq.n	8006160 <I2C_Master_ADDR+0x2d0>
 800614e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006150:	2b08      	cmp	r3, #8
 8006152:	d005      	beq.n	8006160 <I2C_Master_ADDR+0x2d0>
 8006154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006156:	2b10      	cmp	r3, #16
 8006158:	d002      	beq.n	8006160 <I2C_Master_ADDR+0x2d0>
 800615a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800615c:	2b20      	cmp	r3, #32
 800615e:	d107      	bne.n	8006170 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	685a      	ldr	r2, [r3, #4]
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800616e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006170:	2300      	movs	r3, #0
 8006172:	613b      	str	r3, [r7, #16]
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	695b      	ldr	r3, [r3, #20]
 800617a:	613b      	str	r3, [r7, #16]
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	699b      	ldr	r3, [r3, #24]
 8006182:	613b      	str	r3, [r7, #16]
 8006184:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2200      	movs	r2, #0
 800618a:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800618c:	e00b      	b.n	80061a6 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800618e:	2300      	movs	r3, #0
 8006190:	60fb      	str	r3, [r7, #12]
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	695b      	ldr	r3, [r3, #20]
 8006198:	60fb      	str	r3, [r7, #12]
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	699b      	ldr	r3, [r3, #24]
 80061a0:	60fb      	str	r3, [r7, #12]
 80061a2:	68fb      	ldr	r3, [r7, #12]
}
 80061a4:	e7ff      	b.n	80061a6 <I2C_Master_ADDR+0x316>
 80061a6:	bf00      	nop
 80061a8:	3744      	adds	r7, #68	; 0x44
 80061aa:	46bd      	mov	sp, r7
 80061ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b0:	4770      	bx	lr

080061b2 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80061b2:	b580      	push	{r7, lr}
 80061b4:	b084      	sub	sp, #16
 80061b6:	af00      	add	r7, sp, #0
 80061b8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061c0:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061c6:	b29b      	uxth	r3, r3
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d02b      	beq.n	8006224 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061d0:	781a      	ldrb	r2, [r3, #0]
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061dc:	1c5a      	adds	r2, r3, #1
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061e6:	b29b      	uxth	r3, r3
 80061e8:	3b01      	subs	r3, #1
 80061ea:	b29a      	uxth	r2, r3
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061f4:	b29b      	uxth	r3, r3
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d114      	bne.n	8006224 <I2C_SlaveTransmit_TXE+0x72>
 80061fa:	7bfb      	ldrb	r3, [r7, #15]
 80061fc:	2b29      	cmp	r3, #41	; 0x29
 80061fe:	d111      	bne.n	8006224 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	685a      	ldr	r2, [r3, #4]
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800620e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2221      	movs	r2, #33	; 0x21
 8006214:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2228      	movs	r2, #40	; 0x28
 800621a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800621e:	6878      	ldr	r0, [r7, #4]
 8006220:	f7ff f9e7 	bl	80055f2 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8006224:	bf00      	nop
 8006226:	3710      	adds	r7, #16
 8006228:	46bd      	mov	sp, r7
 800622a:	bd80      	pop	{r7, pc}

0800622c <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800622c:	b480      	push	{r7}
 800622e:	b083      	sub	sp, #12
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006238:	b29b      	uxth	r3, r3
 800623a:	2b00      	cmp	r3, #0
 800623c:	d011      	beq.n	8006262 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006242:	781a      	ldrb	r2, [r3, #0]
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800624e:	1c5a      	adds	r2, r3, #1
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006258:	b29b      	uxth	r3, r3
 800625a:	3b01      	subs	r3, #1
 800625c:	b29a      	uxth	r2, r3
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8006262:	bf00      	nop
 8006264:	370c      	adds	r7, #12
 8006266:	46bd      	mov	sp, r7
 8006268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626c:	4770      	bx	lr

0800626e <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800626e:	b580      	push	{r7, lr}
 8006270:	b084      	sub	sp, #16
 8006272:	af00      	add	r7, sp, #0
 8006274:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800627c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006282:	b29b      	uxth	r3, r3
 8006284:	2b00      	cmp	r3, #0
 8006286:	d02c      	beq.n	80062e2 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	691a      	ldr	r2, [r3, #16]
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006292:	b2d2      	uxtb	r2, r2
 8006294:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800629a:	1c5a      	adds	r2, r3, #1
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062a4:	b29b      	uxth	r3, r3
 80062a6:	3b01      	subs	r3, #1
 80062a8:	b29a      	uxth	r2, r3
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062b2:	b29b      	uxth	r3, r3
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d114      	bne.n	80062e2 <I2C_SlaveReceive_RXNE+0x74>
 80062b8:	7bfb      	ldrb	r3, [r7, #15]
 80062ba:	2b2a      	cmp	r3, #42	; 0x2a
 80062bc:	d111      	bne.n	80062e2 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	685a      	ldr	r2, [r3, #4]
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062cc:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2222      	movs	r2, #34	; 0x22
 80062d2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2228      	movs	r2, #40	; 0x28
 80062d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80062dc:	6878      	ldr	r0, [r7, #4]
 80062de:	f7ff f992 	bl	8005606 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80062e2:	bf00      	nop
 80062e4:	3710      	adds	r7, #16
 80062e6:	46bd      	mov	sp, r7
 80062e8:	bd80      	pop	{r7, pc}

080062ea <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80062ea:	b480      	push	{r7}
 80062ec:	b083      	sub	sp, #12
 80062ee:	af00      	add	r7, sp, #0
 80062f0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062f6:	b29b      	uxth	r3, r3
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d012      	beq.n	8006322 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	691a      	ldr	r2, [r3, #16]
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006306:	b2d2      	uxtb	r2, r2
 8006308:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800630e:	1c5a      	adds	r2, r3, #1
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006318:	b29b      	uxth	r3, r3
 800631a:	3b01      	subs	r3, #1
 800631c:	b29a      	uxth	r2, r3
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8006322:	bf00      	nop
 8006324:	370c      	adds	r7, #12
 8006326:	46bd      	mov	sp, r7
 8006328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632c:	4770      	bx	lr

0800632e <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800632e:	b580      	push	{r7, lr}
 8006330:	b084      	sub	sp, #16
 8006332:	af00      	add	r7, sp, #0
 8006334:	6078      	str	r0, [r7, #4]
 8006336:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8006338:	2300      	movs	r3, #0
 800633a:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006342:	b2db      	uxtb	r3, r3
 8006344:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006348:	2b28      	cmp	r3, #40	; 0x28
 800634a:	d127      	bne.n	800639c <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	685a      	ldr	r2, [r3, #4]
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800635a:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	089b      	lsrs	r3, r3, #2
 8006360:	f003 0301 	and.w	r3, r3, #1
 8006364:	2b00      	cmp	r3, #0
 8006366:	d101      	bne.n	800636c <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8006368:	2301      	movs	r3, #1
 800636a:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	09db      	lsrs	r3, r3, #7
 8006370:	f003 0301 	and.w	r3, r3, #1
 8006374:	2b00      	cmp	r3, #0
 8006376:	d103      	bne.n	8006380 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	68db      	ldr	r3, [r3, #12]
 800637c:	81bb      	strh	r3, [r7, #12]
 800637e:	e002      	b.n	8006386 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	699b      	ldr	r3, [r3, #24]
 8006384:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2200      	movs	r2, #0
 800638a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800638e:	89ba      	ldrh	r2, [r7, #12]
 8006390:	7bfb      	ldrb	r3, [r7, #15]
 8006392:	4619      	mov	r1, r3
 8006394:	6878      	ldr	r0, [r7, #4]
 8006396:	f7ff f940 	bl	800561a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800639a:	e00e      	b.n	80063ba <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800639c:	2300      	movs	r3, #0
 800639e:	60bb      	str	r3, [r7, #8]
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	695b      	ldr	r3, [r3, #20]
 80063a6:	60bb      	str	r3, [r7, #8]
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	699b      	ldr	r3, [r3, #24]
 80063ae:	60bb      	str	r3, [r7, #8]
 80063b0:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2200      	movs	r2, #0
 80063b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80063ba:	bf00      	nop
 80063bc:	3710      	adds	r7, #16
 80063be:	46bd      	mov	sp, r7
 80063c0:	bd80      	pop	{r7, pc}
	...

080063c4 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b084      	sub	sp, #16
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063d2:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	685a      	ldr	r2, [r3, #4]
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80063e2:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80063e4:	2300      	movs	r3, #0
 80063e6:	60bb      	str	r3, [r7, #8]
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	695b      	ldr	r3, [r3, #20]
 80063ee:	60bb      	str	r3, [r7, #8]
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	681a      	ldr	r2, [r3, #0]
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f042 0201 	orr.w	r2, r2, #1
 80063fe:	601a      	str	r2, [r3, #0]
 8006400:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	681a      	ldr	r2, [r3, #0]
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006410:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	685b      	ldr	r3, [r3, #4]
 8006418:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800641c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006420:	d172      	bne.n	8006508 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006422:	7bfb      	ldrb	r3, [r7, #15]
 8006424:	2b22      	cmp	r3, #34	; 0x22
 8006426:	d002      	beq.n	800642e <I2C_Slave_STOPF+0x6a>
 8006428:	7bfb      	ldrb	r3, [r7, #15]
 800642a:	2b2a      	cmp	r3, #42	; 0x2a
 800642c:	d135      	bne.n	800649a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	685b      	ldr	r3, [r3, #4]
 8006436:	b29a      	uxth	r2, r3
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006440:	b29b      	uxth	r3, r3
 8006442:	2b00      	cmp	r3, #0
 8006444:	d005      	beq.n	8006452 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800644a:	f043 0204 	orr.w	r2, r3, #4
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	685a      	ldr	r2, [r3, #4]
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006460:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006466:	4618      	mov	r0, r3
 8006468:	f7fe fa58 	bl	800491c <HAL_DMA_GetState>
 800646c:	4603      	mov	r3, r0
 800646e:	2b01      	cmp	r3, #1
 8006470:	d049      	beq.n	8006506 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006476:	4a69      	ldr	r2, [pc, #420]	; (800661c <I2C_Slave_STOPF+0x258>)
 8006478:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800647e:	4618      	mov	r0, r3
 8006480:	f7fe f8a0 	bl	80045c4 <HAL_DMA_Abort_IT>
 8006484:	4603      	mov	r3, r0
 8006486:	2b00      	cmp	r3, #0
 8006488:	d03d      	beq.n	8006506 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800648e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006490:	687a      	ldr	r2, [r7, #4]
 8006492:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006494:	4610      	mov	r0, r2
 8006496:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006498:	e035      	b.n	8006506 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	685b      	ldr	r3, [r3, #4]
 80064a2:	b29a      	uxth	r2, r3
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064ac:	b29b      	uxth	r3, r3
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d005      	beq.n	80064be <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064b6:	f043 0204 	orr.w	r2, r3, #4
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	685a      	ldr	r2, [r3, #4]
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80064cc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064d2:	4618      	mov	r0, r3
 80064d4:	f7fe fa22 	bl	800491c <HAL_DMA_GetState>
 80064d8:	4603      	mov	r3, r0
 80064da:	2b01      	cmp	r3, #1
 80064dc:	d014      	beq.n	8006508 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064e2:	4a4e      	ldr	r2, [pc, #312]	; (800661c <I2C_Slave_STOPF+0x258>)
 80064e4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064ea:	4618      	mov	r0, r3
 80064ec:	f7fe f86a 	bl	80045c4 <HAL_DMA_Abort_IT>
 80064f0:	4603      	mov	r3, r0
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d008      	beq.n	8006508 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064fc:	687a      	ldr	r2, [r7, #4]
 80064fe:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006500:	4610      	mov	r0, r2
 8006502:	4798      	blx	r3
 8006504:	e000      	b.n	8006508 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006506:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800650c:	b29b      	uxth	r3, r3
 800650e:	2b00      	cmp	r3, #0
 8006510:	d03e      	beq.n	8006590 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	695b      	ldr	r3, [r3, #20]
 8006518:	f003 0304 	and.w	r3, r3, #4
 800651c:	2b04      	cmp	r3, #4
 800651e:	d112      	bne.n	8006546 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	691a      	ldr	r2, [r3, #16]
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800652a:	b2d2      	uxtb	r2, r2
 800652c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006532:	1c5a      	adds	r2, r3, #1
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800653c:	b29b      	uxth	r3, r3
 800653e:	3b01      	subs	r3, #1
 8006540:	b29a      	uxth	r2, r3
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	695b      	ldr	r3, [r3, #20]
 800654c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006550:	2b40      	cmp	r3, #64	; 0x40
 8006552:	d112      	bne.n	800657a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	691a      	ldr	r2, [r3, #16]
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800655e:	b2d2      	uxtb	r2, r2
 8006560:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006566:	1c5a      	adds	r2, r3, #1
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006570:	b29b      	uxth	r3, r3
 8006572:	3b01      	subs	r3, #1
 8006574:	b29a      	uxth	r2, r3
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800657e:	b29b      	uxth	r3, r3
 8006580:	2b00      	cmp	r3, #0
 8006582:	d005      	beq.n	8006590 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006588:	f043 0204 	orr.w	r2, r3, #4
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006594:	2b00      	cmp	r3, #0
 8006596:	d003      	beq.n	80065a0 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8006598:	6878      	ldr	r0, [r7, #4]
 800659a:	f000 f843 	bl	8006624 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800659e:	e039      	b.n	8006614 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80065a0:	7bfb      	ldrb	r3, [r7, #15]
 80065a2:	2b2a      	cmp	r3, #42	; 0x2a
 80065a4:	d109      	bne.n	80065ba <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2200      	movs	r2, #0
 80065aa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2228      	movs	r2, #40	; 0x28
 80065b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80065b4:	6878      	ldr	r0, [r7, #4]
 80065b6:	f7ff f826 	bl	8005606 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065c0:	b2db      	uxtb	r3, r3
 80065c2:	2b28      	cmp	r3, #40	; 0x28
 80065c4:	d111      	bne.n	80065ea <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	4a15      	ldr	r2, [pc, #84]	; (8006620 <I2C_Slave_STOPF+0x25c>)
 80065ca:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2200      	movs	r2, #0
 80065d0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2220      	movs	r2, #32
 80065d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2200      	movs	r2, #0
 80065de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	f7ff f827 	bl	8005636 <HAL_I2C_ListenCpltCallback>
}
 80065e8:	e014      	b.n	8006614 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065ee:	2b22      	cmp	r3, #34	; 0x22
 80065f0:	d002      	beq.n	80065f8 <I2C_Slave_STOPF+0x234>
 80065f2:	7bfb      	ldrb	r3, [r7, #15]
 80065f4:	2b22      	cmp	r3, #34	; 0x22
 80065f6:	d10d      	bne.n	8006614 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2200      	movs	r2, #0
 80065fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2220      	movs	r2, #32
 8006602:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2200      	movs	r2, #0
 800660a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800660e:	6878      	ldr	r0, [r7, #4]
 8006610:	f7fe fff9 	bl	8005606 <HAL_I2C_SlaveRxCpltCallback>
}
 8006614:	bf00      	nop
 8006616:	3710      	adds	r7, #16
 8006618:	46bd      	mov	sp, r7
 800661a:	bd80      	pop	{r7, pc}
 800661c:	0800698d 	.word	0x0800698d
 8006620:	ffff0000 	.word	0xffff0000

08006624 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b084      	sub	sp, #16
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006632:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800663a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800663c:	7bbb      	ldrb	r3, [r7, #14]
 800663e:	2b10      	cmp	r3, #16
 8006640:	d002      	beq.n	8006648 <I2C_ITError+0x24>
 8006642:	7bbb      	ldrb	r3, [r7, #14]
 8006644:	2b40      	cmp	r3, #64	; 0x40
 8006646:	d10a      	bne.n	800665e <I2C_ITError+0x3a>
 8006648:	7bfb      	ldrb	r3, [r7, #15]
 800664a:	2b22      	cmp	r3, #34	; 0x22
 800664c:	d107      	bne.n	800665e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	681a      	ldr	r2, [r3, #0]
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800665c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800665e:	7bfb      	ldrb	r3, [r7, #15]
 8006660:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006664:	2b28      	cmp	r3, #40	; 0x28
 8006666:	d107      	bne.n	8006678 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2200      	movs	r2, #0
 800666c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2228      	movs	r2, #40	; 0x28
 8006672:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006676:	e015      	b.n	80066a4 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	685b      	ldr	r3, [r3, #4]
 800667e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006682:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006686:	d00a      	beq.n	800669e <I2C_ITError+0x7a>
 8006688:	7bfb      	ldrb	r3, [r7, #15]
 800668a:	2b60      	cmp	r3, #96	; 0x60
 800668c:	d007      	beq.n	800669e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2220      	movs	r2, #32
 8006692:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2200      	movs	r2, #0
 800669a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2200      	movs	r2, #0
 80066a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	685b      	ldr	r3, [r3, #4]
 80066aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80066ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066b2:	d162      	bne.n	800677a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	685a      	ldr	r2, [r3, #4]
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80066c2:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80066cc:	b2db      	uxtb	r3, r3
 80066ce:	2b01      	cmp	r3, #1
 80066d0:	d020      	beq.n	8006714 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066d6:	4a6a      	ldr	r2, [pc, #424]	; (8006880 <I2C_ITError+0x25c>)
 80066d8:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066de:	4618      	mov	r0, r3
 80066e0:	f7fd ff70 	bl	80045c4 <HAL_DMA_Abort_IT>
 80066e4:	4603      	mov	r3, r0
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	f000 8089 	beq.w	80067fe <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	681a      	ldr	r2, [r3, #0]
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f022 0201 	bic.w	r2, r2, #1
 80066fa:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2220      	movs	r2, #32
 8006700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006708:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800670a:	687a      	ldr	r2, [r7, #4]
 800670c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800670e:	4610      	mov	r0, r2
 8006710:	4798      	blx	r3
 8006712:	e074      	b.n	80067fe <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006718:	4a59      	ldr	r2, [pc, #356]	; (8006880 <I2C_ITError+0x25c>)
 800671a:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006720:	4618      	mov	r0, r3
 8006722:	f7fd ff4f 	bl	80045c4 <HAL_DMA_Abort_IT>
 8006726:	4603      	mov	r3, r0
 8006728:	2b00      	cmp	r3, #0
 800672a:	d068      	beq.n	80067fe <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	695b      	ldr	r3, [r3, #20]
 8006732:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006736:	2b40      	cmp	r3, #64	; 0x40
 8006738:	d10b      	bne.n	8006752 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	691a      	ldr	r2, [r3, #16]
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006744:	b2d2      	uxtb	r2, r2
 8006746:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800674c:	1c5a      	adds	r2, r3, #1
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	681a      	ldr	r2, [r3, #0]
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f022 0201 	bic.w	r2, r2, #1
 8006760:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2220      	movs	r2, #32
 8006766:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800676e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006770:	687a      	ldr	r2, [r7, #4]
 8006772:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006774:	4610      	mov	r0, r2
 8006776:	4798      	blx	r3
 8006778:	e041      	b.n	80067fe <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006780:	b2db      	uxtb	r3, r3
 8006782:	2b60      	cmp	r3, #96	; 0x60
 8006784:	d125      	bne.n	80067d2 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2220      	movs	r2, #32
 800678a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2200      	movs	r2, #0
 8006792:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	695b      	ldr	r3, [r3, #20]
 800679a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800679e:	2b40      	cmp	r3, #64	; 0x40
 80067a0:	d10b      	bne.n	80067ba <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	691a      	ldr	r2, [r3, #16]
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ac:	b2d2      	uxtb	r2, r2
 80067ae:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067b4:	1c5a      	adds	r2, r3, #1
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	681a      	ldr	r2, [r3, #0]
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f022 0201 	bic.w	r2, r2, #1
 80067c8:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	f7fe ff5b 	bl	8005686 <HAL_I2C_AbortCpltCallback>
 80067d0:	e015      	b.n	80067fe <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	695b      	ldr	r3, [r3, #20]
 80067d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067dc:	2b40      	cmp	r3, #64	; 0x40
 80067de:	d10b      	bne.n	80067f8 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	691a      	ldr	r2, [r3, #16]
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ea:	b2d2      	uxtb	r2, r2
 80067ec:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067f2:	1c5a      	adds	r2, r3, #1
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80067f8:	6878      	ldr	r0, [r7, #4]
 80067fa:	f7fe ff3a 	bl	8005672 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006802:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	f003 0301 	and.w	r3, r3, #1
 800680a:	2b00      	cmp	r3, #0
 800680c:	d10e      	bne.n	800682c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006814:	2b00      	cmp	r3, #0
 8006816:	d109      	bne.n	800682c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006818:	68bb      	ldr	r3, [r7, #8]
 800681a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800681e:	2b00      	cmp	r3, #0
 8006820:	d104      	bne.n	800682c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006828:	2b00      	cmp	r3, #0
 800682a:	d007      	beq.n	800683c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	685a      	ldr	r2, [r3, #4]
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800683a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006842:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006848:	f003 0304 	and.w	r3, r3, #4
 800684c:	2b04      	cmp	r3, #4
 800684e:	d113      	bne.n	8006878 <I2C_ITError+0x254>
 8006850:	7bfb      	ldrb	r3, [r7, #15]
 8006852:	2b28      	cmp	r3, #40	; 0x28
 8006854:	d110      	bne.n	8006878 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	4a0a      	ldr	r2, [pc, #40]	; (8006884 <I2C_ITError+0x260>)
 800685a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2200      	movs	r2, #0
 8006860:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2220      	movs	r2, #32
 8006866:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2200      	movs	r2, #0
 800686e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006872:	6878      	ldr	r0, [r7, #4]
 8006874:	f7fe fedf 	bl	8005636 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006878:	bf00      	nop
 800687a:	3710      	adds	r7, #16
 800687c:	46bd      	mov	sp, r7
 800687e:	bd80      	pop	{r7, pc}
 8006880:	0800698d 	.word	0x0800698d
 8006884:	ffff0000 	.word	0xffff0000

08006888 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b088      	sub	sp, #32
 800688c:	af02      	add	r7, sp, #8
 800688e:	60f8      	str	r0, [r7, #12]
 8006890:	607a      	str	r2, [r7, #4]
 8006892:	603b      	str	r3, [r7, #0]
 8006894:	460b      	mov	r3, r1
 8006896:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800689c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	2b08      	cmp	r3, #8
 80068a2:	d006      	beq.n	80068b2 <I2C_MasterRequestWrite+0x2a>
 80068a4:	697b      	ldr	r3, [r7, #20]
 80068a6:	2b01      	cmp	r3, #1
 80068a8:	d003      	beq.n	80068b2 <I2C_MasterRequestWrite+0x2a>
 80068aa:	697b      	ldr	r3, [r7, #20]
 80068ac:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80068b0:	d108      	bne.n	80068c4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	681a      	ldr	r2, [r3, #0]
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80068c0:	601a      	str	r2, [r3, #0]
 80068c2:	e00b      	b.n	80068dc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068c8:	2b12      	cmp	r3, #18
 80068ca:	d107      	bne.n	80068dc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	681a      	ldr	r2, [r3, #0]
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80068da:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	9300      	str	r3, [sp, #0]
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2200      	movs	r2, #0
 80068e4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80068e8:	68f8      	ldr	r0, [r7, #12]
 80068ea:	f000 f8f7 	bl	8006adc <I2C_WaitOnFlagUntilTimeout>
 80068ee:	4603      	mov	r3, r0
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d00d      	beq.n	8006910 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006902:	d103      	bne.n	800690c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	f44f 7200 	mov.w	r2, #512	; 0x200
 800690a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800690c:	2303      	movs	r3, #3
 800690e:	e035      	b.n	800697c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	691b      	ldr	r3, [r3, #16]
 8006914:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006918:	d108      	bne.n	800692c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800691a:	897b      	ldrh	r3, [r7, #10]
 800691c:	b2db      	uxtb	r3, r3
 800691e:	461a      	mov	r2, r3
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006928:	611a      	str	r2, [r3, #16]
 800692a:	e01b      	b.n	8006964 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800692c:	897b      	ldrh	r3, [r7, #10]
 800692e:	11db      	asrs	r3, r3, #7
 8006930:	b2db      	uxtb	r3, r3
 8006932:	f003 0306 	and.w	r3, r3, #6
 8006936:	b2db      	uxtb	r3, r3
 8006938:	f063 030f 	orn	r3, r3, #15
 800693c:	b2da      	uxtb	r2, r3
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	687a      	ldr	r2, [r7, #4]
 8006948:	490e      	ldr	r1, [pc, #56]	; (8006984 <I2C_MasterRequestWrite+0xfc>)
 800694a:	68f8      	ldr	r0, [r7, #12]
 800694c:	f000 f91d 	bl	8006b8a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006950:	4603      	mov	r3, r0
 8006952:	2b00      	cmp	r3, #0
 8006954:	d001      	beq.n	800695a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8006956:	2301      	movs	r3, #1
 8006958:	e010      	b.n	800697c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800695a:	897b      	ldrh	r3, [r7, #10]
 800695c:	b2da      	uxtb	r2, r3
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	687a      	ldr	r2, [r7, #4]
 8006968:	4907      	ldr	r1, [pc, #28]	; (8006988 <I2C_MasterRequestWrite+0x100>)
 800696a:	68f8      	ldr	r0, [r7, #12]
 800696c:	f000 f90d 	bl	8006b8a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006970:	4603      	mov	r3, r0
 8006972:	2b00      	cmp	r3, #0
 8006974:	d001      	beq.n	800697a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8006976:	2301      	movs	r3, #1
 8006978:	e000      	b.n	800697c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800697a:	2300      	movs	r3, #0
}
 800697c:	4618      	mov	r0, r3
 800697e:	3718      	adds	r7, #24
 8006980:	46bd      	mov	sp, r7
 8006982:	bd80      	pop	{r7, pc}
 8006984:	00010008 	.word	0x00010008
 8006988:	00010002 	.word	0x00010002

0800698c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b086      	sub	sp, #24
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006994:	2300      	movs	r3, #0
 8006996:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800699c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800699e:	697b      	ldr	r3, [r7, #20]
 80069a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069a4:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80069a6:	4b4b      	ldr	r3, [pc, #300]	; (8006ad4 <I2C_DMAAbort+0x148>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	08db      	lsrs	r3, r3, #3
 80069ac:	4a4a      	ldr	r2, [pc, #296]	; (8006ad8 <I2C_DMAAbort+0x14c>)
 80069ae:	fba2 2303 	umull	r2, r3, r2, r3
 80069b2:	0a1a      	lsrs	r2, r3, #8
 80069b4:	4613      	mov	r3, r2
 80069b6:	009b      	lsls	r3, r3, #2
 80069b8:	4413      	add	r3, r2
 80069ba:	00da      	lsls	r2, r3, #3
 80069bc:	1ad3      	subs	r3, r2, r3
 80069be:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d106      	bne.n	80069d4 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80069c6:	697b      	ldr	r3, [r7, #20]
 80069c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ca:	f043 0220 	orr.w	r2, r3, #32
 80069ce:	697b      	ldr	r3, [r7, #20]
 80069d0:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80069d2:	e00a      	b.n	80069ea <I2C_DMAAbort+0x5e>
    }
    count--;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	3b01      	subs	r3, #1
 80069d8:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80069da:	697b      	ldr	r3, [r7, #20]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80069e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80069e8:	d0ea      	beq.n	80069c0 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80069ea:	697b      	ldr	r3, [r7, #20]
 80069ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d003      	beq.n	80069fa <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80069f2:	697b      	ldr	r3, [r7, #20]
 80069f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069f6:	2200      	movs	r2, #0
 80069f8:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80069fa:	697b      	ldr	r3, [r7, #20]
 80069fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d003      	beq.n	8006a0a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8006a02:	697b      	ldr	r3, [r7, #20]
 8006a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a06:	2200      	movs	r2, #0
 8006a08:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a0a:	697b      	ldr	r3, [r7, #20]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	681a      	ldr	r2, [r3, #0]
 8006a10:	697b      	ldr	r3, [r7, #20]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a18:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8006a1a:	697b      	ldr	r3, [r7, #20]
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8006a20:	697b      	ldr	r3, [r7, #20]
 8006a22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d003      	beq.n	8006a30 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006a28:	697b      	ldr	r3, [r7, #20]
 8006a2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8006a30:	697b      	ldr	r3, [r7, #20]
 8006a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d003      	beq.n	8006a40 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006a38:	697b      	ldr	r3, [r7, #20]
 8006a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8006a40:	697b      	ldr	r3, [r7, #20]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	681a      	ldr	r2, [r3, #0]
 8006a46:	697b      	ldr	r3, [r7, #20]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f022 0201 	bic.w	r2, r2, #1
 8006a4e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006a50:	697b      	ldr	r3, [r7, #20]
 8006a52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a56:	b2db      	uxtb	r3, r3
 8006a58:	2b60      	cmp	r3, #96	; 0x60
 8006a5a:	d10e      	bne.n	8006a7a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006a5c:	697b      	ldr	r3, [r7, #20]
 8006a5e:	2220      	movs	r2, #32
 8006a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006a64:	697b      	ldr	r3, [r7, #20]
 8006a66:	2200      	movs	r2, #0
 8006a68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006a6c:	697b      	ldr	r3, [r7, #20]
 8006a6e:	2200      	movs	r2, #0
 8006a70:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006a72:	6978      	ldr	r0, [r7, #20]
 8006a74:	f7fe fe07 	bl	8005686 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006a78:	e027      	b.n	8006aca <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006a7a:	7cfb      	ldrb	r3, [r7, #19]
 8006a7c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006a80:	2b28      	cmp	r3, #40	; 0x28
 8006a82:	d117      	bne.n	8006ab4 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8006a84:	697b      	ldr	r3, [r7, #20]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	681a      	ldr	r2, [r3, #0]
 8006a8a:	697b      	ldr	r3, [r7, #20]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f042 0201 	orr.w	r2, r2, #1
 8006a92:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a94:	697b      	ldr	r3, [r7, #20]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	681a      	ldr	r2, [r3, #0]
 8006a9a:	697b      	ldr	r3, [r7, #20]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006aa2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006aa4:	697b      	ldr	r3, [r7, #20]
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006aaa:	697b      	ldr	r3, [r7, #20]
 8006aac:	2228      	movs	r2, #40	; 0x28
 8006aae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006ab2:	e007      	b.n	8006ac4 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8006ab4:	697b      	ldr	r3, [r7, #20]
 8006ab6:	2220      	movs	r2, #32
 8006ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006abc:	697b      	ldr	r3, [r7, #20]
 8006abe:	2200      	movs	r2, #0
 8006ac0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8006ac4:	6978      	ldr	r0, [r7, #20]
 8006ac6:	f7fe fdd4 	bl	8005672 <HAL_I2C_ErrorCallback>
}
 8006aca:	bf00      	nop
 8006acc:	3718      	adds	r7, #24
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	bd80      	pop	{r7, pc}
 8006ad2:	bf00      	nop
 8006ad4:	20000008 	.word	0x20000008
 8006ad8:	14f8b589 	.word	0x14f8b589

08006adc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b084      	sub	sp, #16
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	60f8      	str	r0, [r7, #12]
 8006ae4:	60b9      	str	r1, [r7, #8]
 8006ae6:	603b      	str	r3, [r7, #0]
 8006ae8:	4613      	mov	r3, r2
 8006aea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006aec:	e025      	b.n	8006b3a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006af4:	d021      	beq.n	8006b3a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006af6:	f7fc fecf 	bl	8003898 <HAL_GetTick>
 8006afa:	4602      	mov	r2, r0
 8006afc:	69bb      	ldr	r3, [r7, #24]
 8006afe:	1ad3      	subs	r3, r2, r3
 8006b00:	683a      	ldr	r2, [r7, #0]
 8006b02:	429a      	cmp	r2, r3
 8006b04:	d302      	bcc.n	8006b0c <I2C_WaitOnFlagUntilTimeout+0x30>
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d116      	bne.n	8006b3a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	2220      	movs	r2, #32
 8006b16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b26:	f043 0220 	orr.w	r2, r3, #32
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	2200      	movs	r2, #0
 8006b32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006b36:	2301      	movs	r3, #1
 8006b38:	e023      	b.n	8006b82 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006b3a:	68bb      	ldr	r3, [r7, #8]
 8006b3c:	0c1b      	lsrs	r3, r3, #16
 8006b3e:	b2db      	uxtb	r3, r3
 8006b40:	2b01      	cmp	r3, #1
 8006b42:	d10d      	bne.n	8006b60 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	695b      	ldr	r3, [r3, #20]
 8006b4a:	43da      	mvns	r2, r3
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	4013      	ands	r3, r2
 8006b50:	b29b      	uxth	r3, r3
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	bf0c      	ite	eq
 8006b56:	2301      	moveq	r3, #1
 8006b58:	2300      	movne	r3, #0
 8006b5a:	b2db      	uxtb	r3, r3
 8006b5c:	461a      	mov	r2, r3
 8006b5e:	e00c      	b.n	8006b7a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	699b      	ldr	r3, [r3, #24]
 8006b66:	43da      	mvns	r2, r3
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	4013      	ands	r3, r2
 8006b6c:	b29b      	uxth	r3, r3
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	bf0c      	ite	eq
 8006b72:	2301      	moveq	r3, #1
 8006b74:	2300      	movne	r3, #0
 8006b76:	b2db      	uxtb	r3, r3
 8006b78:	461a      	mov	r2, r3
 8006b7a:	79fb      	ldrb	r3, [r7, #7]
 8006b7c:	429a      	cmp	r2, r3
 8006b7e:	d0b6      	beq.n	8006aee <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006b80:	2300      	movs	r3, #0
}
 8006b82:	4618      	mov	r0, r3
 8006b84:	3710      	adds	r7, #16
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bd80      	pop	{r7, pc}

08006b8a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006b8a:	b580      	push	{r7, lr}
 8006b8c:	b084      	sub	sp, #16
 8006b8e:	af00      	add	r7, sp, #0
 8006b90:	60f8      	str	r0, [r7, #12]
 8006b92:	60b9      	str	r1, [r7, #8]
 8006b94:	607a      	str	r2, [r7, #4]
 8006b96:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006b98:	e051      	b.n	8006c3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	695b      	ldr	r3, [r3, #20]
 8006ba0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ba4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ba8:	d123      	bne.n	8006bf2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	681a      	ldr	r2, [r3, #0]
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006bb8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006bc2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	2220      	movs	r2, #32
 8006bce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bde:	f043 0204 	orr.w	r2, r3, #4
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	2200      	movs	r2, #0
 8006bea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006bee:	2301      	movs	r3, #1
 8006bf0:	e046      	b.n	8006c80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bf8:	d021      	beq.n	8006c3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006bfa:	f7fc fe4d 	bl	8003898 <HAL_GetTick>
 8006bfe:	4602      	mov	r2, r0
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	1ad3      	subs	r3, r2, r3
 8006c04:	687a      	ldr	r2, [r7, #4]
 8006c06:	429a      	cmp	r2, r3
 8006c08:	d302      	bcc.n	8006c10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d116      	bne.n	8006c3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	2200      	movs	r2, #0
 8006c14:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	2220      	movs	r2, #32
 8006c1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	2200      	movs	r2, #0
 8006c22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c2a:	f043 0220 	orr.w	r2, r3, #32
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	2200      	movs	r2, #0
 8006c36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006c3a:	2301      	movs	r3, #1
 8006c3c:	e020      	b.n	8006c80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006c3e:	68bb      	ldr	r3, [r7, #8]
 8006c40:	0c1b      	lsrs	r3, r3, #16
 8006c42:	b2db      	uxtb	r3, r3
 8006c44:	2b01      	cmp	r3, #1
 8006c46:	d10c      	bne.n	8006c62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	695b      	ldr	r3, [r3, #20]
 8006c4e:	43da      	mvns	r2, r3
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	4013      	ands	r3, r2
 8006c54:	b29b      	uxth	r3, r3
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	bf14      	ite	ne
 8006c5a:	2301      	movne	r3, #1
 8006c5c:	2300      	moveq	r3, #0
 8006c5e:	b2db      	uxtb	r3, r3
 8006c60:	e00b      	b.n	8006c7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	699b      	ldr	r3, [r3, #24]
 8006c68:	43da      	mvns	r2, r3
 8006c6a:	68bb      	ldr	r3, [r7, #8]
 8006c6c:	4013      	ands	r3, r2
 8006c6e:	b29b      	uxth	r3, r3
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	bf14      	ite	ne
 8006c74:	2301      	movne	r3, #1
 8006c76:	2300      	moveq	r3, #0
 8006c78:	b2db      	uxtb	r3, r3
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d18d      	bne.n	8006b9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006c7e:	2300      	movs	r3, #0
}
 8006c80:	4618      	mov	r0, r3
 8006c82:	3710      	adds	r7, #16
 8006c84:	46bd      	mov	sp, r7
 8006c86:	bd80      	pop	{r7, pc}

08006c88 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b084      	sub	sp, #16
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	60f8      	str	r0, [r7, #12]
 8006c90:	60b9      	str	r1, [r7, #8]
 8006c92:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006c94:	e02d      	b.n	8006cf2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006c96:	68f8      	ldr	r0, [r7, #12]
 8006c98:	f000 f8aa 	bl	8006df0 <I2C_IsAcknowledgeFailed>
 8006c9c:	4603      	mov	r3, r0
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d001      	beq.n	8006ca6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	e02d      	b.n	8006d02 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ca6:	68bb      	ldr	r3, [r7, #8]
 8006ca8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cac:	d021      	beq.n	8006cf2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006cae:	f7fc fdf3 	bl	8003898 <HAL_GetTick>
 8006cb2:	4602      	mov	r2, r0
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	1ad3      	subs	r3, r2, r3
 8006cb8:	68ba      	ldr	r2, [r7, #8]
 8006cba:	429a      	cmp	r2, r3
 8006cbc:	d302      	bcc.n	8006cc4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d116      	bne.n	8006cf2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	2220      	movs	r2, #32
 8006cce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cde:	f043 0220 	orr.w	r2, r3, #32
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	2200      	movs	r2, #0
 8006cea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006cee:	2301      	movs	r3, #1
 8006cf0:	e007      	b.n	8006d02 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	695b      	ldr	r3, [r3, #20]
 8006cf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cfc:	2b80      	cmp	r3, #128	; 0x80
 8006cfe:	d1ca      	bne.n	8006c96 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006d00:	2300      	movs	r3, #0
}
 8006d02:	4618      	mov	r0, r3
 8006d04:	3710      	adds	r7, #16
 8006d06:	46bd      	mov	sp, r7
 8006d08:	bd80      	pop	{r7, pc}

08006d0a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006d0a:	b580      	push	{r7, lr}
 8006d0c:	b084      	sub	sp, #16
 8006d0e:	af00      	add	r7, sp, #0
 8006d10:	60f8      	str	r0, [r7, #12]
 8006d12:	60b9      	str	r1, [r7, #8]
 8006d14:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006d16:	e02d      	b.n	8006d74 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006d18:	68f8      	ldr	r0, [r7, #12]
 8006d1a:	f000 f869 	bl	8006df0 <I2C_IsAcknowledgeFailed>
 8006d1e:	4603      	mov	r3, r0
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d001      	beq.n	8006d28 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006d24:	2301      	movs	r3, #1
 8006d26:	e02d      	b.n	8006d84 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d2e:	d021      	beq.n	8006d74 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d30:	f7fc fdb2 	bl	8003898 <HAL_GetTick>
 8006d34:	4602      	mov	r2, r0
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	1ad3      	subs	r3, r2, r3
 8006d3a:	68ba      	ldr	r2, [r7, #8]
 8006d3c:	429a      	cmp	r2, r3
 8006d3e:	d302      	bcc.n	8006d46 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d116      	bne.n	8006d74 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	2200      	movs	r2, #0
 8006d4a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	2220      	movs	r2, #32
 8006d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	2200      	movs	r2, #0
 8006d58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d60:	f043 0220 	orr.w	r2, r3, #32
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006d70:	2301      	movs	r3, #1
 8006d72:	e007      	b.n	8006d84 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	695b      	ldr	r3, [r3, #20]
 8006d7a:	f003 0304 	and.w	r3, r3, #4
 8006d7e:	2b04      	cmp	r3, #4
 8006d80:	d1ca      	bne.n	8006d18 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006d82:	2300      	movs	r3, #0
}
 8006d84:	4618      	mov	r0, r3
 8006d86:	3710      	adds	r7, #16
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	bd80      	pop	{r7, pc}

08006d8c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8006d8c:	b480      	push	{r7}
 8006d8e:	b085      	sub	sp, #20
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006d94:	2300      	movs	r3, #0
 8006d96:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8006d98:	4b13      	ldr	r3, [pc, #76]	; (8006de8 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	08db      	lsrs	r3, r3, #3
 8006d9e:	4a13      	ldr	r2, [pc, #76]	; (8006dec <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8006da0:	fba2 2303 	umull	r2, r3, r2, r3
 8006da4:	0a1a      	lsrs	r2, r3, #8
 8006da6:	4613      	mov	r3, r2
 8006da8:	009b      	lsls	r3, r3, #2
 8006daa:	4413      	add	r3, r2
 8006dac:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	3b01      	subs	r3, #1
 8006db2:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d107      	bne.n	8006dca <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dbe:	f043 0220 	orr.w	r2, r3, #32
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	e008      	b.n	8006ddc <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006dd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006dd8:	d0e9      	beq.n	8006dae <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8006dda:	2300      	movs	r3, #0
}
 8006ddc:	4618      	mov	r0, r3
 8006dde:	3714      	adds	r7, #20
 8006de0:	46bd      	mov	sp, r7
 8006de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de6:	4770      	bx	lr
 8006de8:	20000008 	.word	0x20000008
 8006dec:	14f8b589 	.word	0x14f8b589

08006df0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006df0:	b480      	push	{r7}
 8006df2:	b083      	sub	sp, #12
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	695b      	ldr	r3, [r3, #20]
 8006dfe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e06:	d11b      	bne.n	8006e40 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006e10:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2200      	movs	r2, #0
 8006e16:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2220      	movs	r2, #32
 8006e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2200      	movs	r2, #0
 8006e24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e2c:	f043 0204 	orr.w	r2, r3, #4
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2200      	movs	r2, #0
 8006e38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006e3c:	2301      	movs	r3, #1
 8006e3e:	e000      	b.n	8006e42 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006e40:	2300      	movs	r3, #0
}
 8006e42:	4618      	mov	r0, r3
 8006e44:	370c      	adds	r7, #12
 8006e46:	46bd      	mov	sp, r7
 8006e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4c:	4770      	bx	lr

08006e4e <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8006e4e:	b480      	push	{r7}
 8006e50:	b083      	sub	sp, #12
 8006e52:	af00      	add	r7, sp, #0
 8006e54:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e5a:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006e5e:	d103      	bne.n	8006e68 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2201      	movs	r2, #1
 8006e64:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8006e66:	e007      	b.n	8006e78 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e6c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006e70:	d102      	bne.n	8006e78 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2208      	movs	r2, #8
 8006e76:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8006e78:	bf00      	nop
 8006e7a:	370c      	adds	r7, #12
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e82:	4770      	bx	lr

08006e84 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006e84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e86:	b08f      	sub	sp, #60	; 0x3c
 8006e88:	af0a      	add	r7, sp, #40	; 0x28
 8006e8a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d101      	bne.n	8006e96 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006e92:	2301      	movs	r3, #1
 8006e94:	e10f      	b.n	80070b6 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8006ea2:	b2db      	uxtb	r3, r3
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d106      	bne.n	8006eb6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006eb0:	6878      	ldr	r0, [r7, #4]
 8006eb2:	f007 fd07 	bl	800e8c4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2203      	movs	r2, #3
 8006eba:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8006ebe:	68bb      	ldr	r3, [r7, #8]
 8006ec0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ec2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d102      	bne.n	8006ed0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2200      	movs	r2, #0
 8006ece:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	f003 ffee 	bl	800aeb6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	603b      	str	r3, [r7, #0]
 8006ee0:	687e      	ldr	r6, [r7, #4]
 8006ee2:	466d      	mov	r5, sp
 8006ee4:	f106 0410 	add.w	r4, r6, #16
 8006ee8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006eea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006eec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006eee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006ef0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006ef4:	e885 0003 	stmia.w	r5, {r0, r1}
 8006ef8:	1d33      	adds	r3, r6, #4
 8006efa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006efc:	6838      	ldr	r0, [r7, #0]
 8006efe:	f003 fec5 	bl	800ac8c <USB_CoreInit>
 8006f02:	4603      	mov	r3, r0
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d005      	beq.n	8006f14 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2202      	movs	r2, #2
 8006f0c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8006f10:	2301      	movs	r3, #1
 8006f12:	e0d0      	b.n	80070b6 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	2100      	movs	r1, #0
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	f003 ffdc 	bl	800aed8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006f20:	2300      	movs	r3, #0
 8006f22:	73fb      	strb	r3, [r7, #15]
 8006f24:	e04a      	b.n	8006fbc <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006f26:	7bfa      	ldrb	r2, [r7, #15]
 8006f28:	6879      	ldr	r1, [r7, #4]
 8006f2a:	4613      	mov	r3, r2
 8006f2c:	00db      	lsls	r3, r3, #3
 8006f2e:	4413      	add	r3, r2
 8006f30:	009b      	lsls	r3, r3, #2
 8006f32:	440b      	add	r3, r1
 8006f34:	333d      	adds	r3, #61	; 0x3d
 8006f36:	2201      	movs	r2, #1
 8006f38:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006f3a:	7bfa      	ldrb	r2, [r7, #15]
 8006f3c:	6879      	ldr	r1, [r7, #4]
 8006f3e:	4613      	mov	r3, r2
 8006f40:	00db      	lsls	r3, r3, #3
 8006f42:	4413      	add	r3, r2
 8006f44:	009b      	lsls	r3, r3, #2
 8006f46:	440b      	add	r3, r1
 8006f48:	333c      	adds	r3, #60	; 0x3c
 8006f4a:	7bfa      	ldrb	r2, [r7, #15]
 8006f4c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006f4e:	7bfa      	ldrb	r2, [r7, #15]
 8006f50:	7bfb      	ldrb	r3, [r7, #15]
 8006f52:	b298      	uxth	r0, r3
 8006f54:	6879      	ldr	r1, [r7, #4]
 8006f56:	4613      	mov	r3, r2
 8006f58:	00db      	lsls	r3, r3, #3
 8006f5a:	4413      	add	r3, r2
 8006f5c:	009b      	lsls	r3, r3, #2
 8006f5e:	440b      	add	r3, r1
 8006f60:	3344      	adds	r3, #68	; 0x44
 8006f62:	4602      	mov	r2, r0
 8006f64:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006f66:	7bfa      	ldrb	r2, [r7, #15]
 8006f68:	6879      	ldr	r1, [r7, #4]
 8006f6a:	4613      	mov	r3, r2
 8006f6c:	00db      	lsls	r3, r3, #3
 8006f6e:	4413      	add	r3, r2
 8006f70:	009b      	lsls	r3, r3, #2
 8006f72:	440b      	add	r3, r1
 8006f74:	3340      	adds	r3, #64	; 0x40
 8006f76:	2200      	movs	r2, #0
 8006f78:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006f7a:	7bfa      	ldrb	r2, [r7, #15]
 8006f7c:	6879      	ldr	r1, [r7, #4]
 8006f7e:	4613      	mov	r3, r2
 8006f80:	00db      	lsls	r3, r3, #3
 8006f82:	4413      	add	r3, r2
 8006f84:	009b      	lsls	r3, r3, #2
 8006f86:	440b      	add	r3, r1
 8006f88:	3348      	adds	r3, #72	; 0x48
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006f8e:	7bfa      	ldrb	r2, [r7, #15]
 8006f90:	6879      	ldr	r1, [r7, #4]
 8006f92:	4613      	mov	r3, r2
 8006f94:	00db      	lsls	r3, r3, #3
 8006f96:	4413      	add	r3, r2
 8006f98:	009b      	lsls	r3, r3, #2
 8006f9a:	440b      	add	r3, r1
 8006f9c:	334c      	adds	r3, #76	; 0x4c
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006fa2:	7bfa      	ldrb	r2, [r7, #15]
 8006fa4:	6879      	ldr	r1, [r7, #4]
 8006fa6:	4613      	mov	r3, r2
 8006fa8:	00db      	lsls	r3, r3, #3
 8006faa:	4413      	add	r3, r2
 8006fac:	009b      	lsls	r3, r3, #2
 8006fae:	440b      	add	r3, r1
 8006fb0:	3354      	adds	r3, #84	; 0x54
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006fb6:	7bfb      	ldrb	r3, [r7, #15]
 8006fb8:	3301      	adds	r3, #1
 8006fba:	73fb      	strb	r3, [r7, #15]
 8006fbc:	7bfa      	ldrb	r2, [r7, #15]
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	685b      	ldr	r3, [r3, #4]
 8006fc2:	429a      	cmp	r2, r3
 8006fc4:	d3af      	bcc.n	8006f26 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	73fb      	strb	r3, [r7, #15]
 8006fca:	e044      	b.n	8007056 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006fcc:	7bfa      	ldrb	r2, [r7, #15]
 8006fce:	6879      	ldr	r1, [r7, #4]
 8006fd0:	4613      	mov	r3, r2
 8006fd2:	00db      	lsls	r3, r3, #3
 8006fd4:	4413      	add	r3, r2
 8006fd6:	009b      	lsls	r3, r3, #2
 8006fd8:	440b      	add	r3, r1
 8006fda:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8006fde:	2200      	movs	r2, #0
 8006fe0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006fe2:	7bfa      	ldrb	r2, [r7, #15]
 8006fe4:	6879      	ldr	r1, [r7, #4]
 8006fe6:	4613      	mov	r3, r2
 8006fe8:	00db      	lsls	r3, r3, #3
 8006fea:	4413      	add	r3, r2
 8006fec:	009b      	lsls	r3, r3, #2
 8006fee:	440b      	add	r3, r1
 8006ff0:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8006ff4:	7bfa      	ldrb	r2, [r7, #15]
 8006ff6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006ff8:	7bfa      	ldrb	r2, [r7, #15]
 8006ffa:	6879      	ldr	r1, [r7, #4]
 8006ffc:	4613      	mov	r3, r2
 8006ffe:	00db      	lsls	r3, r3, #3
 8007000:	4413      	add	r3, r2
 8007002:	009b      	lsls	r3, r3, #2
 8007004:	440b      	add	r3, r1
 8007006:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800700a:	2200      	movs	r2, #0
 800700c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800700e:	7bfa      	ldrb	r2, [r7, #15]
 8007010:	6879      	ldr	r1, [r7, #4]
 8007012:	4613      	mov	r3, r2
 8007014:	00db      	lsls	r3, r3, #3
 8007016:	4413      	add	r3, r2
 8007018:	009b      	lsls	r3, r3, #2
 800701a:	440b      	add	r3, r1
 800701c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8007020:	2200      	movs	r2, #0
 8007022:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8007024:	7bfa      	ldrb	r2, [r7, #15]
 8007026:	6879      	ldr	r1, [r7, #4]
 8007028:	4613      	mov	r3, r2
 800702a:	00db      	lsls	r3, r3, #3
 800702c:	4413      	add	r3, r2
 800702e:	009b      	lsls	r3, r3, #2
 8007030:	440b      	add	r3, r1
 8007032:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8007036:	2200      	movs	r2, #0
 8007038:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800703a:	7bfa      	ldrb	r2, [r7, #15]
 800703c:	6879      	ldr	r1, [r7, #4]
 800703e:	4613      	mov	r3, r2
 8007040:	00db      	lsls	r3, r3, #3
 8007042:	4413      	add	r3, r2
 8007044:	009b      	lsls	r3, r3, #2
 8007046:	440b      	add	r3, r1
 8007048:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800704c:	2200      	movs	r2, #0
 800704e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007050:	7bfb      	ldrb	r3, [r7, #15]
 8007052:	3301      	adds	r3, #1
 8007054:	73fb      	strb	r3, [r7, #15]
 8007056:	7bfa      	ldrb	r2, [r7, #15]
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	685b      	ldr	r3, [r3, #4]
 800705c:	429a      	cmp	r2, r3
 800705e:	d3b5      	bcc.n	8006fcc <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	603b      	str	r3, [r7, #0]
 8007066:	687e      	ldr	r6, [r7, #4]
 8007068:	466d      	mov	r5, sp
 800706a:	f106 0410 	add.w	r4, r6, #16
 800706e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007070:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007072:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007074:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007076:	e894 0003 	ldmia.w	r4, {r0, r1}
 800707a:	e885 0003 	stmia.w	r5, {r0, r1}
 800707e:	1d33      	adds	r3, r6, #4
 8007080:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007082:	6838      	ldr	r0, [r7, #0]
 8007084:	f003 ff74 	bl	800af70 <USB_DevInit>
 8007088:	4603      	mov	r3, r0
 800708a:	2b00      	cmp	r3, #0
 800708c:	d005      	beq.n	800709a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2202      	movs	r2, #2
 8007092:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8007096:	2301      	movs	r3, #1
 8007098:	e00d      	b.n	80070b6 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2200      	movs	r2, #0
 800709e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2201      	movs	r2, #1
 80070a6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	4618      	mov	r0, r3
 80070b0:	f005 f8c3 	bl	800c23a <USB_DevDisconnect>

  return HAL_OK;
 80070b4:	2300      	movs	r3, #0
}
 80070b6:	4618      	mov	r0, r3
 80070b8:	3714      	adds	r7, #20
 80070ba:	46bd      	mov	sp, r7
 80070bc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080070be <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80070be:	b580      	push	{r7, lr}
 80070c0:	b084      	sub	sp, #16
 80070c2:	af00      	add	r7, sp, #0
 80070c4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80070d2:	2b01      	cmp	r3, #1
 80070d4:	d101      	bne.n	80070da <HAL_PCD_Start+0x1c>
 80070d6:	2302      	movs	r3, #2
 80070d8:	e020      	b.n	800711c <HAL_PCD_Start+0x5e>
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2201      	movs	r2, #1
 80070de:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070e6:	2b01      	cmp	r3, #1
 80070e8:	d109      	bne.n	80070fe <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80070ee:	2b01      	cmp	r3, #1
 80070f0:	d005      	beq.n	80070fe <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070f6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	4618      	mov	r0, r3
 8007104:	f003 fec6 	bl	800ae94 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	4618      	mov	r0, r3
 800710e:	f005 f873 	bl	800c1f8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2200      	movs	r2, #0
 8007116:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800711a:	2300      	movs	r3, #0
}
 800711c:	4618      	mov	r0, r3
 800711e:	3710      	adds	r7, #16
 8007120:	46bd      	mov	sp, r7
 8007122:	bd80      	pop	{r7, pc}

08007124 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8007124:	b590      	push	{r4, r7, lr}
 8007126:	b08d      	sub	sp, #52	; 0x34
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007132:	6a3b      	ldr	r3, [r7, #32]
 8007134:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	4618      	mov	r0, r3
 800713c:	f005 f931 	bl	800c3a2 <USB_GetMode>
 8007140:	4603      	mov	r3, r0
 8007142:	2b00      	cmp	r3, #0
 8007144:	f040 848a 	bne.w	8007a5c <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	4618      	mov	r0, r3
 800714e:	f005 f895 	bl	800c27c <USB_ReadInterrupts>
 8007152:	4603      	mov	r3, r0
 8007154:	2b00      	cmp	r3, #0
 8007156:	f000 8480 	beq.w	8007a5a <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800715a:	69fb      	ldr	r3, [r7, #28]
 800715c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007160:	689b      	ldr	r3, [r3, #8]
 8007162:	0a1b      	lsrs	r3, r3, #8
 8007164:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	4618      	mov	r0, r3
 8007174:	f005 f882 	bl	800c27c <USB_ReadInterrupts>
 8007178:	4603      	mov	r3, r0
 800717a:	f003 0302 	and.w	r3, r3, #2
 800717e:	2b02      	cmp	r3, #2
 8007180:	d107      	bne.n	8007192 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	695a      	ldr	r2, [r3, #20]
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f002 0202 	and.w	r2, r2, #2
 8007190:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	4618      	mov	r0, r3
 8007198:	f005 f870 	bl	800c27c <USB_ReadInterrupts>
 800719c:	4603      	mov	r3, r0
 800719e:	f003 0310 	and.w	r3, r3, #16
 80071a2:	2b10      	cmp	r3, #16
 80071a4:	d161      	bne.n	800726a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	699a      	ldr	r2, [r3, #24]
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f022 0210 	bic.w	r2, r2, #16
 80071b4:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80071b6:	6a3b      	ldr	r3, [r7, #32]
 80071b8:	6a1b      	ldr	r3, [r3, #32]
 80071ba:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80071bc:	69bb      	ldr	r3, [r7, #24]
 80071be:	f003 020f 	and.w	r2, r3, #15
 80071c2:	4613      	mov	r3, r2
 80071c4:	00db      	lsls	r3, r3, #3
 80071c6:	4413      	add	r3, r2
 80071c8:	009b      	lsls	r3, r3, #2
 80071ca:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80071ce:	687a      	ldr	r2, [r7, #4]
 80071d0:	4413      	add	r3, r2
 80071d2:	3304      	adds	r3, #4
 80071d4:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80071d6:	69bb      	ldr	r3, [r7, #24]
 80071d8:	0c5b      	lsrs	r3, r3, #17
 80071da:	f003 030f 	and.w	r3, r3, #15
 80071de:	2b02      	cmp	r3, #2
 80071e0:	d124      	bne.n	800722c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80071e2:	69ba      	ldr	r2, [r7, #24]
 80071e4:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80071e8:	4013      	ands	r3, r2
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d035      	beq.n	800725a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80071ee:	697b      	ldr	r3, [r7, #20]
 80071f0:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80071f2:	69bb      	ldr	r3, [r7, #24]
 80071f4:	091b      	lsrs	r3, r3, #4
 80071f6:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80071f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80071fc:	b29b      	uxth	r3, r3
 80071fe:	461a      	mov	r2, r3
 8007200:	6a38      	ldr	r0, [r7, #32]
 8007202:	f004 fea7 	bl	800bf54 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007206:	697b      	ldr	r3, [r7, #20]
 8007208:	691a      	ldr	r2, [r3, #16]
 800720a:	69bb      	ldr	r3, [r7, #24]
 800720c:	091b      	lsrs	r3, r3, #4
 800720e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007212:	441a      	add	r2, r3
 8007214:	697b      	ldr	r3, [r7, #20]
 8007216:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007218:	697b      	ldr	r3, [r7, #20]
 800721a:	6a1a      	ldr	r2, [r3, #32]
 800721c:	69bb      	ldr	r3, [r7, #24]
 800721e:	091b      	lsrs	r3, r3, #4
 8007220:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007224:	441a      	add	r2, r3
 8007226:	697b      	ldr	r3, [r7, #20]
 8007228:	621a      	str	r2, [r3, #32]
 800722a:	e016      	b.n	800725a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800722c:	69bb      	ldr	r3, [r7, #24]
 800722e:	0c5b      	lsrs	r3, r3, #17
 8007230:	f003 030f 	and.w	r3, r3, #15
 8007234:	2b06      	cmp	r3, #6
 8007236:	d110      	bne.n	800725a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800723e:	2208      	movs	r2, #8
 8007240:	4619      	mov	r1, r3
 8007242:	6a38      	ldr	r0, [r7, #32]
 8007244:	f004 fe86 	bl	800bf54 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007248:	697b      	ldr	r3, [r7, #20]
 800724a:	6a1a      	ldr	r2, [r3, #32]
 800724c:	69bb      	ldr	r3, [r7, #24]
 800724e:	091b      	lsrs	r3, r3, #4
 8007250:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007254:	441a      	add	r2, r3
 8007256:	697b      	ldr	r3, [r7, #20]
 8007258:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	699a      	ldr	r2, [r3, #24]
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f042 0210 	orr.w	r2, r2, #16
 8007268:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	4618      	mov	r0, r3
 8007270:	f005 f804 	bl	800c27c <USB_ReadInterrupts>
 8007274:	4603      	mov	r3, r0
 8007276:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800727a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800727e:	f040 80a7 	bne.w	80073d0 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8007282:	2300      	movs	r3, #0
 8007284:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	4618      	mov	r0, r3
 800728c:	f005 f809 	bl	800c2a2 <USB_ReadDevAllOutEpInterrupt>
 8007290:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8007292:	e099      	b.n	80073c8 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8007294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007296:	f003 0301 	and.w	r3, r3, #1
 800729a:	2b00      	cmp	r3, #0
 800729c:	f000 808e 	beq.w	80073bc <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072a6:	b2d2      	uxtb	r2, r2
 80072a8:	4611      	mov	r1, r2
 80072aa:	4618      	mov	r0, r3
 80072ac:	f005 f82d 	bl	800c30a <USB_ReadDevOutEPInterrupt>
 80072b0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80072b2:	693b      	ldr	r3, [r7, #16]
 80072b4:	f003 0301 	and.w	r3, r3, #1
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d00c      	beq.n	80072d6 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80072bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072be:	015a      	lsls	r2, r3, #5
 80072c0:	69fb      	ldr	r3, [r7, #28]
 80072c2:	4413      	add	r3, r2
 80072c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072c8:	461a      	mov	r2, r3
 80072ca:	2301      	movs	r3, #1
 80072cc:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80072ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80072d0:	6878      	ldr	r0, [r7, #4]
 80072d2:	f000 fec3 	bl	800805c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80072d6:	693b      	ldr	r3, [r7, #16]
 80072d8:	f003 0308 	and.w	r3, r3, #8
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d00c      	beq.n	80072fa <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80072e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072e2:	015a      	lsls	r2, r3, #5
 80072e4:	69fb      	ldr	r3, [r7, #28]
 80072e6:	4413      	add	r3, r2
 80072e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072ec:	461a      	mov	r2, r3
 80072ee:	2308      	movs	r3, #8
 80072f0:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80072f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80072f4:	6878      	ldr	r0, [r7, #4]
 80072f6:	f000 ff99 	bl	800822c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80072fa:	693b      	ldr	r3, [r7, #16]
 80072fc:	f003 0310 	and.w	r3, r3, #16
 8007300:	2b00      	cmp	r3, #0
 8007302:	d008      	beq.n	8007316 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8007304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007306:	015a      	lsls	r2, r3, #5
 8007308:	69fb      	ldr	r3, [r7, #28]
 800730a:	4413      	add	r3, r2
 800730c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007310:	461a      	mov	r2, r3
 8007312:	2310      	movs	r3, #16
 8007314:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8007316:	693b      	ldr	r3, [r7, #16]
 8007318:	f003 0302 	and.w	r3, r3, #2
 800731c:	2b00      	cmp	r3, #0
 800731e:	d030      	beq.n	8007382 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8007320:	6a3b      	ldr	r3, [r7, #32]
 8007322:	695b      	ldr	r3, [r3, #20]
 8007324:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007328:	2b80      	cmp	r3, #128	; 0x80
 800732a:	d109      	bne.n	8007340 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800732c:	69fb      	ldr	r3, [r7, #28]
 800732e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007332:	685b      	ldr	r3, [r3, #4]
 8007334:	69fa      	ldr	r2, [r7, #28]
 8007336:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800733a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800733e:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8007340:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007342:	4613      	mov	r3, r2
 8007344:	00db      	lsls	r3, r3, #3
 8007346:	4413      	add	r3, r2
 8007348:	009b      	lsls	r3, r3, #2
 800734a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800734e:	687a      	ldr	r2, [r7, #4]
 8007350:	4413      	add	r3, r2
 8007352:	3304      	adds	r3, #4
 8007354:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8007356:	697b      	ldr	r3, [r7, #20]
 8007358:	78db      	ldrb	r3, [r3, #3]
 800735a:	2b01      	cmp	r3, #1
 800735c:	d108      	bne.n	8007370 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800735e:	697b      	ldr	r3, [r7, #20]
 8007360:	2200      	movs	r2, #0
 8007362:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8007364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007366:	b2db      	uxtb	r3, r3
 8007368:	4619      	mov	r1, r3
 800736a:	6878      	ldr	r0, [r7, #4]
 800736c:	f007 fbb0 	bl	800ead0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8007370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007372:	015a      	lsls	r2, r3, #5
 8007374:	69fb      	ldr	r3, [r7, #28]
 8007376:	4413      	add	r3, r2
 8007378:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800737c:	461a      	mov	r2, r3
 800737e:	2302      	movs	r3, #2
 8007380:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007382:	693b      	ldr	r3, [r7, #16]
 8007384:	f003 0320 	and.w	r3, r3, #32
 8007388:	2b00      	cmp	r3, #0
 800738a:	d008      	beq.n	800739e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800738c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800738e:	015a      	lsls	r2, r3, #5
 8007390:	69fb      	ldr	r3, [r7, #28]
 8007392:	4413      	add	r3, r2
 8007394:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007398:	461a      	mov	r2, r3
 800739a:	2320      	movs	r3, #32
 800739c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800739e:	693b      	ldr	r3, [r7, #16]
 80073a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d009      	beq.n	80073bc <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80073a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073aa:	015a      	lsls	r2, r3, #5
 80073ac:	69fb      	ldr	r3, [r7, #28]
 80073ae:	4413      	add	r3, r2
 80073b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073b4:	461a      	mov	r2, r3
 80073b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80073ba:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80073bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073be:	3301      	adds	r3, #1
 80073c0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80073c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073c4:	085b      	lsrs	r3, r3, #1
 80073c6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80073c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	f47f af62 	bne.w	8007294 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	4618      	mov	r0, r3
 80073d6:	f004 ff51 	bl	800c27c <USB_ReadInterrupts>
 80073da:	4603      	mov	r3, r0
 80073dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80073e0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80073e4:	f040 80db 	bne.w	800759e <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	4618      	mov	r0, r3
 80073ee:	f004 ff72 	bl	800c2d6 <USB_ReadDevAllInEpInterrupt>
 80073f2:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80073f4:	2300      	movs	r3, #0
 80073f6:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80073f8:	e0cd      	b.n	8007596 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80073fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073fc:	f003 0301 	and.w	r3, r3, #1
 8007400:	2b00      	cmp	r3, #0
 8007402:	f000 80c2 	beq.w	800758a <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800740c:	b2d2      	uxtb	r2, r2
 800740e:	4611      	mov	r1, r2
 8007410:	4618      	mov	r0, r3
 8007412:	f004 ff98 	bl	800c346 <USB_ReadDevInEPInterrupt>
 8007416:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8007418:	693b      	ldr	r3, [r7, #16]
 800741a:	f003 0301 	and.w	r3, r3, #1
 800741e:	2b00      	cmp	r3, #0
 8007420:	d057      	beq.n	80074d2 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007424:	f003 030f 	and.w	r3, r3, #15
 8007428:	2201      	movs	r2, #1
 800742a:	fa02 f303 	lsl.w	r3, r2, r3
 800742e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007430:	69fb      	ldr	r3, [r7, #28]
 8007432:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007436:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	43db      	mvns	r3, r3
 800743c:	69f9      	ldr	r1, [r7, #28]
 800743e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007442:	4013      	ands	r3, r2
 8007444:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8007446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007448:	015a      	lsls	r2, r3, #5
 800744a:	69fb      	ldr	r3, [r7, #28]
 800744c:	4413      	add	r3, r2
 800744e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007452:	461a      	mov	r2, r3
 8007454:	2301      	movs	r3, #1
 8007456:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	691b      	ldr	r3, [r3, #16]
 800745c:	2b01      	cmp	r3, #1
 800745e:	d132      	bne.n	80074c6 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8007460:	6879      	ldr	r1, [r7, #4]
 8007462:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007464:	4613      	mov	r3, r2
 8007466:	00db      	lsls	r3, r3, #3
 8007468:	4413      	add	r3, r2
 800746a:	009b      	lsls	r3, r3, #2
 800746c:	440b      	add	r3, r1
 800746e:	334c      	adds	r3, #76	; 0x4c
 8007470:	6819      	ldr	r1, [r3, #0]
 8007472:	6878      	ldr	r0, [r7, #4]
 8007474:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007476:	4613      	mov	r3, r2
 8007478:	00db      	lsls	r3, r3, #3
 800747a:	4413      	add	r3, r2
 800747c:	009b      	lsls	r3, r3, #2
 800747e:	4403      	add	r3, r0
 8007480:	3348      	adds	r3, #72	; 0x48
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	4419      	add	r1, r3
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800748a:	4613      	mov	r3, r2
 800748c:	00db      	lsls	r3, r3, #3
 800748e:	4413      	add	r3, r2
 8007490:	009b      	lsls	r3, r3, #2
 8007492:	4403      	add	r3, r0
 8007494:	334c      	adds	r3, #76	; 0x4c
 8007496:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8007498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800749a:	2b00      	cmp	r3, #0
 800749c:	d113      	bne.n	80074c6 <HAL_PCD_IRQHandler+0x3a2>
 800749e:	6879      	ldr	r1, [r7, #4]
 80074a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074a2:	4613      	mov	r3, r2
 80074a4:	00db      	lsls	r3, r3, #3
 80074a6:	4413      	add	r3, r2
 80074a8:	009b      	lsls	r3, r3, #2
 80074aa:	440b      	add	r3, r1
 80074ac:	3354      	adds	r3, #84	; 0x54
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d108      	bne.n	80074c6 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	6818      	ldr	r0, [r3, #0]
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80074be:	461a      	mov	r2, r3
 80074c0:	2101      	movs	r1, #1
 80074c2:	f004 ff9f 	bl	800c404 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80074c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074c8:	b2db      	uxtb	r3, r3
 80074ca:	4619      	mov	r1, r3
 80074cc:	6878      	ldr	r0, [r7, #4]
 80074ce:	f007 fa7a 	bl	800e9c6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80074d2:	693b      	ldr	r3, [r7, #16]
 80074d4:	f003 0308 	and.w	r3, r3, #8
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d008      	beq.n	80074ee <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80074dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074de:	015a      	lsls	r2, r3, #5
 80074e0:	69fb      	ldr	r3, [r7, #28]
 80074e2:	4413      	add	r3, r2
 80074e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074e8:	461a      	mov	r2, r3
 80074ea:	2308      	movs	r3, #8
 80074ec:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80074ee:	693b      	ldr	r3, [r7, #16]
 80074f0:	f003 0310 	and.w	r3, r3, #16
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d008      	beq.n	800750a <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80074f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074fa:	015a      	lsls	r2, r3, #5
 80074fc:	69fb      	ldr	r3, [r7, #28]
 80074fe:	4413      	add	r3, r2
 8007500:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007504:	461a      	mov	r2, r3
 8007506:	2310      	movs	r3, #16
 8007508:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800750a:	693b      	ldr	r3, [r7, #16]
 800750c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007510:	2b00      	cmp	r3, #0
 8007512:	d008      	beq.n	8007526 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8007514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007516:	015a      	lsls	r2, r3, #5
 8007518:	69fb      	ldr	r3, [r7, #28]
 800751a:	4413      	add	r3, r2
 800751c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007520:	461a      	mov	r2, r3
 8007522:	2340      	movs	r3, #64	; 0x40
 8007524:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8007526:	693b      	ldr	r3, [r7, #16]
 8007528:	f003 0302 	and.w	r3, r3, #2
 800752c:	2b00      	cmp	r3, #0
 800752e:	d023      	beq.n	8007578 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8007530:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007532:	6a38      	ldr	r0, [r7, #32]
 8007534:	f003 fe80 	bl	800b238 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8007538:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800753a:	4613      	mov	r3, r2
 800753c:	00db      	lsls	r3, r3, #3
 800753e:	4413      	add	r3, r2
 8007540:	009b      	lsls	r3, r3, #2
 8007542:	3338      	adds	r3, #56	; 0x38
 8007544:	687a      	ldr	r2, [r7, #4]
 8007546:	4413      	add	r3, r2
 8007548:	3304      	adds	r3, #4
 800754a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800754c:	697b      	ldr	r3, [r7, #20]
 800754e:	78db      	ldrb	r3, [r3, #3]
 8007550:	2b01      	cmp	r3, #1
 8007552:	d108      	bne.n	8007566 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8007554:	697b      	ldr	r3, [r7, #20]
 8007556:	2200      	movs	r2, #0
 8007558:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800755a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800755c:	b2db      	uxtb	r3, r3
 800755e:	4619      	mov	r1, r3
 8007560:	6878      	ldr	r0, [r7, #4]
 8007562:	f007 fac7 	bl	800eaf4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8007566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007568:	015a      	lsls	r2, r3, #5
 800756a:	69fb      	ldr	r3, [r7, #28]
 800756c:	4413      	add	r3, r2
 800756e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007572:	461a      	mov	r2, r3
 8007574:	2302      	movs	r3, #2
 8007576:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8007578:	693b      	ldr	r3, [r7, #16]
 800757a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800757e:	2b00      	cmp	r3, #0
 8007580:	d003      	beq.n	800758a <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8007582:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007584:	6878      	ldr	r0, [r7, #4]
 8007586:	f000 fcdb 	bl	8007f40 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800758a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800758c:	3301      	adds	r3, #1
 800758e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8007590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007592:	085b      	lsrs	r3, r3, #1
 8007594:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8007596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007598:	2b00      	cmp	r3, #0
 800759a:	f47f af2e 	bne.w	80073fa <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	4618      	mov	r0, r3
 80075a4:	f004 fe6a 	bl	800c27c <USB_ReadInterrupts>
 80075a8:	4603      	mov	r3, r0
 80075aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80075ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80075b2:	d122      	bne.n	80075fa <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80075b4:	69fb      	ldr	r3, [r7, #28]
 80075b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075ba:	685b      	ldr	r3, [r3, #4]
 80075bc:	69fa      	ldr	r2, [r7, #28]
 80075be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80075c2:	f023 0301 	bic.w	r3, r3, #1
 80075c6:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80075ce:	2b01      	cmp	r3, #1
 80075d0:	d108      	bne.n	80075e4 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2200      	movs	r2, #0
 80075d6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80075da:	2100      	movs	r1, #0
 80075dc:	6878      	ldr	r0, [r7, #4]
 80075de:	f000 fec3 	bl	8008368 <HAL_PCDEx_LPM_Callback>
 80075e2:	e002      	b.n	80075ea <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80075e4:	6878      	ldr	r0, [r7, #4]
 80075e6:	f007 fa65 	bl	800eab4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	695a      	ldr	r2, [r3, #20]
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80075f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	4618      	mov	r0, r3
 8007600:	f004 fe3c 	bl	800c27c <USB_ReadInterrupts>
 8007604:	4603      	mov	r3, r0
 8007606:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800760a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800760e:	d112      	bne.n	8007636 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8007610:	69fb      	ldr	r3, [r7, #28]
 8007612:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007616:	689b      	ldr	r3, [r3, #8]
 8007618:	f003 0301 	and.w	r3, r3, #1
 800761c:	2b01      	cmp	r3, #1
 800761e:	d102      	bne.n	8007626 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	f007 fa21 	bl	800ea68 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	695a      	ldr	r2, [r3, #20]
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8007634:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	4618      	mov	r0, r3
 800763c:	f004 fe1e 	bl	800c27c <USB_ReadInterrupts>
 8007640:	4603      	mov	r3, r0
 8007642:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007646:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800764a:	f040 80b7 	bne.w	80077bc <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800764e:	69fb      	ldr	r3, [r7, #28]
 8007650:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007654:	685b      	ldr	r3, [r3, #4]
 8007656:	69fa      	ldr	r2, [r7, #28]
 8007658:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800765c:	f023 0301 	bic.w	r3, r3, #1
 8007660:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	2110      	movs	r1, #16
 8007668:	4618      	mov	r0, r3
 800766a:	f003 fde5 	bl	800b238 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800766e:	2300      	movs	r3, #0
 8007670:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007672:	e046      	b.n	8007702 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8007674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007676:	015a      	lsls	r2, r3, #5
 8007678:	69fb      	ldr	r3, [r7, #28]
 800767a:	4413      	add	r3, r2
 800767c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007680:	461a      	mov	r2, r3
 8007682:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007686:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800768a:	015a      	lsls	r2, r3, #5
 800768c:	69fb      	ldr	r3, [r7, #28]
 800768e:	4413      	add	r3, r2
 8007690:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007698:	0151      	lsls	r1, r2, #5
 800769a:	69fa      	ldr	r2, [r7, #28]
 800769c:	440a      	add	r2, r1
 800769e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80076a2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80076a6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80076a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076aa:	015a      	lsls	r2, r3, #5
 80076ac:	69fb      	ldr	r3, [r7, #28]
 80076ae:	4413      	add	r3, r2
 80076b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076b4:	461a      	mov	r2, r3
 80076b6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80076ba:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80076bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076be:	015a      	lsls	r2, r3, #5
 80076c0:	69fb      	ldr	r3, [r7, #28]
 80076c2:	4413      	add	r3, r2
 80076c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80076cc:	0151      	lsls	r1, r2, #5
 80076ce:	69fa      	ldr	r2, [r7, #28]
 80076d0:	440a      	add	r2, r1
 80076d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80076d6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80076da:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80076dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076de:	015a      	lsls	r2, r3, #5
 80076e0:	69fb      	ldr	r3, [r7, #28]
 80076e2:	4413      	add	r3, r2
 80076e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80076ec:	0151      	lsls	r1, r2, #5
 80076ee:	69fa      	ldr	r2, [r7, #28]
 80076f0:	440a      	add	r2, r1
 80076f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80076f6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80076fa:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80076fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076fe:	3301      	adds	r3, #1
 8007700:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	685b      	ldr	r3, [r3, #4]
 8007706:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007708:	429a      	cmp	r2, r3
 800770a:	d3b3      	bcc.n	8007674 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800770c:	69fb      	ldr	r3, [r7, #28]
 800770e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007712:	69db      	ldr	r3, [r3, #28]
 8007714:	69fa      	ldr	r2, [r7, #28]
 8007716:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800771a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800771e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007724:	2b00      	cmp	r3, #0
 8007726:	d016      	beq.n	8007756 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8007728:	69fb      	ldr	r3, [r7, #28]
 800772a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800772e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007732:	69fa      	ldr	r2, [r7, #28]
 8007734:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007738:	f043 030b 	orr.w	r3, r3, #11
 800773c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8007740:	69fb      	ldr	r3, [r7, #28]
 8007742:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007746:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007748:	69fa      	ldr	r2, [r7, #28]
 800774a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800774e:	f043 030b 	orr.w	r3, r3, #11
 8007752:	6453      	str	r3, [r2, #68]	; 0x44
 8007754:	e015      	b.n	8007782 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8007756:	69fb      	ldr	r3, [r7, #28]
 8007758:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800775c:	695b      	ldr	r3, [r3, #20]
 800775e:	69fa      	ldr	r2, [r7, #28]
 8007760:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007764:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007768:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800776c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800776e:	69fb      	ldr	r3, [r7, #28]
 8007770:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007774:	691b      	ldr	r3, [r3, #16]
 8007776:	69fa      	ldr	r2, [r7, #28]
 8007778:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800777c:	f043 030b 	orr.w	r3, r3, #11
 8007780:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8007782:	69fb      	ldr	r3, [r7, #28]
 8007784:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	69fa      	ldr	r2, [r7, #28]
 800778c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007790:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007794:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6818      	ldr	r0, [r3, #0]
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	691b      	ldr	r3, [r3, #16]
 800779e:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80077a6:	461a      	mov	r2, r3
 80077a8:	f004 fe2c 	bl	800c404 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	695a      	ldr	r2, [r3, #20]
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80077ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	4618      	mov	r0, r3
 80077c2:	f004 fd5b 	bl	800c27c <USB_ReadInterrupts>
 80077c6:	4603      	mov	r3, r0
 80077c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80077cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80077d0:	d124      	bne.n	800781c <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	4618      	mov	r0, r3
 80077d8:	f004 fdf1 	bl	800c3be <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	4618      	mov	r0, r3
 80077e2:	f003 fda6 	bl	800b332 <USB_GetDevSpeed>
 80077e6:	4603      	mov	r3, r0
 80077e8:	461a      	mov	r2, r3
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681c      	ldr	r4, [r3, #0]
 80077f2:	f001 f9e9 	bl	8008bc8 <HAL_RCC_GetHCLKFreq>
 80077f6:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80077fc:	b2db      	uxtb	r3, r3
 80077fe:	461a      	mov	r2, r3
 8007800:	4620      	mov	r0, r4
 8007802:	f003 faa5 	bl	800ad50 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8007806:	6878      	ldr	r0, [r7, #4]
 8007808:	f007 f905 	bl	800ea16 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	695a      	ldr	r2, [r3, #20]
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800781a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	4618      	mov	r0, r3
 8007822:	f004 fd2b 	bl	800c27c <USB_ReadInterrupts>
 8007826:	4603      	mov	r3, r0
 8007828:	f003 0308 	and.w	r3, r3, #8
 800782c:	2b08      	cmp	r3, #8
 800782e:	d10a      	bne.n	8007846 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8007830:	6878      	ldr	r0, [r7, #4]
 8007832:	f007 f8e2 	bl	800e9fa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	695a      	ldr	r2, [r3, #20]
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	f002 0208 	and.w	r2, r2, #8
 8007844:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	4618      	mov	r0, r3
 800784c:	f004 fd16 	bl	800c27c <USB_ReadInterrupts>
 8007850:	4603      	mov	r3, r0
 8007852:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007856:	2b80      	cmp	r3, #128	; 0x80
 8007858:	d122      	bne.n	80078a0 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800785a:	6a3b      	ldr	r3, [r7, #32]
 800785c:	699b      	ldr	r3, [r3, #24]
 800785e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007862:	6a3b      	ldr	r3, [r7, #32]
 8007864:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007866:	2301      	movs	r3, #1
 8007868:	627b      	str	r3, [r7, #36]	; 0x24
 800786a:	e014      	b.n	8007896 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800786c:	6879      	ldr	r1, [r7, #4]
 800786e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007870:	4613      	mov	r3, r2
 8007872:	00db      	lsls	r3, r3, #3
 8007874:	4413      	add	r3, r2
 8007876:	009b      	lsls	r3, r3, #2
 8007878:	440b      	add	r3, r1
 800787a:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800787e:	781b      	ldrb	r3, [r3, #0]
 8007880:	2b01      	cmp	r3, #1
 8007882:	d105      	bne.n	8007890 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8007884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007886:	b2db      	uxtb	r3, r3
 8007888:	4619      	mov	r1, r3
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	f000 fb27 	bl	8007ede <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007892:	3301      	adds	r3, #1
 8007894:	627b      	str	r3, [r7, #36]	; 0x24
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	685b      	ldr	r3, [r3, #4]
 800789a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800789c:	429a      	cmp	r2, r3
 800789e:	d3e5      	bcc.n	800786c <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	4618      	mov	r0, r3
 80078a6:	f004 fce9 	bl	800c27c <USB_ReadInterrupts>
 80078aa:	4603      	mov	r3, r0
 80078ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80078b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80078b4:	d13b      	bne.n	800792e <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80078b6:	2301      	movs	r3, #1
 80078b8:	627b      	str	r3, [r7, #36]	; 0x24
 80078ba:	e02b      	b.n	8007914 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80078bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078be:	015a      	lsls	r2, r3, #5
 80078c0:	69fb      	ldr	r3, [r7, #28]
 80078c2:	4413      	add	r3, r2
 80078c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80078cc:	6879      	ldr	r1, [r7, #4]
 80078ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078d0:	4613      	mov	r3, r2
 80078d2:	00db      	lsls	r3, r3, #3
 80078d4:	4413      	add	r3, r2
 80078d6:	009b      	lsls	r3, r3, #2
 80078d8:	440b      	add	r3, r1
 80078da:	3340      	adds	r3, #64	; 0x40
 80078dc:	781b      	ldrb	r3, [r3, #0]
 80078de:	2b01      	cmp	r3, #1
 80078e0:	d115      	bne.n	800790e <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80078e2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	da12      	bge.n	800790e <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80078e8:	6879      	ldr	r1, [r7, #4]
 80078ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078ec:	4613      	mov	r3, r2
 80078ee:	00db      	lsls	r3, r3, #3
 80078f0:	4413      	add	r3, r2
 80078f2:	009b      	lsls	r3, r3, #2
 80078f4:	440b      	add	r3, r1
 80078f6:	333f      	adds	r3, #63	; 0x3f
 80078f8:	2201      	movs	r2, #1
 80078fa:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80078fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078fe:	b2db      	uxtb	r3, r3
 8007900:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007904:	b2db      	uxtb	r3, r3
 8007906:	4619      	mov	r1, r3
 8007908:	6878      	ldr	r0, [r7, #4]
 800790a:	f000 fae8 	bl	8007ede <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800790e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007910:	3301      	adds	r3, #1
 8007912:	627b      	str	r3, [r7, #36]	; 0x24
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	685b      	ldr	r3, [r3, #4]
 8007918:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800791a:	429a      	cmp	r2, r3
 800791c:	d3ce      	bcc.n	80078bc <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	695a      	ldr	r2, [r3, #20]
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800792c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	4618      	mov	r0, r3
 8007934:	f004 fca2 	bl	800c27c <USB_ReadInterrupts>
 8007938:	4603      	mov	r3, r0
 800793a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800793e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007942:	d155      	bne.n	80079f0 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007944:	2301      	movs	r3, #1
 8007946:	627b      	str	r3, [r7, #36]	; 0x24
 8007948:	e045      	b.n	80079d6 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800794a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800794c:	015a      	lsls	r2, r3, #5
 800794e:	69fb      	ldr	r3, [r7, #28]
 8007950:	4413      	add	r3, r2
 8007952:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800795a:	6879      	ldr	r1, [r7, #4]
 800795c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800795e:	4613      	mov	r3, r2
 8007960:	00db      	lsls	r3, r3, #3
 8007962:	4413      	add	r3, r2
 8007964:	009b      	lsls	r3, r3, #2
 8007966:	440b      	add	r3, r1
 8007968:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800796c:	781b      	ldrb	r3, [r3, #0]
 800796e:	2b01      	cmp	r3, #1
 8007970:	d12e      	bne.n	80079d0 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8007972:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8007974:	2b00      	cmp	r3, #0
 8007976:	da2b      	bge.n	80079d0 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8007978:	69bb      	ldr	r3, [r7, #24]
 800797a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8007984:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8007988:	429a      	cmp	r2, r3
 800798a:	d121      	bne.n	80079d0 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800798c:	6879      	ldr	r1, [r7, #4]
 800798e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007990:	4613      	mov	r3, r2
 8007992:	00db      	lsls	r3, r3, #3
 8007994:	4413      	add	r3, r2
 8007996:	009b      	lsls	r3, r3, #2
 8007998:	440b      	add	r3, r1
 800799a:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800799e:	2201      	movs	r2, #1
 80079a0:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80079a2:	6a3b      	ldr	r3, [r7, #32]
 80079a4:	699b      	ldr	r3, [r3, #24]
 80079a6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80079aa:	6a3b      	ldr	r3, [r7, #32]
 80079ac:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80079ae:	6a3b      	ldr	r3, [r7, #32]
 80079b0:	695b      	ldr	r3, [r3, #20]
 80079b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d10a      	bne.n	80079d0 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80079ba:	69fb      	ldr	r3, [r7, #28]
 80079bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079c0:	685b      	ldr	r3, [r3, #4]
 80079c2:	69fa      	ldr	r2, [r7, #28]
 80079c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80079c8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80079cc:	6053      	str	r3, [r2, #4]
            break;
 80079ce:	e007      	b.n	80079e0 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80079d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079d2:	3301      	adds	r3, #1
 80079d4:	627b      	str	r3, [r7, #36]	; 0x24
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	685b      	ldr	r3, [r3, #4]
 80079da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079dc:	429a      	cmp	r2, r3
 80079de:	d3b4      	bcc.n	800794a <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	695a      	ldr	r2, [r3, #20]
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80079ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	4618      	mov	r0, r3
 80079f6:	f004 fc41 	bl	800c27c <USB_ReadInterrupts>
 80079fa:	4603      	mov	r3, r0
 80079fc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007a00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a04:	d10a      	bne.n	8007a1c <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8007a06:	6878      	ldr	r0, [r7, #4]
 8007a08:	f007 f886 	bl	800eb18 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	695a      	ldr	r2, [r3, #20]
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8007a1a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	4618      	mov	r0, r3
 8007a22:	f004 fc2b 	bl	800c27c <USB_ReadInterrupts>
 8007a26:	4603      	mov	r3, r0
 8007a28:	f003 0304 	and.w	r3, r3, #4
 8007a2c:	2b04      	cmp	r3, #4
 8007a2e:	d115      	bne.n	8007a5c <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	685b      	ldr	r3, [r3, #4]
 8007a36:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8007a38:	69bb      	ldr	r3, [r7, #24]
 8007a3a:	f003 0304 	and.w	r3, r3, #4
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d002      	beq.n	8007a48 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8007a42:	6878      	ldr	r0, [r7, #4]
 8007a44:	f007 f876 	bl	800eb34 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	6859      	ldr	r1, [r3, #4]
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	69ba      	ldr	r2, [r7, #24]
 8007a54:	430a      	orrs	r2, r1
 8007a56:	605a      	str	r2, [r3, #4]
 8007a58:	e000      	b.n	8007a5c <HAL_PCD_IRQHandler+0x938>
      return;
 8007a5a:	bf00      	nop
    }
  }
}
 8007a5c:	3734      	adds	r7, #52	; 0x34
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	bd90      	pop	{r4, r7, pc}

08007a62 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8007a62:	b580      	push	{r7, lr}
 8007a64:	b082      	sub	sp, #8
 8007a66:	af00      	add	r7, sp, #0
 8007a68:	6078      	str	r0, [r7, #4]
 8007a6a:	460b      	mov	r3, r1
 8007a6c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8007a74:	2b01      	cmp	r3, #1
 8007a76:	d101      	bne.n	8007a7c <HAL_PCD_SetAddress+0x1a>
 8007a78:	2302      	movs	r3, #2
 8007a7a:	e013      	b.n	8007aa4 <HAL_PCD_SetAddress+0x42>
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2201      	movs	r2, #1
 8007a80:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	78fa      	ldrb	r2, [r7, #3]
 8007a88:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	78fa      	ldrb	r2, [r7, #3]
 8007a92:	4611      	mov	r1, r2
 8007a94:	4618      	mov	r0, r3
 8007a96:	f004 fb89 	bl	800c1ac <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8007aa2:	2300      	movs	r3, #0
}
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	3708      	adds	r7, #8
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	bd80      	pop	{r7, pc}

08007aac <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b084      	sub	sp, #16
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
 8007ab4:	4608      	mov	r0, r1
 8007ab6:	4611      	mov	r1, r2
 8007ab8:	461a      	mov	r2, r3
 8007aba:	4603      	mov	r3, r0
 8007abc:	70fb      	strb	r3, [r7, #3]
 8007abe:	460b      	mov	r3, r1
 8007ac0:	803b      	strh	r3, [r7, #0]
 8007ac2:	4613      	mov	r3, r2
 8007ac4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007aca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	da0f      	bge.n	8007af2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007ad2:	78fb      	ldrb	r3, [r7, #3]
 8007ad4:	f003 020f 	and.w	r2, r3, #15
 8007ad8:	4613      	mov	r3, r2
 8007ada:	00db      	lsls	r3, r3, #3
 8007adc:	4413      	add	r3, r2
 8007ade:	009b      	lsls	r3, r3, #2
 8007ae0:	3338      	adds	r3, #56	; 0x38
 8007ae2:	687a      	ldr	r2, [r7, #4]
 8007ae4:	4413      	add	r3, r2
 8007ae6:	3304      	adds	r3, #4
 8007ae8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	2201      	movs	r2, #1
 8007aee:	705a      	strb	r2, [r3, #1]
 8007af0:	e00f      	b.n	8007b12 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007af2:	78fb      	ldrb	r3, [r7, #3]
 8007af4:	f003 020f 	and.w	r2, r3, #15
 8007af8:	4613      	mov	r3, r2
 8007afa:	00db      	lsls	r3, r3, #3
 8007afc:	4413      	add	r3, r2
 8007afe:	009b      	lsls	r3, r3, #2
 8007b00:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007b04:	687a      	ldr	r2, [r7, #4]
 8007b06:	4413      	add	r3, r2
 8007b08:	3304      	adds	r3, #4
 8007b0a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	2200      	movs	r2, #0
 8007b10:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8007b12:	78fb      	ldrb	r3, [r7, #3]
 8007b14:	f003 030f 	and.w	r3, r3, #15
 8007b18:	b2da      	uxtb	r2, r3
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8007b1e:	883a      	ldrh	r2, [r7, #0]
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	78ba      	ldrb	r2, [r7, #2]
 8007b28:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	785b      	ldrb	r3, [r3, #1]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d004      	beq.n	8007b3c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	781b      	ldrb	r3, [r3, #0]
 8007b36:	b29a      	uxth	r2, r3
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8007b3c:	78bb      	ldrb	r3, [r7, #2]
 8007b3e:	2b02      	cmp	r3, #2
 8007b40:	d102      	bne.n	8007b48 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	2200      	movs	r2, #0
 8007b46:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8007b4e:	2b01      	cmp	r3, #1
 8007b50:	d101      	bne.n	8007b56 <HAL_PCD_EP_Open+0xaa>
 8007b52:	2302      	movs	r3, #2
 8007b54:	e00e      	b.n	8007b74 <HAL_PCD_EP_Open+0xc8>
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2201      	movs	r2, #1
 8007b5a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	68f9      	ldr	r1, [r7, #12]
 8007b64:	4618      	mov	r0, r3
 8007b66:	f003 fc09 	bl	800b37c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8007b72:	7afb      	ldrb	r3, [r7, #11]
}
 8007b74:	4618      	mov	r0, r3
 8007b76:	3710      	adds	r7, #16
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	bd80      	pop	{r7, pc}

08007b7c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b084      	sub	sp, #16
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
 8007b84:	460b      	mov	r3, r1
 8007b86:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007b88:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	da0f      	bge.n	8007bb0 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007b90:	78fb      	ldrb	r3, [r7, #3]
 8007b92:	f003 020f 	and.w	r2, r3, #15
 8007b96:	4613      	mov	r3, r2
 8007b98:	00db      	lsls	r3, r3, #3
 8007b9a:	4413      	add	r3, r2
 8007b9c:	009b      	lsls	r3, r3, #2
 8007b9e:	3338      	adds	r3, #56	; 0x38
 8007ba0:	687a      	ldr	r2, [r7, #4]
 8007ba2:	4413      	add	r3, r2
 8007ba4:	3304      	adds	r3, #4
 8007ba6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	2201      	movs	r2, #1
 8007bac:	705a      	strb	r2, [r3, #1]
 8007bae:	e00f      	b.n	8007bd0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007bb0:	78fb      	ldrb	r3, [r7, #3]
 8007bb2:	f003 020f 	and.w	r2, r3, #15
 8007bb6:	4613      	mov	r3, r2
 8007bb8:	00db      	lsls	r3, r3, #3
 8007bba:	4413      	add	r3, r2
 8007bbc:	009b      	lsls	r3, r3, #2
 8007bbe:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007bc2:	687a      	ldr	r2, [r7, #4]
 8007bc4:	4413      	add	r3, r2
 8007bc6:	3304      	adds	r3, #4
 8007bc8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	2200      	movs	r2, #0
 8007bce:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8007bd0:	78fb      	ldrb	r3, [r7, #3]
 8007bd2:	f003 030f 	and.w	r3, r3, #15
 8007bd6:	b2da      	uxtb	r2, r3
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8007be2:	2b01      	cmp	r3, #1
 8007be4:	d101      	bne.n	8007bea <HAL_PCD_EP_Close+0x6e>
 8007be6:	2302      	movs	r3, #2
 8007be8:	e00e      	b.n	8007c08 <HAL_PCD_EP_Close+0x8c>
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	2201      	movs	r2, #1
 8007bee:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	68f9      	ldr	r1, [r7, #12]
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	f003 fc47 	bl	800b48c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	2200      	movs	r2, #0
 8007c02:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8007c06:	2300      	movs	r3, #0
}
 8007c08:	4618      	mov	r0, r3
 8007c0a:	3710      	adds	r7, #16
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	bd80      	pop	{r7, pc}

08007c10 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b086      	sub	sp, #24
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	60f8      	str	r0, [r7, #12]
 8007c18:	607a      	str	r2, [r7, #4]
 8007c1a:	603b      	str	r3, [r7, #0]
 8007c1c:	460b      	mov	r3, r1
 8007c1e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007c20:	7afb      	ldrb	r3, [r7, #11]
 8007c22:	f003 020f 	and.w	r2, r3, #15
 8007c26:	4613      	mov	r3, r2
 8007c28:	00db      	lsls	r3, r3, #3
 8007c2a:	4413      	add	r3, r2
 8007c2c:	009b      	lsls	r3, r3, #2
 8007c2e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007c32:	68fa      	ldr	r2, [r7, #12]
 8007c34:	4413      	add	r3, r2
 8007c36:	3304      	adds	r3, #4
 8007c38:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007c3a:	697b      	ldr	r3, [r7, #20]
 8007c3c:	687a      	ldr	r2, [r7, #4]
 8007c3e:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8007c40:	697b      	ldr	r3, [r7, #20]
 8007c42:	683a      	ldr	r2, [r7, #0]
 8007c44:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8007c46:	697b      	ldr	r3, [r7, #20]
 8007c48:	2200      	movs	r2, #0
 8007c4a:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8007c4c:	697b      	ldr	r3, [r7, #20]
 8007c4e:	2200      	movs	r2, #0
 8007c50:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007c52:	7afb      	ldrb	r3, [r7, #11]
 8007c54:	f003 030f 	and.w	r3, r3, #15
 8007c58:	b2da      	uxtb	r2, r3
 8007c5a:	697b      	ldr	r3, [r7, #20]
 8007c5c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	691b      	ldr	r3, [r3, #16]
 8007c62:	2b01      	cmp	r3, #1
 8007c64:	d102      	bne.n	8007c6c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007c66:	687a      	ldr	r2, [r7, #4]
 8007c68:	697b      	ldr	r3, [r7, #20]
 8007c6a:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007c6c:	7afb      	ldrb	r3, [r7, #11]
 8007c6e:	f003 030f 	and.w	r3, r3, #15
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d109      	bne.n	8007c8a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	6818      	ldr	r0, [r3, #0]
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	691b      	ldr	r3, [r3, #16]
 8007c7e:	b2db      	uxtb	r3, r3
 8007c80:	461a      	mov	r2, r3
 8007c82:	6979      	ldr	r1, [r7, #20]
 8007c84:	f003 ff26 	bl	800bad4 <USB_EP0StartXfer>
 8007c88:	e008      	b.n	8007c9c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	6818      	ldr	r0, [r3, #0]
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	691b      	ldr	r3, [r3, #16]
 8007c92:	b2db      	uxtb	r3, r3
 8007c94:	461a      	mov	r2, r3
 8007c96:	6979      	ldr	r1, [r7, #20]
 8007c98:	f003 fcd4 	bl	800b644 <USB_EPStartXfer>
  }

  return HAL_OK;
 8007c9c:	2300      	movs	r3, #0
}
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	3718      	adds	r7, #24
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	bd80      	pop	{r7, pc}

08007ca6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007ca6:	b480      	push	{r7}
 8007ca8:	b083      	sub	sp, #12
 8007caa:	af00      	add	r7, sp, #0
 8007cac:	6078      	str	r0, [r7, #4]
 8007cae:	460b      	mov	r3, r1
 8007cb0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8007cb2:	78fb      	ldrb	r3, [r7, #3]
 8007cb4:	f003 020f 	and.w	r2, r3, #15
 8007cb8:	6879      	ldr	r1, [r7, #4]
 8007cba:	4613      	mov	r3, r2
 8007cbc:	00db      	lsls	r3, r3, #3
 8007cbe:	4413      	add	r3, r2
 8007cc0:	009b      	lsls	r3, r3, #2
 8007cc2:	440b      	add	r3, r1
 8007cc4:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8007cc8:	681b      	ldr	r3, [r3, #0]
}
 8007cca:	4618      	mov	r0, r3
 8007ccc:	370c      	adds	r7, #12
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd4:	4770      	bx	lr

08007cd6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007cd6:	b580      	push	{r7, lr}
 8007cd8:	b086      	sub	sp, #24
 8007cda:	af00      	add	r7, sp, #0
 8007cdc:	60f8      	str	r0, [r7, #12]
 8007cde:	607a      	str	r2, [r7, #4]
 8007ce0:	603b      	str	r3, [r7, #0]
 8007ce2:	460b      	mov	r3, r1
 8007ce4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007ce6:	7afb      	ldrb	r3, [r7, #11]
 8007ce8:	f003 020f 	and.w	r2, r3, #15
 8007cec:	4613      	mov	r3, r2
 8007cee:	00db      	lsls	r3, r3, #3
 8007cf0:	4413      	add	r3, r2
 8007cf2:	009b      	lsls	r3, r3, #2
 8007cf4:	3338      	adds	r3, #56	; 0x38
 8007cf6:	68fa      	ldr	r2, [r7, #12]
 8007cf8:	4413      	add	r3, r2
 8007cfa:	3304      	adds	r3, #4
 8007cfc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007cfe:	697b      	ldr	r3, [r7, #20]
 8007d00:	687a      	ldr	r2, [r7, #4]
 8007d02:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8007d04:	697b      	ldr	r3, [r7, #20]
 8007d06:	683a      	ldr	r2, [r7, #0]
 8007d08:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8007d0a:	697b      	ldr	r3, [r7, #20]
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8007d10:	697b      	ldr	r3, [r7, #20]
 8007d12:	2201      	movs	r2, #1
 8007d14:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007d16:	7afb      	ldrb	r3, [r7, #11]
 8007d18:	f003 030f 	and.w	r3, r3, #15
 8007d1c:	b2da      	uxtb	r2, r3
 8007d1e:	697b      	ldr	r3, [r7, #20]
 8007d20:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	691b      	ldr	r3, [r3, #16]
 8007d26:	2b01      	cmp	r3, #1
 8007d28:	d102      	bne.n	8007d30 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007d2a:	687a      	ldr	r2, [r7, #4]
 8007d2c:	697b      	ldr	r3, [r7, #20]
 8007d2e:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007d30:	7afb      	ldrb	r3, [r7, #11]
 8007d32:	f003 030f 	and.w	r3, r3, #15
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d109      	bne.n	8007d4e <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	6818      	ldr	r0, [r3, #0]
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	691b      	ldr	r3, [r3, #16]
 8007d42:	b2db      	uxtb	r3, r3
 8007d44:	461a      	mov	r2, r3
 8007d46:	6979      	ldr	r1, [r7, #20]
 8007d48:	f003 fec4 	bl	800bad4 <USB_EP0StartXfer>
 8007d4c:	e008      	b.n	8007d60 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	6818      	ldr	r0, [r3, #0]
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	691b      	ldr	r3, [r3, #16]
 8007d56:	b2db      	uxtb	r3, r3
 8007d58:	461a      	mov	r2, r3
 8007d5a:	6979      	ldr	r1, [r7, #20]
 8007d5c:	f003 fc72 	bl	800b644 <USB_EPStartXfer>
  }

  return HAL_OK;
 8007d60:	2300      	movs	r3, #0
}
 8007d62:	4618      	mov	r0, r3
 8007d64:	3718      	adds	r7, #24
 8007d66:	46bd      	mov	sp, r7
 8007d68:	bd80      	pop	{r7, pc}

08007d6a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007d6a:	b580      	push	{r7, lr}
 8007d6c:	b084      	sub	sp, #16
 8007d6e:	af00      	add	r7, sp, #0
 8007d70:	6078      	str	r0, [r7, #4]
 8007d72:	460b      	mov	r3, r1
 8007d74:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8007d76:	78fb      	ldrb	r3, [r7, #3]
 8007d78:	f003 020f 	and.w	r2, r3, #15
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	685b      	ldr	r3, [r3, #4]
 8007d80:	429a      	cmp	r2, r3
 8007d82:	d901      	bls.n	8007d88 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8007d84:	2301      	movs	r3, #1
 8007d86:	e050      	b.n	8007e2a <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007d88:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	da0f      	bge.n	8007db0 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007d90:	78fb      	ldrb	r3, [r7, #3]
 8007d92:	f003 020f 	and.w	r2, r3, #15
 8007d96:	4613      	mov	r3, r2
 8007d98:	00db      	lsls	r3, r3, #3
 8007d9a:	4413      	add	r3, r2
 8007d9c:	009b      	lsls	r3, r3, #2
 8007d9e:	3338      	adds	r3, #56	; 0x38
 8007da0:	687a      	ldr	r2, [r7, #4]
 8007da2:	4413      	add	r3, r2
 8007da4:	3304      	adds	r3, #4
 8007da6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	2201      	movs	r2, #1
 8007dac:	705a      	strb	r2, [r3, #1]
 8007dae:	e00d      	b.n	8007dcc <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007db0:	78fa      	ldrb	r2, [r7, #3]
 8007db2:	4613      	mov	r3, r2
 8007db4:	00db      	lsls	r3, r3, #3
 8007db6:	4413      	add	r3, r2
 8007db8:	009b      	lsls	r3, r3, #2
 8007dba:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007dbe:	687a      	ldr	r2, [r7, #4]
 8007dc0:	4413      	add	r3, r2
 8007dc2:	3304      	adds	r3, #4
 8007dc4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	2200      	movs	r2, #0
 8007dca:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	2201      	movs	r2, #1
 8007dd0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007dd2:	78fb      	ldrb	r3, [r7, #3]
 8007dd4:	f003 030f 	and.w	r3, r3, #15
 8007dd8:	b2da      	uxtb	r2, r3
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8007de4:	2b01      	cmp	r3, #1
 8007de6:	d101      	bne.n	8007dec <HAL_PCD_EP_SetStall+0x82>
 8007de8:	2302      	movs	r3, #2
 8007dea:	e01e      	b.n	8007e2a <HAL_PCD_EP_SetStall+0xc0>
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2201      	movs	r2, #1
 8007df0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	68f9      	ldr	r1, [r7, #12]
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	f004 f902 	bl	800c004 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007e00:	78fb      	ldrb	r3, [r7, #3]
 8007e02:	f003 030f 	and.w	r3, r3, #15
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d10a      	bne.n	8007e20 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	6818      	ldr	r0, [r3, #0]
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	691b      	ldr	r3, [r3, #16]
 8007e12:	b2d9      	uxtb	r1, r3
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007e1a:	461a      	mov	r2, r3
 8007e1c:	f004 faf2 	bl	800c404 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2200      	movs	r2, #0
 8007e24:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8007e28:	2300      	movs	r3, #0
}
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	3710      	adds	r7, #16
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	bd80      	pop	{r7, pc}

08007e32 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007e32:	b580      	push	{r7, lr}
 8007e34:	b084      	sub	sp, #16
 8007e36:	af00      	add	r7, sp, #0
 8007e38:	6078      	str	r0, [r7, #4]
 8007e3a:	460b      	mov	r3, r1
 8007e3c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8007e3e:	78fb      	ldrb	r3, [r7, #3]
 8007e40:	f003 020f 	and.w	r2, r3, #15
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	685b      	ldr	r3, [r3, #4]
 8007e48:	429a      	cmp	r2, r3
 8007e4a:	d901      	bls.n	8007e50 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8007e4c:	2301      	movs	r3, #1
 8007e4e:	e042      	b.n	8007ed6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007e50:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	da0f      	bge.n	8007e78 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007e58:	78fb      	ldrb	r3, [r7, #3]
 8007e5a:	f003 020f 	and.w	r2, r3, #15
 8007e5e:	4613      	mov	r3, r2
 8007e60:	00db      	lsls	r3, r3, #3
 8007e62:	4413      	add	r3, r2
 8007e64:	009b      	lsls	r3, r3, #2
 8007e66:	3338      	adds	r3, #56	; 0x38
 8007e68:	687a      	ldr	r2, [r7, #4]
 8007e6a:	4413      	add	r3, r2
 8007e6c:	3304      	adds	r3, #4
 8007e6e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	2201      	movs	r2, #1
 8007e74:	705a      	strb	r2, [r3, #1]
 8007e76:	e00f      	b.n	8007e98 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007e78:	78fb      	ldrb	r3, [r7, #3]
 8007e7a:	f003 020f 	and.w	r2, r3, #15
 8007e7e:	4613      	mov	r3, r2
 8007e80:	00db      	lsls	r3, r3, #3
 8007e82:	4413      	add	r3, r2
 8007e84:	009b      	lsls	r3, r3, #2
 8007e86:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007e8a:	687a      	ldr	r2, [r7, #4]
 8007e8c:	4413      	add	r3, r2
 8007e8e:	3304      	adds	r3, #4
 8007e90:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	2200      	movs	r2, #0
 8007e96:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007e9e:	78fb      	ldrb	r3, [r7, #3]
 8007ea0:	f003 030f 	and.w	r3, r3, #15
 8007ea4:	b2da      	uxtb	r2, r3
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8007eb0:	2b01      	cmp	r3, #1
 8007eb2:	d101      	bne.n	8007eb8 <HAL_PCD_EP_ClrStall+0x86>
 8007eb4:	2302      	movs	r3, #2
 8007eb6:	e00e      	b.n	8007ed6 <HAL_PCD_EP_ClrStall+0xa4>
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2201      	movs	r2, #1
 8007ebc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	68f9      	ldr	r1, [r7, #12]
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	f004 f90a 	bl	800c0e0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2200      	movs	r2, #0
 8007ed0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8007ed4:	2300      	movs	r3, #0
}
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	3710      	adds	r7, #16
 8007eda:	46bd      	mov	sp, r7
 8007edc:	bd80      	pop	{r7, pc}

08007ede <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007ede:	b580      	push	{r7, lr}
 8007ee0:	b084      	sub	sp, #16
 8007ee2:	af00      	add	r7, sp, #0
 8007ee4:	6078      	str	r0, [r7, #4]
 8007ee6:	460b      	mov	r3, r1
 8007ee8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8007eea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	da0c      	bge.n	8007f0c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007ef2:	78fb      	ldrb	r3, [r7, #3]
 8007ef4:	f003 020f 	and.w	r2, r3, #15
 8007ef8:	4613      	mov	r3, r2
 8007efa:	00db      	lsls	r3, r3, #3
 8007efc:	4413      	add	r3, r2
 8007efe:	009b      	lsls	r3, r3, #2
 8007f00:	3338      	adds	r3, #56	; 0x38
 8007f02:	687a      	ldr	r2, [r7, #4]
 8007f04:	4413      	add	r3, r2
 8007f06:	3304      	adds	r3, #4
 8007f08:	60fb      	str	r3, [r7, #12]
 8007f0a:	e00c      	b.n	8007f26 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007f0c:	78fb      	ldrb	r3, [r7, #3]
 8007f0e:	f003 020f 	and.w	r2, r3, #15
 8007f12:	4613      	mov	r3, r2
 8007f14:	00db      	lsls	r3, r3, #3
 8007f16:	4413      	add	r3, r2
 8007f18:	009b      	lsls	r3, r3, #2
 8007f1a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007f1e:	687a      	ldr	r2, [r7, #4]
 8007f20:	4413      	add	r3, r2
 8007f22:	3304      	adds	r3, #4
 8007f24:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	68f9      	ldr	r1, [r7, #12]
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	f003 ff29 	bl	800bd84 <USB_EPStopXfer>
 8007f32:	4603      	mov	r3, r0
 8007f34:	72fb      	strb	r3, [r7, #11]

  return ret;
 8007f36:	7afb      	ldrb	r3, [r7, #11]
}
 8007f38:	4618      	mov	r0, r3
 8007f3a:	3710      	adds	r7, #16
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	bd80      	pop	{r7, pc}

08007f40 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b08a      	sub	sp, #40	; 0x28
 8007f44:	af02      	add	r7, sp, #8
 8007f46:	6078      	str	r0, [r7, #4]
 8007f48:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f50:	697b      	ldr	r3, [r7, #20]
 8007f52:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8007f54:	683a      	ldr	r2, [r7, #0]
 8007f56:	4613      	mov	r3, r2
 8007f58:	00db      	lsls	r3, r3, #3
 8007f5a:	4413      	add	r3, r2
 8007f5c:	009b      	lsls	r3, r3, #2
 8007f5e:	3338      	adds	r3, #56	; 0x38
 8007f60:	687a      	ldr	r2, [r7, #4]
 8007f62:	4413      	add	r3, r2
 8007f64:	3304      	adds	r3, #4
 8007f66:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	6a1a      	ldr	r2, [r3, #32]
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	699b      	ldr	r3, [r3, #24]
 8007f70:	429a      	cmp	r2, r3
 8007f72:	d901      	bls.n	8007f78 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8007f74:	2301      	movs	r3, #1
 8007f76:	e06c      	b.n	8008052 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	699a      	ldr	r2, [r3, #24]
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	6a1b      	ldr	r3, [r3, #32]
 8007f80:	1ad3      	subs	r3, r2, r3
 8007f82:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	68db      	ldr	r3, [r3, #12]
 8007f88:	69fa      	ldr	r2, [r7, #28]
 8007f8a:	429a      	cmp	r2, r3
 8007f8c:	d902      	bls.n	8007f94 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	68db      	ldr	r3, [r3, #12]
 8007f92:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8007f94:	69fb      	ldr	r3, [r7, #28]
 8007f96:	3303      	adds	r3, #3
 8007f98:	089b      	lsrs	r3, r3, #2
 8007f9a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007f9c:	e02b      	b.n	8007ff6 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	699a      	ldr	r2, [r3, #24]
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	6a1b      	ldr	r3, [r3, #32]
 8007fa6:	1ad3      	subs	r3, r2, r3
 8007fa8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	68db      	ldr	r3, [r3, #12]
 8007fae:	69fa      	ldr	r2, [r7, #28]
 8007fb0:	429a      	cmp	r2, r3
 8007fb2:	d902      	bls.n	8007fba <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	68db      	ldr	r3, [r3, #12]
 8007fb8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8007fba:	69fb      	ldr	r3, [r7, #28]
 8007fbc:	3303      	adds	r3, #3
 8007fbe:	089b      	lsrs	r3, r3, #2
 8007fc0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	6919      	ldr	r1, [r3, #16]
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	b2da      	uxtb	r2, r3
 8007fca:	69fb      	ldr	r3, [r7, #28]
 8007fcc:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007fd2:	b2db      	uxtb	r3, r3
 8007fd4:	9300      	str	r3, [sp, #0]
 8007fd6:	4603      	mov	r3, r0
 8007fd8:	6978      	ldr	r0, [r7, #20]
 8007fda:	f003 ff7d 	bl	800bed8 <USB_WritePacket>

    ep->xfer_buff  += len;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	691a      	ldr	r2, [r3, #16]
 8007fe2:	69fb      	ldr	r3, [r7, #28]
 8007fe4:	441a      	add	r2, r3
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	6a1a      	ldr	r2, [r3, #32]
 8007fee:	69fb      	ldr	r3, [r7, #28]
 8007ff0:	441a      	add	r2, r3
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	015a      	lsls	r2, r3, #5
 8007ffa:	693b      	ldr	r3, [r7, #16]
 8007ffc:	4413      	add	r3, r2
 8007ffe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008002:	699b      	ldr	r3, [r3, #24]
 8008004:	b29b      	uxth	r3, r3
 8008006:	69ba      	ldr	r2, [r7, #24]
 8008008:	429a      	cmp	r2, r3
 800800a:	d809      	bhi.n	8008020 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	6a1a      	ldr	r2, [r3, #32]
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008014:	429a      	cmp	r2, r3
 8008016:	d203      	bcs.n	8008020 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	699b      	ldr	r3, [r3, #24]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d1be      	bne.n	8007f9e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	699a      	ldr	r2, [r3, #24]
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	6a1b      	ldr	r3, [r3, #32]
 8008028:	429a      	cmp	r2, r3
 800802a:	d811      	bhi.n	8008050 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800802c:	683b      	ldr	r3, [r7, #0]
 800802e:	f003 030f 	and.w	r3, r3, #15
 8008032:	2201      	movs	r2, #1
 8008034:	fa02 f303 	lsl.w	r3, r2, r3
 8008038:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800803a:	693b      	ldr	r3, [r7, #16]
 800803c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008040:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008042:	68bb      	ldr	r3, [r7, #8]
 8008044:	43db      	mvns	r3, r3
 8008046:	6939      	ldr	r1, [r7, #16]
 8008048:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800804c:	4013      	ands	r3, r2
 800804e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8008050:	2300      	movs	r3, #0
}
 8008052:	4618      	mov	r0, r3
 8008054:	3720      	adds	r7, #32
 8008056:	46bd      	mov	sp, r7
 8008058:	bd80      	pop	{r7, pc}
	...

0800805c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800805c:	b580      	push	{r7, lr}
 800805e:	b088      	sub	sp, #32
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
 8008064:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800806c:	69fb      	ldr	r3, [r7, #28]
 800806e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008070:	69fb      	ldr	r3, [r7, #28]
 8008072:	333c      	adds	r3, #60	; 0x3c
 8008074:	3304      	adds	r3, #4
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	015a      	lsls	r2, r3, #5
 800807e:	69bb      	ldr	r3, [r7, #24]
 8008080:	4413      	add	r3, r2
 8008082:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008086:	689b      	ldr	r3, [r3, #8]
 8008088:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	691b      	ldr	r3, [r3, #16]
 800808e:	2b01      	cmp	r3, #1
 8008090:	d17b      	bne.n	800818a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8008092:	693b      	ldr	r3, [r7, #16]
 8008094:	f003 0308 	and.w	r3, r3, #8
 8008098:	2b00      	cmp	r3, #0
 800809a:	d015      	beq.n	80080c8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800809c:	697b      	ldr	r3, [r7, #20]
 800809e:	4a61      	ldr	r2, [pc, #388]	; (8008224 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80080a0:	4293      	cmp	r3, r2
 80080a2:	f240 80b9 	bls.w	8008218 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80080a6:	693b      	ldr	r3, [r7, #16]
 80080a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	f000 80b3 	beq.w	8008218 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	015a      	lsls	r2, r3, #5
 80080b6:	69bb      	ldr	r3, [r7, #24]
 80080b8:	4413      	add	r3, r2
 80080ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080be:	461a      	mov	r2, r3
 80080c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80080c4:	6093      	str	r3, [r2, #8]
 80080c6:	e0a7      	b.n	8008218 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80080c8:	693b      	ldr	r3, [r7, #16]
 80080ca:	f003 0320 	and.w	r3, r3, #32
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d009      	beq.n	80080e6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	015a      	lsls	r2, r3, #5
 80080d6:	69bb      	ldr	r3, [r7, #24]
 80080d8:	4413      	add	r3, r2
 80080da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080de:	461a      	mov	r2, r3
 80080e0:	2320      	movs	r3, #32
 80080e2:	6093      	str	r3, [r2, #8]
 80080e4:	e098      	b.n	8008218 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80080e6:	693b      	ldr	r3, [r7, #16]
 80080e8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	f040 8093 	bne.w	8008218 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80080f2:	697b      	ldr	r3, [r7, #20]
 80080f4:	4a4b      	ldr	r2, [pc, #300]	; (8008224 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80080f6:	4293      	cmp	r3, r2
 80080f8:	d90f      	bls.n	800811a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80080fa:	693b      	ldr	r3, [r7, #16]
 80080fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008100:	2b00      	cmp	r3, #0
 8008102:	d00a      	beq.n	800811a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	015a      	lsls	r2, r3, #5
 8008108:	69bb      	ldr	r3, [r7, #24]
 800810a:	4413      	add	r3, r2
 800810c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008110:	461a      	mov	r2, r3
 8008112:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008116:	6093      	str	r3, [r2, #8]
 8008118:	e07e      	b.n	8008218 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800811a:	683a      	ldr	r2, [r7, #0]
 800811c:	4613      	mov	r3, r2
 800811e:	00db      	lsls	r3, r3, #3
 8008120:	4413      	add	r3, r2
 8008122:	009b      	lsls	r3, r3, #2
 8008124:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008128:	687a      	ldr	r2, [r7, #4]
 800812a:	4413      	add	r3, r2
 800812c:	3304      	adds	r3, #4
 800812e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	69da      	ldr	r2, [r3, #28]
 8008134:	683b      	ldr	r3, [r7, #0]
 8008136:	0159      	lsls	r1, r3, #5
 8008138:	69bb      	ldr	r3, [r7, #24]
 800813a:	440b      	add	r3, r1
 800813c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008140:	691b      	ldr	r3, [r3, #16]
 8008142:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008146:	1ad2      	subs	r2, r2, r3
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d114      	bne.n	800817c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	699b      	ldr	r3, [r3, #24]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d109      	bne.n	800816e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	6818      	ldr	r0, [r3, #0]
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008164:	461a      	mov	r2, r3
 8008166:	2101      	movs	r1, #1
 8008168:	f004 f94c 	bl	800c404 <USB_EP0_OutStart>
 800816c:	e006      	b.n	800817c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	691a      	ldr	r2, [r3, #16]
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	6a1b      	ldr	r3, [r3, #32]
 8008176:	441a      	add	r2, r3
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	b2db      	uxtb	r3, r3
 8008180:	4619      	mov	r1, r3
 8008182:	6878      	ldr	r0, [r7, #4]
 8008184:	f006 fc04 	bl	800e990 <HAL_PCD_DataOutStageCallback>
 8008188:	e046      	b.n	8008218 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800818a:	697b      	ldr	r3, [r7, #20]
 800818c:	4a26      	ldr	r2, [pc, #152]	; (8008228 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800818e:	4293      	cmp	r3, r2
 8008190:	d124      	bne.n	80081dc <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8008192:	693b      	ldr	r3, [r7, #16]
 8008194:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008198:	2b00      	cmp	r3, #0
 800819a:	d00a      	beq.n	80081b2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	015a      	lsls	r2, r3, #5
 80081a0:	69bb      	ldr	r3, [r7, #24]
 80081a2:	4413      	add	r3, r2
 80081a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081a8:	461a      	mov	r2, r3
 80081aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80081ae:	6093      	str	r3, [r2, #8]
 80081b0:	e032      	b.n	8008218 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80081b2:	693b      	ldr	r3, [r7, #16]
 80081b4:	f003 0320 	and.w	r3, r3, #32
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d008      	beq.n	80081ce <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	015a      	lsls	r2, r3, #5
 80081c0:	69bb      	ldr	r3, [r7, #24]
 80081c2:	4413      	add	r3, r2
 80081c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081c8:	461a      	mov	r2, r3
 80081ca:	2320      	movs	r3, #32
 80081cc:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	b2db      	uxtb	r3, r3
 80081d2:	4619      	mov	r1, r3
 80081d4:	6878      	ldr	r0, [r7, #4]
 80081d6:	f006 fbdb 	bl	800e990 <HAL_PCD_DataOutStageCallback>
 80081da:	e01d      	b.n	8008218 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d114      	bne.n	800820c <PCD_EP_OutXfrComplete_int+0x1b0>
 80081e2:	6879      	ldr	r1, [r7, #4]
 80081e4:	683a      	ldr	r2, [r7, #0]
 80081e6:	4613      	mov	r3, r2
 80081e8:	00db      	lsls	r3, r3, #3
 80081ea:	4413      	add	r3, r2
 80081ec:	009b      	lsls	r3, r3, #2
 80081ee:	440b      	add	r3, r1
 80081f0:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d108      	bne.n	800820c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	6818      	ldr	r0, [r3, #0]
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008204:	461a      	mov	r2, r3
 8008206:	2100      	movs	r1, #0
 8008208:	f004 f8fc 	bl	800c404 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800820c:	683b      	ldr	r3, [r7, #0]
 800820e:	b2db      	uxtb	r3, r3
 8008210:	4619      	mov	r1, r3
 8008212:	6878      	ldr	r0, [r7, #4]
 8008214:	f006 fbbc 	bl	800e990 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8008218:	2300      	movs	r3, #0
}
 800821a:	4618      	mov	r0, r3
 800821c:	3720      	adds	r7, #32
 800821e:	46bd      	mov	sp, r7
 8008220:	bd80      	pop	{r7, pc}
 8008222:	bf00      	nop
 8008224:	4f54300a 	.word	0x4f54300a
 8008228:	4f54310a 	.word	0x4f54310a

0800822c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800822c:	b580      	push	{r7, lr}
 800822e:	b086      	sub	sp, #24
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
 8008234:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800823c:	697b      	ldr	r3, [r7, #20]
 800823e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008240:	697b      	ldr	r3, [r7, #20]
 8008242:	333c      	adds	r3, #60	; 0x3c
 8008244:	3304      	adds	r3, #4
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	015a      	lsls	r2, r3, #5
 800824e:	693b      	ldr	r3, [r7, #16]
 8008250:	4413      	add	r3, r2
 8008252:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008256:	689b      	ldr	r3, [r3, #8]
 8008258:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	4a15      	ldr	r2, [pc, #84]	; (80082b4 <PCD_EP_OutSetupPacket_int+0x88>)
 800825e:	4293      	cmp	r3, r2
 8008260:	d90e      	bls.n	8008280 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008262:	68bb      	ldr	r3, [r7, #8]
 8008264:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008268:	2b00      	cmp	r3, #0
 800826a:	d009      	beq.n	8008280 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	015a      	lsls	r2, r3, #5
 8008270:	693b      	ldr	r3, [r7, #16]
 8008272:	4413      	add	r3, r2
 8008274:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008278:	461a      	mov	r2, r3
 800827a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800827e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8008280:	6878      	ldr	r0, [r7, #4]
 8008282:	f006 fb73 	bl	800e96c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	4a0a      	ldr	r2, [pc, #40]	; (80082b4 <PCD_EP_OutSetupPacket_int+0x88>)
 800828a:	4293      	cmp	r3, r2
 800828c:	d90c      	bls.n	80082a8 <PCD_EP_OutSetupPacket_int+0x7c>
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	691b      	ldr	r3, [r3, #16]
 8008292:	2b01      	cmp	r3, #1
 8008294:	d108      	bne.n	80082a8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	6818      	ldr	r0, [r3, #0]
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80082a0:	461a      	mov	r2, r3
 80082a2:	2101      	movs	r1, #1
 80082a4:	f004 f8ae 	bl	800c404 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80082a8:	2300      	movs	r3, #0
}
 80082aa:	4618      	mov	r0, r3
 80082ac:	3718      	adds	r7, #24
 80082ae:	46bd      	mov	sp, r7
 80082b0:	bd80      	pop	{r7, pc}
 80082b2:	bf00      	nop
 80082b4:	4f54300a 	.word	0x4f54300a

080082b8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80082b8:	b480      	push	{r7}
 80082ba:	b085      	sub	sp, #20
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
 80082c0:	460b      	mov	r3, r1
 80082c2:	70fb      	strb	r3, [r7, #3]
 80082c4:	4613      	mov	r3, r2
 80082c6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082ce:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80082d0:	78fb      	ldrb	r3, [r7, #3]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d107      	bne.n	80082e6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80082d6:	883b      	ldrh	r3, [r7, #0]
 80082d8:	0419      	lsls	r1, r3, #16
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	68ba      	ldr	r2, [r7, #8]
 80082e0:	430a      	orrs	r2, r1
 80082e2:	629a      	str	r2, [r3, #40]	; 0x28
 80082e4:	e028      	b.n	8008338 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082ec:	0c1b      	lsrs	r3, r3, #16
 80082ee:	68ba      	ldr	r2, [r7, #8]
 80082f0:	4413      	add	r3, r2
 80082f2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80082f4:	2300      	movs	r3, #0
 80082f6:	73fb      	strb	r3, [r7, #15]
 80082f8:	e00d      	b.n	8008316 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681a      	ldr	r2, [r3, #0]
 80082fe:	7bfb      	ldrb	r3, [r7, #15]
 8008300:	3340      	adds	r3, #64	; 0x40
 8008302:	009b      	lsls	r3, r3, #2
 8008304:	4413      	add	r3, r2
 8008306:	685b      	ldr	r3, [r3, #4]
 8008308:	0c1b      	lsrs	r3, r3, #16
 800830a:	68ba      	ldr	r2, [r7, #8]
 800830c:	4413      	add	r3, r2
 800830e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008310:	7bfb      	ldrb	r3, [r7, #15]
 8008312:	3301      	adds	r3, #1
 8008314:	73fb      	strb	r3, [r7, #15]
 8008316:	7bfa      	ldrb	r2, [r7, #15]
 8008318:	78fb      	ldrb	r3, [r7, #3]
 800831a:	3b01      	subs	r3, #1
 800831c:	429a      	cmp	r2, r3
 800831e:	d3ec      	bcc.n	80082fa <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8008320:	883b      	ldrh	r3, [r7, #0]
 8008322:	0418      	lsls	r0, r3, #16
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	6819      	ldr	r1, [r3, #0]
 8008328:	78fb      	ldrb	r3, [r7, #3]
 800832a:	3b01      	subs	r3, #1
 800832c:	68ba      	ldr	r2, [r7, #8]
 800832e:	4302      	orrs	r2, r0
 8008330:	3340      	adds	r3, #64	; 0x40
 8008332:	009b      	lsls	r3, r3, #2
 8008334:	440b      	add	r3, r1
 8008336:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8008338:	2300      	movs	r3, #0
}
 800833a:	4618      	mov	r0, r3
 800833c:	3714      	adds	r7, #20
 800833e:	46bd      	mov	sp, r7
 8008340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008344:	4770      	bx	lr

08008346 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8008346:	b480      	push	{r7}
 8008348:	b083      	sub	sp, #12
 800834a:	af00      	add	r7, sp, #0
 800834c:	6078      	str	r0, [r7, #4]
 800834e:	460b      	mov	r3, r1
 8008350:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	887a      	ldrh	r2, [r7, #2]
 8008358:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800835a:	2300      	movs	r3, #0
}
 800835c:	4618      	mov	r0, r3
 800835e:	370c      	adds	r7, #12
 8008360:	46bd      	mov	sp, r7
 8008362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008366:	4770      	bx	lr

08008368 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8008368:	b480      	push	{r7}
 800836a:	b083      	sub	sp, #12
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
 8008370:	460b      	mov	r3, r1
 8008372:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8008374:	bf00      	nop
 8008376:	370c      	adds	r7, #12
 8008378:	46bd      	mov	sp, r7
 800837a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837e:	4770      	bx	lr

08008380 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008380:	b580      	push	{r7, lr}
 8008382:	b086      	sub	sp, #24
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d101      	bne.n	8008392 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800838e:	2301      	movs	r3, #1
 8008390:	e267      	b.n	8008862 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	f003 0301 	and.w	r3, r3, #1
 800839a:	2b00      	cmp	r3, #0
 800839c:	d075      	beq.n	800848a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800839e:	4b88      	ldr	r3, [pc, #544]	; (80085c0 <HAL_RCC_OscConfig+0x240>)
 80083a0:	689b      	ldr	r3, [r3, #8]
 80083a2:	f003 030c 	and.w	r3, r3, #12
 80083a6:	2b04      	cmp	r3, #4
 80083a8:	d00c      	beq.n	80083c4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80083aa:	4b85      	ldr	r3, [pc, #532]	; (80085c0 <HAL_RCC_OscConfig+0x240>)
 80083ac:	689b      	ldr	r3, [r3, #8]
 80083ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80083b2:	2b08      	cmp	r3, #8
 80083b4:	d112      	bne.n	80083dc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80083b6:	4b82      	ldr	r3, [pc, #520]	; (80085c0 <HAL_RCC_OscConfig+0x240>)
 80083b8:	685b      	ldr	r3, [r3, #4]
 80083ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80083be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80083c2:	d10b      	bne.n	80083dc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80083c4:	4b7e      	ldr	r3, [pc, #504]	; (80085c0 <HAL_RCC_OscConfig+0x240>)
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d05b      	beq.n	8008488 <HAL_RCC_OscConfig+0x108>
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	685b      	ldr	r3, [r3, #4]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d157      	bne.n	8008488 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80083d8:	2301      	movs	r3, #1
 80083da:	e242      	b.n	8008862 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	685b      	ldr	r3, [r3, #4]
 80083e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80083e4:	d106      	bne.n	80083f4 <HAL_RCC_OscConfig+0x74>
 80083e6:	4b76      	ldr	r3, [pc, #472]	; (80085c0 <HAL_RCC_OscConfig+0x240>)
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	4a75      	ldr	r2, [pc, #468]	; (80085c0 <HAL_RCC_OscConfig+0x240>)
 80083ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80083f0:	6013      	str	r3, [r2, #0]
 80083f2:	e01d      	b.n	8008430 <HAL_RCC_OscConfig+0xb0>
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	685b      	ldr	r3, [r3, #4]
 80083f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80083fc:	d10c      	bne.n	8008418 <HAL_RCC_OscConfig+0x98>
 80083fe:	4b70      	ldr	r3, [pc, #448]	; (80085c0 <HAL_RCC_OscConfig+0x240>)
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	4a6f      	ldr	r2, [pc, #444]	; (80085c0 <HAL_RCC_OscConfig+0x240>)
 8008404:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008408:	6013      	str	r3, [r2, #0]
 800840a:	4b6d      	ldr	r3, [pc, #436]	; (80085c0 <HAL_RCC_OscConfig+0x240>)
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	4a6c      	ldr	r2, [pc, #432]	; (80085c0 <HAL_RCC_OscConfig+0x240>)
 8008410:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008414:	6013      	str	r3, [r2, #0]
 8008416:	e00b      	b.n	8008430 <HAL_RCC_OscConfig+0xb0>
 8008418:	4b69      	ldr	r3, [pc, #420]	; (80085c0 <HAL_RCC_OscConfig+0x240>)
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	4a68      	ldr	r2, [pc, #416]	; (80085c0 <HAL_RCC_OscConfig+0x240>)
 800841e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008422:	6013      	str	r3, [r2, #0]
 8008424:	4b66      	ldr	r3, [pc, #408]	; (80085c0 <HAL_RCC_OscConfig+0x240>)
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	4a65      	ldr	r2, [pc, #404]	; (80085c0 <HAL_RCC_OscConfig+0x240>)
 800842a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800842e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	685b      	ldr	r3, [r3, #4]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d013      	beq.n	8008460 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008438:	f7fb fa2e 	bl	8003898 <HAL_GetTick>
 800843c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800843e:	e008      	b.n	8008452 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008440:	f7fb fa2a 	bl	8003898 <HAL_GetTick>
 8008444:	4602      	mov	r2, r0
 8008446:	693b      	ldr	r3, [r7, #16]
 8008448:	1ad3      	subs	r3, r2, r3
 800844a:	2b64      	cmp	r3, #100	; 0x64
 800844c:	d901      	bls.n	8008452 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800844e:	2303      	movs	r3, #3
 8008450:	e207      	b.n	8008862 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008452:	4b5b      	ldr	r3, [pc, #364]	; (80085c0 <HAL_RCC_OscConfig+0x240>)
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800845a:	2b00      	cmp	r3, #0
 800845c:	d0f0      	beq.n	8008440 <HAL_RCC_OscConfig+0xc0>
 800845e:	e014      	b.n	800848a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008460:	f7fb fa1a 	bl	8003898 <HAL_GetTick>
 8008464:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008466:	e008      	b.n	800847a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008468:	f7fb fa16 	bl	8003898 <HAL_GetTick>
 800846c:	4602      	mov	r2, r0
 800846e:	693b      	ldr	r3, [r7, #16]
 8008470:	1ad3      	subs	r3, r2, r3
 8008472:	2b64      	cmp	r3, #100	; 0x64
 8008474:	d901      	bls.n	800847a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008476:	2303      	movs	r3, #3
 8008478:	e1f3      	b.n	8008862 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800847a:	4b51      	ldr	r3, [pc, #324]	; (80085c0 <HAL_RCC_OscConfig+0x240>)
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008482:	2b00      	cmp	r3, #0
 8008484:	d1f0      	bne.n	8008468 <HAL_RCC_OscConfig+0xe8>
 8008486:	e000      	b.n	800848a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008488:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	f003 0302 	and.w	r3, r3, #2
 8008492:	2b00      	cmp	r3, #0
 8008494:	d063      	beq.n	800855e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008496:	4b4a      	ldr	r3, [pc, #296]	; (80085c0 <HAL_RCC_OscConfig+0x240>)
 8008498:	689b      	ldr	r3, [r3, #8]
 800849a:	f003 030c 	and.w	r3, r3, #12
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d00b      	beq.n	80084ba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80084a2:	4b47      	ldr	r3, [pc, #284]	; (80085c0 <HAL_RCC_OscConfig+0x240>)
 80084a4:	689b      	ldr	r3, [r3, #8]
 80084a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80084aa:	2b08      	cmp	r3, #8
 80084ac:	d11c      	bne.n	80084e8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80084ae:	4b44      	ldr	r3, [pc, #272]	; (80085c0 <HAL_RCC_OscConfig+0x240>)
 80084b0:	685b      	ldr	r3, [r3, #4]
 80084b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d116      	bne.n	80084e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80084ba:	4b41      	ldr	r3, [pc, #260]	; (80085c0 <HAL_RCC_OscConfig+0x240>)
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	f003 0302 	and.w	r3, r3, #2
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d005      	beq.n	80084d2 <HAL_RCC_OscConfig+0x152>
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	68db      	ldr	r3, [r3, #12]
 80084ca:	2b01      	cmp	r3, #1
 80084cc:	d001      	beq.n	80084d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80084ce:	2301      	movs	r3, #1
 80084d0:	e1c7      	b.n	8008862 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80084d2:	4b3b      	ldr	r3, [pc, #236]	; (80085c0 <HAL_RCC_OscConfig+0x240>)
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	691b      	ldr	r3, [r3, #16]
 80084de:	00db      	lsls	r3, r3, #3
 80084e0:	4937      	ldr	r1, [pc, #220]	; (80085c0 <HAL_RCC_OscConfig+0x240>)
 80084e2:	4313      	orrs	r3, r2
 80084e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80084e6:	e03a      	b.n	800855e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	68db      	ldr	r3, [r3, #12]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d020      	beq.n	8008532 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80084f0:	4b34      	ldr	r3, [pc, #208]	; (80085c4 <HAL_RCC_OscConfig+0x244>)
 80084f2:	2201      	movs	r2, #1
 80084f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084f6:	f7fb f9cf 	bl	8003898 <HAL_GetTick>
 80084fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80084fc:	e008      	b.n	8008510 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80084fe:	f7fb f9cb 	bl	8003898 <HAL_GetTick>
 8008502:	4602      	mov	r2, r0
 8008504:	693b      	ldr	r3, [r7, #16]
 8008506:	1ad3      	subs	r3, r2, r3
 8008508:	2b02      	cmp	r3, #2
 800850a:	d901      	bls.n	8008510 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800850c:	2303      	movs	r3, #3
 800850e:	e1a8      	b.n	8008862 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008510:	4b2b      	ldr	r3, [pc, #172]	; (80085c0 <HAL_RCC_OscConfig+0x240>)
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	f003 0302 	and.w	r3, r3, #2
 8008518:	2b00      	cmp	r3, #0
 800851a:	d0f0      	beq.n	80084fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800851c:	4b28      	ldr	r3, [pc, #160]	; (80085c0 <HAL_RCC_OscConfig+0x240>)
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	691b      	ldr	r3, [r3, #16]
 8008528:	00db      	lsls	r3, r3, #3
 800852a:	4925      	ldr	r1, [pc, #148]	; (80085c0 <HAL_RCC_OscConfig+0x240>)
 800852c:	4313      	orrs	r3, r2
 800852e:	600b      	str	r3, [r1, #0]
 8008530:	e015      	b.n	800855e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008532:	4b24      	ldr	r3, [pc, #144]	; (80085c4 <HAL_RCC_OscConfig+0x244>)
 8008534:	2200      	movs	r2, #0
 8008536:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008538:	f7fb f9ae 	bl	8003898 <HAL_GetTick>
 800853c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800853e:	e008      	b.n	8008552 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008540:	f7fb f9aa 	bl	8003898 <HAL_GetTick>
 8008544:	4602      	mov	r2, r0
 8008546:	693b      	ldr	r3, [r7, #16]
 8008548:	1ad3      	subs	r3, r2, r3
 800854a:	2b02      	cmp	r3, #2
 800854c:	d901      	bls.n	8008552 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800854e:	2303      	movs	r3, #3
 8008550:	e187      	b.n	8008862 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008552:	4b1b      	ldr	r3, [pc, #108]	; (80085c0 <HAL_RCC_OscConfig+0x240>)
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	f003 0302 	and.w	r3, r3, #2
 800855a:	2b00      	cmp	r3, #0
 800855c:	d1f0      	bne.n	8008540 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	f003 0308 	and.w	r3, r3, #8
 8008566:	2b00      	cmp	r3, #0
 8008568:	d036      	beq.n	80085d8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	695b      	ldr	r3, [r3, #20]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d016      	beq.n	80085a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008572:	4b15      	ldr	r3, [pc, #84]	; (80085c8 <HAL_RCC_OscConfig+0x248>)
 8008574:	2201      	movs	r2, #1
 8008576:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008578:	f7fb f98e 	bl	8003898 <HAL_GetTick>
 800857c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800857e:	e008      	b.n	8008592 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008580:	f7fb f98a 	bl	8003898 <HAL_GetTick>
 8008584:	4602      	mov	r2, r0
 8008586:	693b      	ldr	r3, [r7, #16]
 8008588:	1ad3      	subs	r3, r2, r3
 800858a:	2b02      	cmp	r3, #2
 800858c:	d901      	bls.n	8008592 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800858e:	2303      	movs	r3, #3
 8008590:	e167      	b.n	8008862 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008592:	4b0b      	ldr	r3, [pc, #44]	; (80085c0 <HAL_RCC_OscConfig+0x240>)
 8008594:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008596:	f003 0302 	and.w	r3, r3, #2
 800859a:	2b00      	cmp	r3, #0
 800859c:	d0f0      	beq.n	8008580 <HAL_RCC_OscConfig+0x200>
 800859e:	e01b      	b.n	80085d8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80085a0:	4b09      	ldr	r3, [pc, #36]	; (80085c8 <HAL_RCC_OscConfig+0x248>)
 80085a2:	2200      	movs	r2, #0
 80085a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80085a6:	f7fb f977 	bl	8003898 <HAL_GetTick>
 80085aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80085ac:	e00e      	b.n	80085cc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80085ae:	f7fb f973 	bl	8003898 <HAL_GetTick>
 80085b2:	4602      	mov	r2, r0
 80085b4:	693b      	ldr	r3, [r7, #16]
 80085b6:	1ad3      	subs	r3, r2, r3
 80085b8:	2b02      	cmp	r3, #2
 80085ba:	d907      	bls.n	80085cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80085bc:	2303      	movs	r3, #3
 80085be:	e150      	b.n	8008862 <HAL_RCC_OscConfig+0x4e2>
 80085c0:	40023800 	.word	0x40023800
 80085c4:	42470000 	.word	0x42470000
 80085c8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80085cc:	4b88      	ldr	r3, [pc, #544]	; (80087f0 <HAL_RCC_OscConfig+0x470>)
 80085ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80085d0:	f003 0302 	and.w	r3, r3, #2
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d1ea      	bne.n	80085ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	f003 0304 	and.w	r3, r3, #4
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	f000 8097 	beq.w	8008714 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80085e6:	2300      	movs	r3, #0
 80085e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80085ea:	4b81      	ldr	r3, [pc, #516]	; (80087f0 <HAL_RCC_OscConfig+0x470>)
 80085ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d10f      	bne.n	8008616 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80085f6:	2300      	movs	r3, #0
 80085f8:	60bb      	str	r3, [r7, #8]
 80085fa:	4b7d      	ldr	r3, [pc, #500]	; (80087f0 <HAL_RCC_OscConfig+0x470>)
 80085fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085fe:	4a7c      	ldr	r2, [pc, #496]	; (80087f0 <HAL_RCC_OscConfig+0x470>)
 8008600:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008604:	6413      	str	r3, [r2, #64]	; 0x40
 8008606:	4b7a      	ldr	r3, [pc, #488]	; (80087f0 <HAL_RCC_OscConfig+0x470>)
 8008608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800860a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800860e:	60bb      	str	r3, [r7, #8]
 8008610:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008612:	2301      	movs	r3, #1
 8008614:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008616:	4b77      	ldr	r3, [pc, #476]	; (80087f4 <HAL_RCC_OscConfig+0x474>)
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800861e:	2b00      	cmp	r3, #0
 8008620:	d118      	bne.n	8008654 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008622:	4b74      	ldr	r3, [pc, #464]	; (80087f4 <HAL_RCC_OscConfig+0x474>)
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	4a73      	ldr	r2, [pc, #460]	; (80087f4 <HAL_RCC_OscConfig+0x474>)
 8008628:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800862c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800862e:	f7fb f933 	bl	8003898 <HAL_GetTick>
 8008632:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008634:	e008      	b.n	8008648 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008636:	f7fb f92f 	bl	8003898 <HAL_GetTick>
 800863a:	4602      	mov	r2, r0
 800863c:	693b      	ldr	r3, [r7, #16]
 800863e:	1ad3      	subs	r3, r2, r3
 8008640:	2b02      	cmp	r3, #2
 8008642:	d901      	bls.n	8008648 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008644:	2303      	movs	r3, #3
 8008646:	e10c      	b.n	8008862 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008648:	4b6a      	ldr	r3, [pc, #424]	; (80087f4 <HAL_RCC_OscConfig+0x474>)
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008650:	2b00      	cmp	r3, #0
 8008652:	d0f0      	beq.n	8008636 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	689b      	ldr	r3, [r3, #8]
 8008658:	2b01      	cmp	r3, #1
 800865a:	d106      	bne.n	800866a <HAL_RCC_OscConfig+0x2ea>
 800865c:	4b64      	ldr	r3, [pc, #400]	; (80087f0 <HAL_RCC_OscConfig+0x470>)
 800865e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008660:	4a63      	ldr	r2, [pc, #396]	; (80087f0 <HAL_RCC_OscConfig+0x470>)
 8008662:	f043 0301 	orr.w	r3, r3, #1
 8008666:	6713      	str	r3, [r2, #112]	; 0x70
 8008668:	e01c      	b.n	80086a4 <HAL_RCC_OscConfig+0x324>
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	689b      	ldr	r3, [r3, #8]
 800866e:	2b05      	cmp	r3, #5
 8008670:	d10c      	bne.n	800868c <HAL_RCC_OscConfig+0x30c>
 8008672:	4b5f      	ldr	r3, [pc, #380]	; (80087f0 <HAL_RCC_OscConfig+0x470>)
 8008674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008676:	4a5e      	ldr	r2, [pc, #376]	; (80087f0 <HAL_RCC_OscConfig+0x470>)
 8008678:	f043 0304 	orr.w	r3, r3, #4
 800867c:	6713      	str	r3, [r2, #112]	; 0x70
 800867e:	4b5c      	ldr	r3, [pc, #368]	; (80087f0 <HAL_RCC_OscConfig+0x470>)
 8008680:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008682:	4a5b      	ldr	r2, [pc, #364]	; (80087f0 <HAL_RCC_OscConfig+0x470>)
 8008684:	f043 0301 	orr.w	r3, r3, #1
 8008688:	6713      	str	r3, [r2, #112]	; 0x70
 800868a:	e00b      	b.n	80086a4 <HAL_RCC_OscConfig+0x324>
 800868c:	4b58      	ldr	r3, [pc, #352]	; (80087f0 <HAL_RCC_OscConfig+0x470>)
 800868e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008690:	4a57      	ldr	r2, [pc, #348]	; (80087f0 <HAL_RCC_OscConfig+0x470>)
 8008692:	f023 0301 	bic.w	r3, r3, #1
 8008696:	6713      	str	r3, [r2, #112]	; 0x70
 8008698:	4b55      	ldr	r3, [pc, #340]	; (80087f0 <HAL_RCC_OscConfig+0x470>)
 800869a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800869c:	4a54      	ldr	r2, [pc, #336]	; (80087f0 <HAL_RCC_OscConfig+0x470>)
 800869e:	f023 0304 	bic.w	r3, r3, #4
 80086a2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	689b      	ldr	r3, [r3, #8]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d015      	beq.n	80086d8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80086ac:	f7fb f8f4 	bl	8003898 <HAL_GetTick>
 80086b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80086b2:	e00a      	b.n	80086ca <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80086b4:	f7fb f8f0 	bl	8003898 <HAL_GetTick>
 80086b8:	4602      	mov	r2, r0
 80086ba:	693b      	ldr	r3, [r7, #16]
 80086bc:	1ad3      	subs	r3, r2, r3
 80086be:	f241 3288 	movw	r2, #5000	; 0x1388
 80086c2:	4293      	cmp	r3, r2
 80086c4:	d901      	bls.n	80086ca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80086c6:	2303      	movs	r3, #3
 80086c8:	e0cb      	b.n	8008862 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80086ca:	4b49      	ldr	r3, [pc, #292]	; (80087f0 <HAL_RCC_OscConfig+0x470>)
 80086cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086ce:	f003 0302 	and.w	r3, r3, #2
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d0ee      	beq.n	80086b4 <HAL_RCC_OscConfig+0x334>
 80086d6:	e014      	b.n	8008702 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80086d8:	f7fb f8de 	bl	8003898 <HAL_GetTick>
 80086dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80086de:	e00a      	b.n	80086f6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80086e0:	f7fb f8da 	bl	8003898 <HAL_GetTick>
 80086e4:	4602      	mov	r2, r0
 80086e6:	693b      	ldr	r3, [r7, #16]
 80086e8:	1ad3      	subs	r3, r2, r3
 80086ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80086ee:	4293      	cmp	r3, r2
 80086f0:	d901      	bls.n	80086f6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80086f2:	2303      	movs	r3, #3
 80086f4:	e0b5      	b.n	8008862 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80086f6:	4b3e      	ldr	r3, [pc, #248]	; (80087f0 <HAL_RCC_OscConfig+0x470>)
 80086f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086fa:	f003 0302 	and.w	r3, r3, #2
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d1ee      	bne.n	80086e0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008702:	7dfb      	ldrb	r3, [r7, #23]
 8008704:	2b01      	cmp	r3, #1
 8008706:	d105      	bne.n	8008714 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008708:	4b39      	ldr	r3, [pc, #228]	; (80087f0 <HAL_RCC_OscConfig+0x470>)
 800870a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800870c:	4a38      	ldr	r2, [pc, #224]	; (80087f0 <HAL_RCC_OscConfig+0x470>)
 800870e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008712:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	699b      	ldr	r3, [r3, #24]
 8008718:	2b00      	cmp	r3, #0
 800871a:	f000 80a1 	beq.w	8008860 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800871e:	4b34      	ldr	r3, [pc, #208]	; (80087f0 <HAL_RCC_OscConfig+0x470>)
 8008720:	689b      	ldr	r3, [r3, #8]
 8008722:	f003 030c 	and.w	r3, r3, #12
 8008726:	2b08      	cmp	r3, #8
 8008728:	d05c      	beq.n	80087e4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	699b      	ldr	r3, [r3, #24]
 800872e:	2b02      	cmp	r3, #2
 8008730:	d141      	bne.n	80087b6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008732:	4b31      	ldr	r3, [pc, #196]	; (80087f8 <HAL_RCC_OscConfig+0x478>)
 8008734:	2200      	movs	r2, #0
 8008736:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008738:	f7fb f8ae 	bl	8003898 <HAL_GetTick>
 800873c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800873e:	e008      	b.n	8008752 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008740:	f7fb f8aa 	bl	8003898 <HAL_GetTick>
 8008744:	4602      	mov	r2, r0
 8008746:	693b      	ldr	r3, [r7, #16]
 8008748:	1ad3      	subs	r3, r2, r3
 800874a:	2b02      	cmp	r3, #2
 800874c:	d901      	bls.n	8008752 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800874e:	2303      	movs	r3, #3
 8008750:	e087      	b.n	8008862 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008752:	4b27      	ldr	r3, [pc, #156]	; (80087f0 <HAL_RCC_OscConfig+0x470>)
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800875a:	2b00      	cmp	r3, #0
 800875c:	d1f0      	bne.n	8008740 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	69da      	ldr	r2, [r3, #28]
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	6a1b      	ldr	r3, [r3, #32]
 8008766:	431a      	orrs	r2, r3
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800876c:	019b      	lsls	r3, r3, #6
 800876e:	431a      	orrs	r2, r3
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008774:	085b      	lsrs	r3, r3, #1
 8008776:	3b01      	subs	r3, #1
 8008778:	041b      	lsls	r3, r3, #16
 800877a:	431a      	orrs	r2, r3
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008780:	061b      	lsls	r3, r3, #24
 8008782:	491b      	ldr	r1, [pc, #108]	; (80087f0 <HAL_RCC_OscConfig+0x470>)
 8008784:	4313      	orrs	r3, r2
 8008786:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008788:	4b1b      	ldr	r3, [pc, #108]	; (80087f8 <HAL_RCC_OscConfig+0x478>)
 800878a:	2201      	movs	r2, #1
 800878c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800878e:	f7fb f883 	bl	8003898 <HAL_GetTick>
 8008792:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008794:	e008      	b.n	80087a8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008796:	f7fb f87f 	bl	8003898 <HAL_GetTick>
 800879a:	4602      	mov	r2, r0
 800879c:	693b      	ldr	r3, [r7, #16]
 800879e:	1ad3      	subs	r3, r2, r3
 80087a0:	2b02      	cmp	r3, #2
 80087a2:	d901      	bls.n	80087a8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80087a4:	2303      	movs	r3, #3
 80087a6:	e05c      	b.n	8008862 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80087a8:	4b11      	ldr	r3, [pc, #68]	; (80087f0 <HAL_RCC_OscConfig+0x470>)
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d0f0      	beq.n	8008796 <HAL_RCC_OscConfig+0x416>
 80087b4:	e054      	b.n	8008860 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80087b6:	4b10      	ldr	r3, [pc, #64]	; (80087f8 <HAL_RCC_OscConfig+0x478>)
 80087b8:	2200      	movs	r2, #0
 80087ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80087bc:	f7fb f86c 	bl	8003898 <HAL_GetTick>
 80087c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80087c2:	e008      	b.n	80087d6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80087c4:	f7fb f868 	bl	8003898 <HAL_GetTick>
 80087c8:	4602      	mov	r2, r0
 80087ca:	693b      	ldr	r3, [r7, #16]
 80087cc:	1ad3      	subs	r3, r2, r3
 80087ce:	2b02      	cmp	r3, #2
 80087d0:	d901      	bls.n	80087d6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80087d2:	2303      	movs	r3, #3
 80087d4:	e045      	b.n	8008862 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80087d6:	4b06      	ldr	r3, [pc, #24]	; (80087f0 <HAL_RCC_OscConfig+0x470>)
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d1f0      	bne.n	80087c4 <HAL_RCC_OscConfig+0x444>
 80087e2:	e03d      	b.n	8008860 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	699b      	ldr	r3, [r3, #24]
 80087e8:	2b01      	cmp	r3, #1
 80087ea:	d107      	bne.n	80087fc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80087ec:	2301      	movs	r3, #1
 80087ee:	e038      	b.n	8008862 <HAL_RCC_OscConfig+0x4e2>
 80087f0:	40023800 	.word	0x40023800
 80087f4:	40007000 	.word	0x40007000
 80087f8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80087fc:	4b1b      	ldr	r3, [pc, #108]	; (800886c <HAL_RCC_OscConfig+0x4ec>)
 80087fe:	685b      	ldr	r3, [r3, #4]
 8008800:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	699b      	ldr	r3, [r3, #24]
 8008806:	2b01      	cmp	r3, #1
 8008808:	d028      	beq.n	800885c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008814:	429a      	cmp	r2, r3
 8008816:	d121      	bne.n	800885c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008822:	429a      	cmp	r2, r3
 8008824:	d11a      	bne.n	800885c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008826:	68fa      	ldr	r2, [r7, #12]
 8008828:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800882c:	4013      	ands	r3, r2
 800882e:	687a      	ldr	r2, [r7, #4]
 8008830:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008832:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008834:	4293      	cmp	r3, r2
 8008836:	d111      	bne.n	800885c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008842:	085b      	lsrs	r3, r3, #1
 8008844:	3b01      	subs	r3, #1
 8008846:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008848:	429a      	cmp	r2, r3
 800884a:	d107      	bne.n	800885c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008856:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008858:	429a      	cmp	r2, r3
 800885a:	d001      	beq.n	8008860 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800885c:	2301      	movs	r3, #1
 800885e:	e000      	b.n	8008862 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008860:	2300      	movs	r3, #0
}
 8008862:	4618      	mov	r0, r3
 8008864:	3718      	adds	r7, #24
 8008866:	46bd      	mov	sp, r7
 8008868:	bd80      	pop	{r7, pc}
 800886a:	bf00      	nop
 800886c:	40023800 	.word	0x40023800

08008870 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008870:	b580      	push	{r7, lr}
 8008872:	b084      	sub	sp, #16
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
 8008878:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	2b00      	cmp	r3, #0
 800887e:	d101      	bne.n	8008884 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008880:	2301      	movs	r3, #1
 8008882:	e0cc      	b.n	8008a1e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008884:	4b68      	ldr	r3, [pc, #416]	; (8008a28 <HAL_RCC_ClockConfig+0x1b8>)
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	f003 0307 	and.w	r3, r3, #7
 800888c:	683a      	ldr	r2, [r7, #0]
 800888e:	429a      	cmp	r2, r3
 8008890:	d90c      	bls.n	80088ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008892:	4b65      	ldr	r3, [pc, #404]	; (8008a28 <HAL_RCC_ClockConfig+0x1b8>)
 8008894:	683a      	ldr	r2, [r7, #0]
 8008896:	b2d2      	uxtb	r2, r2
 8008898:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800889a:	4b63      	ldr	r3, [pc, #396]	; (8008a28 <HAL_RCC_ClockConfig+0x1b8>)
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	f003 0307 	and.w	r3, r3, #7
 80088a2:	683a      	ldr	r2, [r7, #0]
 80088a4:	429a      	cmp	r2, r3
 80088a6:	d001      	beq.n	80088ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80088a8:	2301      	movs	r3, #1
 80088aa:	e0b8      	b.n	8008a1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	f003 0302 	and.w	r3, r3, #2
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d020      	beq.n	80088fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	f003 0304 	and.w	r3, r3, #4
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d005      	beq.n	80088d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80088c4:	4b59      	ldr	r3, [pc, #356]	; (8008a2c <HAL_RCC_ClockConfig+0x1bc>)
 80088c6:	689b      	ldr	r3, [r3, #8]
 80088c8:	4a58      	ldr	r2, [pc, #352]	; (8008a2c <HAL_RCC_ClockConfig+0x1bc>)
 80088ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80088ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	f003 0308 	and.w	r3, r3, #8
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d005      	beq.n	80088e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80088dc:	4b53      	ldr	r3, [pc, #332]	; (8008a2c <HAL_RCC_ClockConfig+0x1bc>)
 80088de:	689b      	ldr	r3, [r3, #8]
 80088e0:	4a52      	ldr	r2, [pc, #328]	; (8008a2c <HAL_RCC_ClockConfig+0x1bc>)
 80088e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80088e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80088e8:	4b50      	ldr	r3, [pc, #320]	; (8008a2c <HAL_RCC_ClockConfig+0x1bc>)
 80088ea:	689b      	ldr	r3, [r3, #8]
 80088ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	689b      	ldr	r3, [r3, #8]
 80088f4:	494d      	ldr	r1, [pc, #308]	; (8008a2c <HAL_RCC_ClockConfig+0x1bc>)
 80088f6:	4313      	orrs	r3, r2
 80088f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	f003 0301 	and.w	r3, r3, #1
 8008902:	2b00      	cmp	r3, #0
 8008904:	d044      	beq.n	8008990 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	685b      	ldr	r3, [r3, #4]
 800890a:	2b01      	cmp	r3, #1
 800890c:	d107      	bne.n	800891e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800890e:	4b47      	ldr	r3, [pc, #284]	; (8008a2c <HAL_RCC_ClockConfig+0x1bc>)
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008916:	2b00      	cmp	r3, #0
 8008918:	d119      	bne.n	800894e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800891a:	2301      	movs	r3, #1
 800891c:	e07f      	b.n	8008a1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	685b      	ldr	r3, [r3, #4]
 8008922:	2b02      	cmp	r3, #2
 8008924:	d003      	beq.n	800892e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800892a:	2b03      	cmp	r3, #3
 800892c:	d107      	bne.n	800893e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800892e:	4b3f      	ldr	r3, [pc, #252]	; (8008a2c <HAL_RCC_ClockConfig+0x1bc>)
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008936:	2b00      	cmp	r3, #0
 8008938:	d109      	bne.n	800894e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800893a:	2301      	movs	r3, #1
 800893c:	e06f      	b.n	8008a1e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800893e:	4b3b      	ldr	r3, [pc, #236]	; (8008a2c <HAL_RCC_ClockConfig+0x1bc>)
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	f003 0302 	and.w	r3, r3, #2
 8008946:	2b00      	cmp	r3, #0
 8008948:	d101      	bne.n	800894e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800894a:	2301      	movs	r3, #1
 800894c:	e067      	b.n	8008a1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800894e:	4b37      	ldr	r3, [pc, #220]	; (8008a2c <HAL_RCC_ClockConfig+0x1bc>)
 8008950:	689b      	ldr	r3, [r3, #8]
 8008952:	f023 0203 	bic.w	r2, r3, #3
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	685b      	ldr	r3, [r3, #4]
 800895a:	4934      	ldr	r1, [pc, #208]	; (8008a2c <HAL_RCC_ClockConfig+0x1bc>)
 800895c:	4313      	orrs	r3, r2
 800895e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008960:	f7fa ff9a 	bl	8003898 <HAL_GetTick>
 8008964:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008966:	e00a      	b.n	800897e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008968:	f7fa ff96 	bl	8003898 <HAL_GetTick>
 800896c:	4602      	mov	r2, r0
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	1ad3      	subs	r3, r2, r3
 8008972:	f241 3288 	movw	r2, #5000	; 0x1388
 8008976:	4293      	cmp	r3, r2
 8008978:	d901      	bls.n	800897e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800897a:	2303      	movs	r3, #3
 800897c:	e04f      	b.n	8008a1e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800897e:	4b2b      	ldr	r3, [pc, #172]	; (8008a2c <HAL_RCC_ClockConfig+0x1bc>)
 8008980:	689b      	ldr	r3, [r3, #8]
 8008982:	f003 020c 	and.w	r2, r3, #12
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	685b      	ldr	r3, [r3, #4]
 800898a:	009b      	lsls	r3, r3, #2
 800898c:	429a      	cmp	r2, r3
 800898e:	d1eb      	bne.n	8008968 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008990:	4b25      	ldr	r3, [pc, #148]	; (8008a28 <HAL_RCC_ClockConfig+0x1b8>)
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	f003 0307 	and.w	r3, r3, #7
 8008998:	683a      	ldr	r2, [r7, #0]
 800899a:	429a      	cmp	r2, r3
 800899c:	d20c      	bcs.n	80089b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800899e:	4b22      	ldr	r3, [pc, #136]	; (8008a28 <HAL_RCC_ClockConfig+0x1b8>)
 80089a0:	683a      	ldr	r2, [r7, #0]
 80089a2:	b2d2      	uxtb	r2, r2
 80089a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80089a6:	4b20      	ldr	r3, [pc, #128]	; (8008a28 <HAL_RCC_ClockConfig+0x1b8>)
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	f003 0307 	and.w	r3, r3, #7
 80089ae:	683a      	ldr	r2, [r7, #0]
 80089b0:	429a      	cmp	r2, r3
 80089b2:	d001      	beq.n	80089b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80089b4:	2301      	movs	r3, #1
 80089b6:	e032      	b.n	8008a1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	f003 0304 	and.w	r3, r3, #4
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d008      	beq.n	80089d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80089c4:	4b19      	ldr	r3, [pc, #100]	; (8008a2c <HAL_RCC_ClockConfig+0x1bc>)
 80089c6:	689b      	ldr	r3, [r3, #8]
 80089c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	68db      	ldr	r3, [r3, #12]
 80089d0:	4916      	ldr	r1, [pc, #88]	; (8008a2c <HAL_RCC_ClockConfig+0x1bc>)
 80089d2:	4313      	orrs	r3, r2
 80089d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	f003 0308 	and.w	r3, r3, #8
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d009      	beq.n	80089f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80089e2:	4b12      	ldr	r3, [pc, #72]	; (8008a2c <HAL_RCC_ClockConfig+0x1bc>)
 80089e4:	689b      	ldr	r3, [r3, #8]
 80089e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	691b      	ldr	r3, [r3, #16]
 80089ee:	00db      	lsls	r3, r3, #3
 80089f0:	490e      	ldr	r1, [pc, #56]	; (8008a2c <HAL_RCC_ClockConfig+0x1bc>)
 80089f2:	4313      	orrs	r3, r2
 80089f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80089f6:	f000 f821 	bl	8008a3c <HAL_RCC_GetSysClockFreq>
 80089fa:	4602      	mov	r2, r0
 80089fc:	4b0b      	ldr	r3, [pc, #44]	; (8008a2c <HAL_RCC_ClockConfig+0x1bc>)
 80089fe:	689b      	ldr	r3, [r3, #8]
 8008a00:	091b      	lsrs	r3, r3, #4
 8008a02:	f003 030f 	and.w	r3, r3, #15
 8008a06:	490a      	ldr	r1, [pc, #40]	; (8008a30 <HAL_RCC_ClockConfig+0x1c0>)
 8008a08:	5ccb      	ldrb	r3, [r1, r3]
 8008a0a:	fa22 f303 	lsr.w	r3, r2, r3
 8008a0e:	4a09      	ldr	r2, [pc, #36]	; (8008a34 <HAL_RCC_ClockConfig+0x1c4>)
 8008a10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008a12:	4b09      	ldr	r3, [pc, #36]	; (8008a38 <HAL_RCC_ClockConfig+0x1c8>)
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	4618      	mov	r0, r3
 8008a18:	f7fa fefa 	bl	8003810 <HAL_InitTick>

  return HAL_OK;
 8008a1c:	2300      	movs	r3, #0
}
 8008a1e:	4618      	mov	r0, r3
 8008a20:	3710      	adds	r7, #16
 8008a22:	46bd      	mov	sp, r7
 8008a24:	bd80      	pop	{r7, pc}
 8008a26:	bf00      	nop
 8008a28:	40023c00 	.word	0x40023c00
 8008a2c:	40023800 	.word	0x40023800
 8008a30:	08012f50 	.word	0x08012f50
 8008a34:	20000008 	.word	0x20000008
 8008a38:	2000000c 	.word	0x2000000c

08008a3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008a3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008a40:	b090      	sub	sp, #64	; 0x40
 8008a42:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008a44:	2300      	movs	r3, #0
 8008a46:	637b      	str	r3, [r7, #52]	; 0x34
 8008a48:	2300      	movs	r3, #0
 8008a4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8008a50:	2300      	movs	r3, #0
 8008a52:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008a54:	4b59      	ldr	r3, [pc, #356]	; (8008bbc <HAL_RCC_GetSysClockFreq+0x180>)
 8008a56:	689b      	ldr	r3, [r3, #8]
 8008a58:	f003 030c 	and.w	r3, r3, #12
 8008a5c:	2b08      	cmp	r3, #8
 8008a5e:	d00d      	beq.n	8008a7c <HAL_RCC_GetSysClockFreq+0x40>
 8008a60:	2b08      	cmp	r3, #8
 8008a62:	f200 80a1 	bhi.w	8008ba8 <HAL_RCC_GetSysClockFreq+0x16c>
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d002      	beq.n	8008a70 <HAL_RCC_GetSysClockFreq+0x34>
 8008a6a:	2b04      	cmp	r3, #4
 8008a6c:	d003      	beq.n	8008a76 <HAL_RCC_GetSysClockFreq+0x3a>
 8008a6e:	e09b      	b.n	8008ba8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008a70:	4b53      	ldr	r3, [pc, #332]	; (8008bc0 <HAL_RCC_GetSysClockFreq+0x184>)
 8008a72:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8008a74:	e09b      	b.n	8008bae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008a76:	4b53      	ldr	r3, [pc, #332]	; (8008bc4 <HAL_RCC_GetSysClockFreq+0x188>)
 8008a78:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8008a7a:	e098      	b.n	8008bae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008a7c:	4b4f      	ldr	r3, [pc, #316]	; (8008bbc <HAL_RCC_GetSysClockFreq+0x180>)
 8008a7e:	685b      	ldr	r3, [r3, #4]
 8008a80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008a84:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008a86:	4b4d      	ldr	r3, [pc, #308]	; (8008bbc <HAL_RCC_GetSysClockFreq+0x180>)
 8008a88:	685b      	ldr	r3, [r3, #4]
 8008a8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d028      	beq.n	8008ae4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008a92:	4b4a      	ldr	r3, [pc, #296]	; (8008bbc <HAL_RCC_GetSysClockFreq+0x180>)
 8008a94:	685b      	ldr	r3, [r3, #4]
 8008a96:	099b      	lsrs	r3, r3, #6
 8008a98:	2200      	movs	r2, #0
 8008a9a:	623b      	str	r3, [r7, #32]
 8008a9c:	627a      	str	r2, [r7, #36]	; 0x24
 8008a9e:	6a3b      	ldr	r3, [r7, #32]
 8008aa0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8008aa4:	2100      	movs	r1, #0
 8008aa6:	4b47      	ldr	r3, [pc, #284]	; (8008bc4 <HAL_RCC_GetSysClockFreq+0x188>)
 8008aa8:	fb03 f201 	mul.w	r2, r3, r1
 8008aac:	2300      	movs	r3, #0
 8008aae:	fb00 f303 	mul.w	r3, r0, r3
 8008ab2:	4413      	add	r3, r2
 8008ab4:	4a43      	ldr	r2, [pc, #268]	; (8008bc4 <HAL_RCC_GetSysClockFreq+0x188>)
 8008ab6:	fba0 1202 	umull	r1, r2, r0, r2
 8008aba:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008abc:	460a      	mov	r2, r1
 8008abe:	62ba      	str	r2, [r7, #40]	; 0x28
 8008ac0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008ac2:	4413      	add	r3, r2
 8008ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008ac6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ac8:	2200      	movs	r2, #0
 8008aca:	61bb      	str	r3, [r7, #24]
 8008acc:	61fa      	str	r2, [r7, #28]
 8008ace:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008ad2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8008ad6:	f7f8 f8cf 	bl	8000c78 <__aeabi_uldivmod>
 8008ada:	4602      	mov	r2, r0
 8008adc:	460b      	mov	r3, r1
 8008ade:	4613      	mov	r3, r2
 8008ae0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ae2:	e053      	b.n	8008b8c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008ae4:	4b35      	ldr	r3, [pc, #212]	; (8008bbc <HAL_RCC_GetSysClockFreq+0x180>)
 8008ae6:	685b      	ldr	r3, [r3, #4]
 8008ae8:	099b      	lsrs	r3, r3, #6
 8008aea:	2200      	movs	r2, #0
 8008aec:	613b      	str	r3, [r7, #16]
 8008aee:	617a      	str	r2, [r7, #20]
 8008af0:	693b      	ldr	r3, [r7, #16]
 8008af2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8008af6:	f04f 0b00 	mov.w	fp, #0
 8008afa:	4652      	mov	r2, sl
 8008afc:	465b      	mov	r3, fp
 8008afe:	f04f 0000 	mov.w	r0, #0
 8008b02:	f04f 0100 	mov.w	r1, #0
 8008b06:	0159      	lsls	r1, r3, #5
 8008b08:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008b0c:	0150      	lsls	r0, r2, #5
 8008b0e:	4602      	mov	r2, r0
 8008b10:	460b      	mov	r3, r1
 8008b12:	ebb2 080a 	subs.w	r8, r2, sl
 8008b16:	eb63 090b 	sbc.w	r9, r3, fp
 8008b1a:	f04f 0200 	mov.w	r2, #0
 8008b1e:	f04f 0300 	mov.w	r3, #0
 8008b22:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8008b26:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8008b2a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8008b2e:	ebb2 0408 	subs.w	r4, r2, r8
 8008b32:	eb63 0509 	sbc.w	r5, r3, r9
 8008b36:	f04f 0200 	mov.w	r2, #0
 8008b3a:	f04f 0300 	mov.w	r3, #0
 8008b3e:	00eb      	lsls	r3, r5, #3
 8008b40:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008b44:	00e2      	lsls	r2, r4, #3
 8008b46:	4614      	mov	r4, r2
 8008b48:	461d      	mov	r5, r3
 8008b4a:	eb14 030a 	adds.w	r3, r4, sl
 8008b4e:	603b      	str	r3, [r7, #0]
 8008b50:	eb45 030b 	adc.w	r3, r5, fp
 8008b54:	607b      	str	r3, [r7, #4]
 8008b56:	f04f 0200 	mov.w	r2, #0
 8008b5a:	f04f 0300 	mov.w	r3, #0
 8008b5e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008b62:	4629      	mov	r1, r5
 8008b64:	028b      	lsls	r3, r1, #10
 8008b66:	4621      	mov	r1, r4
 8008b68:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008b6c:	4621      	mov	r1, r4
 8008b6e:	028a      	lsls	r2, r1, #10
 8008b70:	4610      	mov	r0, r2
 8008b72:	4619      	mov	r1, r3
 8008b74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b76:	2200      	movs	r2, #0
 8008b78:	60bb      	str	r3, [r7, #8]
 8008b7a:	60fa      	str	r2, [r7, #12]
 8008b7c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008b80:	f7f8 f87a 	bl	8000c78 <__aeabi_uldivmod>
 8008b84:	4602      	mov	r2, r0
 8008b86:	460b      	mov	r3, r1
 8008b88:	4613      	mov	r3, r2
 8008b8a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008b8c:	4b0b      	ldr	r3, [pc, #44]	; (8008bbc <HAL_RCC_GetSysClockFreq+0x180>)
 8008b8e:	685b      	ldr	r3, [r3, #4]
 8008b90:	0c1b      	lsrs	r3, r3, #16
 8008b92:	f003 0303 	and.w	r3, r3, #3
 8008b96:	3301      	adds	r3, #1
 8008b98:	005b      	lsls	r3, r3, #1
 8008b9a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8008b9c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ba0:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ba4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8008ba6:	e002      	b.n	8008bae <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008ba8:	4b05      	ldr	r3, [pc, #20]	; (8008bc0 <HAL_RCC_GetSysClockFreq+0x184>)
 8008baa:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8008bac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008bae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	3740      	adds	r7, #64	; 0x40
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008bba:	bf00      	nop
 8008bbc:	40023800 	.word	0x40023800
 8008bc0:	00f42400 	.word	0x00f42400
 8008bc4:	017d7840 	.word	0x017d7840

08008bc8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008bc8:	b480      	push	{r7}
 8008bca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008bcc:	4b03      	ldr	r3, [pc, #12]	; (8008bdc <HAL_RCC_GetHCLKFreq+0x14>)
 8008bce:	681b      	ldr	r3, [r3, #0]
}
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd8:	4770      	bx	lr
 8008bda:	bf00      	nop
 8008bdc:	20000008 	.word	0x20000008

08008be0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008be4:	f7ff fff0 	bl	8008bc8 <HAL_RCC_GetHCLKFreq>
 8008be8:	4602      	mov	r2, r0
 8008bea:	4b05      	ldr	r3, [pc, #20]	; (8008c00 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008bec:	689b      	ldr	r3, [r3, #8]
 8008bee:	0a9b      	lsrs	r3, r3, #10
 8008bf0:	f003 0307 	and.w	r3, r3, #7
 8008bf4:	4903      	ldr	r1, [pc, #12]	; (8008c04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008bf6:	5ccb      	ldrb	r3, [r1, r3]
 8008bf8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	bd80      	pop	{r7, pc}
 8008c00:	40023800 	.word	0x40023800
 8008c04:	08012f60 	.word	0x08012f60

08008c08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008c08:	b580      	push	{r7, lr}
 8008c0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008c0c:	f7ff ffdc 	bl	8008bc8 <HAL_RCC_GetHCLKFreq>
 8008c10:	4602      	mov	r2, r0
 8008c12:	4b05      	ldr	r3, [pc, #20]	; (8008c28 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008c14:	689b      	ldr	r3, [r3, #8]
 8008c16:	0b5b      	lsrs	r3, r3, #13
 8008c18:	f003 0307 	and.w	r3, r3, #7
 8008c1c:	4903      	ldr	r1, [pc, #12]	; (8008c2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8008c1e:	5ccb      	ldrb	r3, [r1, r3]
 8008c20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008c24:	4618      	mov	r0, r3
 8008c26:	bd80      	pop	{r7, pc}
 8008c28:	40023800 	.word	0x40023800
 8008c2c:	08012f60 	.word	0x08012f60

08008c30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b082      	sub	sp, #8
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d101      	bne.n	8008c42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008c3e:	2301      	movs	r3, #1
 8008c40:	e041      	b.n	8008cc6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c48:	b2db      	uxtb	r3, r3
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d106      	bne.n	8008c5c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	2200      	movs	r2, #0
 8008c52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008c56:	6878      	ldr	r0, [r7, #4]
 8008c58:	f7fa f8d4 	bl	8002e04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2202      	movs	r2, #2
 8008c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681a      	ldr	r2, [r3, #0]
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	3304      	adds	r3, #4
 8008c6c:	4619      	mov	r1, r3
 8008c6e:	4610      	mov	r0, r2
 8008c70:	f000 fc54 	bl	800951c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	2201      	movs	r2, #1
 8008c78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	2201      	movs	r2, #1
 8008c80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2201      	movs	r2, #1
 8008c88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	2201      	movs	r2, #1
 8008c90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	2201      	movs	r2, #1
 8008c98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	2201      	movs	r2, #1
 8008ca0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2201      	movs	r2, #1
 8008ca8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	2201      	movs	r2, #1
 8008cb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	2201      	movs	r2, #1
 8008cb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	2201      	movs	r2, #1
 8008cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008cc4:	2300      	movs	r3, #0
}
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	3708      	adds	r7, #8
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	bd80      	pop	{r7, pc}
	...

08008cd0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008cd0:	b480      	push	{r7}
 8008cd2:	b085      	sub	sp, #20
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008cde:	b2db      	uxtb	r3, r3
 8008ce0:	2b01      	cmp	r3, #1
 8008ce2:	d001      	beq.n	8008ce8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008ce4:	2301      	movs	r3, #1
 8008ce6:	e044      	b.n	8008d72 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	2202      	movs	r2, #2
 8008cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	68da      	ldr	r2, [r3, #12]
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	f042 0201 	orr.w	r2, r2, #1
 8008cfe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	4a1e      	ldr	r2, [pc, #120]	; (8008d80 <HAL_TIM_Base_Start_IT+0xb0>)
 8008d06:	4293      	cmp	r3, r2
 8008d08:	d018      	beq.n	8008d3c <HAL_TIM_Base_Start_IT+0x6c>
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d12:	d013      	beq.n	8008d3c <HAL_TIM_Base_Start_IT+0x6c>
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	4a1a      	ldr	r2, [pc, #104]	; (8008d84 <HAL_TIM_Base_Start_IT+0xb4>)
 8008d1a:	4293      	cmp	r3, r2
 8008d1c:	d00e      	beq.n	8008d3c <HAL_TIM_Base_Start_IT+0x6c>
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	4a19      	ldr	r2, [pc, #100]	; (8008d88 <HAL_TIM_Base_Start_IT+0xb8>)
 8008d24:	4293      	cmp	r3, r2
 8008d26:	d009      	beq.n	8008d3c <HAL_TIM_Base_Start_IT+0x6c>
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	4a17      	ldr	r2, [pc, #92]	; (8008d8c <HAL_TIM_Base_Start_IT+0xbc>)
 8008d2e:	4293      	cmp	r3, r2
 8008d30:	d004      	beq.n	8008d3c <HAL_TIM_Base_Start_IT+0x6c>
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	4a16      	ldr	r2, [pc, #88]	; (8008d90 <HAL_TIM_Base_Start_IT+0xc0>)
 8008d38:	4293      	cmp	r3, r2
 8008d3a:	d111      	bne.n	8008d60 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	689b      	ldr	r3, [r3, #8]
 8008d42:	f003 0307 	and.w	r3, r3, #7
 8008d46:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	2b06      	cmp	r3, #6
 8008d4c:	d010      	beq.n	8008d70 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	681a      	ldr	r2, [r3, #0]
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	f042 0201 	orr.w	r2, r2, #1
 8008d5c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d5e:	e007      	b.n	8008d70 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	681a      	ldr	r2, [r3, #0]
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	f042 0201 	orr.w	r2, r2, #1
 8008d6e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008d70:	2300      	movs	r3, #0
}
 8008d72:	4618      	mov	r0, r3
 8008d74:	3714      	adds	r7, #20
 8008d76:	46bd      	mov	sp, r7
 8008d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7c:	4770      	bx	lr
 8008d7e:	bf00      	nop
 8008d80:	40010000 	.word	0x40010000
 8008d84:	40000400 	.word	0x40000400
 8008d88:	40000800 	.word	0x40000800
 8008d8c:	40000c00 	.word	0x40000c00
 8008d90:	40014000 	.word	0x40014000

08008d94 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008d94:	b580      	push	{r7, lr}
 8008d96:	b082      	sub	sp, #8
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d101      	bne.n	8008da6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008da2:	2301      	movs	r3, #1
 8008da4:	e041      	b.n	8008e2a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008dac:	b2db      	uxtb	r3, r3
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d106      	bne.n	8008dc0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	2200      	movs	r2, #0
 8008db6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008dba:	6878      	ldr	r0, [r7, #4]
 8008dbc:	f7fa f874 	bl	8002ea8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2202      	movs	r2, #2
 8008dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681a      	ldr	r2, [r3, #0]
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	3304      	adds	r3, #4
 8008dd0:	4619      	mov	r1, r3
 8008dd2:	4610      	mov	r0, r2
 8008dd4:	f000 fba2 	bl	800951c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	2201      	movs	r2, #1
 8008ddc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	2201      	movs	r2, #1
 8008de4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	2201      	movs	r2, #1
 8008dec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	2201      	movs	r2, #1
 8008df4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	2201      	movs	r2, #1
 8008dfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	2201      	movs	r2, #1
 8008e04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	2201      	movs	r2, #1
 8008e0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	2201      	movs	r2, #1
 8008e14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	2201      	movs	r2, #1
 8008e1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	2201      	movs	r2, #1
 8008e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008e28:	2300      	movs	r3, #0
}
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	3708      	adds	r7, #8
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	bd80      	pop	{r7, pc}
	...

08008e34 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b084      	sub	sp, #16
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
 8008e3c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008e3e:	683b      	ldr	r3, [r7, #0]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d109      	bne.n	8008e58 <HAL_TIM_PWM_Start+0x24>
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008e4a:	b2db      	uxtb	r3, r3
 8008e4c:	2b01      	cmp	r3, #1
 8008e4e:	bf14      	ite	ne
 8008e50:	2301      	movne	r3, #1
 8008e52:	2300      	moveq	r3, #0
 8008e54:	b2db      	uxtb	r3, r3
 8008e56:	e022      	b.n	8008e9e <HAL_TIM_PWM_Start+0x6a>
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	2b04      	cmp	r3, #4
 8008e5c:	d109      	bne.n	8008e72 <HAL_TIM_PWM_Start+0x3e>
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008e64:	b2db      	uxtb	r3, r3
 8008e66:	2b01      	cmp	r3, #1
 8008e68:	bf14      	ite	ne
 8008e6a:	2301      	movne	r3, #1
 8008e6c:	2300      	moveq	r3, #0
 8008e6e:	b2db      	uxtb	r3, r3
 8008e70:	e015      	b.n	8008e9e <HAL_TIM_PWM_Start+0x6a>
 8008e72:	683b      	ldr	r3, [r7, #0]
 8008e74:	2b08      	cmp	r3, #8
 8008e76:	d109      	bne.n	8008e8c <HAL_TIM_PWM_Start+0x58>
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008e7e:	b2db      	uxtb	r3, r3
 8008e80:	2b01      	cmp	r3, #1
 8008e82:	bf14      	ite	ne
 8008e84:	2301      	movne	r3, #1
 8008e86:	2300      	moveq	r3, #0
 8008e88:	b2db      	uxtb	r3, r3
 8008e8a:	e008      	b.n	8008e9e <HAL_TIM_PWM_Start+0x6a>
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008e92:	b2db      	uxtb	r3, r3
 8008e94:	2b01      	cmp	r3, #1
 8008e96:	bf14      	ite	ne
 8008e98:	2301      	movne	r3, #1
 8008e9a:	2300      	moveq	r3, #0
 8008e9c:	b2db      	uxtb	r3, r3
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d001      	beq.n	8008ea6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8008ea2:	2301      	movs	r3, #1
 8008ea4:	e068      	b.n	8008f78 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008ea6:	683b      	ldr	r3, [r7, #0]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d104      	bne.n	8008eb6 <HAL_TIM_PWM_Start+0x82>
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	2202      	movs	r2, #2
 8008eb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008eb4:	e013      	b.n	8008ede <HAL_TIM_PWM_Start+0xaa>
 8008eb6:	683b      	ldr	r3, [r7, #0]
 8008eb8:	2b04      	cmp	r3, #4
 8008eba:	d104      	bne.n	8008ec6 <HAL_TIM_PWM_Start+0x92>
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	2202      	movs	r2, #2
 8008ec0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008ec4:	e00b      	b.n	8008ede <HAL_TIM_PWM_Start+0xaa>
 8008ec6:	683b      	ldr	r3, [r7, #0]
 8008ec8:	2b08      	cmp	r3, #8
 8008eca:	d104      	bne.n	8008ed6 <HAL_TIM_PWM_Start+0xa2>
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	2202      	movs	r2, #2
 8008ed0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008ed4:	e003      	b.n	8008ede <HAL_TIM_PWM_Start+0xaa>
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	2202      	movs	r2, #2
 8008eda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	2201      	movs	r2, #1
 8008ee4:	6839      	ldr	r1, [r7, #0]
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	f000 fdbe 	bl	8009a68 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	4a23      	ldr	r2, [pc, #140]	; (8008f80 <HAL_TIM_PWM_Start+0x14c>)
 8008ef2:	4293      	cmp	r3, r2
 8008ef4:	d107      	bne.n	8008f06 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008f04:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	4a1d      	ldr	r2, [pc, #116]	; (8008f80 <HAL_TIM_PWM_Start+0x14c>)
 8008f0c:	4293      	cmp	r3, r2
 8008f0e:	d018      	beq.n	8008f42 <HAL_TIM_PWM_Start+0x10e>
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f18:	d013      	beq.n	8008f42 <HAL_TIM_PWM_Start+0x10e>
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	4a19      	ldr	r2, [pc, #100]	; (8008f84 <HAL_TIM_PWM_Start+0x150>)
 8008f20:	4293      	cmp	r3, r2
 8008f22:	d00e      	beq.n	8008f42 <HAL_TIM_PWM_Start+0x10e>
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	4a17      	ldr	r2, [pc, #92]	; (8008f88 <HAL_TIM_PWM_Start+0x154>)
 8008f2a:	4293      	cmp	r3, r2
 8008f2c:	d009      	beq.n	8008f42 <HAL_TIM_PWM_Start+0x10e>
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	4a16      	ldr	r2, [pc, #88]	; (8008f8c <HAL_TIM_PWM_Start+0x158>)
 8008f34:	4293      	cmp	r3, r2
 8008f36:	d004      	beq.n	8008f42 <HAL_TIM_PWM_Start+0x10e>
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	4a14      	ldr	r2, [pc, #80]	; (8008f90 <HAL_TIM_PWM_Start+0x15c>)
 8008f3e:	4293      	cmp	r3, r2
 8008f40:	d111      	bne.n	8008f66 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	689b      	ldr	r3, [r3, #8]
 8008f48:	f003 0307 	and.w	r3, r3, #7
 8008f4c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	2b06      	cmp	r3, #6
 8008f52:	d010      	beq.n	8008f76 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	681a      	ldr	r2, [r3, #0]
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	f042 0201 	orr.w	r2, r2, #1
 8008f62:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f64:	e007      	b.n	8008f76 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	681a      	ldr	r2, [r3, #0]
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	f042 0201 	orr.w	r2, r2, #1
 8008f74:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008f76:	2300      	movs	r3, #0
}
 8008f78:	4618      	mov	r0, r3
 8008f7a:	3710      	adds	r7, #16
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	bd80      	pop	{r7, pc}
 8008f80:	40010000 	.word	0x40010000
 8008f84:	40000400 	.word	0x40000400
 8008f88:	40000800 	.word	0x40000800
 8008f8c:	40000c00 	.word	0x40000c00
 8008f90:	40014000 	.word	0x40014000

08008f94 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b082      	sub	sp, #8
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	691b      	ldr	r3, [r3, #16]
 8008fa2:	f003 0302 	and.w	r3, r3, #2
 8008fa6:	2b02      	cmp	r3, #2
 8008fa8:	d122      	bne.n	8008ff0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	68db      	ldr	r3, [r3, #12]
 8008fb0:	f003 0302 	and.w	r3, r3, #2
 8008fb4:	2b02      	cmp	r3, #2
 8008fb6:	d11b      	bne.n	8008ff0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	f06f 0202 	mvn.w	r2, #2
 8008fc0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	2201      	movs	r2, #1
 8008fc6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	699b      	ldr	r3, [r3, #24]
 8008fce:	f003 0303 	and.w	r3, r3, #3
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d003      	beq.n	8008fde <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008fd6:	6878      	ldr	r0, [r7, #4]
 8008fd8:	f000 fa81 	bl	80094de <HAL_TIM_IC_CaptureCallback>
 8008fdc:	e005      	b.n	8008fea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008fde:	6878      	ldr	r0, [r7, #4]
 8008fe0:	f000 fa73 	bl	80094ca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008fe4:	6878      	ldr	r0, [r7, #4]
 8008fe6:	f000 fa84 	bl	80094f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	2200      	movs	r2, #0
 8008fee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	691b      	ldr	r3, [r3, #16]
 8008ff6:	f003 0304 	and.w	r3, r3, #4
 8008ffa:	2b04      	cmp	r3, #4
 8008ffc:	d122      	bne.n	8009044 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	68db      	ldr	r3, [r3, #12]
 8009004:	f003 0304 	and.w	r3, r3, #4
 8009008:	2b04      	cmp	r3, #4
 800900a:	d11b      	bne.n	8009044 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	f06f 0204 	mvn.w	r2, #4
 8009014:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	2202      	movs	r2, #2
 800901a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	699b      	ldr	r3, [r3, #24]
 8009022:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009026:	2b00      	cmp	r3, #0
 8009028:	d003      	beq.n	8009032 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800902a:	6878      	ldr	r0, [r7, #4]
 800902c:	f000 fa57 	bl	80094de <HAL_TIM_IC_CaptureCallback>
 8009030:	e005      	b.n	800903e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009032:	6878      	ldr	r0, [r7, #4]
 8009034:	f000 fa49 	bl	80094ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009038:	6878      	ldr	r0, [r7, #4]
 800903a:	f000 fa5a 	bl	80094f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	2200      	movs	r2, #0
 8009042:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	691b      	ldr	r3, [r3, #16]
 800904a:	f003 0308 	and.w	r3, r3, #8
 800904e:	2b08      	cmp	r3, #8
 8009050:	d122      	bne.n	8009098 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	68db      	ldr	r3, [r3, #12]
 8009058:	f003 0308 	and.w	r3, r3, #8
 800905c:	2b08      	cmp	r3, #8
 800905e:	d11b      	bne.n	8009098 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	f06f 0208 	mvn.w	r2, #8
 8009068:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	2204      	movs	r2, #4
 800906e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	69db      	ldr	r3, [r3, #28]
 8009076:	f003 0303 	and.w	r3, r3, #3
 800907a:	2b00      	cmp	r3, #0
 800907c:	d003      	beq.n	8009086 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800907e:	6878      	ldr	r0, [r7, #4]
 8009080:	f000 fa2d 	bl	80094de <HAL_TIM_IC_CaptureCallback>
 8009084:	e005      	b.n	8009092 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009086:	6878      	ldr	r0, [r7, #4]
 8009088:	f000 fa1f 	bl	80094ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800908c:	6878      	ldr	r0, [r7, #4]
 800908e:	f000 fa30 	bl	80094f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	2200      	movs	r2, #0
 8009096:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	691b      	ldr	r3, [r3, #16]
 800909e:	f003 0310 	and.w	r3, r3, #16
 80090a2:	2b10      	cmp	r3, #16
 80090a4:	d122      	bne.n	80090ec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	68db      	ldr	r3, [r3, #12]
 80090ac:	f003 0310 	and.w	r3, r3, #16
 80090b0:	2b10      	cmp	r3, #16
 80090b2:	d11b      	bne.n	80090ec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	f06f 0210 	mvn.w	r2, #16
 80090bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	2208      	movs	r2, #8
 80090c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	69db      	ldr	r3, [r3, #28]
 80090ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d003      	beq.n	80090da <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80090d2:	6878      	ldr	r0, [r7, #4]
 80090d4:	f000 fa03 	bl	80094de <HAL_TIM_IC_CaptureCallback>
 80090d8:	e005      	b.n	80090e6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80090da:	6878      	ldr	r0, [r7, #4]
 80090dc:	f000 f9f5 	bl	80094ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80090e0:	6878      	ldr	r0, [r7, #4]
 80090e2:	f000 fa06 	bl	80094f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	2200      	movs	r2, #0
 80090ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	691b      	ldr	r3, [r3, #16]
 80090f2:	f003 0301 	and.w	r3, r3, #1
 80090f6:	2b01      	cmp	r3, #1
 80090f8:	d10e      	bne.n	8009118 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	68db      	ldr	r3, [r3, #12]
 8009100:	f003 0301 	and.w	r3, r3, #1
 8009104:	2b01      	cmp	r3, #1
 8009106:	d107      	bne.n	8009118 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	f06f 0201 	mvn.w	r2, #1
 8009110:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009112:	6878      	ldr	r0, [r7, #4]
 8009114:	f000 f9cf 	bl	80094b6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	691b      	ldr	r3, [r3, #16]
 800911e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009122:	2b80      	cmp	r3, #128	; 0x80
 8009124:	d10e      	bne.n	8009144 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	68db      	ldr	r3, [r3, #12]
 800912c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009130:	2b80      	cmp	r3, #128	; 0x80
 8009132:	d107      	bne.n	8009144 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800913c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800913e:	6878      	ldr	r0, [r7, #4]
 8009140:	f000 fd30 	bl	8009ba4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	691b      	ldr	r3, [r3, #16]
 800914a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800914e:	2b40      	cmp	r3, #64	; 0x40
 8009150:	d10e      	bne.n	8009170 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	68db      	ldr	r3, [r3, #12]
 8009158:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800915c:	2b40      	cmp	r3, #64	; 0x40
 800915e:	d107      	bne.n	8009170 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009168:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800916a:	6878      	ldr	r0, [r7, #4]
 800916c:	f000 f9cb 	bl	8009506 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	691b      	ldr	r3, [r3, #16]
 8009176:	f003 0320 	and.w	r3, r3, #32
 800917a:	2b20      	cmp	r3, #32
 800917c:	d10e      	bne.n	800919c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	68db      	ldr	r3, [r3, #12]
 8009184:	f003 0320 	and.w	r3, r3, #32
 8009188:	2b20      	cmp	r3, #32
 800918a:	d107      	bne.n	800919c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	f06f 0220 	mvn.w	r2, #32
 8009194:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009196:	6878      	ldr	r0, [r7, #4]
 8009198:	f000 fcfa 	bl	8009b90 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800919c:	bf00      	nop
 800919e:	3708      	adds	r7, #8
 80091a0:	46bd      	mov	sp, r7
 80091a2:	bd80      	pop	{r7, pc}

080091a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80091a4:	b580      	push	{r7, lr}
 80091a6:	b086      	sub	sp, #24
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	60f8      	str	r0, [r7, #12]
 80091ac:	60b9      	str	r1, [r7, #8]
 80091ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80091b0:	2300      	movs	r3, #0
 80091b2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80091ba:	2b01      	cmp	r3, #1
 80091bc:	d101      	bne.n	80091c2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80091be:	2302      	movs	r3, #2
 80091c0:	e0ae      	b.n	8009320 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	2201      	movs	r2, #1
 80091c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	2b0c      	cmp	r3, #12
 80091ce:	f200 809f 	bhi.w	8009310 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80091d2:	a201      	add	r2, pc, #4	; (adr r2, 80091d8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80091d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091d8:	0800920d 	.word	0x0800920d
 80091dc:	08009311 	.word	0x08009311
 80091e0:	08009311 	.word	0x08009311
 80091e4:	08009311 	.word	0x08009311
 80091e8:	0800924d 	.word	0x0800924d
 80091ec:	08009311 	.word	0x08009311
 80091f0:	08009311 	.word	0x08009311
 80091f4:	08009311 	.word	0x08009311
 80091f8:	0800928f 	.word	0x0800928f
 80091fc:	08009311 	.word	0x08009311
 8009200:	08009311 	.word	0x08009311
 8009204:	08009311 	.word	0x08009311
 8009208:	080092cf 	.word	0x080092cf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	68b9      	ldr	r1, [r7, #8]
 8009212:	4618      	mov	r0, r3
 8009214:	f000 fa02 	bl	800961c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	699a      	ldr	r2, [r3, #24]
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	f042 0208 	orr.w	r2, r2, #8
 8009226:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	699a      	ldr	r2, [r3, #24]
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	f022 0204 	bic.w	r2, r2, #4
 8009236:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	6999      	ldr	r1, [r3, #24]
 800923e:	68bb      	ldr	r3, [r7, #8]
 8009240:	691a      	ldr	r2, [r3, #16]
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	430a      	orrs	r2, r1
 8009248:	619a      	str	r2, [r3, #24]
      break;
 800924a:	e064      	b.n	8009316 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	68b9      	ldr	r1, [r7, #8]
 8009252:	4618      	mov	r0, r3
 8009254:	f000 fa48 	bl	80096e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	699a      	ldr	r2, [r3, #24]
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009266:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	699a      	ldr	r2, [r3, #24]
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009276:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	6999      	ldr	r1, [r3, #24]
 800927e:	68bb      	ldr	r3, [r7, #8]
 8009280:	691b      	ldr	r3, [r3, #16]
 8009282:	021a      	lsls	r2, r3, #8
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	430a      	orrs	r2, r1
 800928a:	619a      	str	r2, [r3, #24]
      break;
 800928c:	e043      	b.n	8009316 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	68b9      	ldr	r1, [r7, #8]
 8009294:	4618      	mov	r0, r3
 8009296:	f000 fa93 	bl	80097c0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	69da      	ldr	r2, [r3, #28]
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	f042 0208 	orr.w	r2, r2, #8
 80092a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	69da      	ldr	r2, [r3, #28]
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	f022 0204 	bic.w	r2, r2, #4
 80092b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	69d9      	ldr	r1, [r3, #28]
 80092c0:	68bb      	ldr	r3, [r7, #8]
 80092c2:	691a      	ldr	r2, [r3, #16]
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	430a      	orrs	r2, r1
 80092ca:	61da      	str	r2, [r3, #28]
      break;
 80092cc:	e023      	b.n	8009316 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	68b9      	ldr	r1, [r7, #8]
 80092d4:	4618      	mov	r0, r3
 80092d6:	f000 fadd 	bl	8009894 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	69da      	ldr	r2, [r3, #28]
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80092e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	69da      	ldr	r2, [r3, #28]
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80092f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	69d9      	ldr	r1, [r3, #28]
 8009300:	68bb      	ldr	r3, [r7, #8]
 8009302:	691b      	ldr	r3, [r3, #16]
 8009304:	021a      	lsls	r2, r3, #8
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	430a      	orrs	r2, r1
 800930c:	61da      	str	r2, [r3, #28]
      break;
 800930e:	e002      	b.n	8009316 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8009310:	2301      	movs	r3, #1
 8009312:	75fb      	strb	r3, [r7, #23]
      break;
 8009314:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	2200      	movs	r2, #0
 800931a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800931e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009320:	4618      	mov	r0, r3
 8009322:	3718      	adds	r7, #24
 8009324:	46bd      	mov	sp, r7
 8009326:	bd80      	pop	{r7, pc}

08009328 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009328:	b580      	push	{r7, lr}
 800932a:	b084      	sub	sp, #16
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
 8009330:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009332:	2300      	movs	r3, #0
 8009334:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800933c:	2b01      	cmp	r3, #1
 800933e:	d101      	bne.n	8009344 <HAL_TIM_ConfigClockSource+0x1c>
 8009340:	2302      	movs	r3, #2
 8009342:	e0b4      	b.n	80094ae <HAL_TIM_ConfigClockSource+0x186>
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	2201      	movs	r2, #1
 8009348:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	2202      	movs	r2, #2
 8009350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	689b      	ldr	r3, [r3, #8]
 800935a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800935c:	68bb      	ldr	r3, [r7, #8]
 800935e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009362:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009364:	68bb      	ldr	r3, [r7, #8]
 8009366:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800936a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	68ba      	ldr	r2, [r7, #8]
 8009372:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009374:	683b      	ldr	r3, [r7, #0]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800937c:	d03e      	beq.n	80093fc <HAL_TIM_ConfigClockSource+0xd4>
 800937e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009382:	f200 8087 	bhi.w	8009494 <HAL_TIM_ConfigClockSource+0x16c>
 8009386:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800938a:	f000 8086 	beq.w	800949a <HAL_TIM_ConfigClockSource+0x172>
 800938e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009392:	d87f      	bhi.n	8009494 <HAL_TIM_ConfigClockSource+0x16c>
 8009394:	2b70      	cmp	r3, #112	; 0x70
 8009396:	d01a      	beq.n	80093ce <HAL_TIM_ConfigClockSource+0xa6>
 8009398:	2b70      	cmp	r3, #112	; 0x70
 800939a:	d87b      	bhi.n	8009494 <HAL_TIM_ConfigClockSource+0x16c>
 800939c:	2b60      	cmp	r3, #96	; 0x60
 800939e:	d050      	beq.n	8009442 <HAL_TIM_ConfigClockSource+0x11a>
 80093a0:	2b60      	cmp	r3, #96	; 0x60
 80093a2:	d877      	bhi.n	8009494 <HAL_TIM_ConfigClockSource+0x16c>
 80093a4:	2b50      	cmp	r3, #80	; 0x50
 80093a6:	d03c      	beq.n	8009422 <HAL_TIM_ConfigClockSource+0xfa>
 80093a8:	2b50      	cmp	r3, #80	; 0x50
 80093aa:	d873      	bhi.n	8009494 <HAL_TIM_ConfigClockSource+0x16c>
 80093ac:	2b40      	cmp	r3, #64	; 0x40
 80093ae:	d058      	beq.n	8009462 <HAL_TIM_ConfigClockSource+0x13a>
 80093b0:	2b40      	cmp	r3, #64	; 0x40
 80093b2:	d86f      	bhi.n	8009494 <HAL_TIM_ConfigClockSource+0x16c>
 80093b4:	2b30      	cmp	r3, #48	; 0x30
 80093b6:	d064      	beq.n	8009482 <HAL_TIM_ConfigClockSource+0x15a>
 80093b8:	2b30      	cmp	r3, #48	; 0x30
 80093ba:	d86b      	bhi.n	8009494 <HAL_TIM_ConfigClockSource+0x16c>
 80093bc:	2b20      	cmp	r3, #32
 80093be:	d060      	beq.n	8009482 <HAL_TIM_ConfigClockSource+0x15a>
 80093c0:	2b20      	cmp	r3, #32
 80093c2:	d867      	bhi.n	8009494 <HAL_TIM_ConfigClockSource+0x16c>
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d05c      	beq.n	8009482 <HAL_TIM_ConfigClockSource+0x15a>
 80093c8:	2b10      	cmp	r3, #16
 80093ca:	d05a      	beq.n	8009482 <HAL_TIM_ConfigClockSource+0x15a>
 80093cc:	e062      	b.n	8009494 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	6818      	ldr	r0, [r3, #0]
 80093d2:	683b      	ldr	r3, [r7, #0]
 80093d4:	6899      	ldr	r1, [r3, #8]
 80093d6:	683b      	ldr	r3, [r7, #0]
 80093d8:	685a      	ldr	r2, [r3, #4]
 80093da:	683b      	ldr	r3, [r7, #0]
 80093dc:	68db      	ldr	r3, [r3, #12]
 80093de:	f000 fb23 	bl	8009a28 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	689b      	ldr	r3, [r3, #8]
 80093e8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80093ea:	68bb      	ldr	r3, [r7, #8]
 80093ec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80093f0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	68ba      	ldr	r2, [r7, #8]
 80093f8:	609a      	str	r2, [r3, #8]
      break;
 80093fa:	e04f      	b.n	800949c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	6818      	ldr	r0, [r3, #0]
 8009400:	683b      	ldr	r3, [r7, #0]
 8009402:	6899      	ldr	r1, [r3, #8]
 8009404:	683b      	ldr	r3, [r7, #0]
 8009406:	685a      	ldr	r2, [r3, #4]
 8009408:	683b      	ldr	r3, [r7, #0]
 800940a:	68db      	ldr	r3, [r3, #12]
 800940c:	f000 fb0c 	bl	8009a28 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	689a      	ldr	r2, [r3, #8]
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800941e:	609a      	str	r2, [r3, #8]
      break;
 8009420:	e03c      	b.n	800949c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	6818      	ldr	r0, [r3, #0]
 8009426:	683b      	ldr	r3, [r7, #0]
 8009428:	6859      	ldr	r1, [r3, #4]
 800942a:	683b      	ldr	r3, [r7, #0]
 800942c:	68db      	ldr	r3, [r3, #12]
 800942e:	461a      	mov	r2, r3
 8009430:	f000 fa80 	bl	8009934 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	2150      	movs	r1, #80	; 0x50
 800943a:	4618      	mov	r0, r3
 800943c:	f000 fad9 	bl	80099f2 <TIM_ITRx_SetConfig>
      break;
 8009440:	e02c      	b.n	800949c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	6818      	ldr	r0, [r3, #0]
 8009446:	683b      	ldr	r3, [r7, #0]
 8009448:	6859      	ldr	r1, [r3, #4]
 800944a:	683b      	ldr	r3, [r7, #0]
 800944c:	68db      	ldr	r3, [r3, #12]
 800944e:	461a      	mov	r2, r3
 8009450:	f000 fa9f 	bl	8009992 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	2160      	movs	r1, #96	; 0x60
 800945a:	4618      	mov	r0, r3
 800945c:	f000 fac9 	bl	80099f2 <TIM_ITRx_SetConfig>
      break;
 8009460:	e01c      	b.n	800949c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	6818      	ldr	r0, [r3, #0]
 8009466:	683b      	ldr	r3, [r7, #0]
 8009468:	6859      	ldr	r1, [r3, #4]
 800946a:	683b      	ldr	r3, [r7, #0]
 800946c:	68db      	ldr	r3, [r3, #12]
 800946e:	461a      	mov	r2, r3
 8009470:	f000 fa60 	bl	8009934 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	2140      	movs	r1, #64	; 0x40
 800947a:	4618      	mov	r0, r3
 800947c:	f000 fab9 	bl	80099f2 <TIM_ITRx_SetConfig>
      break;
 8009480:	e00c      	b.n	800949c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681a      	ldr	r2, [r3, #0]
 8009486:	683b      	ldr	r3, [r7, #0]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	4619      	mov	r1, r3
 800948c:	4610      	mov	r0, r2
 800948e:	f000 fab0 	bl	80099f2 <TIM_ITRx_SetConfig>
      break;
 8009492:	e003      	b.n	800949c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009494:	2301      	movs	r3, #1
 8009496:	73fb      	strb	r3, [r7, #15]
      break;
 8009498:	e000      	b.n	800949c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800949a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	2201      	movs	r2, #1
 80094a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	2200      	movs	r2, #0
 80094a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80094ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80094ae:	4618      	mov	r0, r3
 80094b0:	3710      	adds	r7, #16
 80094b2:	46bd      	mov	sp, r7
 80094b4:	bd80      	pop	{r7, pc}

080094b6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80094b6:	b480      	push	{r7}
 80094b8:	b083      	sub	sp, #12
 80094ba:	af00      	add	r7, sp, #0
 80094bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80094be:	bf00      	nop
 80094c0:	370c      	adds	r7, #12
 80094c2:	46bd      	mov	sp, r7
 80094c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c8:	4770      	bx	lr

080094ca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80094ca:	b480      	push	{r7}
 80094cc:	b083      	sub	sp, #12
 80094ce:	af00      	add	r7, sp, #0
 80094d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80094d2:	bf00      	nop
 80094d4:	370c      	adds	r7, #12
 80094d6:	46bd      	mov	sp, r7
 80094d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094dc:	4770      	bx	lr

080094de <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80094de:	b480      	push	{r7}
 80094e0:	b083      	sub	sp, #12
 80094e2:	af00      	add	r7, sp, #0
 80094e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80094e6:	bf00      	nop
 80094e8:	370c      	adds	r7, #12
 80094ea:	46bd      	mov	sp, r7
 80094ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f0:	4770      	bx	lr

080094f2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80094f2:	b480      	push	{r7}
 80094f4:	b083      	sub	sp, #12
 80094f6:	af00      	add	r7, sp, #0
 80094f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80094fa:	bf00      	nop
 80094fc:	370c      	adds	r7, #12
 80094fe:	46bd      	mov	sp, r7
 8009500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009504:	4770      	bx	lr

08009506 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009506:	b480      	push	{r7}
 8009508:	b083      	sub	sp, #12
 800950a:	af00      	add	r7, sp, #0
 800950c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800950e:	bf00      	nop
 8009510:	370c      	adds	r7, #12
 8009512:	46bd      	mov	sp, r7
 8009514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009518:	4770      	bx	lr
	...

0800951c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800951c:	b480      	push	{r7}
 800951e:	b085      	sub	sp, #20
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
 8009524:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	4a34      	ldr	r2, [pc, #208]	; (8009600 <TIM_Base_SetConfig+0xe4>)
 8009530:	4293      	cmp	r3, r2
 8009532:	d00f      	beq.n	8009554 <TIM_Base_SetConfig+0x38>
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800953a:	d00b      	beq.n	8009554 <TIM_Base_SetConfig+0x38>
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	4a31      	ldr	r2, [pc, #196]	; (8009604 <TIM_Base_SetConfig+0xe8>)
 8009540:	4293      	cmp	r3, r2
 8009542:	d007      	beq.n	8009554 <TIM_Base_SetConfig+0x38>
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	4a30      	ldr	r2, [pc, #192]	; (8009608 <TIM_Base_SetConfig+0xec>)
 8009548:	4293      	cmp	r3, r2
 800954a:	d003      	beq.n	8009554 <TIM_Base_SetConfig+0x38>
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	4a2f      	ldr	r2, [pc, #188]	; (800960c <TIM_Base_SetConfig+0xf0>)
 8009550:	4293      	cmp	r3, r2
 8009552:	d108      	bne.n	8009566 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800955a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800955c:	683b      	ldr	r3, [r7, #0]
 800955e:	685b      	ldr	r3, [r3, #4]
 8009560:	68fa      	ldr	r2, [r7, #12]
 8009562:	4313      	orrs	r3, r2
 8009564:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	4a25      	ldr	r2, [pc, #148]	; (8009600 <TIM_Base_SetConfig+0xe4>)
 800956a:	4293      	cmp	r3, r2
 800956c:	d01b      	beq.n	80095a6 <TIM_Base_SetConfig+0x8a>
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009574:	d017      	beq.n	80095a6 <TIM_Base_SetConfig+0x8a>
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	4a22      	ldr	r2, [pc, #136]	; (8009604 <TIM_Base_SetConfig+0xe8>)
 800957a:	4293      	cmp	r3, r2
 800957c:	d013      	beq.n	80095a6 <TIM_Base_SetConfig+0x8a>
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	4a21      	ldr	r2, [pc, #132]	; (8009608 <TIM_Base_SetConfig+0xec>)
 8009582:	4293      	cmp	r3, r2
 8009584:	d00f      	beq.n	80095a6 <TIM_Base_SetConfig+0x8a>
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	4a20      	ldr	r2, [pc, #128]	; (800960c <TIM_Base_SetConfig+0xf0>)
 800958a:	4293      	cmp	r3, r2
 800958c:	d00b      	beq.n	80095a6 <TIM_Base_SetConfig+0x8a>
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	4a1f      	ldr	r2, [pc, #124]	; (8009610 <TIM_Base_SetConfig+0xf4>)
 8009592:	4293      	cmp	r3, r2
 8009594:	d007      	beq.n	80095a6 <TIM_Base_SetConfig+0x8a>
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	4a1e      	ldr	r2, [pc, #120]	; (8009614 <TIM_Base_SetConfig+0xf8>)
 800959a:	4293      	cmp	r3, r2
 800959c:	d003      	beq.n	80095a6 <TIM_Base_SetConfig+0x8a>
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	4a1d      	ldr	r2, [pc, #116]	; (8009618 <TIM_Base_SetConfig+0xfc>)
 80095a2:	4293      	cmp	r3, r2
 80095a4:	d108      	bne.n	80095b8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80095ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80095ae:	683b      	ldr	r3, [r7, #0]
 80095b0:	68db      	ldr	r3, [r3, #12]
 80095b2:	68fa      	ldr	r2, [r7, #12]
 80095b4:	4313      	orrs	r3, r2
 80095b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80095be:	683b      	ldr	r3, [r7, #0]
 80095c0:	695b      	ldr	r3, [r3, #20]
 80095c2:	4313      	orrs	r3, r2
 80095c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	68fa      	ldr	r2, [r7, #12]
 80095ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80095cc:	683b      	ldr	r3, [r7, #0]
 80095ce:	689a      	ldr	r2, [r3, #8]
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80095d4:	683b      	ldr	r3, [r7, #0]
 80095d6:	681a      	ldr	r2, [r3, #0]
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	4a08      	ldr	r2, [pc, #32]	; (8009600 <TIM_Base_SetConfig+0xe4>)
 80095e0:	4293      	cmp	r3, r2
 80095e2:	d103      	bne.n	80095ec <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80095e4:	683b      	ldr	r3, [r7, #0]
 80095e6:	691a      	ldr	r2, [r3, #16]
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	2201      	movs	r2, #1
 80095f0:	615a      	str	r2, [r3, #20]
}
 80095f2:	bf00      	nop
 80095f4:	3714      	adds	r7, #20
 80095f6:	46bd      	mov	sp, r7
 80095f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fc:	4770      	bx	lr
 80095fe:	bf00      	nop
 8009600:	40010000 	.word	0x40010000
 8009604:	40000400 	.word	0x40000400
 8009608:	40000800 	.word	0x40000800
 800960c:	40000c00 	.word	0x40000c00
 8009610:	40014000 	.word	0x40014000
 8009614:	40014400 	.word	0x40014400
 8009618:	40014800 	.word	0x40014800

0800961c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800961c:	b480      	push	{r7}
 800961e:	b087      	sub	sp, #28
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
 8009624:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	6a1b      	ldr	r3, [r3, #32]
 800962a:	f023 0201 	bic.w	r2, r3, #1
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	6a1b      	ldr	r3, [r3, #32]
 8009636:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	685b      	ldr	r3, [r3, #4]
 800963c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	699b      	ldr	r3, [r3, #24]
 8009642:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800964a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	f023 0303 	bic.w	r3, r3, #3
 8009652:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009654:	683b      	ldr	r3, [r7, #0]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	68fa      	ldr	r2, [r7, #12]
 800965a:	4313      	orrs	r3, r2
 800965c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800965e:	697b      	ldr	r3, [r7, #20]
 8009660:	f023 0302 	bic.w	r3, r3, #2
 8009664:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009666:	683b      	ldr	r3, [r7, #0]
 8009668:	689b      	ldr	r3, [r3, #8]
 800966a:	697a      	ldr	r2, [r7, #20]
 800966c:	4313      	orrs	r3, r2
 800966e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	4a1c      	ldr	r2, [pc, #112]	; (80096e4 <TIM_OC1_SetConfig+0xc8>)
 8009674:	4293      	cmp	r3, r2
 8009676:	d10c      	bne.n	8009692 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009678:	697b      	ldr	r3, [r7, #20]
 800967a:	f023 0308 	bic.w	r3, r3, #8
 800967e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009680:	683b      	ldr	r3, [r7, #0]
 8009682:	68db      	ldr	r3, [r3, #12]
 8009684:	697a      	ldr	r2, [r7, #20]
 8009686:	4313      	orrs	r3, r2
 8009688:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800968a:	697b      	ldr	r3, [r7, #20]
 800968c:	f023 0304 	bic.w	r3, r3, #4
 8009690:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	4a13      	ldr	r2, [pc, #76]	; (80096e4 <TIM_OC1_SetConfig+0xc8>)
 8009696:	4293      	cmp	r3, r2
 8009698:	d111      	bne.n	80096be <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800969a:	693b      	ldr	r3, [r7, #16]
 800969c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80096a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80096a2:	693b      	ldr	r3, [r7, #16]
 80096a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80096a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80096aa:	683b      	ldr	r3, [r7, #0]
 80096ac:	695b      	ldr	r3, [r3, #20]
 80096ae:	693a      	ldr	r2, [r7, #16]
 80096b0:	4313      	orrs	r3, r2
 80096b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80096b4:	683b      	ldr	r3, [r7, #0]
 80096b6:	699b      	ldr	r3, [r3, #24]
 80096b8:	693a      	ldr	r2, [r7, #16]
 80096ba:	4313      	orrs	r3, r2
 80096bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	693a      	ldr	r2, [r7, #16]
 80096c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	68fa      	ldr	r2, [r7, #12]
 80096c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80096ca:	683b      	ldr	r3, [r7, #0]
 80096cc:	685a      	ldr	r2, [r3, #4]
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	697a      	ldr	r2, [r7, #20]
 80096d6:	621a      	str	r2, [r3, #32]
}
 80096d8:	bf00      	nop
 80096da:	371c      	adds	r7, #28
 80096dc:	46bd      	mov	sp, r7
 80096de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e2:	4770      	bx	lr
 80096e4:	40010000 	.word	0x40010000

080096e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80096e8:	b480      	push	{r7}
 80096ea:	b087      	sub	sp, #28
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	6078      	str	r0, [r7, #4]
 80096f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	6a1b      	ldr	r3, [r3, #32]
 80096f6:	f023 0210 	bic.w	r2, r3, #16
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	6a1b      	ldr	r3, [r3, #32]
 8009702:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	685b      	ldr	r3, [r3, #4]
 8009708:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	699b      	ldr	r3, [r3, #24]
 800970e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009716:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800971e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009720:	683b      	ldr	r3, [r7, #0]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	021b      	lsls	r3, r3, #8
 8009726:	68fa      	ldr	r2, [r7, #12]
 8009728:	4313      	orrs	r3, r2
 800972a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800972c:	697b      	ldr	r3, [r7, #20]
 800972e:	f023 0320 	bic.w	r3, r3, #32
 8009732:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009734:	683b      	ldr	r3, [r7, #0]
 8009736:	689b      	ldr	r3, [r3, #8]
 8009738:	011b      	lsls	r3, r3, #4
 800973a:	697a      	ldr	r2, [r7, #20]
 800973c:	4313      	orrs	r3, r2
 800973e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	4a1e      	ldr	r2, [pc, #120]	; (80097bc <TIM_OC2_SetConfig+0xd4>)
 8009744:	4293      	cmp	r3, r2
 8009746:	d10d      	bne.n	8009764 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009748:	697b      	ldr	r3, [r7, #20]
 800974a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800974e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009750:	683b      	ldr	r3, [r7, #0]
 8009752:	68db      	ldr	r3, [r3, #12]
 8009754:	011b      	lsls	r3, r3, #4
 8009756:	697a      	ldr	r2, [r7, #20]
 8009758:	4313      	orrs	r3, r2
 800975a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800975c:	697b      	ldr	r3, [r7, #20]
 800975e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009762:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	4a15      	ldr	r2, [pc, #84]	; (80097bc <TIM_OC2_SetConfig+0xd4>)
 8009768:	4293      	cmp	r3, r2
 800976a:	d113      	bne.n	8009794 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800976c:	693b      	ldr	r3, [r7, #16]
 800976e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009772:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009774:	693b      	ldr	r3, [r7, #16]
 8009776:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800977a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800977c:	683b      	ldr	r3, [r7, #0]
 800977e:	695b      	ldr	r3, [r3, #20]
 8009780:	009b      	lsls	r3, r3, #2
 8009782:	693a      	ldr	r2, [r7, #16]
 8009784:	4313      	orrs	r3, r2
 8009786:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009788:	683b      	ldr	r3, [r7, #0]
 800978a:	699b      	ldr	r3, [r3, #24]
 800978c:	009b      	lsls	r3, r3, #2
 800978e:	693a      	ldr	r2, [r7, #16]
 8009790:	4313      	orrs	r3, r2
 8009792:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	693a      	ldr	r2, [r7, #16]
 8009798:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	68fa      	ldr	r2, [r7, #12]
 800979e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80097a0:	683b      	ldr	r3, [r7, #0]
 80097a2:	685a      	ldr	r2, [r3, #4]
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	697a      	ldr	r2, [r7, #20]
 80097ac:	621a      	str	r2, [r3, #32]
}
 80097ae:	bf00      	nop
 80097b0:	371c      	adds	r7, #28
 80097b2:	46bd      	mov	sp, r7
 80097b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b8:	4770      	bx	lr
 80097ba:	bf00      	nop
 80097bc:	40010000 	.word	0x40010000

080097c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80097c0:	b480      	push	{r7}
 80097c2:	b087      	sub	sp, #28
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	6078      	str	r0, [r7, #4]
 80097c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	6a1b      	ldr	r3, [r3, #32]
 80097ce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	6a1b      	ldr	r3, [r3, #32]
 80097da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	685b      	ldr	r3, [r3, #4]
 80097e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	69db      	ldr	r3, [r3, #28]
 80097e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80097ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	f023 0303 	bic.w	r3, r3, #3
 80097f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80097f8:	683b      	ldr	r3, [r7, #0]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	68fa      	ldr	r2, [r7, #12]
 80097fe:	4313      	orrs	r3, r2
 8009800:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009802:	697b      	ldr	r3, [r7, #20]
 8009804:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009808:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800980a:	683b      	ldr	r3, [r7, #0]
 800980c:	689b      	ldr	r3, [r3, #8]
 800980e:	021b      	lsls	r3, r3, #8
 8009810:	697a      	ldr	r2, [r7, #20]
 8009812:	4313      	orrs	r3, r2
 8009814:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	4a1d      	ldr	r2, [pc, #116]	; (8009890 <TIM_OC3_SetConfig+0xd0>)
 800981a:	4293      	cmp	r3, r2
 800981c:	d10d      	bne.n	800983a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800981e:	697b      	ldr	r3, [r7, #20]
 8009820:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009824:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009826:	683b      	ldr	r3, [r7, #0]
 8009828:	68db      	ldr	r3, [r3, #12]
 800982a:	021b      	lsls	r3, r3, #8
 800982c:	697a      	ldr	r2, [r7, #20]
 800982e:	4313      	orrs	r3, r2
 8009830:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009832:	697b      	ldr	r3, [r7, #20]
 8009834:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009838:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	4a14      	ldr	r2, [pc, #80]	; (8009890 <TIM_OC3_SetConfig+0xd0>)
 800983e:	4293      	cmp	r3, r2
 8009840:	d113      	bne.n	800986a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009842:	693b      	ldr	r3, [r7, #16]
 8009844:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009848:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800984a:	693b      	ldr	r3, [r7, #16]
 800984c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009850:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009852:	683b      	ldr	r3, [r7, #0]
 8009854:	695b      	ldr	r3, [r3, #20]
 8009856:	011b      	lsls	r3, r3, #4
 8009858:	693a      	ldr	r2, [r7, #16]
 800985a:	4313      	orrs	r3, r2
 800985c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800985e:	683b      	ldr	r3, [r7, #0]
 8009860:	699b      	ldr	r3, [r3, #24]
 8009862:	011b      	lsls	r3, r3, #4
 8009864:	693a      	ldr	r2, [r7, #16]
 8009866:	4313      	orrs	r3, r2
 8009868:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	693a      	ldr	r2, [r7, #16]
 800986e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	68fa      	ldr	r2, [r7, #12]
 8009874:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009876:	683b      	ldr	r3, [r7, #0]
 8009878:	685a      	ldr	r2, [r3, #4]
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	697a      	ldr	r2, [r7, #20]
 8009882:	621a      	str	r2, [r3, #32]
}
 8009884:	bf00      	nop
 8009886:	371c      	adds	r7, #28
 8009888:	46bd      	mov	sp, r7
 800988a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988e:	4770      	bx	lr
 8009890:	40010000 	.word	0x40010000

08009894 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009894:	b480      	push	{r7}
 8009896:	b087      	sub	sp, #28
 8009898:	af00      	add	r7, sp, #0
 800989a:	6078      	str	r0, [r7, #4]
 800989c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	6a1b      	ldr	r3, [r3, #32]
 80098a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	6a1b      	ldr	r3, [r3, #32]
 80098ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	685b      	ldr	r3, [r3, #4]
 80098b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	69db      	ldr	r3, [r3, #28]
 80098ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80098c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80098ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80098cc:	683b      	ldr	r3, [r7, #0]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	021b      	lsls	r3, r3, #8
 80098d2:	68fa      	ldr	r2, [r7, #12]
 80098d4:	4313      	orrs	r3, r2
 80098d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80098d8:	693b      	ldr	r3, [r7, #16]
 80098da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80098de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80098e0:	683b      	ldr	r3, [r7, #0]
 80098e2:	689b      	ldr	r3, [r3, #8]
 80098e4:	031b      	lsls	r3, r3, #12
 80098e6:	693a      	ldr	r2, [r7, #16]
 80098e8:	4313      	orrs	r3, r2
 80098ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	4a10      	ldr	r2, [pc, #64]	; (8009930 <TIM_OC4_SetConfig+0x9c>)
 80098f0:	4293      	cmp	r3, r2
 80098f2:	d109      	bne.n	8009908 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80098f4:	697b      	ldr	r3, [r7, #20]
 80098f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80098fa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80098fc:	683b      	ldr	r3, [r7, #0]
 80098fe:	695b      	ldr	r3, [r3, #20]
 8009900:	019b      	lsls	r3, r3, #6
 8009902:	697a      	ldr	r2, [r7, #20]
 8009904:	4313      	orrs	r3, r2
 8009906:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	697a      	ldr	r2, [r7, #20]
 800990c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	68fa      	ldr	r2, [r7, #12]
 8009912:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009914:	683b      	ldr	r3, [r7, #0]
 8009916:	685a      	ldr	r2, [r3, #4]
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	693a      	ldr	r2, [r7, #16]
 8009920:	621a      	str	r2, [r3, #32]
}
 8009922:	bf00      	nop
 8009924:	371c      	adds	r7, #28
 8009926:	46bd      	mov	sp, r7
 8009928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992c:	4770      	bx	lr
 800992e:	bf00      	nop
 8009930:	40010000 	.word	0x40010000

08009934 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009934:	b480      	push	{r7}
 8009936:	b087      	sub	sp, #28
 8009938:	af00      	add	r7, sp, #0
 800993a:	60f8      	str	r0, [r7, #12]
 800993c:	60b9      	str	r1, [r7, #8]
 800993e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	6a1b      	ldr	r3, [r3, #32]
 8009944:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	6a1b      	ldr	r3, [r3, #32]
 800994a:	f023 0201 	bic.w	r2, r3, #1
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	699b      	ldr	r3, [r3, #24]
 8009956:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009958:	693b      	ldr	r3, [r7, #16]
 800995a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800995e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	011b      	lsls	r3, r3, #4
 8009964:	693a      	ldr	r2, [r7, #16]
 8009966:	4313      	orrs	r3, r2
 8009968:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800996a:	697b      	ldr	r3, [r7, #20]
 800996c:	f023 030a 	bic.w	r3, r3, #10
 8009970:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009972:	697a      	ldr	r2, [r7, #20]
 8009974:	68bb      	ldr	r3, [r7, #8]
 8009976:	4313      	orrs	r3, r2
 8009978:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	693a      	ldr	r2, [r7, #16]
 800997e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	697a      	ldr	r2, [r7, #20]
 8009984:	621a      	str	r2, [r3, #32]
}
 8009986:	bf00      	nop
 8009988:	371c      	adds	r7, #28
 800998a:	46bd      	mov	sp, r7
 800998c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009990:	4770      	bx	lr

08009992 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009992:	b480      	push	{r7}
 8009994:	b087      	sub	sp, #28
 8009996:	af00      	add	r7, sp, #0
 8009998:	60f8      	str	r0, [r7, #12]
 800999a:	60b9      	str	r1, [r7, #8]
 800999c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	6a1b      	ldr	r3, [r3, #32]
 80099a2:	f023 0210 	bic.w	r2, r3, #16
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	699b      	ldr	r3, [r3, #24]
 80099ae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	6a1b      	ldr	r3, [r3, #32]
 80099b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80099b6:	697b      	ldr	r3, [r7, #20]
 80099b8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80099bc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	031b      	lsls	r3, r3, #12
 80099c2:	697a      	ldr	r2, [r7, #20]
 80099c4:	4313      	orrs	r3, r2
 80099c6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80099c8:	693b      	ldr	r3, [r7, #16]
 80099ca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80099ce:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80099d0:	68bb      	ldr	r3, [r7, #8]
 80099d2:	011b      	lsls	r3, r3, #4
 80099d4:	693a      	ldr	r2, [r7, #16]
 80099d6:	4313      	orrs	r3, r2
 80099d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	697a      	ldr	r2, [r7, #20]
 80099de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	693a      	ldr	r2, [r7, #16]
 80099e4:	621a      	str	r2, [r3, #32]
}
 80099e6:	bf00      	nop
 80099e8:	371c      	adds	r7, #28
 80099ea:	46bd      	mov	sp, r7
 80099ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f0:	4770      	bx	lr

080099f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80099f2:	b480      	push	{r7}
 80099f4:	b085      	sub	sp, #20
 80099f6:	af00      	add	r7, sp, #0
 80099f8:	6078      	str	r0, [r7, #4]
 80099fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	689b      	ldr	r3, [r3, #8]
 8009a00:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a08:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009a0a:	683a      	ldr	r2, [r7, #0]
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	4313      	orrs	r3, r2
 8009a10:	f043 0307 	orr.w	r3, r3, #7
 8009a14:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	68fa      	ldr	r2, [r7, #12]
 8009a1a:	609a      	str	r2, [r3, #8]
}
 8009a1c:	bf00      	nop
 8009a1e:	3714      	adds	r7, #20
 8009a20:	46bd      	mov	sp, r7
 8009a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a26:	4770      	bx	lr

08009a28 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009a28:	b480      	push	{r7}
 8009a2a:	b087      	sub	sp, #28
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	60f8      	str	r0, [r7, #12]
 8009a30:	60b9      	str	r1, [r7, #8]
 8009a32:	607a      	str	r2, [r7, #4]
 8009a34:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	689b      	ldr	r3, [r3, #8]
 8009a3a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009a3c:	697b      	ldr	r3, [r7, #20]
 8009a3e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009a42:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009a44:	683b      	ldr	r3, [r7, #0]
 8009a46:	021a      	lsls	r2, r3, #8
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	431a      	orrs	r2, r3
 8009a4c:	68bb      	ldr	r3, [r7, #8]
 8009a4e:	4313      	orrs	r3, r2
 8009a50:	697a      	ldr	r2, [r7, #20]
 8009a52:	4313      	orrs	r3, r2
 8009a54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	697a      	ldr	r2, [r7, #20]
 8009a5a:	609a      	str	r2, [r3, #8]
}
 8009a5c:	bf00      	nop
 8009a5e:	371c      	adds	r7, #28
 8009a60:	46bd      	mov	sp, r7
 8009a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a66:	4770      	bx	lr

08009a68 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009a68:	b480      	push	{r7}
 8009a6a:	b087      	sub	sp, #28
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	60f8      	str	r0, [r7, #12]
 8009a70:	60b9      	str	r1, [r7, #8]
 8009a72:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009a74:	68bb      	ldr	r3, [r7, #8]
 8009a76:	f003 031f 	and.w	r3, r3, #31
 8009a7a:	2201      	movs	r2, #1
 8009a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8009a80:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	6a1a      	ldr	r2, [r3, #32]
 8009a86:	697b      	ldr	r3, [r7, #20]
 8009a88:	43db      	mvns	r3, r3
 8009a8a:	401a      	ands	r2, r3
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	6a1a      	ldr	r2, [r3, #32]
 8009a94:	68bb      	ldr	r3, [r7, #8]
 8009a96:	f003 031f 	and.w	r3, r3, #31
 8009a9a:	6879      	ldr	r1, [r7, #4]
 8009a9c:	fa01 f303 	lsl.w	r3, r1, r3
 8009aa0:	431a      	orrs	r2, r3
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	621a      	str	r2, [r3, #32]
}
 8009aa6:	bf00      	nop
 8009aa8:	371c      	adds	r7, #28
 8009aaa:	46bd      	mov	sp, r7
 8009aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab0:	4770      	bx	lr
	...

08009ab4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009ab4:	b480      	push	{r7}
 8009ab6:	b085      	sub	sp, #20
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	6078      	str	r0, [r7, #4]
 8009abc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009ac4:	2b01      	cmp	r3, #1
 8009ac6:	d101      	bne.n	8009acc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009ac8:	2302      	movs	r3, #2
 8009aca:	e050      	b.n	8009b6e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	2201      	movs	r2, #1
 8009ad0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	2202      	movs	r2, #2
 8009ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	685b      	ldr	r3, [r3, #4]
 8009ae2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	689b      	ldr	r3, [r3, #8]
 8009aea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009af2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009af4:	683b      	ldr	r3, [r7, #0]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	68fa      	ldr	r2, [r7, #12]
 8009afa:	4313      	orrs	r3, r2
 8009afc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	68fa      	ldr	r2, [r7, #12]
 8009b04:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	4a1c      	ldr	r2, [pc, #112]	; (8009b7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8009b0c:	4293      	cmp	r3, r2
 8009b0e:	d018      	beq.n	8009b42 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b18:	d013      	beq.n	8009b42 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	4a18      	ldr	r2, [pc, #96]	; (8009b80 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8009b20:	4293      	cmp	r3, r2
 8009b22:	d00e      	beq.n	8009b42 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	4a16      	ldr	r2, [pc, #88]	; (8009b84 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8009b2a:	4293      	cmp	r3, r2
 8009b2c:	d009      	beq.n	8009b42 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	4a15      	ldr	r2, [pc, #84]	; (8009b88 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8009b34:	4293      	cmp	r3, r2
 8009b36:	d004      	beq.n	8009b42 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	4a13      	ldr	r2, [pc, #76]	; (8009b8c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8009b3e:	4293      	cmp	r3, r2
 8009b40:	d10c      	bne.n	8009b5c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009b42:	68bb      	ldr	r3, [r7, #8]
 8009b44:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009b48:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009b4a:	683b      	ldr	r3, [r7, #0]
 8009b4c:	685b      	ldr	r3, [r3, #4]
 8009b4e:	68ba      	ldr	r2, [r7, #8]
 8009b50:	4313      	orrs	r3, r2
 8009b52:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	68ba      	ldr	r2, [r7, #8]
 8009b5a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	2201      	movs	r2, #1
 8009b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	2200      	movs	r2, #0
 8009b68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009b6c:	2300      	movs	r3, #0
}
 8009b6e:	4618      	mov	r0, r3
 8009b70:	3714      	adds	r7, #20
 8009b72:	46bd      	mov	sp, r7
 8009b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b78:	4770      	bx	lr
 8009b7a:	bf00      	nop
 8009b7c:	40010000 	.word	0x40010000
 8009b80:	40000400 	.word	0x40000400
 8009b84:	40000800 	.word	0x40000800
 8009b88:	40000c00 	.word	0x40000c00
 8009b8c:	40014000 	.word	0x40014000

08009b90 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009b90:	b480      	push	{r7}
 8009b92:	b083      	sub	sp, #12
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009b98:	bf00      	nop
 8009b9a:	370c      	adds	r7, #12
 8009b9c:	46bd      	mov	sp, r7
 8009b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba2:	4770      	bx	lr

08009ba4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009ba4:	b480      	push	{r7}
 8009ba6:	b083      	sub	sp, #12
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009bac:	bf00      	nop
 8009bae:	370c      	adds	r7, #12
 8009bb0:	46bd      	mov	sp, r7
 8009bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb6:	4770      	bx	lr

08009bb8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009bb8:	b580      	push	{r7, lr}
 8009bba:	b082      	sub	sp, #8
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d101      	bne.n	8009bca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009bc6:	2301      	movs	r3, #1
 8009bc8:	e03f      	b.n	8009c4a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009bd0:	b2db      	uxtb	r3, r3
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d106      	bne.n	8009be4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	2200      	movs	r2, #0
 8009bda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009bde:	6878      	ldr	r0, [r7, #4]
 8009be0:	f7f9 fa54 	bl	800308c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	2224      	movs	r2, #36	; 0x24
 8009be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	68da      	ldr	r2, [r3, #12]
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009bfa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009bfc:	6878      	ldr	r0, [r7, #4]
 8009bfe:	f000 fdd1 	bl	800a7a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	691a      	ldr	r2, [r3, #16]
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009c10:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	695a      	ldr	r2, [r3, #20]
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009c20:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	68da      	ldr	r2, [r3, #12]
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009c30:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	2200      	movs	r2, #0
 8009c36:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	2220      	movs	r2, #32
 8009c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	2220      	movs	r2, #32
 8009c44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009c48:	2300      	movs	r3, #0
}
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	3708      	adds	r7, #8
 8009c4e:	46bd      	mov	sp, r7
 8009c50:	bd80      	pop	{r7, pc}
	...

08009c54 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8009c54:	b580      	push	{r7, lr}
 8009c56:	b08c      	sub	sp, #48	; 0x30
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	60f8      	str	r0, [r7, #12]
 8009c5c:	60b9      	str	r1, [r7, #8]
 8009c5e:	4613      	mov	r3, r2
 8009c60:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009c68:	b2db      	uxtb	r3, r3
 8009c6a:	2b20      	cmp	r3, #32
 8009c6c:	d165      	bne.n	8009d3a <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8009c6e:	68bb      	ldr	r3, [r7, #8]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d002      	beq.n	8009c7a <HAL_UART_Transmit_DMA+0x26>
 8009c74:	88fb      	ldrh	r3, [r7, #6]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d101      	bne.n	8009c7e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8009c7a:	2301      	movs	r3, #1
 8009c7c:	e05e      	b.n	8009d3c <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009c84:	2b01      	cmp	r3, #1
 8009c86:	d101      	bne.n	8009c8c <HAL_UART_Transmit_DMA+0x38>
 8009c88:	2302      	movs	r3, #2
 8009c8a:	e057      	b.n	8009d3c <HAL_UART_Transmit_DMA+0xe8>
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	2201      	movs	r2, #1
 8009c90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8009c94:	68ba      	ldr	r2, [r7, #8]
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	88fa      	ldrh	r2, [r7, #6]
 8009c9e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	88fa      	ldrh	r2, [r7, #6]
 8009ca4:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	2200      	movs	r2, #0
 8009caa:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	2221      	movs	r2, #33	; 0x21
 8009cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cb8:	4a22      	ldr	r2, [pc, #136]	; (8009d44 <HAL_UART_Transmit_DMA+0xf0>)
 8009cba:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cc0:	4a21      	ldr	r2, [pc, #132]	; (8009d48 <HAL_UART_Transmit_DMA+0xf4>)
 8009cc2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cc8:	4a20      	ldr	r2, [pc, #128]	; (8009d4c <HAL_UART_Transmit_DMA+0xf8>)
 8009cca:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cd0:	2200      	movs	r2, #0
 8009cd2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8009cd4:	f107 0308 	add.w	r3, r7, #8
 8009cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8009cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ce0:	6819      	ldr	r1, [r3, #0]
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	3304      	adds	r3, #4
 8009ce8:	461a      	mov	r2, r3
 8009cea:	88fb      	ldrh	r3, [r7, #6]
 8009cec:	f7fa fba2 	bl	8004434 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009cf8:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	2200      	movs	r2, #0
 8009cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	3314      	adds	r3, #20
 8009d08:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d0a:	69bb      	ldr	r3, [r7, #24]
 8009d0c:	e853 3f00 	ldrex	r3, [r3]
 8009d10:	617b      	str	r3, [r7, #20]
   return(result);
 8009d12:	697b      	ldr	r3, [r7, #20]
 8009d14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d18:	62bb      	str	r3, [r7, #40]	; 0x28
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	3314      	adds	r3, #20
 8009d20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009d22:	627a      	str	r2, [r7, #36]	; 0x24
 8009d24:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d26:	6a39      	ldr	r1, [r7, #32]
 8009d28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d2a:	e841 2300 	strex	r3, r2, [r1]
 8009d2e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009d30:	69fb      	ldr	r3, [r7, #28]
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d1e5      	bne.n	8009d02 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8009d36:	2300      	movs	r3, #0
 8009d38:	e000      	b.n	8009d3c <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8009d3a:	2302      	movs	r3, #2
  }
}
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	3730      	adds	r7, #48	; 0x30
 8009d40:	46bd      	mov	sp, r7
 8009d42:	bd80      	pop	{r7, pc}
 8009d44:	0800a2d5 	.word	0x0800a2d5
 8009d48:	0800a36f 	.word	0x0800a36f
 8009d4c:	0800a38b 	.word	0x0800a38b

08009d50 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009d50:	b580      	push	{r7, lr}
 8009d52:	b0ba      	sub	sp, #232	; 0xe8
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	68db      	ldr	r3, [r3, #12]
 8009d68:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	695b      	ldr	r3, [r3, #20]
 8009d72:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8009d76:	2300      	movs	r3, #0
 8009d78:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009d82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d86:	f003 030f 	and.w	r3, r3, #15
 8009d8a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8009d8e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d10f      	bne.n	8009db6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009d96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d9a:	f003 0320 	and.w	r3, r3, #32
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d009      	beq.n	8009db6 <HAL_UART_IRQHandler+0x66>
 8009da2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009da6:	f003 0320 	and.w	r3, r3, #32
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d003      	beq.n	8009db6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009dae:	6878      	ldr	r0, [r7, #4]
 8009db0:	f000 fc3c 	bl	800a62c <UART_Receive_IT>
      return;
 8009db4:	e256      	b.n	800a264 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009db6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	f000 80de 	beq.w	8009f7c <HAL_UART_IRQHandler+0x22c>
 8009dc0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009dc4:	f003 0301 	and.w	r3, r3, #1
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d106      	bne.n	8009dda <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009dcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009dd0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	f000 80d1 	beq.w	8009f7c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009dda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009dde:	f003 0301 	and.w	r3, r3, #1
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d00b      	beq.n	8009dfe <HAL_UART_IRQHandler+0xae>
 8009de6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009dea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d005      	beq.n	8009dfe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009df6:	f043 0201 	orr.w	r2, r3, #1
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009dfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e02:	f003 0304 	and.w	r3, r3, #4
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d00b      	beq.n	8009e22 <HAL_UART_IRQHandler+0xd2>
 8009e0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009e0e:	f003 0301 	and.w	r3, r3, #1
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d005      	beq.n	8009e22 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e1a:	f043 0202 	orr.w	r2, r3, #2
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009e22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e26:	f003 0302 	and.w	r3, r3, #2
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d00b      	beq.n	8009e46 <HAL_UART_IRQHandler+0xf6>
 8009e2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009e32:	f003 0301 	and.w	r3, r3, #1
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d005      	beq.n	8009e46 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e3e:	f043 0204 	orr.w	r2, r3, #4
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009e46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e4a:	f003 0308 	and.w	r3, r3, #8
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d011      	beq.n	8009e76 <HAL_UART_IRQHandler+0x126>
 8009e52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009e56:	f003 0320 	and.w	r3, r3, #32
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d105      	bne.n	8009e6a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009e5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009e62:	f003 0301 	and.w	r3, r3, #1
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d005      	beq.n	8009e76 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e6e:	f043 0208 	orr.w	r2, r3, #8
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	f000 81ed 	beq.w	800a25a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009e80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e84:	f003 0320 	and.w	r3, r3, #32
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d008      	beq.n	8009e9e <HAL_UART_IRQHandler+0x14e>
 8009e8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009e90:	f003 0320 	and.w	r3, r3, #32
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d002      	beq.n	8009e9e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009e98:	6878      	ldr	r0, [r7, #4]
 8009e9a:	f000 fbc7 	bl	800a62c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	695b      	ldr	r3, [r3, #20]
 8009ea4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ea8:	2b40      	cmp	r3, #64	; 0x40
 8009eaa:	bf0c      	ite	eq
 8009eac:	2301      	moveq	r3, #1
 8009eae:	2300      	movne	r3, #0
 8009eb0:	b2db      	uxtb	r3, r3
 8009eb2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009eba:	f003 0308 	and.w	r3, r3, #8
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d103      	bne.n	8009eca <HAL_UART_IRQHandler+0x17a>
 8009ec2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d04f      	beq.n	8009f6a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009eca:	6878      	ldr	r0, [r7, #4]
 8009ecc:	f000 facf 	bl	800a46e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	695b      	ldr	r3, [r3, #20]
 8009ed6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009eda:	2b40      	cmp	r3, #64	; 0x40
 8009edc:	d141      	bne.n	8009f62 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	3314      	adds	r3, #20
 8009ee4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ee8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009eec:	e853 3f00 	ldrex	r3, [r3]
 8009ef0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009ef4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009ef8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009efc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	3314      	adds	r3, #20
 8009f06:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009f0a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009f0e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f12:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009f16:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009f1a:	e841 2300 	strex	r3, r2, [r1]
 8009f1e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009f22:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d1d9      	bne.n	8009ede <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d013      	beq.n	8009f5a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f36:	4a7d      	ldr	r2, [pc, #500]	; (800a12c <HAL_UART_IRQHandler+0x3dc>)
 8009f38:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f3e:	4618      	mov	r0, r3
 8009f40:	f7fa fb40 	bl	80045c4 <HAL_DMA_Abort_IT>
 8009f44:	4603      	mov	r3, r0
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d016      	beq.n	8009f78 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f50:	687a      	ldr	r2, [r7, #4]
 8009f52:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009f54:	4610      	mov	r0, r2
 8009f56:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f58:	e00e      	b.n	8009f78 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009f5a:	6878      	ldr	r0, [r7, #4]
 8009f5c:	f000 f9a4 	bl	800a2a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f60:	e00a      	b.n	8009f78 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009f62:	6878      	ldr	r0, [r7, #4]
 8009f64:	f000 f9a0 	bl	800a2a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f68:	e006      	b.n	8009f78 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009f6a:	6878      	ldr	r0, [r7, #4]
 8009f6c:	f000 f99c 	bl	800a2a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	2200      	movs	r2, #0
 8009f74:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8009f76:	e170      	b.n	800a25a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f78:	bf00      	nop
    return;
 8009f7a:	e16e      	b.n	800a25a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f80:	2b01      	cmp	r3, #1
 8009f82:	f040 814a 	bne.w	800a21a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009f86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009f8a:	f003 0310 	and.w	r3, r3, #16
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	f000 8143 	beq.w	800a21a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009f94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009f98:	f003 0310 	and.w	r3, r3, #16
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	f000 813c 	beq.w	800a21a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009fa2:	2300      	movs	r3, #0
 8009fa4:	60bb      	str	r3, [r7, #8]
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	60bb      	str	r3, [r7, #8]
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	685b      	ldr	r3, [r3, #4]
 8009fb4:	60bb      	str	r3, [r7, #8]
 8009fb6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	695b      	ldr	r3, [r3, #20]
 8009fbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fc2:	2b40      	cmp	r3, #64	; 0x40
 8009fc4:	f040 80b4 	bne.w	800a130 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	685b      	ldr	r3, [r3, #4]
 8009fd0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009fd4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	f000 8140 	beq.w	800a25e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009fe2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009fe6:	429a      	cmp	r2, r3
 8009fe8:	f080 8139 	bcs.w	800a25e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009ff2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ff8:	69db      	ldr	r3, [r3, #28]
 8009ffa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009ffe:	f000 8088 	beq.w	800a112 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	330c      	adds	r3, #12
 800a008:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a00c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a010:	e853 3f00 	ldrex	r3, [r3]
 800a014:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a018:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a01c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a020:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	330c      	adds	r3, #12
 800a02a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800a02e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a032:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a036:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a03a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a03e:	e841 2300 	strex	r3, r2, [r1]
 800a042:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a046:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d1d9      	bne.n	800a002 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	3314      	adds	r3, #20
 800a054:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a056:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a058:	e853 3f00 	ldrex	r3, [r3]
 800a05c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a05e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a060:	f023 0301 	bic.w	r3, r3, #1
 800a064:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	3314      	adds	r3, #20
 800a06e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a072:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a076:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a078:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a07a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a07e:	e841 2300 	strex	r3, r2, [r1]
 800a082:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a084:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a086:	2b00      	cmp	r3, #0
 800a088:	d1e1      	bne.n	800a04e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	3314      	adds	r3, #20
 800a090:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a092:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a094:	e853 3f00 	ldrex	r3, [r3]
 800a098:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a09a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a09c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a0a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	3314      	adds	r3, #20
 800a0aa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a0ae:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a0b0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0b2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a0b4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a0b6:	e841 2300 	strex	r3, r2, [r1]
 800a0ba:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a0bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d1e3      	bne.n	800a08a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	2220      	movs	r2, #32
 800a0c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	2200      	movs	r2, #0
 800a0ce:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	330c      	adds	r3, #12
 800a0d6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a0da:	e853 3f00 	ldrex	r3, [r3]
 800a0de:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a0e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a0e2:	f023 0310 	bic.w	r3, r3, #16
 800a0e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	330c      	adds	r3, #12
 800a0f0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800a0f4:	65ba      	str	r2, [r7, #88]	; 0x58
 800a0f6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0f8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a0fa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a0fc:	e841 2300 	strex	r3, r2, [r1]
 800a100:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a102:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a104:	2b00      	cmp	r3, #0
 800a106:	d1e3      	bne.n	800a0d0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a10c:	4618      	mov	r0, r3
 800a10e:	f7fa f9e9 	bl	80044e4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a11a:	b29b      	uxth	r3, r3
 800a11c:	1ad3      	subs	r3, r2, r3
 800a11e:	b29b      	uxth	r3, r3
 800a120:	4619      	mov	r1, r3
 800a122:	6878      	ldr	r0, [r7, #4]
 800a124:	f000 f8ca 	bl	800a2bc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a128:	e099      	b.n	800a25e <HAL_UART_IRQHandler+0x50e>
 800a12a:	bf00      	nop
 800a12c:	0800a535 	.word	0x0800a535
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a138:	b29b      	uxth	r3, r3
 800a13a:	1ad3      	subs	r3, r2, r3
 800a13c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a144:	b29b      	uxth	r3, r3
 800a146:	2b00      	cmp	r3, #0
 800a148:	f000 808b 	beq.w	800a262 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800a14c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a150:	2b00      	cmp	r3, #0
 800a152:	f000 8086 	beq.w	800a262 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	330c      	adds	r3, #12
 800a15c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a15e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a160:	e853 3f00 	ldrex	r3, [r3]
 800a164:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a166:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a168:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a16c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	330c      	adds	r3, #12
 800a176:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800a17a:	647a      	str	r2, [r7, #68]	; 0x44
 800a17c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a17e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a180:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a182:	e841 2300 	strex	r3, r2, [r1]
 800a186:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a188:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d1e3      	bne.n	800a156 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	3314      	adds	r3, #20
 800a194:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a198:	e853 3f00 	ldrex	r3, [r3]
 800a19c:	623b      	str	r3, [r7, #32]
   return(result);
 800a19e:	6a3b      	ldr	r3, [r7, #32]
 800a1a0:	f023 0301 	bic.w	r3, r3, #1
 800a1a4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	3314      	adds	r3, #20
 800a1ae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a1b2:	633a      	str	r2, [r7, #48]	; 0x30
 800a1b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a1b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a1ba:	e841 2300 	strex	r3, r2, [r1]
 800a1be:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a1c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d1e3      	bne.n	800a18e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	2220      	movs	r2, #32
 800a1ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	2200      	movs	r2, #0
 800a1d2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	330c      	adds	r3, #12
 800a1da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1dc:	693b      	ldr	r3, [r7, #16]
 800a1de:	e853 3f00 	ldrex	r3, [r3]
 800a1e2:	60fb      	str	r3, [r7, #12]
   return(result);
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	f023 0310 	bic.w	r3, r3, #16
 800a1ea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	330c      	adds	r3, #12
 800a1f4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800a1f8:	61fa      	str	r2, [r7, #28]
 800a1fa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1fc:	69b9      	ldr	r1, [r7, #24]
 800a1fe:	69fa      	ldr	r2, [r7, #28]
 800a200:	e841 2300 	strex	r3, r2, [r1]
 800a204:	617b      	str	r3, [r7, #20]
   return(result);
 800a206:	697b      	ldr	r3, [r7, #20]
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d1e3      	bne.n	800a1d4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a20c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a210:	4619      	mov	r1, r3
 800a212:	6878      	ldr	r0, [r7, #4]
 800a214:	f000 f852 	bl	800a2bc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a218:	e023      	b.n	800a262 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a21a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a21e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a222:	2b00      	cmp	r3, #0
 800a224:	d009      	beq.n	800a23a <HAL_UART_IRQHandler+0x4ea>
 800a226:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a22a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d003      	beq.n	800a23a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800a232:	6878      	ldr	r0, [r7, #4]
 800a234:	f000 f992 	bl	800a55c <UART_Transmit_IT>
    return;
 800a238:	e014      	b.n	800a264 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a23a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a23e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a242:	2b00      	cmp	r3, #0
 800a244:	d00e      	beq.n	800a264 <HAL_UART_IRQHandler+0x514>
 800a246:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a24a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d008      	beq.n	800a264 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800a252:	6878      	ldr	r0, [r7, #4]
 800a254:	f000 f9d2 	bl	800a5fc <UART_EndTransmit_IT>
    return;
 800a258:	e004      	b.n	800a264 <HAL_UART_IRQHandler+0x514>
    return;
 800a25a:	bf00      	nop
 800a25c:	e002      	b.n	800a264 <HAL_UART_IRQHandler+0x514>
      return;
 800a25e:	bf00      	nop
 800a260:	e000      	b.n	800a264 <HAL_UART_IRQHandler+0x514>
      return;
 800a262:	bf00      	nop
  }
}
 800a264:	37e8      	adds	r7, #232	; 0xe8
 800a266:	46bd      	mov	sp, r7
 800a268:	bd80      	pop	{r7, pc}
 800a26a:	bf00      	nop

0800a26c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a26c:	b480      	push	{r7}
 800a26e:	b083      	sub	sp, #12
 800a270:	af00      	add	r7, sp, #0
 800a272:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a274:	bf00      	nop
 800a276:	370c      	adds	r7, #12
 800a278:	46bd      	mov	sp, r7
 800a27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a27e:	4770      	bx	lr

0800a280 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a280:	b480      	push	{r7}
 800a282:	b083      	sub	sp, #12
 800a284:	af00      	add	r7, sp, #0
 800a286:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800a288:	bf00      	nop
 800a28a:	370c      	adds	r7, #12
 800a28c:	46bd      	mov	sp, r7
 800a28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a292:	4770      	bx	lr

0800a294 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a294:	b480      	push	{r7}
 800a296:	b083      	sub	sp, #12
 800a298:	af00      	add	r7, sp, #0
 800a29a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800a29c:	bf00      	nop
 800a29e:	370c      	adds	r7, #12
 800a2a0:	46bd      	mov	sp, r7
 800a2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a6:	4770      	bx	lr

0800a2a8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a2a8:	b480      	push	{r7}
 800a2aa:	b083      	sub	sp, #12
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a2b0:	bf00      	nop
 800a2b2:	370c      	adds	r7, #12
 800a2b4:	46bd      	mov	sp, r7
 800a2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ba:	4770      	bx	lr

0800a2bc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a2bc:	b480      	push	{r7}
 800a2be:	b083      	sub	sp, #12
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	6078      	str	r0, [r7, #4]
 800a2c4:	460b      	mov	r3, r1
 800a2c6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a2c8:	bf00      	nop
 800a2ca:	370c      	adds	r7, #12
 800a2cc:	46bd      	mov	sp, r7
 800a2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d2:	4770      	bx	lr

0800a2d4 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a2d4:	b580      	push	{r7, lr}
 800a2d6:	b090      	sub	sp, #64	; 0x40
 800a2d8:	af00      	add	r7, sp, #0
 800a2da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d137      	bne.n	800a360 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800a2f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a2f2:	2200      	movs	r2, #0
 800a2f4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a2f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	3314      	adds	r3, #20
 800a2fc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a300:	e853 3f00 	ldrex	r3, [r3]
 800a304:	623b      	str	r3, [r7, #32]
   return(result);
 800a306:	6a3b      	ldr	r3, [r7, #32]
 800a308:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a30c:	63bb      	str	r3, [r7, #56]	; 0x38
 800a30e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	3314      	adds	r3, #20
 800a314:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a316:	633a      	str	r2, [r7, #48]	; 0x30
 800a318:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a31a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a31c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a31e:	e841 2300 	strex	r3, r2, [r1]
 800a322:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a326:	2b00      	cmp	r3, #0
 800a328:	d1e5      	bne.n	800a2f6 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a32a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	330c      	adds	r3, #12
 800a330:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a332:	693b      	ldr	r3, [r7, #16]
 800a334:	e853 3f00 	ldrex	r3, [r3]
 800a338:	60fb      	str	r3, [r7, #12]
   return(result);
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a340:	637b      	str	r3, [r7, #52]	; 0x34
 800a342:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	330c      	adds	r3, #12
 800a348:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a34a:	61fa      	str	r2, [r7, #28]
 800a34c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a34e:	69b9      	ldr	r1, [r7, #24]
 800a350:	69fa      	ldr	r2, [r7, #28]
 800a352:	e841 2300 	strex	r3, r2, [r1]
 800a356:	617b      	str	r3, [r7, #20]
   return(result);
 800a358:	697b      	ldr	r3, [r7, #20]
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d1e5      	bne.n	800a32a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a35e:	e002      	b.n	800a366 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800a360:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800a362:	f7ff ff83 	bl	800a26c <HAL_UART_TxCpltCallback>
}
 800a366:	bf00      	nop
 800a368:	3740      	adds	r7, #64	; 0x40
 800a36a:	46bd      	mov	sp, r7
 800a36c:	bd80      	pop	{r7, pc}

0800a36e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a36e:	b580      	push	{r7, lr}
 800a370:	b084      	sub	sp, #16
 800a372:	af00      	add	r7, sp, #0
 800a374:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a37a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800a37c:	68f8      	ldr	r0, [r7, #12]
 800a37e:	f7ff ff7f 	bl	800a280 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a382:	bf00      	nop
 800a384:	3710      	adds	r7, #16
 800a386:	46bd      	mov	sp, r7
 800a388:	bd80      	pop	{r7, pc}

0800a38a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a38a:	b580      	push	{r7, lr}
 800a38c:	b084      	sub	sp, #16
 800a38e:	af00      	add	r7, sp, #0
 800a390:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800a392:	2300      	movs	r3, #0
 800a394:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a39a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800a39c:	68bb      	ldr	r3, [r7, #8]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	695b      	ldr	r3, [r3, #20]
 800a3a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a3a6:	2b80      	cmp	r3, #128	; 0x80
 800a3a8:	bf0c      	ite	eq
 800a3aa:	2301      	moveq	r3, #1
 800a3ac:	2300      	movne	r3, #0
 800a3ae:	b2db      	uxtb	r3, r3
 800a3b0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800a3b2:	68bb      	ldr	r3, [r7, #8]
 800a3b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a3b8:	b2db      	uxtb	r3, r3
 800a3ba:	2b21      	cmp	r3, #33	; 0x21
 800a3bc:	d108      	bne.n	800a3d0 <UART_DMAError+0x46>
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d005      	beq.n	800a3d0 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800a3c4:	68bb      	ldr	r3, [r7, #8]
 800a3c6:	2200      	movs	r2, #0
 800a3c8:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800a3ca:	68b8      	ldr	r0, [r7, #8]
 800a3cc:	f000 f827 	bl	800a41e <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a3d0:	68bb      	ldr	r3, [r7, #8]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	695b      	ldr	r3, [r3, #20]
 800a3d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3da:	2b40      	cmp	r3, #64	; 0x40
 800a3dc:	bf0c      	ite	eq
 800a3de:	2301      	moveq	r3, #1
 800a3e0:	2300      	movne	r3, #0
 800a3e2:	b2db      	uxtb	r3, r3
 800a3e4:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800a3e6:	68bb      	ldr	r3, [r7, #8]
 800a3e8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a3ec:	b2db      	uxtb	r3, r3
 800a3ee:	2b22      	cmp	r3, #34	; 0x22
 800a3f0:	d108      	bne.n	800a404 <UART_DMAError+0x7a>
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d005      	beq.n	800a404 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800a3f8:	68bb      	ldr	r3, [r7, #8]
 800a3fa:	2200      	movs	r2, #0
 800a3fc:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800a3fe:	68b8      	ldr	r0, [r7, #8]
 800a400:	f000 f835 	bl	800a46e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a404:	68bb      	ldr	r3, [r7, #8]
 800a406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a408:	f043 0210 	orr.w	r2, r3, #16
 800a40c:	68bb      	ldr	r3, [r7, #8]
 800a40e:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a410:	68b8      	ldr	r0, [r7, #8]
 800a412:	f7ff ff49 	bl	800a2a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a416:	bf00      	nop
 800a418:	3710      	adds	r7, #16
 800a41a:	46bd      	mov	sp, r7
 800a41c:	bd80      	pop	{r7, pc}

0800a41e <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a41e:	b480      	push	{r7}
 800a420:	b089      	sub	sp, #36	; 0x24
 800a422:	af00      	add	r7, sp, #0
 800a424:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	330c      	adds	r3, #12
 800a42c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	e853 3f00 	ldrex	r3, [r3]
 800a434:	60bb      	str	r3, [r7, #8]
   return(result);
 800a436:	68bb      	ldr	r3, [r7, #8]
 800a438:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a43c:	61fb      	str	r3, [r7, #28]
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	330c      	adds	r3, #12
 800a444:	69fa      	ldr	r2, [r7, #28]
 800a446:	61ba      	str	r2, [r7, #24]
 800a448:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a44a:	6979      	ldr	r1, [r7, #20]
 800a44c:	69ba      	ldr	r2, [r7, #24]
 800a44e:	e841 2300 	strex	r3, r2, [r1]
 800a452:	613b      	str	r3, [r7, #16]
   return(result);
 800a454:	693b      	ldr	r3, [r7, #16]
 800a456:	2b00      	cmp	r3, #0
 800a458:	d1e5      	bne.n	800a426 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	2220      	movs	r2, #32
 800a45e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800a462:	bf00      	nop
 800a464:	3724      	adds	r7, #36	; 0x24
 800a466:	46bd      	mov	sp, r7
 800a468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a46c:	4770      	bx	lr

0800a46e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a46e:	b480      	push	{r7}
 800a470:	b095      	sub	sp, #84	; 0x54
 800a472:	af00      	add	r7, sp, #0
 800a474:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	330c      	adds	r3, #12
 800a47c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a47e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a480:	e853 3f00 	ldrex	r3, [r3]
 800a484:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a488:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a48c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	330c      	adds	r3, #12
 800a494:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a496:	643a      	str	r2, [r7, #64]	; 0x40
 800a498:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a49a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a49c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a49e:	e841 2300 	strex	r3, r2, [r1]
 800a4a2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a4a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d1e5      	bne.n	800a476 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	3314      	adds	r3, #20
 800a4b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4b2:	6a3b      	ldr	r3, [r7, #32]
 800a4b4:	e853 3f00 	ldrex	r3, [r3]
 800a4b8:	61fb      	str	r3, [r7, #28]
   return(result);
 800a4ba:	69fb      	ldr	r3, [r7, #28]
 800a4bc:	f023 0301 	bic.w	r3, r3, #1
 800a4c0:	64bb      	str	r3, [r7, #72]	; 0x48
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	3314      	adds	r3, #20
 800a4c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a4ca:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a4cc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a4d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a4d2:	e841 2300 	strex	r3, r2, [r1]
 800a4d6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a4d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d1e5      	bne.n	800a4aa <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4e2:	2b01      	cmp	r3, #1
 800a4e4:	d119      	bne.n	800a51a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	330c      	adds	r3, #12
 800a4ec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	e853 3f00 	ldrex	r3, [r3]
 800a4f4:	60bb      	str	r3, [r7, #8]
   return(result);
 800a4f6:	68bb      	ldr	r3, [r7, #8]
 800a4f8:	f023 0310 	bic.w	r3, r3, #16
 800a4fc:	647b      	str	r3, [r7, #68]	; 0x44
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	330c      	adds	r3, #12
 800a504:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a506:	61ba      	str	r2, [r7, #24]
 800a508:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a50a:	6979      	ldr	r1, [r7, #20]
 800a50c:	69ba      	ldr	r2, [r7, #24]
 800a50e:	e841 2300 	strex	r3, r2, [r1]
 800a512:	613b      	str	r3, [r7, #16]
   return(result);
 800a514:	693b      	ldr	r3, [r7, #16]
 800a516:	2b00      	cmp	r3, #0
 800a518:	d1e5      	bne.n	800a4e6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	2220      	movs	r2, #32
 800a51e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	2200      	movs	r2, #0
 800a526:	631a      	str	r2, [r3, #48]	; 0x30
}
 800a528:	bf00      	nop
 800a52a:	3754      	adds	r7, #84	; 0x54
 800a52c:	46bd      	mov	sp, r7
 800a52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a532:	4770      	bx	lr

0800a534 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a534:	b580      	push	{r7, lr}
 800a536:	b084      	sub	sp, #16
 800a538:	af00      	add	r7, sp, #0
 800a53a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a540:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	2200      	movs	r2, #0
 800a546:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	2200      	movs	r2, #0
 800a54c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a54e:	68f8      	ldr	r0, [r7, #12]
 800a550:	f7ff feaa 	bl	800a2a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a554:	bf00      	nop
 800a556:	3710      	adds	r7, #16
 800a558:	46bd      	mov	sp, r7
 800a55a:	bd80      	pop	{r7, pc}

0800a55c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a55c:	b480      	push	{r7}
 800a55e:	b085      	sub	sp, #20
 800a560:	af00      	add	r7, sp, #0
 800a562:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a56a:	b2db      	uxtb	r3, r3
 800a56c:	2b21      	cmp	r3, #33	; 0x21
 800a56e:	d13e      	bne.n	800a5ee <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	689b      	ldr	r3, [r3, #8]
 800a574:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a578:	d114      	bne.n	800a5a4 <UART_Transmit_IT+0x48>
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	691b      	ldr	r3, [r3, #16]
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d110      	bne.n	800a5a4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	6a1b      	ldr	r3, [r3, #32]
 800a586:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	881b      	ldrh	r3, [r3, #0]
 800a58c:	461a      	mov	r2, r3
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a596:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	6a1b      	ldr	r3, [r3, #32]
 800a59c:	1c9a      	adds	r2, r3, #2
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	621a      	str	r2, [r3, #32]
 800a5a2:	e008      	b.n	800a5b6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	6a1b      	ldr	r3, [r3, #32]
 800a5a8:	1c59      	adds	r1, r3, #1
 800a5aa:	687a      	ldr	r2, [r7, #4]
 800a5ac:	6211      	str	r1, [r2, #32]
 800a5ae:	781a      	ldrb	r2, [r3, #0]
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a5ba:	b29b      	uxth	r3, r3
 800a5bc:	3b01      	subs	r3, #1
 800a5be:	b29b      	uxth	r3, r3
 800a5c0:	687a      	ldr	r2, [r7, #4]
 800a5c2:	4619      	mov	r1, r3
 800a5c4:	84d1      	strh	r1, [r2, #38]	; 0x26
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d10f      	bne.n	800a5ea <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	68da      	ldr	r2, [r3, #12]
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a5d8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	68da      	ldr	r2, [r3, #12]
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a5e8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a5ea:	2300      	movs	r3, #0
 800a5ec:	e000      	b.n	800a5f0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a5ee:	2302      	movs	r3, #2
  }
}
 800a5f0:	4618      	mov	r0, r3
 800a5f2:	3714      	adds	r7, #20
 800a5f4:	46bd      	mov	sp, r7
 800a5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5fa:	4770      	bx	lr

0800a5fc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a5fc:	b580      	push	{r7, lr}
 800a5fe:	b082      	sub	sp, #8
 800a600:	af00      	add	r7, sp, #0
 800a602:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	68da      	ldr	r2, [r3, #12]
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a612:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	2220      	movs	r2, #32
 800a618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a61c:	6878      	ldr	r0, [r7, #4]
 800a61e:	f7ff fe25 	bl	800a26c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a622:	2300      	movs	r3, #0
}
 800a624:	4618      	mov	r0, r3
 800a626:	3708      	adds	r7, #8
 800a628:	46bd      	mov	sp, r7
 800a62a:	bd80      	pop	{r7, pc}

0800a62c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a62c:	b580      	push	{r7, lr}
 800a62e:	b08c      	sub	sp, #48	; 0x30
 800a630:	af00      	add	r7, sp, #0
 800a632:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a63a:	b2db      	uxtb	r3, r3
 800a63c:	2b22      	cmp	r3, #34	; 0x22
 800a63e:	f040 80ab 	bne.w	800a798 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	689b      	ldr	r3, [r3, #8]
 800a646:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a64a:	d117      	bne.n	800a67c <UART_Receive_IT+0x50>
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	691b      	ldr	r3, [r3, #16]
 800a650:	2b00      	cmp	r3, #0
 800a652:	d113      	bne.n	800a67c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a654:	2300      	movs	r3, #0
 800a656:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a65c:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	685b      	ldr	r3, [r3, #4]
 800a664:	b29b      	uxth	r3, r3
 800a666:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a66a:	b29a      	uxth	r2, r3
 800a66c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a66e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a674:	1c9a      	adds	r2, r3, #2
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	629a      	str	r2, [r3, #40]	; 0x28
 800a67a:	e026      	b.n	800a6ca <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a680:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800a682:	2300      	movs	r3, #0
 800a684:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	689b      	ldr	r3, [r3, #8]
 800a68a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a68e:	d007      	beq.n	800a6a0 <UART_Receive_IT+0x74>
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	689b      	ldr	r3, [r3, #8]
 800a694:	2b00      	cmp	r3, #0
 800a696:	d10a      	bne.n	800a6ae <UART_Receive_IT+0x82>
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	691b      	ldr	r3, [r3, #16]
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d106      	bne.n	800a6ae <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	685b      	ldr	r3, [r3, #4]
 800a6a6:	b2da      	uxtb	r2, r3
 800a6a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6aa:	701a      	strb	r2, [r3, #0]
 800a6ac:	e008      	b.n	800a6c0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	685b      	ldr	r3, [r3, #4]
 800a6b4:	b2db      	uxtb	r3, r3
 800a6b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a6ba:	b2da      	uxtb	r2, r3
 800a6bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6be:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6c4:	1c5a      	adds	r2, r3, #1
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a6ce:	b29b      	uxth	r3, r3
 800a6d0:	3b01      	subs	r3, #1
 800a6d2:	b29b      	uxth	r3, r3
 800a6d4:	687a      	ldr	r2, [r7, #4]
 800a6d6:	4619      	mov	r1, r3
 800a6d8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d15a      	bne.n	800a794 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	68da      	ldr	r2, [r3, #12]
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	f022 0220 	bic.w	r2, r2, #32
 800a6ec:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	68da      	ldr	r2, [r3, #12]
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a6fc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	695a      	ldr	r2, [r3, #20]
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	f022 0201 	bic.w	r2, r2, #1
 800a70c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	2220      	movs	r2, #32
 800a712:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a71a:	2b01      	cmp	r3, #1
 800a71c:	d135      	bne.n	800a78a <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	2200      	movs	r2, #0
 800a722:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	330c      	adds	r3, #12
 800a72a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a72c:	697b      	ldr	r3, [r7, #20]
 800a72e:	e853 3f00 	ldrex	r3, [r3]
 800a732:	613b      	str	r3, [r7, #16]
   return(result);
 800a734:	693b      	ldr	r3, [r7, #16]
 800a736:	f023 0310 	bic.w	r3, r3, #16
 800a73a:	627b      	str	r3, [r7, #36]	; 0x24
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	330c      	adds	r3, #12
 800a742:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a744:	623a      	str	r2, [r7, #32]
 800a746:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a748:	69f9      	ldr	r1, [r7, #28]
 800a74a:	6a3a      	ldr	r2, [r7, #32]
 800a74c:	e841 2300 	strex	r3, r2, [r1]
 800a750:	61bb      	str	r3, [r7, #24]
   return(result);
 800a752:	69bb      	ldr	r3, [r7, #24]
 800a754:	2b00      	cmp	r3, #0
 800a756:	d1e5      	bne.n	800a724 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	f003 0310 	and.w	r3, r3, #16
 800a762:	2b10      	cmp	r3, #16
 800a764:	d10a      	bne.n	800a77c <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a766:	2300      	movs	r3, #0
 800a768:	60fb      	str	r3, [r7, #12]
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	60fb      	str	r3, [r7, #12]
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	685b      	ldr	r3, [r3, #4]
 800a778:	60fb      	str	r3, [r7, #12]
 800a77a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a780:	4619      	mov	r1, r3
 800a782:	6878      	ldr	r0, [r7, #4]
 800a784:	f7ff fd9a 	bl	800a2bc <HAL_UARTEx_RxEventCallback>
 800a788:	e002      	b.n	800a790 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a78a:	6878      	ldr	r0, [r7, #4]
 800a78c:	f7ff fd82 	bl	800a294 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a790:	2300      	movs	r3, #0
 800a792:	e002      	b.n	800a79a <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800a794:	2300      	movs	r3, #0
 800a796:	e000      	b.n	800a79a <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800a798:	2302      	movs	r3, #2
  }
}
 800a79a:	4618      	mov	r0, r3
 800a79c:	3730      	adds	r7, #48	; 0x30
 800a79e:	46bd      	mov	sp, r7
 800a7a0:	bd80      	pop	{r7, pc}
	...

0800a7a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a7a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a7a8:	b0c0      	sub	sp, #256	; 0x100
 800a7aa:	af00      	add	r7, sp, #0
 800a7ac:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a7b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	691b      	ldr	r3, [r3, #16]
 800a7b8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a7bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a7c0:	68d9      	ldr	r1, [r3, #12]
 800a7c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a7c6:	681a      	ldr	r2, [r3, #0]
 800a7c8:	ea40 0301 	orr.w	r3, r0, r1
 800a7cc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a7ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a7d2:	689a      	ldr	r2, [r3, #8]
 800a7d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a7d8:	691b      	ldr	r3, [r3, #16]
 800a7da:	431a      	orrs	r2, r3
 800a7dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a7e0:	695b      	ldr	r3, [r3, #20]
 800a7e2:	431a      	orrs	r2, r3
 800a7e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a7e8:	69db      	ldr	r3, [r3, #28]
 800a7ea:	4313      	orrs	r3, r2
 800a7ec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a7f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	68db      	ldr	r3, [r3, #12]
 800a7f8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800a7fc:	f021 010c 	bic.w	r1, r1, #12
 800a800:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a804:	681a      	ldr	r2, [r3, #0]
 800a806:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a80a:	430b      	orrs	r3, r1
 800a80c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a80e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	695b      	ldr	r3, [r3, #20]
 800a816:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800a81a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a81e:	6999      	ldr	r1, [r3, #24]
 800a820:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a824:	681a      	ldr	r2, [r3, #0]
 800a826:	ea40 0301 	orr.w	r3, r0, r1
 800a82a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a82c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a830:	681a      	ldr	r2, [r3, #0]
 800a832:	4b8f      	ldr	r3, [pc, #572]	; (800aa70 <UART_SetConfig+0x2cc>)
 800a834:	429a      	cmp	r2, r3
 800a836:	d005      	beq.n	800a844 <UART_SetConfig+0xa0>
 800a838:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a83c:	681a      	ldr	r2, [r3, #0]
 800a83e:	4b8d      	ldr	r3, [pc, #564]	; (800aa74 <UART_SetConfig+0x2d0>)
 800a840:	429a      	cmp	r2, r3
 800a842:	d104      	bne.n	800a84e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a844:	f7fe f9e0 	bl	8008c08 <HAL_RCC_GetPCLK2Freq>
 800a848:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800a84c:	e003      	b.n	800a856 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a84e:	f7fe f9c7 	bl	8008be0 <HAL_RCC_GetPCLK1Freq>
 800a852:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a856:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a85a:	69db      	ldr	r3, [r3, #28]
 800a85c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a860:	f040 810c 	bne.w	800aa7c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a864:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a868:	2200      	movs	r2, #0
 800a86a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a86e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800a872:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800a876:	4622      	mov	r2, r4
 800a878:	462b      	mov	r3, r5
 800a87a:	1891      	adds	r1, r2, r2
 800a87c:	65b9      	str	r1, [r7, #88]	; 0x58
 800a87e:	415b      	adcs	r3, r3
 800a880:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a882:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800a886:	4621      	mov	r1, r4
 800a888:	eb12 0801 	adds.w	r8, r2, r1
 800a88c:	4629      	mov	r1, r5
 800a88e:	eb43 0901 	adc.w	r9, r3, r1
 800a892:	f04f 0200 	mov.w	r2, #0
 800a896:	f04f 0300 	mov.w	r3, #0
 800a89a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a89e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a8a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a8a6:	4690      	mov	r8, r2
 800a8a8:	4699      	mov	r9, r3
 800a8aa:	4623      	mov	r3, r4
 800a8ac:	eb18 0303 	adds.w	r3, r8, r3
 800a8b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a8b4:	462b      	mov	r3, r5
 800a8b6:	eb49 0303 	adc.w	r3, r9, r3
 800a8ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a8be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a8c2:	685b      	ldr	r3, [r3, #4]
 800a8c4:	2200      	movs	r2, #0
 800a8c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a8ca:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800a8ce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800a8d2:	460b      	mov	r3, r1
 800a8d4:	18db      	adds	r3, r3, r3
 800a8d6:	653b      	str	r3, [r7, #80]	; 0x50
 800a8d8:	4613      	mov	r3, r2
 800a8da:	eb42 0303 	adc.w	r3, r2, r3
 800a8de:	657b      	str	r3, [r7, #84]	; 0x54
 800a8e0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800a8e4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800a8e8:	f7f6 f9c6 	bl	8000c78 <__aeabi_uldivmod>
 800a8ec:	4602      	mov	r2, r0
 800a8ee:	460b      	mov	r3, r1
 800a8f0:	4b61      	ldr	r3, [pc, #388]	; (800aa78 <UART_SetConfig+0x2d4>)
 800a8f2:	fba3 2302 	umull	r2, r3, r3, r2
 800a8f6:	095b      	lsrs	r3, r3, #5
 800a8f8:	011c      	lsls	r4, r3, #4
 800a8fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a8fe:	2200      	movs	r2, #0
 800a900:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a904:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800a908:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800a90c:	4642      	mov	r2, r8
 800a90e:	464b      	mov	r3, r9
 800a910:	1891      	adds	r1, r2, r2
 800a912:	64b9      	str	r1, [r7, #72]	; 0x48
 800a914:	415b      	adcs	r3, r3
 800a916:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a918:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800a91c:	4641      	mov	r1, r8
 800a91e:	eb12 0a01 	adds.w	sl, r2, r1
 800a922:	4649      	mov	r1, r9
 800a924:	eb43 0b01 	adc.w	fp, r3, r1
 800a928:	f04f 0200 	mov.w	r2, #0
 800a92c:	f04f 0300 	mov.w	r3, #0
 800a930:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a934:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a938:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a93c:	4692      	mov	sl, r2
 800a93e:	469b      	mov	fp, r3
 800a940:	4643      	mov	r3, r8
 800a942:	eb1a 0303 	adds.w	r3, sl, r3
 800a946:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a94a:	464b      	mov	r3, r9
 800a94c:	eb4b 0303 	adc.w	r3, fp, r3
 800a950:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a954:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a958:	685b      	ldr	r3, [r3, #4]
 800a95a:	2200      	movs	r2, #0
 800a95c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a960:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800a964:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800a968:	460b      	mov	r3, r1
 800a96a:	18db      	adds	r3, r3, r3
 800a96c:	643b      	str	r3, [r7, #64]	; 0x40
 800a96e:	4613      	mov	r3, r2
 800a970:	eb42 0303 	adc.w	r3, r2, r3
 800a974:	647b      	str	r3, [r7, #68]	; 0x44
 800a976:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a97a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800a97e:	f7f6 f97b 	bl	8000c78 <__aeabi_uldivmod>
 800a982:	4602      	mov	r2, r0
 800a984:	460b      	mov	r3, r1
 800a986:	4611      	mov	r1, r2
 800a988:	4b3b      	ldr	r3, [pc, #236]	; (800aa78 <UART_SetConfig+0x2d4>)
 800a98a:	fba3 2301 	umull	r2, r3, r3, r1
 800a98e:	095b      	lsrs	r3, r3, #5
 800a990:	2264      	movs	r2, #100	; 0x64
 800a992:	fb02 f303 	mul.w	r3, r2, r3
 800a996:	1acb      	subs	r3, r1, r3
 800a998:	00db      	lsls	r3, r3, #3
 800a99a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800a99e:	4b36      	ldr	r3, [pc, #216]	; (800aa78 <UART_SetConfig+0x2d4>)
 800a9a0:	fba3 2302 	umull	r2, r3, r3, r2
 800a9a4:	095b      	lsrs	r3, r3, #5
 800a9a6:	005b      	lsls	r3, r3, #1
 800a9a8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a9ac:	441c      	add	r4, r3
 800a9ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a9b2:	2200      	movs	r2, #0
 800a9b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a9b8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800a9bc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800a9c0:	4642      	mov	r2, r8
 800a9c2:	464b      	mov	r3, r9
 800a9c4:	1891      	adds	r1, r2, r2
 800a9c6:	63b9      	str	r1, [r7, #56]	; 0x38
 800a9c8:	415b      	adcs	r3, r3
 800a9ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a9cc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a9d0:	4641      	mov	r1, r8
 800a9d2:	1851      	adds	r1, r2, r1
 800a9d4:	6339      	str	r1, [r7, #48]	; 0x30
 800a9d6:	4649      	mov	r1, r9
 800a9d8:	414b      	adcs	r3, r1
 800a9da:	637b      	str	r3, [r7, #52]	; 0x34
 800a9dc:	f04f 0200 	mov.w	r2, #0
 800a9e0:	f04f 0300 	mov.w	r3, #0
 800a9e4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800a9e8:	4659      	mov	r1, fp
 800a9ea:	00cb      	lsls	r3, r1, #3
 800a9ec:	4651      	mov	r1, sl
 800a9ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a9f2:	4651      	mov	r1, sl
 800a9f4:	00ca      	lsls	r2, r1, #3
 800a9f6:	4610      	mov	r0, r2
 800a9f8:	4619      	mov	r1, r3
 800a9fa:	4603      	mov	r3, r0
 800a9fc:	4642      	mov	r2, r8
 800a9fe:	189b      	adds	r3, r3, r2
 800aa00:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800aa04:	464b      	mov	r3, r9
 800aa06:	460a      	mov	r2, r1
 800aa08:	eb42 0303 	adc.w	r3, r2, r3
 800aa0c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800aa10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aa14:	685b      	ldr	r3, [r3, #4]
 800aa16:	2200      	movs	r2, #0
 800aa18:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800aa1c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800aa20:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800aa24:	460b      	mov	r3, r1
 800aa26:	18db      	adds	r3, r3, r3
 800aa28:	62bb      	str	r3, [r7, #40]	; 0x28
 800aa2a:	4613      	mov	r3, r2
 800aa2c:	eb42 0303 	adc.w	r3, r2, r3
 800aa30:	62fb      	str	r3, [r7, #44]	; 0x2c
 800aa32:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800aa36:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800aa3a:	f7f6 f91d 	bl	8000c78 <__aeabi_uldivmod>
 800aa3e:	4602      	mov	r2, r0
 800aa40:	460b      	mov	r3, r1
 800aa42:	4b0d      	ldr	r3, [pc, #52]	; (800aa78 <UART_SetConfig+0x2d4>)
 800aa44:	fba3 1302 	umull	r1, r3, r3, r2
 800aa48:	095b      	lsrs	r3, r3, #5
 800aa4a:	2164      	movs	r1, #100	; 0x64
 800aa4c:	fb01 f303 	mul.w	r3, r1, r3
 800aa50:	1ad3      	subs	r3, r2, r3
 800aa52:	00db      	lsls	r3, r3, #3
 800aa54:	3332      	adds	r3, #50	; 0x32
 800aa56:	4a08      	ldr	r2, [pc, #32]	; (800aa78 <UART_SetConfig+0x2d4>)
 800aa58:	fba2 2303 	umull	r2, r3, r2, r3
 800aa5c:	095b      	lsrs	r3, r3, #5
 800aa5e:	f003 0207 	and.w	r2, r3, #7
 800aa62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	4422      	add	r2, r4
 800aa6a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800aa6c:	e105      	b.n	800ac7a <UART_SetConfig+0x4d6>
 800aa6e:	bf00      	nop
 800aa70:	40011000 	.word	0x40011000
 800aa74:	40011400 	.word	0x40011400
 800aa78:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800aa7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800aa80:	2200      	movs	r2, #0
 800aa82:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800aa86:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800aa8a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800aa8e:	4642      	mov	r2, r8
 800aa90:	464b      	mov	r3, r9
 800aa92:	1891      	adds	r1, r2, r2
 800aa94:	6239      	str	r1, [r7, #32]
 800aa96:	415b      	adcs	r3, r3
 800aa98:	627b      	str	r3, [r7, #36]	; 0x24
 800aa9a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800aa9e:	4641      	mov	r1, r8
 800aaa0:	1854      	adds	r4, r2, r1
 800aaa2:	4649      	mov	r1, r9
 800aaa4:	eb43 0501 	adc.w	r5, r3, r1
 800aaa8:	f04f 0200 	mov.w	r2, #0
 800aaac:	f04f 0300 	mov.w	r3, #0
 800aab0:	00eb      	lsls	r3, r5, #3
 800aab2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800aab6:	00e2      	lsls	r2, r4, #3
 800aab8:	4614      	mov	r4, r2
 800aaba:	461d      	mov	r5, r3
 800aabc:	4643      	mov	r3, r8
 800aabe:	18e3      	adds	r3, r4, r3
 800aac0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800aac4:	464b      	mov	r3, r9
 800aac6:	eb45 0303 	adc.w	r3, r5, r3
 800aaca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800aace:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aad2:	685b      	ldr	r3, [r3, #4]
 800aad4:	2200      	movs	r2, #0
 800aad6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800aada:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800aade:	f04f 0200 	mov.w	r2, #0
 800aae2:	f04f 0300 	mov.w	r3, #0
 800aae6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800aaea:	4629      	mov	r1, r5
 800aaec:	008b      	lsls	r3, r1, #2
 800aaee:	4621      	mov	r1, r4
 800aaf0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800aaf4:	4621      	mov	r1, r4
 800aaf6:	008a      	lsls	r2, r1, #2
 800aaf8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800aafc:	f7f6 f8bc 	bl	8000c78 <__aeabi_uldivmod>
 800ab00:	4602      	mov	r2, r0
 800ab02:	460b      	mov	r3, r1
 800ab04:	4b60      	ldr	r3, [pc, #384]	; (800ac88 <UART_SetConfig+0x4e4>)
 800ab06:	fba3 2302 	umull	r2, r3, r3, r2
 800ab0a:	095b      	lsrs	r3, r3, #5
 800ab0c:	011c      	lsls	r4, r3, #4
 800ab0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ab12:	2200      	movs	r2, #0
 800ab14:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800ab18:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800ab1c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800ab20:	4642      	mov	r2, r8
 800ab22:	464b      	mov	r3, r9
 800ab24:	1891      	adds	r1, r2, r2
 800ab26:	61b9      	str	r1, [r7, #24]
 800ab28:	415b      	adcs	r3, r3
 800ab2a:	61fb      	str	r3, [r7, #28]
 800ab2c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ab30:	4641      	mov	r1, r8
 800ab32:	1851      	adds	r1, r2, r1
 800ab34:	6139      	str	r1, [r7, #16]
 800ab36:	4649      	mov	r1, r9
 800ab38:	414b      	adcs	r3, r1
 800ab3a:	617b      	str	r3, [r7, #20]
 800ab3c:	f04f 0200 	mov.w	r2, #0
 800ab40:	f04f 0300 	mov.w	r3, #0
 800ab44:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800ab48:	4659      	mov	r1, fp
 800ab4a:	00cb      	lsls	r3, r1, #3
 800ab4c:	4651      	mov	r1, sl
 800ab4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ab52:	4651      	mov	r1, sl
 800ab54:	00ca      	lsls	r2, r1, #3
 800ab56:	4610      	mov	r0, r2
 800ab58:	4619      	mov	r1, r3
 800ab5a:	4603      	mov	r3, r0
 800ab5c:	4642      	mov	r2, r8
 800ab5e:	189b      	adds	r3, r3, r2
 800ab60:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ab64:	464b      	mov	r3, r9
 800ab66:	460a      	mov	r2, r1
 800ab68:	eb42 0303 	adc.w	r3, r2, r3
 800ab6c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ab70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab74:	685b      	ldr	r3, [r3, #4]
 800ab76:	2200      	movs	r2, #0
 800ab78:	67bb      	str	r3, [r7, #120]	; 0x78
 800ab7a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800ab7c:	f04f 0200 	mov.w	r2, #0
 800ab80:	f04f 0300 	mov.w	r3, #0
 800ab84:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800ab88:	4649      	mov	r1, r9
 800ab8a:	008b      	lsls	r3, r1, #2
 800ab8c:	4641      	mov	r1, r8
 800ab8e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ab92:	4641      	mov	r1, r8
 800ab94:	008a      	lsls	r2, r1, #2
 800ab96:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800ab9a:	f7f6 f86d 	bl	8000c78 <__aeabi_uldivmod>
 800ab9e:	4602      	mov	r2, r0
 800aba0:	460b      	mov	r3, r1
 800aba2:	4b39      	ldr	r3, [pc, #228]	; (800ac88 <UART_SetConfig+0x4e4>)
 800aba4:	fba3 1302 	umull	r1, r3, r3, r2
 800aba8:	095b      	lsrs	r3, r3, #5
 800abaa:	2164      	movs	r1, #100	; 0x64
 800abac:	fb01 f303 	mul.w	r3, r1, r3
 800abb0:	1ad3      	subs	r3, r2, r3
 800abb2:	011b      	lsls	r3, r3, #4
 800abb4:	3332      	adds	r3, #50	; 0x32
 800abb6:	4a34      	ldr	r2, [pc, #208]	; (800ac88 <UART_SetConfig+0x4e4>)
 800abb8:	fba2 2303 	umull	r2, r3, r2, r3
 800abbc:	095b      	lsrs	r3, r3, #5
 800abbe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800abc2:	441c      	add	r4, r3
 800abc4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800abc8:	2200      	movs	r2, #0
 800abca:	673b      	str	r3, [r7, #112]	; 0x70
 800abcc:	677a      	str	r2, [r7, #116]	; 0x74
 800abce:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800abd2:	4642      	mov	r2, r8
 800abd4:	464b      	mov	r3, r9
 800abd6:	1891      	adds	r1, r2, r2
 800abd8:	60b9      	str	r1, [r7, #8]
 800abda:	415b      	adcs	r3, r3
 800abdc:	60fb      	str	r3, [r7, #12]
 800abde:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800abe2:	4641      	mov	r1, r8
 800abe4:	1851      	adds	r1, r2, r1
 800abe6:	6039      	str	r1, [r7, #0]
 800abe8:	4649      	mov	r1, r9
 800abea:	414b      	adcs	r3, r1
 800abec:	607b      	str	r3, [r7, #4]
 800abee:	f04f 0200 	mov.w	r2, #0
 800abf2:	f04f 0300 	mov.w	r3, #0
 800abf6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800abfa:	4659      	mov	r1, fp
 800abfc:	00cb      	lsls	r3, r1, #3
 800abfe:	4651      	mov	r1, sl
 800ac00:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ac04:	4651      	mov	r1, sl
 800ac06:	00ca      	lsls	r2, r1, #3
 800ac08:	4610      	mov	r0, r2
 800ac0a:	4619      	mov	r1, r3
 800ac0c:	4603      	mov	r3, r0
 800ac0e:	4642      	mov	r2, r8
 800ac10:	189b      	adds	r3, r3, r2
 800ac12:	66bb      	str	r3, [r7, #104]	; 0x68
 800ac14:	464b      	mov	r3, r9
 800ac16:	460a      	mov	r2, r1
 800ac18:	eb42 0303 	adc.w	r3, r2, r3
 800ac1c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ac1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ac22:	685b      	ldr	r3, [r3, #4]
 800ac24:	2200      	movs	r2, #0
 800ac26:	663b      	str	r3, [r7, #96]	; 0x60
 800ac28:	667a      	str	r2, [r7, #100]	; 0x64
 800ac2a:	f04f 0200 	mov.w	r2, #0
 800ac2e:	f04f 0300 	mov.w	r3, #0
 800ac32:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800ac36:	4649      	mov	r1, r9
 800ac38:	008b      	lsls	r3, r1, #2
 800ac3a:	4641      	mov	r1, r8
 800ac3c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ac40:	4641      	mov	r1, r8
 800ac42:	008a      	lsls	r2, r1, #2
 800ac44:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800ac48:	f7f6 f816 	bl	8000c78 <__aeabi_uldivmod>
 800ac4c:	4602      	mov	r2, r0
 800ac4e:	460b      	mov	r3, r1
 800ac50:	4b0d      	ldr	r3, [pc, #52]	; (800ac88 <UART_SetConfig+0x4e4>)
 800ac52:	fba3 1302 	umull	r1, r3, r3, r2
 800ac56:	095b      	lsrs	r3, r3, #5
 800ac58:	2164      	movs	r1, #100	; 0x64
 800ac5a:	fb01 f303 	mul.w	r3, r1, r3
 800ac5e:	1ad3      	subs	r3, r2, r3
 800ac60:	011b      	lsls	r3, r3, #4
 800ac62:	3332      	adds	r3, #50	; 0x32
 800ac64:	4a08      	ldr	r2, [pc, #32]	; (800ac88 <UART_SetConfig+0x4e4>)
 800ac66:	fba2 2303 	umull	r2, r3, r2, r3
 800ac6a:	095b      	lsrs	r3, r3, #5
 800ac6c:	f003 020f 	and.w	r2, r3, #15
 800ac70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	4422      	add	r2, r4
 800ac78:	609a      	str	r2, [r3, #8]
}
 800ac7a:	bf00      	nop
 800ac7c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800ac80:	46bd      	mov	sp, r7
 800ac82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ac86:	bf00      	nop
 800ac88:	51eb851f 	.word	0x51eb851f

0800ac8c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ac8c:	b084      	sub	sp, #16
 800ac8e:	b580      	push	{r7, lr}
 800ac90:	b084      	sub	sp, #16
 800ac92:	af00      	add	r7, sp, #0
 800ac94:	6078      	str	r0, [r7, #4]
 800ac96:	f107 001c 	add.w	r0, r7, #28
 800ac9a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ac9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aca0:	2b01      	cmp	r3, #1
 800aca2:	d122      	bne.n	800acea <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aca8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	68db      	ldr	r3, [r3, #12]
 800acb4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800acb8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800acbc:	687a      	ldr	r2, [r7, #4]
 800acbe:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	68db      	ldr	r3, [r3, #12]
 800acc4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800accc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800acce:	2b01      	cmp	r3, #1
 800acd0:	d105      	bne.n	800acde <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	68db      	ldr	r3, [r3, #12]
 800acd6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800acde:	6878      	ldr	r0, [r7, #4]
 800ace0:	f001 fbee 	bl	800c4c0 <USB_CoreReset>
 800ace4:	4603      	mov	r3, r0
 800ace6:	73fb      	strb	r3, [r7, #15]
 800ace8:	e01a      	b.n	800ad20 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	68db      	ldr	r3, [r3, #12]
 800acee:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800acf6:	6878      	ldr	r0, [r7, #4]
 800acf8:	f001 fbe2 	bl	800c4c0 <USB_CoreReset>
 800acfc:	4603      	mov	r3, r0
 800acfe:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800ad00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d106      	bne.n	800ad14 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad0a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	639a      	str	r2, [r3, #56]	; 0x38
 800ad12:	e005      	b.n	800ad20 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad18:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800ad20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad22:	2b01      	cmp	r3, #1
 800ad24:	d10b      	bne.n	800ad3e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	689b      	ldr	r3, [r3, #8]
 800ad2a:	f043 0206 	orr.w	r2, r3, #6
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	689b      	ldr	r3, [r3, #8]
 800ad36:	f043 0220 	orr.w	r2, r3, #32
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800ad3e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad40:	4618      	mov	r0, r3
 800ad42:	3710      	adds	r7, #16
 800ad44:	46bd      	mov	sp, r7
 800ad46:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ad4a:	b004      	add	sp, #16
 800ad4c:	4770      	bx	lr
	...

0800ad50 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800ad50:	b480      	push	{r7}
 800ad52:	b087      	sub	sp, #28
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	60f8      	str	r0, [r7, #12]
 800ad58:	60b9      	str	r1, [r7, #8]
 800ad5a:	4613      	mov	r3, r2
 800ad5c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800ad5e:	79fb      	ldrb	r3, [r7, #7]
 800ad60:	2b02      	cmp	r3, #2
 800ad62:	d165      	bne.n	800ae30 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800ad64:	68bb      	ldr	r3, [r7, #8]
 800ad66:	4a41      	ldr	r2, [pc, #260]	; (800ae6c <USB_SetTurnaroundTime+0x11c>)
 800ad68:	4293      	cmp	r3, r2
 800ad6a:	d906      	bls.n	800ad7a <USB_SetTurnaroundTime+0x2a>
 800ad6c:	68bb      	ldr	r3, [r7, #8]
 800ad6e:	4a40      	ldr	r2, [pc, #256]	; (800ae70 <USB_SetTurnaroundTime+0x120>)
 800ad70:	4293      	cmp	r3, r2
 800ad72:	d202      	bcs.n	800ad7a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800ad74:	230f      	movs	r3, #15
 800ad76:	617b      	str	r3, [r7, #20]
 800ad78:	e062      	b.n	800ae40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800ad7a:	68bb      	ldr	r3, [r7, #8]
 800ad7c:	4a3c      	ldr	r2, [pc, #240]	; (800ae70 <USB_SetTurnaroundTime+0x120>)
 800ad7e:	4293      	cmp	r3, r2
 800ad80:	d306      	bcc.n	800ad90 <USB_SetTurnaroundTime+0x40>
 800ad82:	68bb      	ldr	r3, [r7, #8]
 800ad84:	4a3b      	ldr	r2, [pc, #236]	; (800ae74 <USB_SetTurnaroundTime+0x124>)
 800ad86:	4293      	cmp	r3, r2
 800ad88:	d202      	bcs.n	800ad90 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800ad8a:	230e      	movs	r3, #14
 800ad8c:	617b      	str	r3, [r7, #20]
 800ad8e:	e057      	b.n	800ae40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800ad90:	68bb      	ldr	r3, [r7, #8]
 800ad92:	4a38      	ldr	r2, [pc, #224]	; (800ae74 <USB_SetTurnaroundTime+0x124>)
 800ad94:	4293      	cmp	r3, r2
 800ad96:	d306      	bcc.n	800ada6 <USB_SetTurnaroundTime+0x56>
 800ad98:	68bb      	ldr	r3, [r7, #8]
 800ad9a:	4a37      	ldr	r2, [pc, #220]	; (800ae78 <USB_SetTurnaroundTime+0x128>)
 800ad9c:	4293      	cmp	r3, r2
 800ad9e:	d202      	bcs.n	800ada6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800ada0:	230d      	movs	r3, #13
 800ada2:	617b      	str	r3, [r7, #20]
 800ada4:	e04c      	b.n	800ae40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800ada6:	68bb      	ldr	r3, [r7, #8]
 800ada8:	4a33      	ldr	r2, [pc, #204]	; (800ae78 <USB_SetTurnaroundTime+0x128>)
 800adaa:	4293      	cmp	r3, r2
 800adac:	d306      	bcc.n	800adbc <USB_SetTurnaroundTime+0x6c>
 800adae:	68bb      	ldr	r3, [r7, #8]
 800adb0:	4a32      	ldr	r2, [pc, #200]	; (800ae7c <USB_SetTurnaroundTime+0x12c>)
 800adb2:	4293      	cmp	r3, r2
 800adb4:	d802      	bhi.n	800adbc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800adb6:	230c      	movs	r3, #12
 800adb8:	617b      	str	r3, [r7, #20]
 800adba:	e041      	b.n	800ae40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800adbc:	68bb      	ldr	r3, [r7, #8]
 800adbe:	4a2f      	ldr	r2, [pc, #188]	; (800ae7c <USB_SetTurnaroundTime+0x12c>)
 800adc0:	4293      	cmp	r3, r2
 800adc2:	d906      	bls.n	800add2 <USB_SetTurnaroundTime+0x82>
 800adc4:	68bb      	ldr	r3, [r7, #8]
 800adc6:	4a2e      	ldr	r2, [pc, #184]	; (800ae80 <USB_SetTurnaroundTime+0x130>)
 800adc8:	4293      	cmp	r3, r2
 800adca:	d802      	bhi.n	800add2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800adcc:	230b      	movs	r3, #11
 800adce:	617b      	str	r3, [r7, #20]
 800add0:	e036      	b.n	800ae40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800add2:	68bb      	ldr	r3, [r7, #8]
 800add4:	4a2a      	ldr	r2, [pc, #168]	; (800ae80 <USB_SetTurnaroundTime+0x130>)
 800add6:	4293      	cmp	r3, r2
 800add8:	d906      	bls.n	800ade8 <USB_SetTurnaroundTime+0x98>
 800adda:	68bb      	ldr	r3, [r7, #8]
 800addc:	4a29      	ldr	r2, [pc, #164]	; (800ae84 <USB_SetTurnaroundTime+0x134>)
 800adde:	4293      	cmp	r3, r2
 800ade0:	d802      	bhi.n	800ade8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800ade2:	230a      	movs	r3, #10
 800ade4:	617b      	str	r3, [r7, #20]
 800ade6:	e02b      	b.n	800ae40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800ade8:	68bb      	ldr	r3, [r7, #8]
 800adea:	4a26      	ldr	r2, [pc, #152]	; (800ae84 <USB_SetTurnaroundTime+0x134>)
 800adec:	4293      	cmp	r3, r2
 800adee:	d906      	bls.n	800adfe <USB_SetTurnaroundTime+0xae>
 800adf0:	68bb      	ldr	r3, [r7, #8]
 800adf2:	4a25      	ldr	r2, [pc, #148]	; (800ae88 <USB_SetTurnaroundTime+0x138>)
 800adf4:	4293      	cmp	r3, r2
 800adf6:	d202      	bcs.n	800adfe <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800adf8:	2309      	movs	r3, #9
 800adfa:	617b      	str	r3, [r7, #20]
 800adfc:	e020      	b.n	800ae40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800adfe:	68bb      	ldr	r3, [r7, #8]
 800ae00:	4a21      	ldr	r2, [pc, #132]	; (800ae88 <USB_SetTurnaroundTime+0x138>)
 800ae02:	4293      	cmp	r3, r2
 800ae04:	d306      	bcc.n	800ae14 <USB_SetTurnaroundTime+0xc4>
 800ae06:	68bb      	ldr	r3, [r7, #8]
 800ae08:	4a20      	ldr	r2, [pc, #128]	; (800ae8c <USB_SetTurnaroundTime+0x13c>)
 800ae0a:	4293      	cmp	r3, r2
 800ae0c:	d802      	bhi.n	800ae14 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800ae0e:	2308      	movs	r3, #8
 800ae10:	617b      	str	r3, [r7, #20]
 800ae12:	e015      	b.n	800ae40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800ae14:	68bb      	ldr	r3, [r7, #8]
 800ae16:	4a1d      	ldr	r2, [pc, #116]	; (800ae8c <USB_SetTurnaroundTime+0x13c>)
 800ae18:	4293      	cmp	r3, r2
 800ae1a:	d906      	bls.n	800ae2a <USB_SetTurnaroundTime+0xda>
 800ae1c:	68bb      	ldr	r3, [r7, #8]
 800ae1e:	4a1c      	ldr	r2, [pc, #112]	; (800ae90 <USB_SetTurnaroundTime+0x140>)
 800ae20:	4293      	cmp	r3, r2
 800ae22:	d202      	bcs.n	800ae2a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800ae24:	2307      	movs	r3, #7
 800ae26:	617b      	str	r3, [r7, #20]
 800ae28:	e00a      	b.n	800ae40 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800ae2a:	2306      	movs	r3, #6
 800ae2c:	617b      	str	r3, [r7, #20]
 800ae2e:	e007      	b.n	800ae40 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800ae30:	79fb      	ldrb	r3, [r7, #7]
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d102      	bne.n	800ae3c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800ae36:	2309      	movs	r3, #9
 800ae38:	617b      	str	r3, [r7, #20]
 800ae3a:	e001      	b.n	800ae40 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800ae3c:	2309      	movs	r3, #9
 800ae3e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	68db      	ldr	r3, [r3, #12]
 800ae44:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	68da      	ldr	r2, [r3, #12]
 800ae50:	697b      	ldr	r3, [r7, #20]
 800ae52:	029b      	lsls	r3, r3, #10
 800ae54:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800ae58:	431a      	orrs	r2, r3
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800ae5e:	2300      	movs	r3, #0
}
 800ae60:	4618      	mov	r0, r3
 800ae62:	371c      	adds	r7, #28
 800ae64:	46bd      	mov	sp, r7
 800ae66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6a:	4770      	bx	lr
 800ae6c:	00d8acbf 	.word	0x00d8acbf
 800ae70:	00e4e1c0 	.word	0x00e4e1c0
 800ae74:	00f42400 	.word	0x00f42400
 800ae78:	01067380 	.word	0x01067380
 800ae7c:	011a499f 	.word	0x011a499f
 800ae80:	01312cff 	.word	0x01312cff
 800ae84:	014ca43f 	.word	0x014ca43f
 800ae88:	016e3600 	.word	0x016e3600
 800ae8c:	01a6ab1f 	.word	0x01a6ab1f
 800ae90:	01e84800 	.word	0x01e84800

0800ae94 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ae94:	b480      	push	{r7}
 800ae96:	b083      	sub	sp, #12
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	689b      	ldr	r3, [r3, #8]
 800aea0:	f043 0201 	orr.w	r2, r3, #1
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800aea8:	2300      	movs	r3, #0
}
 800aeaa:	4618      	mov	r0, r3
 800aeac:	370c      	adds	r7, #12
 800aeae:	46bd      	mov	sp, r7
 800aeb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb4:	4770      	bx	lr

0800aeb6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800aeb6:	b480      	push	{r7}
 800aeb8:	b083      	sub	sp, #12
 800aeba:	af00      	add	r7, sp, #0
 800aebc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	689b      	ldr	r3, [r3, #8]
 800aec2:	f023 0201 	bic.w	r2, r3, #1
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800aeca:	2300      	movs	r3, #0
}
 800aecc:	4618      	mov	r0, r3
 800aece:	370c      	adds	r7, #12
 800aed0:	46bd      	mov	sp, r7
 800aed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed6:	4770      	bx	lr

0800aed8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800aed8:	b580      	push	{r7, lr}
 800aeda:	b084      	sub	sp, #16
 800aedc:	af00      	add	r7, sp, #0
 800aede:	6078      	str	r0, [r7, #4]
 800aee0:	460b      	mov	r3, r1
 800aee2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800aee4:	2300      	movs	r3, #0
 800aee6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	68db      	ldr	r3, [r3, #12]
 800aeec:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800aef4:	78fb      	ldrb	r3, [r7, #3]
 800aef6:	2b01      	cmp	r3, #1
 800aef8:	d115      	bne.n	800af26 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	68db      	ldr	r3, [r3, #12]
 800aefe:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800af06:	2001      	movs	r0, #1
 800af08:	f7f8 fcd2 	bl	80038b0 <HAL_Delay>
      ms++;
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	3301      	adds	r3, #1
 800af10:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800af12:	6878      	ldr	r0, [r7, #4]
 800af14:	f001 fa45 	bl	800c3a2 <USB_GetMode>
 800af18:	4603      	mov	r3, r0
 800af1a:	2b01      	cmp	r3, #1
 800af1c:	d01e      	beq.n	800af5c <USB_SetCurrentMode+0x84>
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	2b31      	cmp	r3, #49	; 0x31
 800af22:	d9f0      	bls.n	800af06 <USB_SetCurrentMode+0x2e>
 800af24:	e01a      	b.n	800af5c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800af26:	78fb      	ldrb	r3, [r7, #3]
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d115      	bne.n	800af58 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	68db      	ldr	r3, [r3, #12]
 800af30:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800af38:	2001      	movs	r0, #1
 800af3a:	f7f8 fcb9 	bl	80038b0 <HAL_Delay>
      ms++;
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	3301      	adds	r3, #1
 800af42:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800af44:	6878      	ldr	r0, [r7, #4]
 800af46:	f001 fa2c 	bl	800c3a2 <USB_GetMode>
 800af4a:	4603      	mov	r3, r0
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d005      	beq.n	800af5c <USB_SetCurrentMode+0x84>
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	2b31      	cmp	r3, #49	; 0x31
 800af54:	d9f0      	bls.n	800af38 <USB_SetCurrentMode+0x60>
 800af56:	e001      	b.n	800af5c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800af58:	2301      	movs	r3, #1
 800af5a:	e005      	b.n	800af68 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	2b32      	cmp	r3, #50	; 0x32
 800af60:	d101      	bne.n	800af66 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800af62:	2301      	movs	r3, #1
 800af64:	e000      	b.n	800af68 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800af66:	2300      	movs	r3, #0
}
 800af68:	4618      	mov	r0, r3
 800af6a:	3710      	adds	r7, #16
 800af6c:	46bd      	mov	sp, r7
 800af6e:	bd80      	pop	{r7, pc}

0800af70 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800af70:	b084      	sub	sp, #16
 800af72:	b580      	push	{r7, lr}
 800af74:	b086      	sub	sp, #24
 800af76:	af00      	add	r7, sp, #0
 800af78:	6078      	str	r0, [r7, #4]
 800af7a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800af7e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800af82:	2300      	movs	r3, #0
 800af84:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800af8a:	2300      	movs	r3, #0
 800af8c:	613b      	str	r3, [r7, #16]
 800af8e:	e009      	b.n	800afa4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800af90:	687a      	ldr	r2, [r7, #4]
 800af92:	693b      	ldr	r3, [r7, #16]
 800af94:	3340      	adds	r3, #64	; 0x40
 800af96:	009b      	lsls	r3, r3, #2
 800af98:	4413      	add	r3, r2
 800af9a:	2200      	movs	r2, #0
 800af9c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800af9e:	693b      	ldr	r3, [r7, #16]
 800afa0:	3301      	adds	r3, #1
 800afa2:	613b      	str	r3, [r7, #16]
 800afa4:	693b      	ldr	r3, [r7, #16]
 800afa6:	2b0e      	cmp	r3, #14
 800afa8:	d9f2      	bls.n	800af90 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800afaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800afac:	2b00      	cmp	r3, #0
 800afae:	d11c      	bne.n	800afea <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800afb6:	685b      	ldr	r3, [r3, #4]
 800afb8:	68fa      	ldr	r2, [r7, #12]
 800afba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800afbe:	f043 0302 	orr.w	r3, r3, #2
 800afc2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afc8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afd4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afe0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	639a      	str	r2, [r3, #56]	; 0x38
 800afe8:	e00b      	b.n	800b002 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afee:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800affa:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b008:	461a      	mov	r2, r3
 800b00a:	2300      	movs	r3, #0
 800b00c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b014:	4619      	mov	r1, r3
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b01c:	461a      	mov	r2, r3
 800b01e:	680b      	ldr	r3, [r1, #0]
 800b020:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b024:	2b01      	cmp	r3, #1
 800b026:	d10c      	bne.n	800b042 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800b028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d104      	bne.n	800b038 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800b02e:	2100      	movs	r1, #0
 800b030:	6878      	ldr	r0, [r7, #4]
 800b032:	f000 f965 	bl	800b300 <USB_SetDevSpeed>
 800b036:	e008      	b.n	800b04a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800b038:	2101      	movs	r1, #1
 800b03a:	6878      	ldr	r0, [r7, #4]
 800b03c:	f000 f960 	bl	800b300 <USB_SetDevSpeed>
 800b040:	e003      	b.n	800b04a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800b042:	2103      	movs	r1, #3
 800b044:	6878      	ldr	r0, [r7, #4]
 800b046:	f000 f95b 	bl	800b300 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b04a:	2110      	movs	r1, #16
 800b04c:	6878      	ldr	r0, [r7, #4]
 800b04e:	f000 f8f3 	bl	800b238 <USB_FlushTxFifo>
 800b052:	4603      	mov	r3, r0
 800b054:	2b00      	cmp	r3, #0
 800b056:	d001      	beq.n	800b05c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800b058:	2301      	movs	r3, #1
 800b05a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b05c:	6878      	ldr	r0, [r7, #4]
 800b05e:	f000 f91f 	bl	800b2a0 <USB_FlushRxFifo>
 800b062:	4603      	mov	r3, r0
 800b064:	2b00      	cmp	r3, #0
 800b066:	d001      	beq.n	800b06c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800b068:	2301      	movs	r3, #1
 800b06a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b072:	461a      	mov	r2, r3
 800b074:	2300      	movs	r3, #0
 800b076:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b07e:	461a      	mov	r2, r3
 800b080:	2300      	movs	r3, #0
 800b082:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b08a:	461a      	mov	r2, r3
 800b08c:	2300      	movs	r3, #0
 800b08e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b090:	2300      	movs	r3, #0
 800b092:	613b      	str	r3, [r7, #16]
 800b094:	e043      	b.n	800b11e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b096:	693b      	ldr	r3, [r7, #16]
 800b098:	015a      	lsls	r2, r3, #5
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	4413      	add	r3, r2
 800b09e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b0a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b0ac:	d118      	bne.n	800b0e0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800b0ae:	693b      	ldr	r3, [r7, #16]
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d10a      	bne.n	800b0ca <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800b0b4:	693b      	ldr	r3, [r7, #16]
 800b0b6:	015a      	lsls	r2, r3, #5
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	4413      	add	r3, r2
 800b0bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0c0:	461a      	mov	r2, r3
 800b0c2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b0c6:	6013      	str	r3, [r2, #0]
 800b0c8:	e013      	b.n	800b0f2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800b0ca:	693b      	ldr	r3, [r7, #16]
 800b0cc:	015a      	lsls	r2, r3, #5
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	4413      	add	r3, r2
 800b0d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0d6:	461a      	mov	r2, r3
 800b0d8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b0dc:	6013      	str	r3, [r2, #0]
 800b0de:	e008      	b.n	800b0f2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800b0e0:	693b      	ldr	r3, [r7, #16]
 800b0e2:	015a      	lsls	r2, r3, #5
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	4413      	add	r3, r2
 800b0e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0ec:	461a      	mov	r2, r3
 800b0ee:	2300      	movs	r3, #0
 800b0f0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800b0f2:	693b      	ldr	r3, [r7, #16]
 800b0f4:	015a      	lsls	r2, r3, #5
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	4413      	add	r3, r2
 800b0fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0fe:	461a      	mov	r2, r3
 800b100:	2300      	movs	r3, #0
 800b102:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800b104:	693b      	ldr	r3, [r7, #16]
 800b106:	015a      	lsls	r2, r3, #5
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	4413      	add	r3, r2
 800b10c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b110:	461a      	mov	r2, r3
 800b112:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b116:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b118:	693b      	ldr	r3, [r7, #16]
 800b11a:	3301      	adds	r3, #1
 800b11c:	613b      	str	r3, [r7, #16]
 800b11e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b120:	693a      	ldr	r2, [r7, #16]
 800b122:	429a      	cmp	r2, r3
 800b124:	d3b7      	bcc.n	800b096 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b126:	2300      	movs	r3, #0
 800b128:	613b      	str	r3, [r7, #16]
 800b12a:	e043      	b.n	800b1b4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b12c:	693b      	ldr	r3, [r7, #16]
 800b12e:	015a      	lsls	r2, r3, #5
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	4413      	add	r3, r2
 800b134:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b13e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b142:	d118      	bne.n	800b176 <USB_DevInit+0x206>
    {
      if (i == 0U)
 800b144:	693b      	ldr	r3, [r7, #16]
 800b146:	2b00      	cmp	r3, #0
 800b148:	d10a      	bne.n	800b160 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800b14a:	693b      	ldr	r3, [r7, #16]
 800b14c:	015a      	lsls	r2, r3, #5
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	4413      	add	r3, r2
 800b152:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b156:	461a      	mov	r2, r3
 800b158:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b15c:	6013      	str	r3, [r2, #0]
 800b15e:	e013      	b.n	800b188 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800b160:	693b      	ldr	r3, [r7, #16]
 800b162:	015a      	lsls	r2, r3, #5
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	4413      	add	r3, r2
 800b168:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b16c:	461a      	mov	r2, r3
 800b16e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b172:	6013      	str	r3, [r2, #0]
 800b174:	e008      	b.n	800b188 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800b176:	693b      	ldr	r3, [r7, #16]
 800b178:	015a      	lsls	r2, r3, #5
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	4413      	add	r3, r2
 800b17e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b182:	461a      	mov	r2, r3
 800b184:	2300      	movs	r3, #0
 800b186:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800b188:	693b      	ldr	r3, [r7, #16]
 800b18a:	015a      	lsls	r2, r3, #5
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	4413      	add	r3, r2
 800b190:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b194:	461a      	mov	r2, r3
 800b196:	2300      	movs	r3, #0
 800b198:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800b19a:	693b      	ldr	r3, [r7, #16]
 800b19c:	015a      	lsls	r2, r3, #5
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	4413      	add	r3, r2
 800b1a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b1a6:	461a      	mov	r2, r3
 800b1a8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b1ac:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b1ae:	693b      	ldr	r3, [r7, #16]
 800b1b0:	3301      	adds	r3, #1
 800b1b2:	613b      	str	r3, [r7, #16]
 800b1b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1b6:	693a      	ldr	r2, [r7, #16]
 800b1b8:	429a      	cmp	r2, r3
 800b1ba:	d3b7      	bcc.n	800b12c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b1c2:	691b      	ldr	r3, [r3, #16]
 800b1c4:	68fa      	ldr	r2, [r7, #12]
 800b1c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b1ca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b1ce:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	2200      	movs	r2, #0
 800b1d4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800b1dc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800b1de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d105      	bne.n	800b1f0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	699b      	ldr	r3, [r3, #24]
 800b1e8:	f043 0210 	orr.w	r2, r3, #16
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	699a      	ldr	r2, [r3, #24]
 800b1f4:	4b0f      	ldr	r3, [pc, #60]	; (800b234 <USB_DevInit+0x2c4>)
 800b1f6:	4313      	orrs	r3, r2
 800b1f8:	687a      	ldr	r2, [r7, #4]
 800b1fa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800b1fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d005      	beq.n	800b20e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	699b      	ldr	r3, [r3, #24]
 800b206:	f043 0208 	orr.w	r2, r3, #8
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800b20e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b210:	2b01      	cmp	r3, #1
 800b212:	d107      	bne.n	800b224 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	699b      	ldr	r3, [r3, #24]
 800b218:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b21c:	f043 0304 	orr.w	r3, r3, #4
 800b220:	687a      	ldr	r2, [r7, #4]
 800b222:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800b224:	7dfb      	ldrb	r3, [r7, #23]
}
 800b226:	4618      	mov	r0, r3
 800b228:	3718      	adds	r7, #24
 800b22a:	46bd      	mov	sp, r7
 800b22c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b230:	b004      	add	sp, #16
 800b232:	4770      	bx	lr
 800b234:	803c3800 	.word	0x803c3800

0800b238 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b238:	b480      	push	{r7}
 800b23a:	b085      	sub	sp, #20
 800b23c:	af00      	add	r7, sp, #0
 800b23e:	6078      	str	r0, [r7, #4]
 800b240:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b242:	2300      	movs	r3, #0
 800b244:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	3301      	adds	r3, #1
 800b24a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	4a13      	ldr	r2, [pc, #76]	; (800b29c <USB_FlushTxFifo+0x64>)
 800b250:	4293      	cmp	r3, r2
 800b252:	d901      	bls.n	800b258 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800b254:	2303      	movs	r3, #3
 800b256:	e01b      	b.n	800b290 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	691b      	ldr	r3, [r3, #16]
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	daf2      	bge.n	800b246 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800b260:	2300      	movs	r3, #0
 800b262:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b264:	683b      	ldr	r3, [r7, #0]
 800b266:	019b      	lsls	r3, r3, #6
 800b268:	f043 0220 	orr.w	r2, r3, #32
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	3301      	adds	r3, #1
 800b274:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	4a08      	ldr	r2, [pc, #32]	; (800b29c <USB_FlushTxFifo+0x64>)
 800b27a:	4293      	cmp	r3, r2
 800b27c:	d901      	bls.n	800b282 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800b27e:	2303      	movs	r3, #3
 800b280:	e006      	b.n	800b290 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	691b      	ldr	r3, [r3, #16]
 800b286:	f003 0320 	and.w	r3, r3, #32
 800b28a:	2b20      	cmp	r3, #32
 800b28c:	d0f0      	beq.n	800b270 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800b28e:	2300      	movs	r3, #0
}
 800b290:	4618      	mov	r0, r3
 800b292:	3714      	adds	r7, #20
 800b294:	46bd      	mov	sp, r7
 800b296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b29a:	4770      	bx	lr
 800b29c:	00030d40 	.word	0x00030d40

0800b2a0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b2a0:	b480      	push	{r7}
 800b2a2:	b085      	sub	sp, #20
 800b2a4:	af00      	add	r7, sp, #0
 800b2a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b2a8:	2300      	movs	r3, #0
 800b2aa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	3301      	adds	r3, #1
 800b2b0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	4a11      	ldr	r2, [pc, #68]	; (800b2fc <USB_FlushRxFifo+0x5c>)
 800b2b6:	4293      	cmp	r3, r2
 800b2b8:	d901      	bls.n	800b2be <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800b2ba:	2303      	movs	r3, #3
 800b2bc:	e018      	b.n	800b2f0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	691b      	ldr	r3, [r3, #16]
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	daf2      	bge.n	800b2ac <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800b2c6:	2300      	movs	r3, #0
 800b2c8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	2210      	movs	r2, #16
 800b2ce:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	3301      	adds	r3, #1
 800b2d4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	4a08      	ldr	r2, [pc, #32]	; (800b2fc <USB_FlushRxFifo+0x5c>)
 800b2da:	4293      	cmp	r3, r2
 800b2dc:	d901      	bls.n	800b2e2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800b2de:	2303      	movs	r3, #3
 800b2e0:	e006      	b.n	800b2f0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	691b      	ldr	r3, [r3, #16]
 800b2e6:	f003 0310 	and.w	r3, r3, #16
 800b2ea:	2b10      	cmp	r3, #16
 800b2ec:	d0f0      	beq.n	800b2d0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800b2ee:	2300      	movs	r3, #0
}
 800b2f0:	4618      	mov	r0, r3
 800b2f2:	3714      	adds	r7, #20
 800b2f4:	46bd      	mov	sp, r7
 800b2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2fa:	4770      	bx	lr
 800b2fc:	00030d40 	.word	0x00030d40

0800b300 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800b300:	b480      	push	{r7}
 800b302:	b085      	sub	sp, #20
 800b304:	af00      	add	r7, sp, #0
 800b306:	6078      	str	r0, [r7, #4]
 800b308:	460b      	mov	r3, r1
 800b30a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b316:	681a      	ldr	r2, [r3, #0]
 800b318:	78fb      	ldrb	r3, [r7, #3]
 800b31a:	68f9      	ldr	r1, [r7, #12]
 800b31c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b320:	4313      	orrs	r3, r2
 800b322:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800b324:	2300      	movs	r3, #0
}
 800b326:	4618      	mov	r0, r3
 800b328:	3714      	adds	r7, #20
 800b32a:	46bd      	mov	sp, r7
 800b32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b330:	4770      	bx	lr

0800b332 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800b332:	b480      	push	{r7}
 800b334:	b087      	sub	sp, #28
 800b336:	af00      	add	r7, sp, #0
 800b338:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800b33e:	693b      	ldr	r3, [r7, #16]
 800b340:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b344:	689b      	ldr	r3, [r3, #8]
 800b346:	f003 0306 	and.w	r3, r3, #6
 800b34a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d102      	bne.n	800b358 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800b352:	2300      	movs	r3, #0
 800b354:	75fb      	strb	r3, [r7, #23]
 800b356:	e00a      	b.n	800b36e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	2b02      	cmp	r3, #2
 800b35c:	d002      	beq.n	800b364 <USB_GetDevSpeed+0x32>
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	2b06      	cmp	r3, #6
 800b362:	d102      	bne.n	800b36a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800b364:	2302      	movs	r3, #2
 800b366:	75fb      	strb	r3, [r7, #23]
 800b368:	e001      	b.n	800b36e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800b36a:	230f      	movs	r3, #15
 800b36c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800b36e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b370:	4618      	mov	r0, r3
 800b372:	371c      	adds	r7, #28
 800b374:	46bd      	mov	sp, r7
 800b376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b37a:	4770      	bx	lr

0800b37c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b37c:	b480      	push	{r7}
 800b37e:	b085      	sub	sp, #20
 800b380:	af00      	add	r7, sp, #0
 800b382:	6078      	str	r0, [r7, #4]
 800b384:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b38a:	683b      	ldr	r3, [r7, #0]
 800b38c:	781b      	ldrb	r3, [r3, #0]
 800b38e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b390:	683b      	ldr	r3, [r7, #0]
 800b392:	785b      	ldrb	r3, [r3, #1]
 800b394:	2b01      	cmp	r3, #1
 800b396:	d13a      	bne.n	800b40e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b39e:	69da      	ldr	r2, [r3, #28]
 800b3a0:	683b      	ldr	r3, [r7, #0]
 800b3a2:	781b      	ldrb	r3, [r3, #0]
 800b3a4:	f003 030f 	and.w	r3, r3, #15
 800b3a8:	2101      	movs	r1, #1
 800b3aa:	fa01 f303 	lsl.w	r3, r1, r3
 800b3ae:	b29b      	uxth	r3, r3
 800b3b0:	68f9      	ldr	r1, [r7, #12]
 800b3b2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b3b6:	4313      	orrs	r3, r2
 800b3b8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800b3ba:	68bb      	ldr	r3, [r7, #8]
 800b3bc:	015a      	lsls	r2, r3, #5
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	4413      	add	r3, r2
 800b3c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d155      	bne.n	800b47c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b3d0:	68bb      	ldr	r3, [r7, #8]
 800b3d2:	015a      	lsls	r2, r3, #5
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	4413      	add	r3, r2
 800b3d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b3dc:	681a      	ldr	r2, [r3, #0]
 800b3de:	683b      	ldr	r3, [r7, #0]
 800b3e0:	68db      	ldr	r3, [r3, #12]
 800b3e2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800b3e6:	683b      	ldr	r3, [r7, #0]
 800b3e8:	791b      	ldrb	r3, [r3, #4]
 800b3ea:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b3ec:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800b3ee:	68bb      	ldr	r3, [r7, #8]
 800b3f0:	059b      	lsls	r3, r3, #22
 800b3f2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b3f4:	4313      	orrs	r3, r2
 800b3f6:	68ba      	ldr	r2, [r7, #8]
 800b3f8:	0151      	lsls	r1, r2, #5
 800b3fa:	68fa      	ldr	r2, [r7, #12]
 800b3fc:	440a      	add	r2, r1
 800b3fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b402:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b406:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b40a:	6013      	str	r3, [r2, #0]
 800b40c:	e036      	b.n	800b47c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b414:	69da      	ldr	r2, [r3, #28]
 800b416:	683b      	ldr	r3, [r7, #0]
 800b418:	781b      	ldrb	r3, [r3, #0]
 800b41a:	f003 030f 	and.w	r3, r3, #15
 800b41e:	2101      	movs	r1, #1
 800b420:	fa01 f303 	lsl.w	r3, r1, r3
 800b424:	041b      	lsls	r3, r3, #16
 800b426:	68f9      	ldr	r1, [r7, #12]
 800b428:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b42c:	4313      	orrs	r3, r2
 800b42e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800b430:	68bb      	ldr	r3, [r7, #8]
 800b432:	015a      	lsls	r2, r3, #5
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	4413      	add	r3, r2
 800b438:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b442:	2b00      	cmp	r3, #0
 800b444:	d11a      	bne.n	800b47c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800b446:	68bb      	ldr	r3, [r7, #8]
 800b448:	015a      	lsls	r2, r3, #5
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	4413      	add	r3, r2
 800b44e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b452:	681a      	ldr	r2, [r3, #0]
 800b454:	683b      	ldr	r3, [r7, #0]
 800b456:	68db      	ldr	r3, [r3, #12]
 800b458:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800b45c:	683b      	ldr	r3, [r7, #0]
 800b45e:	791b      	ldrb	r3, [r3, #4]
 800b460:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800b462:	430b      	orrs	r3, r1
 800b464:	4313      	orrs	r3, r2
 800b466:	68ba      	ldr	r2, [r7, #8]
 800b468:	0151      	lsls	r1, r2, #5
 800b46a:	68fa      	ldr	r2, [r7, #12]
 800b46c:	440a      	add	r2, r1
 800b46e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b472:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b476:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b47a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800b47c:	2300      	movs	r3, #0
}
 800b47e:	4618      	mov	r0, r3
 800b480:	3714      	adds	r7, #20
 800b482:	46bd      	mov	sp, r7
 800b484:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b488:	4770      	bx	lr
	...

0800b48c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b48c:	b480      	push	{r7}
 800b48e:	b085      	sub	sp, #20
 800b490:	af00      	add	r7, sp, #0
 800b492:	6078      	str	r0, [r7, #4]
 800b494:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b49a:	683b      	ldr	r3, [r7, #0]
 800b49c:	781b      	ldrb	r3, [r3, #0]
 800b49e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800b4a0:	683b      	ldr	r3, [r7, #0]
 800b4a2:	785b      	ldrb	r3, [r3, #1]
 800b4a4:	2b01      	cmp	r3, #1
 800b4a6:	d161      	bne.n	800b56c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b4a8:	68bb      	ldr	r3, [r7, #8]
 800b4aa:	015a      	lsls	r2, r3, #5
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	4413      	add	r3, r2
 800b4b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b4ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b4be:	d11f      	bne.n	800b500 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800b4c0:	68bb      	ldr	r3, [r7, #8]
 800b4c2:	015a      	lsls	r2, r3, #5
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	4413      	add	r3, r2
 800b4c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	68ba      	ldr	r2, [r7, #8]
 800b4d0:	0151      	lsls	r1, r2, #5
 800b4d2:	68fa      	ldr	r2, [r7, #12]
 800b4d4:	440a      	add	r2, r1
 800b4d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b4da:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b4de:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800b4e0:	68bb      	ldr	r3, [r7, #8]
 800b4e2:	015a      	lsls	r2, r3, #5
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	4413      	add	r3, r2
 800b4e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	68ba      	ldr	r2, [r7, #8]
 800b4f0:	0151      	lsls	r1, r2, #5
 800b4f2:	68fa      	ldr	r2, [r7, #12]
 800b4f4:	440a      	add	r2, r1
 800b4f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b4fa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b4fe:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b506:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b508:	683b      	ldr	r3, [r7, #0]
 800b50a:	781b      	ldrb	r3, [r3, #0]
 800b50c:	f003 030f 	and.w	r3, r3, #15
 800b510:	2101      	movs	r1, #1
 800b512:	fa01 f303 	lsl.w	r3, r1, r3
 800b516:	b29b      	uxth	r3, r3
 800b518:	43db      	mvns	r3, r3
 800b51a:	68f9      	ldr	r1, [r7, #12]
 800b51c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b520:	4013      	ands	r3, r2
 800b522:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b52a:	69da      	ldr	r2, [r3, #28]
 800b52c:	683b      	ldr	r3, [r7, #0]
 800b52e:	781b      	ldrb	r3, [r3, #0]
 800b530:	f003 030f 	and.w	r3, r3, #15
 800b534:	2101      	movs	r1, #1
 800b536:	fa01 f303 	lsl.w	r3, r1, r3
 800b53a:	b29b      	uxth	r3, r3
 800b53c:	43db      	mvns	r3, r3
 800b53e:	68f9      	ldr	r1, [r7, #12]
 800b540:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b544:	4013      	ands	r3, r2
 800b546:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800b548:	68bb      	ldr	r3, [r7, #8]
 800b54a:	015a      	lsls	r2, r3, #5
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	4413      	add	r3, r2
 800b550:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b554:	681a      	ldr	r2, [r3, #0]
 800b556:	68bb      	ldr	r3, [r7, #8]
 800b558:	0159      	lsls	r1, r3, #5
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	440b      	add	r3, r1
 800b55e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b562:	4619      	mov	r1, r3
 800b564:	4b35      	ldr	r3, [pc, #212]	; (800b63c <USB_DeactivateEndpoint+0x1b0>)
 800b566:	4013      	ands	r3, r2
 800b568:	600b      	str	r3, [r1, #0]
 800b56a:	e060      	b.n	800b62e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b56c:	68bb      	ldr	r3, [r7, #8]
 800b56e:	015a      	lsls	r2, r3, #5
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	4413      	add	r3, r2
 800b574:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b57e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b582:	d11f      	bne.n	800b5c4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800b584:	68bb      	ldr	r3, [r7, #8]
 800b586:	015a      	lsls	r2, r3, #5
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	4413      	add	r3, r2
 800b58c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	68ba      	ldr	r2, [r7, #8]
 800b594:	0151      	lsls	r1, r2, #5
 800b596:	68fa      	ldr	r2, [r7, #12]
 800b598:	440a      	add	r2, r1
 800b59a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b59e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b5a2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800b5a4:	68bb      	ldr	r3, [r7, #8]
 800b5a6:	015a      	lsls	r2, r3, #5
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	4413      	add	r3, r2
 800b5ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	68ba      	ldr	r2, [r7, #8]
 800b5b4:	0151      	lsls	r1, r2, #5
 800b5b6:	68fa      	ldr	r2, [r7, #12]
 800b5b8:	440a      	add	r2, r1
 800b5ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b5be:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b5c2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b5ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b5cc:	683b      	ldr	r3, [r7, #0]
 800b5ce:	781b      	ldrb	r3, [r3, #0]
 800b5d0:	f003 030f 	and.w	r3, r3, #15
 800b5d4:	2101      	movs	r1, #1
 800b5d6:	fa01 f303 	lsl.w	r3, r1, r3
 800b5da:	041b      	lsls	r3, r3, #16
 800b5dc:	43db      	mvns	r3, r3
 800b5de:	68f9      	ldr	r1, [r7, #12]
 800b5e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b5e4:	4013      	ands	r3, r2
 800b5e6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b5ee:	69da      	ldr	r2, [r3, #28]
 800b5f0:	683b      	ldr	r3, [r7, #0]
 800b5f2:	781b      	ldrb	r3, [r3, #0]
 800b5f4:	f003 030f 	and.w	r3, r3, #15
 800b5f8:	2101      	movs	r1, #1
 800b5fa:	fa01 f303 	lsl.w	r3, r1, r3
 800b5fe:	041b      	lsls	r3, r3, #16
 800b600:	43db      	mvns	r3, r3
 800b602:	68f9      	ldr	r1, [r7, #12]
 800b604:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b608:	4013      	ands	r3, r2
 800b60a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800b60c:	68bb      	ldr	r3, [r7, #8]
 800b60e:	015a      	lsls	r2, r3, #5
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	4413      	add	r3, r2
 800b614:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b618:	681a      	ldr	r2, [r3, #0]
 800b61a:	68bb      	ldr	r3, [r7, #8]
 800b61c:	0159      	lsls	r1, r3, #5
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	440b      	add	r3, r1
 800b622:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b626:	4619      	mov	r1, r3
 800b628:	4b05      	ldr	r3, [pc, #20]	; (800b640 <USB_DeactivateEndpoint+0x1b4>)
 800b62a:	4013      	ands	r3, r2
 800b62c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800b62e:	2300      	movs	r3, #0
}
 800b630:	4618      	mov	r0, r3
 800b632:	3714      	adds	r7, #20
 800b634:	46bd      	mov	sp, r7
 800b636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b63a:	4770      	bx	lr
 800b63c:	ec337800 	.word	0xec337800
 800b640:	eff37800 	.word	0xeff37800

0800b644 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800b644:	b580      	push	{r7, lr}
 800b646:	b08a      	sub	sp, #40	; 0x28
 800b648:	af02      	add	r7, sp, #8
 800b64a:	60f8      	str	r0, [r7, #12]
 800b64c:	60b9      	str	r1, [r7, #8]
 800b64e:	4613      	mov	r3, r2
 800b650:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800b656:	68bb      	ldr	r3, [r7, #8]
 800b658:	781b      	ldrb	r3, [r3, #0]
 800b65a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b65c:	68bb      	ldr	r3, [r7, #8]
 800b65e:	785b      	ldrb	r3, [r3, #1]
 800b660:	2b01      	cmp	r3, #1
 800b662:	f040 815c 	bne.w	800b91e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800b666:	68bb      	ldr	r3, [r7, #8]
 800b668:	699b      	ldr	r3, [r3, #24]
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d132      	bne.n	800b6d4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b66e:	69bb      	ldr	r3, [r7, #24]
 800b670:	015a      	lsls	r2, r3, #5
 800b672:	69fb      	ldr	r3, [r7, #28]
 800b674:	4413      	add	r3, r2
 800b676:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b67a:	691b      	ldr	r3, [r3, #16]
 800b67c:	69ba      	ldr	r2, [r7, #24]
 800b67e:	0151      	lsls	r1, r2, #5
 800b680:	69fa      	ldr	r2, [r7, #28]
 800b682:	440a      	add	r2, r1
 800b684:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b688:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b68c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b690:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b692:	69bb      	ldr	r3, [r7, #24]
 800b694:	015a      	lsls	r2, r3, #5
 800b696:	69fb      	ldr	r3, [r7, #28]
 800b698:	4413      	add	r3, r2
 800b69a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b69e:	691b      	ldr	r3, [r3, #16]
 800b6a0:	69ba      	ldr	r2, [r7, #24]
 800b6a2:	0151      	lsls	r1, r2, #5
 800b6a4:	69fa      	ldr	r2, [r7, #28]
 800b6a6:	440a      	add	r2, r1
 800b6a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b6ac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b6b0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b6b2:	69bb      	ldr	r3, [r7, #24]
 800b6b4:	015a      	lsls	r2, r3, #5
 800b6b6:	69fb      	ldr	r3, [r7, #28]
 800b6b8:	4413      	add	r3, r2
 800b6ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b6be:	691b      	ldr	r3, [r3, #16]
 800b6c0:	69ba      	ldr	r2, [r7, #24]
 800b6c2:	0151      	lsls	r1, r2, #5
 800b6c4:	69fa      	ldr	r2, [r7, #28]
 800b6c6:	440a      	add	r2, r1
 800b6c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b6cc:	0cdb      	lsrs	r3, r3, #19
 800b6ce:	04db      	lsls	r3, r3, #19
 800b6d0:	6113      	str	r3, [r2, #16]
 800b6d2:	e074      	b.n	800b7be <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b6d4:	69bb      	ldr	r3, [r7, #24]
 800b6d6:	015a      	lsls	r2, r3, #5
 800b6d8:	69fb      	ldr	r3, [r7, #28]
 800b6da:	4413      	add	r3, r2
 800b6dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b6e0:	691b      	ldr	r3, [r3, #16]
 800b6e2:	69ba      	ldr	r2, [r7, #24]
 800b6e4:	0151      	lsls	r1, r2, #5
 800b6e6:	69fa      	ldr	r2, [r7, #28]
 800b6e8:	440a      	add	r2, r1
 800b6ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b6ee:	0cdb      	lsrs	r3, r3, #19
 800b6f0:	04db      	lsls	r3, r3, #19
 800b6f2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b6f4:	69bb      	ldr	r3, [r7, #24]
 800b6f6:	015a      	lsls	r2, r3, #5
 800b6f8:	69fb      	ldr	r3, [r7, #28]
 800b6fa:	4413      	add	r3, r2
 800b6fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b700:	691b      	ldr	r3, [r3, #16]
 800b702:	69ba      	ldr	r2, [r7, #24]
 800b704:	0151      	lsls	r1, r2, #5
 800b706:	69fa      	ldr	r2, [r7, #28]
 800b708:	440a      	add	r2, r1
 800b70a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b70e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b712:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b716:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800b718:	69bb      	ldr	r3, [r7, #24]
 800b71a:	015a      	lsls	r2, r3, #5
 800b71c:	69fb      	ldr	r3, [r7, #28]
 800b71e:	4413      	add	r3, r2
 800b720:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b724:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800b726:	68bb      	ldr	r3, [r7, #8]
 800b728:	6999      	ldr	r1, [r3, #24]
 800b72a:	68bb      	ldr	r3, [r7, #8]
 800b72c:	68db      	ldr	r3, [r3, #12]
 800b72e:	440b      	add	r3, r1
 800b730:	1e59      	subs	r1, r3, #1
 800b732:	68bb      	ldr	r3, [r7, #8]
 800b734:	68db      	ldr	r3, [r3, #12]
 800b736:	fbb1 f3f3 	udiv	r3, r1, r3
 800b73a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800b73c:	4b9d      	ldr	r3, [pc, #628]	; (800b9b4 <USB_EPStartXfer+0x370>)
 800b73e:	400b      	ands	r3, r1
 800b740:	69b9      	ldr	r1, [r7, #24]
 800b742:	0148      	lsls	r0, r1, #5
 800b744:	69f9      	ldr	r1, [r7, #28]
 800b746:	4401      	add	r1, r0
 800b748:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b74c:	4313      	orrs	r3, r2
 800b74e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b750:	69bb      	ldr	r3, [r7, #24]
 800b752:	015a      	lsls	r2, r3, #5
 800b754:	69fb      	ldr	r3, [r7, #28]
 800b756:	4413      	add	r3, r2
 800b758:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b75c:	691a      	ldr	r2, [r3, #16]
 800b75e:	68bb      	ldr	r3, [r7, #8]
 800b760:	699b      	ldr	r3, [r3, #24]
 800b762:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b766:	69b9      	ldr	r1, [r7, #24]
 800b768:	0148      	lsls	r0, r1, #5
 800b76a:	69f9      	ldr	r1, [r7, #28]
 800b76c:	4401      	add	r1, r0
 800b76e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b772:	4313      	orrs	r3, r2
 800b774:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800b776:	68bb      	ldr	r3, [r7, #8]
 800b778:	791b      	ldrb	r3, [r3, #4]
 800b77a:	2b01      	cmp	r3, #1
 800b77c:	d11f      	bne.n	800b7be <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800b77e:	69bb      	ldr	r3, [r7, #24]
 800b780:	015a      	lsls	r2, r3, #5
 800b782:	69fb      	ldr	r3, [r7, #28]
 800b784:	4413      	add	r3, r2
 800b786:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b78a:	691b      	ldr	r3, [r3, #16]
 800b78c:	69ba      	ldr	r2, [r7, #24]
 800b78e:	0151      	lsls	r1, r2, #5
 800b790:	69fa      	ldr	r2, [r7, #28]
 800b792:	440a      	add	r2, r1
 800b794:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b798:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800b79c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800b79e:	69bb      	ldr	r3, [r7, #24]
 800b7a0:	015a      	lsls	r2, r3, #5
 800b7a2:	69fb      	ldr	r3, [r7, #28]
 800b7a4:	4413      	add	r3, r2
 800b7a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b7aa:	691b      	ldr	r3, [r3, #16]
 800b7ac:	69ba      	ldr	r2, [r7, #24]
 800b7ae:	0151      	lsls	r1, r2, #5
 800b7b0:	69fa      	ldr	r2, [r7, #28]
 800b7b2:	440a      	add	r2, r1
 800b7b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b7b8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b7bc:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800b7be:	79fb      	ldrb	r3, [r7, #7]
 800b7c0:	2b01      	cmp	r3, #1
 800b7c2:	d14b      	bne.n	800b85c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800b7c4:	68bb      	ldr	r3, [r7, #8]
 800b7c6:	695b      	ldr	r3, [r3, #20]
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d009      	beq.n	800b7e0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800b7cc:	69bb      	ldr	r3, [r7, #24]
 800b7ce:	015a      	lsls	r2, r3, #5
 800b7d0:	69fb      	ldr	r3, [r7, #28]
 800b7d2:	4413      	add	r3, r2
 800b7d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b7d8:	461a      	mov	r2, r3
 800b7da:	68bb      	ldr	r3, [r7, #8]
 800b7dc:	695b      	ldr	r3, [r3, #20]
 800b7de:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800b7e0:	68bb      	ldr	r3, [r7, #8]
 800b7e2:	791b      	ldrb	r3, [r3, #4]
 800b7e4:	2b01      	cmp	r3, #1
 800b7e6:	d128      	bne.n	800b83a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b7e8:	69fb      	ldr	r3, [r7, #28]
 800b7ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b7ee:	689b      	ldr	r3, [r3, #8]
 800b7f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d110      	bne.n	800b81a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b7f8:	69bb      	ldr	r3, [r7, #24]
 800b7fa:	015a      	lsls	r2, r3, #5
 800b7fc:	69fb      	ldr	r3, [r7, #28]
 800b7fe:	4413      	add	r3, r2
 800b800:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	69ba      	ldr	r2, [r7, #24]
 800b808:	0151      	lsls	r1, r2, #5
 800b80a:	69fa      	ldr	r2, [r7, #28]
 800b80c:	440a      	add	r2, r1
 800b80e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b812:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b816:	6013      	str	r3, [r2, #0]
 800b818:	e00f      	b.n	800b83a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b81a:	69bb      	ldr	r3, [r7, #24]
 800b81c:	015a      	lsls	r2, r3, #5
 800b81e:	69fb      	ldr	r3, [r7, #28]
 800b820:	4413      	add	r3, r2
 800b822:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	69ba      	ldr	r2, [r7, #24]
 800b82a:	0151      	lsls	r1, r2, #5
 800b82c:	69fa      	ldr	r2, [r7, #28]
 800b82e:	440a      	add	r2, r1
 800b830:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b834:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b838:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b83a:	69bb      	ldr	r3, [r7, #24]
 800b83c:	015a      	lsls	r2, r3, #5
 800b83e:	69fb      	ldr	r3, [r7, #28]
 800b840:	4413      	add	r3, r2
 800b842:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	69ba      	ldr	r2, [r7, #24]
 800b84a:	0151      	lsls	r1, r2, #5
 800b84c:	69fa      	ldr	r2, [r7, #28]
 800b84e:	440a      	add	r2, r1
 800b850:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b854:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b858:	6013      	str	r3, [r2, #0]
 800b85a:	e133      	b.n	800bac4 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b85c:	69bb      	ldr	r3, [r7, #24]
 800b85e:	015a      	lsls	r2, r3, #5
 800b860:	69fb      	ldr	r3, [r7, #28]
 800b862:	4413      	add	r3, r2
 800b864:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	69ba      	ldr	r2, [r7, #24]
 800b86c:	0151      	lsls	r1, r2, #5
 800b86e:	69fa      	ldr	r2, [r7, #28]
 800b870:	440a      	add	r2, r1
 800b872:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b876:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b87a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b87c:	68bb      	ldr	r3, [r7, #8]
 800b87e:	791b      	ldrb	r3, [r3, #4]
 800b880:	2b01      	cmp	r3, #1
 800b882:	d015      	beq.n	800b8b0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800b884:	68bb      	ldr	r3, [r7, #8]
 800b886:	699b      	ldr	r3, [r3, #24]
 800b888:	2b00      	cmp	r3, #0
 800b88a:	f000 811b 	beq.w	800bac4 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b88e:	69fb      	ldr	r3, [r7, #28]
 800b890:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b894:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b896:	68bb      	ldr	r3, [r7, #8]
 800b898:	781b      	ldrb	r3, [r3, #0]
 800b89a:	f003 030f 	and.w	r3, r3, #15
 800b89e:	2101      	movs	r1, #1
 800b8a0:	fa01 f303 	lsl.w	r3, r1, r3
 800b8a4:	69f9      	ldr	r1, [r7, #28]
 800b8a6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b8aa:	4313      	orrs	r3, r2
 800b8ac:	634b      	str	r3, [r1, #52]	; 0x34
 800b8ae:	e109      	b.n	800bac4 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b8b0:	69fb      	ldr	r3, [r7, #28]
 800b8b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b8b6:	689b      	ldr	r3, [r3, #8]
 800b8b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d110      	bne.n	800b8e2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b8c0:	69bb      	ldr	r3, [r7, #24]
 800b8c2:	015a      	lsls	r2, r3, #5
 800b8c4:	69fb      	ldr	r3, [r7, #28]
 800b8c6:	4413      	add	r3, r2
 800b8c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	69ba      	ldr	r2, [r7, #24]
 800b8d0:	0151      	lsls	r1, r2, #5
 800b8d2:	69fa      	ldr	r2, [r7, #28]
 800b8d4:	440a      	add	r2, r1
 800b8d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b8da:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b8de:	6013      	str	r3, [r2, #0]
 800b8e0:	e00f      	b.n	800b902 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b8e2:	69bb      	ldr	r3, [r7, #24]
 800b8e4:	015a      	lsls	r2, r3, #5
 800b8e6:	69fb      	ldr	r3, [r7, #28]
 800b8e8:	4413      	add	r3, r2
 800b8ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	69ba      	ldr	r2, [r7, #24]
 800b8f2:	0151      	lsls	r1, r2, #5
 800b8f4:	69fa      	ldr	r2, [r7, #28]
 800b8f6:	440a      	add	r2, r1
 800b8f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b8fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b900:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800b902:	68bb      	ldr	r3, [r7, #8]
 800b904:	6919      	ldr	r1, [r3, #16]
 800b906:	68bb      	ldr	r3, [r7, #8]
 800b908:	781a      	ldrb	r2, [r3, #0]
 800b90a:	68bb      	ldr	r3, [r7, #8]
 800b90c:	699b      	ldr	r3, [r3, #24]
 800b90e:	b298      	uxth	r0, r3
 800b910:	79fb      	ldrb	r3, [r7, #7]
 800b912:	9300      	str	r3, [sp, #0]
 800b914:	4603      	mov	r3, r0
 800b916:	68f8      	ldr	r0, [r7, #12]
 800b918:	f000 fade 	bl	800bed8 <USB_WritePacket>
 800b91c:	e0d2      	b.n	800bac4 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b91e:	69bb      	ldr	r3, [r7, #24]
 800b920:	015a      	lsls	r2, r3, #5
 800b922:	69fb      	ldr	r3, [r7, #28]
 800b924:	4413      	add	r3, r2
 800b926:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b92a:	691b      	ldr	r3, [r3, #16]
 800b92c:	69ba      	ldr	r2, [r7, #24]
 800b92e:	0151      	lsls	r1, r2, #5
 800b930:	69fa      	ldr	r2, [r7, #28]
 800b932:	440a      	add	r2, r1
 800b934:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b938:	0cdb      	lsrs	r3, r3, #19
 800b93a:	04db      	lsls	r3, r3, #19
 800b93c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b93e:	69bb      	ldr	r3, [r7, #24]
 800b940:	015a      	lsls	r2, r3, #5
 800b942:	69fb      	ldr	r3, [r7, #28]
 800b944:	4413      	add	r3, r2
 800b946:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b94a:	691b      	ldr	r3, [r3, #16]
 800b94c:	69ba      	ldr	r2, [r7, #24]
 800b94e:	0151      	lsls	r1, r2, #5
 800b950:	69fa      	ldr	r2, [r7, #28]
 800b952:	440a      	add	r2, r1
 800b954:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b958:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b95c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b960:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800b962:	68bb      	ldr	r3, [r7, #8]
 800b964:	699b      	ldr	r3, [r3, #24]
 800b966:	2b00      	cmp	r3, #0
 800b968:	d126      	bne.n	800b9b8 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800b96a:	69bb      	ldr	r3, [r7, #24]
 800b96c:	015a      	lsls	r2, r3, #5
 800b96e:	69fb      	ldr	r3, [r7, #28]
 800b970:	4413      	add	r3, r2
 800b972:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b976:	691a      	ldr	r2, [r3, #16]
 800b978:	68bb      	ldr	r3, [r7, #8]
 800b97a:	68db      	ldr	r3, [r3, #12]
 800b97c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b980:	69b9      	ldr	r1, [r7, #24]
 800b982:	0148      	lsls	r0, r1, #5
 800b984:	69f9      	ldr	r1, [r7, #28]
 800b986:	4401      	add	r1, r0
 800b988:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b98c:	4313      	orrs	r3, r2
 800b98e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b990:	69bb      	ldr	r3, [r7, #24]
 800b992:	015a      	lsls	r2, r3, #5
 800b994:	69fb      	ldr	r3, [r7, #28]
 800b996:	4413      	add	r3, r2
 800b998:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b99c:	691b      	ldr	r3, [r3, #16]
 800b99e:	69ba      	ldr	r2, [r7, #24]
 800b9a0:	0151      	lsls	r1, r2, #5
 800b9a2:	69fa      	ldr	r2, [r7, #28]
 800b9a4:	440a      	add	r2, r1
 800b9a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b9aa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b9ae:	6113      	str	r3, [r2, #16]
 800b9b0:	e03a      	b.n	800ba28 <USB_EPStartXfer+0x3e4>
 800b9b2:	bf00      	nop
 800b9b4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800b9b8:	68bb      	ldr	r3, [r7, #8]
 800b9ba:	699a      	ldr	r2, [r3, #24]
 800b9bc:	68bb      	ldr	r3, [r7, #8]
 800b9be:	68db      	ldr	r3, [r3, #12]
 800b9c0:	4413      	add	r3, r2
 800b9c2:	1e5a      	subs	r2, r3, #1
 800b9c4:	68bb      	ldr	r3, [r7, #8]
 800b9c6:	68db      	ldr	r3, [r3, #12]
 800b9c8:	fbb2 f3f3 	udiv	r3, r2, r3
 800b9cc:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800b9ce:	68bb      	ldr	r3, [r7, #8]
 800b9d0:	68db      	ldr	r3, [r3, #12]
 800b9d2:	8afa      	ldrh	r2, [r7, #22]
 800b9d4:	fb03 f202 	mul.w	r2, r3, r2
 800b9d8:	68bb      	ldr	r3, [r7, #8]
 800b9da:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800b9dc:	69bb      	ldr	r3, [r7, #24]
 800b9de:	015a      	lsls	r2, r3, #5
 800b9e0:	69fb      	ldr	r3, [r7, #28]
 800b9e2:	4413      	add	r3, r2
 800b9e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b9e8:	691a      	ldr	r2, [r3, #16]
 800b9ea:	8afb      	ldrh	r3, [r7, #22]
 800b9ec:	04d9      	lsls	r1, r3, #19
 800b9ee:	4b38      	ldr	r3, [pc, #224]	; (800bad0 <USB_EPStartXfer+0x48c>)
 800b9f0:	400b      	ands	r3, r1
 800b9f2:	69b9      	ldr	r1, [r7, #24]
 800b9f4:	0148      	lsls	r0, r1, #5
 800b9f6:	69f9      	ldr	r1, [r7, #28]
 800b9f8:	4401      	add	r1, r0
 800b9fa:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b9fe:	4313      	orrs	r3, r2
 800ba00:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800ba02:	69bb      	ldr	r3, [r7, #24]
 800ba04:	015a      	lsls	r2, r3, #5
 800ba06:	69fb      	ldr	r3, [r7, #28]
 800ba08:	4413      	add	r3, r2
 800ba0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba0e:	691a      	ldr	r2, [r3, #16]
 800ba10:	68bb      	ldr	r3, [r7, #8]
 800ba12:	69db      	ldr	r3, [r3, #28]
 800ba14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ba18:	69b9      	ldr	r1, [r7, #24]
 800ba1a:	0148      	lsls	r0, r1, #5
 800ba1c:	69f9      	ldr	r1, [r7, #28]
 800ba1e:	4401      	add	r1, r0
 800ba20:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ba24:	4313      	orrs	r3, r2
 800ba26:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800ba28:	79fb      	ldrb	r3, [r7, #7]
 800ba2a:	2b01      	cmp	r3, #1
 800ba2c:	d10d      	bne.n	800ba4a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800ba2e:	68bb      	ldr	r3, [r7, #8]
 800ba30:	691b      	ldr	r3, [r3, #16]
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d009      	beq.n	800ba4a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800ba36:	68bb      	ldr	r3, [r7, #8]
 800ba38:	6919      	ldr	r1, [r3, #16]
 800ba3a:	69bb      	ldr	r3, [r7, #24]
 800ba3c:	015a      	lsls	r2, r3, #5
 800ba3e:	69fb      	ldr	r3, [r7, #28]
 800ba40:	4413      	add	r3, r2
 800ba42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba46:	460a      	mov	r2, r1
 800ba48:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800ba4a:	68bb      	ldr	r3, [r7, #8]
 800ba4c:	791b      	ldrb	r3, [r3, #4]
 800ba4e:	2b01      	cmp	r3, #1
 800ba50:	d128      	bne.n	800baa4 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ba52:	69fb      	ldr	r3, [r7, #28]
 800ba54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba58:	689b      	ldr	r3, [r3, #8]
 800ba5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d110      	bne.n	800ba84 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800ba62:	69bb      	ldr	r3, [r7, #24]
 800ba64:	015a      	lsls	r2, r3, #5
 800ba66:	69fb      	ldr	r3, [r7, #28]
 800ba68:	4413      	add	r3, r2
 800ba6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	69ba      	ldr	r2, [r7, #24]
 800ba72:	0151      	lsls	r1, r2, #5
 800ba74:	69fa      	ldr	r2, [r7, #28]
 800ba76:	440a      	add	r2, r1
 800ba78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ba7c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ba80:	6013      	str	r3, [r2, #0]
 800ba82:	e00f      	b.n	800baa4 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800ba84:	69bb      	ldr	r3, [r7, #24]
 800ba86:	015a      	lsls	r2, r3, #5
 800ba88:	69fb      	ldr	r3, [r7, #28]
 800ba8a:	4413      	add	r3, r2
 800ba8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	69ba      	ldr	r2, [r7, #24]
 800ba94:	0151      	lsls	r1, r2, #5
 800ba96:	69fa      	ldr	r2, [r7, #28]
 800ba98:	440a      	add	r2, r1
 800ba9a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ba9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800baa2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800baa4:	69bb      	ldr	r3, [r7, #24]
 800baa6:	015a      	lsls	r2, r3, #5
 800baa8:	69fb      	ldr	r3, [r7, #28]
 800baaa:	4413      	add	r3, r2
 800baac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	69ba      	ldr	r2, [r7, #24]
 800bab4:	0151      	lsls	r1, r2, #5
 800bab6:	69fa      	ldr	r2, [r7, #28]
 800bab8:	440a      	add	r2, r1
 800baba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800babe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800bac2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800bac4:	2300      	movs	r3, #0
}
 800bac6:	4618      	mov	r0, r3
 800bac8:	3720      	adds	r7, #32
 800baca:	46bd      	mov	sp, r7
 800bacc:	bd80      	pop	{r7, pc}
 800bace:	bf00      	nop
 800bad0:	1ff80000 	.word	0x1ff80000

0800bad4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800bad4:	b480      	push	{r7}
 800bad6:	b087      	sub	sp, #28
 800bad8:	af00      	add	r7, sp, #0
 800bada:	60f8      	str	r0, [r7, #12]
 800badc:	60b9      	str	r1, [r7, #8]
 800bade:	4613      	mov	r3, r2
 800bae0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800bae6:	68bb      	ldr	r3, [r7, #8]
 800bae8:	781b      	ldrb	r3, [r3, #0]
 800baea:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800baec:	68bb      	ldr	r3, [r7, #8]
 800baee:	785b      	ldrb	r3, [r3, #1]
 800baf0:	2b01      	cmp	r3, #1
 800baf2:	f040 80ce 	bne.w	800bc92 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800baf6:	68bb      	ldr	r3, [r7, #8]
 800baf8:	699b      	ldr	r3, [r3, #24]
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d132      	bne.n	800bb64 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800bafe:	693b      	ldr	r3, [r7, #16]
 800bb00:	015a      	lsls	r2, r3, #5
 800bb02:	697b      	ldr	r3, [r7, #20]
 800bb04:	4413      	add	r3, r2
 800bb06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb0a:	691b      	ldr	r3, [r3, #16]
 800bb0c:	693a      	ldr	r2, [r7, #16]
 800bb0e:	0151      	lsls	r1, r2, #5
 800bb10:	697a      	ldr	r2, [r7, #20]
 800bb12:	440a      	add	r2, r1
 800bb14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bb18:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800bb1c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800bb20:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800bb22:	693b      	ldr	r3, [r7, #16]
 800bb24:	015a      	lsls	r2, r3, #5
 800bb26:	697b      	ldr	r3, [r7, #20]
 800bb28:	4413      	add	r3, r2
 800bb2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb2e:	691b      	ldr	r3, [r3, #16]
 800bb30:	693a      	ldr	r2, [r7, #16]
 800bb32:	0151      	lsls	r1, r2, #5
 800bb34:	697a      	ldr	r2, [r7, #20]
 800bb36:	440a      	add	r2, r1
 800bb38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bb3c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bb40:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800bb42:	693b      	ldr	r3, [r7, #16]
 800bb44:	015a      	lsls	r2, r3, #5
 800bb46:	697b      	ldr	r3, [r7, #20]
 800bb48:	4413      	add	r3, r2
 800bb4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb4e:	691b      	ldr	r3, [r3, #16]
 800bb50:	693a      	ldr	r2, [r7, #16]
 800bb52:	0151      	lsls	r1, r2, #5
 800bb54:	697a      	ldr	r2, [r7, #20]
 800bb56:	440a      	add	r2, r1
 800bb58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bb5c:	0cdb      	lsrs	r3, r3, #19
 800bb5e:	04db      	lsls	r3, r3, #19
 800bb60:	6113      	str	r3, [r2, #16]
 800bb62:	e04e      	b.n	800bc02 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800bb64:	693b      	ldr	r3, [r7, #16]
 800bb66:	015a      	lsls	r2, r3, #5
 800bb68:	697b      	ldr	r3, [r7, #20]
 800bb6a:	4413      	add	r3, r2
 800bb6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb70:	691b      	ldr	r3, [r3, #16]
 800bb72:	693a      	ldr	r2, [r7, #16]
 800bb74:	0151      	lsls	r1, r2, #5
 800bb76:	697a      	ldr	r2, [r7, #20]
 800bb78:	440a      	add	r2, r1
 800bb7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bb7e:	0cdb      	lsrs	r3, r3, #19
 800bb80:	04db      	lsls	r3, r3, #19
 800bb82:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800bb84:	693b      	ldr	r3, [r7, #16]
 800bb86:	015a      	lsls	r2, r3, #5
 800bb88:	697b      	ldr	r3, [r7, #20]
 800bb8a:	4413      	add	r3, r2
 800bb8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb90:	691b      	ldr	r3, [r3, #16]
 800bb92:	693a      	ldr	r2, [r7, #16]
 800bb94:	0151      	lsls	r1, r2, #5
 800bb96:	697a      	ldr	r2, [r7, #20]
 800bb98:	440a      	add	r2, r1
 800bb9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bb9e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800bba2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800bba6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800bba8:	68bb      	ldr	r3, [r7, #8]
 800bbaa:	699a      	ldr	r2, [r3, #24]
 800bbac:	68bb      	ldr	r3, [r7, #8]
 800bbae:	68db      	ldr	r3, [r3, #12]
 800bbb0:	429a      	cmp	r2, r3
 800bbb2:	d903      	bls.n	800bbbc <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800bbb4:	68bb      	ldr	r3, [r7, #8]
 800bbb6:	68da      	ldr	r2, [r3, #12]
 800bbb8:	68bb      	ldr	r3, [r7, #8]
 800bbba:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800bbbc:	693b      	ldr	r3, [r7, #16]
 800bbbe:	015a      	lsls	r2, r3, #5
 800bbc0:	697b      	ldr	r3, [r7, #20]
 800bbc2:	4413      	add	r3, r2
 800bbc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bbc8:	691b      	ldr	r3, [r3, #16]
 800bbca:	693a      	ldr	r2, [r7, #16]
 800bbcc:	0151      	lsls	r1, r2, #5
 800bbce:	697a      	ldr	r2, [r7, #20]
 800bbd0:	440a      	add	r2, r1
 800bbd2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bbd6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bbda:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800bbdc:	693b      	ldr	r3, [r7, #16]
 800bbde:	015a      	lsls	r2, r3, #5
 800bbe0:	697b      	ldr	r3, [r7, #20]
 800bbe2:	4413      	add	r3, r2
 800bbe4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bbe8:	691a      	ldr	r2, [r3, #16]
 800bbea:	68bb      	ldr	r3, [r7, #8]
 800bbec:	699b      	ldr	r3, [r3, #24]
 800bbee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bbf2:	6939      	ldr	r1, [r7, #16]
 800bbf4:	0148      	lsls	r0, r1, #5
 800bbf6:	6979      	ldr	r1, [r7, #20]
 800bbf8:	4401      	add	r1, r0
 800bbfa:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800bbfe:	4313      	orrs	r3, r2
 800bc00:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800bc02:	79fb      	ldrb	r3, [r7, #7]
 800bc04:	2b01      	cmp	r3, #1
 800bc06:	d11e      	bne.n	800bc46 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800bc08:	68bb      	ldr	r3, [r7, #8]
 800bc0a:	695b      	ldr	r3, [r3, #20]
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d009      	beq.n	800bc24 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800bc10:	693b      	ldr	r3, [r7, #16]
 800bc12:	015a      	lsls	r2, r3, #5
 800bc14:	697b      	ldr	r3, [r7, #20]
 800bc16:	4413      	add	r3, r2
 800bc18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc1c:	461a      	mov	r2, r3
 800bc1e:	68bb      	ldr	r3, [r7, #8]
 800bc20:	695b      	ldr	r3, [r3, #20]
 800bc22:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800bc24:	693b      	ldr	r3, [r7, #16]
 800bc26:	015a      	lsls	r2, r3, #5
 800bc28:	697b      	ldr	r3, [r7, #20]
 800bc2a:	4413      	add	r3, r2
 800bc2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	693a      	ldr	r2, [r7, #16]
 800bc34:	0151      	lsls	r1, r2, #5
 800bc36:	697a      	ldr	r2, [r7, #20]
 800bc38:	440a      	add	r2, r1
 800bc3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bc3e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800bc42:	6013      	str	r3, [r2, #0]
 800bc44:	e097      	b.n	800bd76 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800bc46:	693b      	ldr	r3, [r7, #16]
 800bc48:	015a      	lsls	r2, r3, #5
 800bc4a:	697b      	ldr	r3, [r7, #20]
 800bc4c:	4413      	add	r3, r2
 800bc4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	693a      	ldr	r2, [r7, #16]
 800bc56:	0151      	lsls	r1, r2, #5
 800bc58:	697a      	ldr	r2, [r7, #20]
 800bc5a:	440a      	add	r2, r1
 800bc5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bc60:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800bc64:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800bc66:	68bb      	ldr	r3, [r7, #8]
 800bc68:	699b      	ldr	r3, [r3, #24]
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	f000 8083 	beq.w	800bd76 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800bc70:	697b      	ldr	r3, [r7, #20]
 800bc72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bc78:	68bb      	ldr	r3, [r7, #8]
 800bc7a:	781b      	ldrb	r3, [r3, #0]
 800bc7c:	f003 030f 	and.w	r3, r3, #15
 800bc80:	2101      	movs	r1, #1
 800bc82:	fa01 f303 	lsl.w	r3, r1, r3
 800bc86:	6979      	ldr	r1, [r7, #20]
 800bc88:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bc8c:	4313      	orrs	r3, r2
 800bc8e:	634b      	str	r3, [r1, #52]	; 0x34
 800bc90:	e071      	b.n	800bd76 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800bc92:	693b      	ldr	r3, [r7, #16]
 800bc94:	015a      	lsls	r2, r3, #5
 800bc96:	697b      	ldr	r3, [r7, #20]
 800bc98:	4413      	add	r3, r2
 800bc9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc9e:	691b      	ldr	r3, [r3, #16]
 800bca0:	693a      	ldr	r2, [r7, #16]
 800bca2:	0151      	lsls	r1, r2, #5
 800bca4:	697a      	ldr	r2, [r7, #20]
 800bca6:	440a      	add	r2, r1
 800bca8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bcac:	0cdb      	lsrs	r3, r3, #19
 800bcae:	04db      	lsls	r3, r3, #19
 800bcb0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800bcb2:	693b      	ldr	r3, [r7, #16]
 800bcb4:	015a      	lsls	r2, r3, #5
 800bcb6:	697b      	ldr	r3, [r7, #20]
 800bcb8:	4413      	add	r3, r2
 800bcba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bcbe:	691b      	ldr	r3, [r3, #16]
 800bcc0:	693a      	ldr	r2, [r7, #16]
 800bcc2:	0151      	lsls	r1, r2, #5
 800bcc4:	697a      	ldr	r2, [r7, #20]
 800bcc6:	440a      	add	r2, r1
 800bcc8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bccc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800bcd0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800bcd4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800bcd6:	68bb      	ldr	r3, [r7, #8]
 800bcd8:	699b      	ldr	r3, [r3, #24]
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d003      	beq.n	800bce6 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800bcde:	68bb      	ldr	r3, [r7, #8]
 800bce0:	68da      	ldr	r2, [r3, #12]
 800bce2:	68bb      	ldr	r3, [r7, #8]
 800bce4:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800bce6:	68bb      	ldr	r3, [r7, #8]
 800bce8:	68da      	ldr	r2, [r3, #12]
 800bcea:	68bb      	ldr	r3, [r7, #8]
 800bcec:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800bcee:	693b      	ldr	r3, [r7, #16]
 800bcf0:	015a      	lsls	r2, r3, #5
 800bcf2:	697b      	ldr	r3, [r7, #20]
 800bcf4:	4413      	add	r3, r2
 800bcf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bcfa:	691b      	ldr	r3, [r3, #16]
 800bcfc:	693a      	ldr	r2, [r7, #16]
 800bcfe:	0151      	lsls	r1, r2, #5
 800bd00:	697a      	ldr	r2, [r7, #20]
 800bd02:	440a      	add	r2, r1
 800bd04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bd08:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bd0c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800bd0e:	693b      	ldr	r3, [r7, #16]
 800bd10:	015a      	lsls	r2, r3, #5
 800bd12:	697b      	ldr	r3, [r7, #20]
 800bd14:	4413      	add	r3, r2
 800bd16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd1a:	691a      	ldr	r2, [r3, #16]
 800bd1c:	68bb      	ldr	r3, [r7, #8]
 800bd1e:	69db      	ldr	r3, [r3, #28]
 800bd20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bd24:	6939      	ldr	r1, [r7, #16]
 800bd26:	0148      	lsls	r0, r1, #5
 800bd28:	6979      	ldr	r1, [r7, #20]
 800bd2a:	4401      	add	r1, r0
 800bd2c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800bd30:	4313      	orrs	r3, r2
 800bd32:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800bd34:	79fb      	ldrb	r3, [r7, #7]
 800bd36:	2b01      	cmp	r3, #1
 800bd38:	d10d      	bne.n	800bd56 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800bd3a:	68bb      	ldr	r3, [r7, #8]
 800bd3c:	691b      	ldr	r3, [r3, #16]
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d009      	beq.n	800bd56 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800bd42:	68bb      	ldr	r3, [r7, #8]
 800bd44:	6919      	ldr	r1, [r3, #16]
 800bd46:	693b      	ldr	r3, [r7, #16]
 800bd48:	015a      	lsls	r2, r3, #5
 800bd4a:	697b      	ldr	r3, [r7, #20]
 800bd4c:	4413      	add	r3, r2
 800bd4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd52:	460a      	mov	r2, r1
 800bd54:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800bd56:	693b      	ldr	r3, [r7, #16]
 800bd58:	015a      	lsls	r2, r3, #5
 800bd5a:	697b      	ldr	r3, [r7, #20]
 800bd5c:	4413      	add	r3, r2
 800bd5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	693a      	ldr	r2, [r7, #16]
 800bd66:	0151      	lsls	r1, r2, #5
 800bd68:	697a      	ldr	r2, [r7, #20]
 800bd6a:	440a      	add	r2, r1
 800bd6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bd70:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800bd74:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800bd76:	2300      	movs	r3, #0
}
 800bd78:	4618      	mov	r0, r3
 800bd7a:	371c      	adds	r7, #28
 800bd7c:	46bd      	mov	sp, r7
 800bd7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd82:	4770      	bx	lr

0800bd84 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800bd84:	b480      	push	{r7}
 800bd86:	b087      	sub	sp, #28
 800bd88:	af00      	add	r7, sp, #0
 800bd8a:	6078      	str	r0, [r7, #4]
 800bd8c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800bd8e:	2300      	movs	r3, #0
 800bd90:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800bd92:	2300      	movs	r3, #0
 800bd94:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800bd9a:	683b      	ldr	r3, [r7, #0]
 800bd9c:	785b      	ldrb	r3, [r3, #1]
 800bd9e:	2b01      	cmp	r3, #1
 800bda0:	d14a      	bne.n	800be38 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800bda2:	683b      	ldr	r3, [r7, #0]
 800bda4:	781b      	ldrb	r3, [r3, #0]
 800bda6:	015a      	lsls	r2, r3, #5
 800bda8:	693b      	ldr	r3, [r7, #16]
 800bdaa:	4413      	add	r3, r2
 800bdac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bdb6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bdba:	f040 8086 	bne.w	800beca <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800bdbe:	683b      	ldr	r3, [r7, #0]
 800bdc0:	781b      	ldrb	r3, [r3, #0]
 800bdc2:	015a      	lsls	r2, r3, #5
 800bdc4:	693b      	ldr	r3, [r7, #16]
 800bdc6:	4413      	add	r3, r2
 800bdc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	683a      	ldr	r2, [r7, #0]
 800bdd0:	7812      	ldrb	r2, [r2, #0]
 800bdd2:	0151      	lsls	r1, r2, #5
 800bdd4:	693a      	ldr	r2, [r7, #16]
 800bdd6:	440a      	add	r2, r1
 800bdd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bddc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800bde0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800bde2:	683b      	ldr	r3, [r7, #0]
 800bde4:	781b      	ldrb	r3, [r3, #0]
 800bde6:	015a      	lsls	r2, r3, #5
 800bde8:	693b      	ldr	r3, [r7, #16]
 800bdea:	4413      	add	r3, r2
 800bdec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	683a      	ldr	r2, [r7, #0]
 800bdf4:	7812      	ldrb	r2, [r2, #0]
 800bdf6:	0151      	lsls	r1, r2, #5
 800bdf8:	693a      	ldr	r2, [r7, #16]
 800bdfa:	440a      	add	r2, r1
 800bdfc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800be00:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800be04:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	3301      	adds	r3, #1
 800be0a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	f242 7210 	movw	r2, #10000	; 0x2710
 800be12:	4293      	cmp	r3, r2
 800be14:	d902      	bls.n	800be1c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800be16:	2301      	movs	r3, #1
 800be18:	75fb      	strb	r3, [r7, #23]
          break;
 800be1a:	e056      	b.n	800beca <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800be1c:	683b      	ldr	r3, [r7, #0]
 800be1e:	781b      	ldrb	r3, [r3, #0]
 800be20:	015a      	lsls	r2, r3, #5
 800be22:	693b      	ldr	r3, [r7, #16]
 800be24:	4413      	add	r3, r2
 800be26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800be30:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800be34:	d0e7      	beq.n	800be06 <USB_EPStopXfer+0x82>
 800be36:	e048      	b.n	800beca <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800be38:	683b      	ldr	r3, [r7, #0]
 800be3a:	781b      	ldrb	r3, [r3, #0]
 800be3c:	015a      	lsls	r2, r3, #5
 800be3e:	693b      	ldr	r3, [r7, #16]
 800be40:	4413      	add	r3, r2
 800be42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800be4c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800be50:	d13b      	bne.n	800beca <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800be52:	683b      	ldr	r3, [r7, #0]
 800be54:	781b      	ldrb	r3, [r3, #0]
 800be56:	015a      	lsls	r2, r3, #5
 800be58:	693b      	ldr	r3, [r7, #16]
 800be5a:	4413      	add	r3, r2
 800be5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	683a      	ldr	r2, [r7, #0]
 800be64:	7812      	ldrb	r2, [r2, #0]
 800be66:	0151      	lsls	r1, r2, #5
 800be68:	693a      	ldr	r2, [r7, #16]
 800be6a:	440a      	add	r2, r1
 800be6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800be70:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800be74:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800be76:	683b      	ldr	r3, [r7, #0]
 800be78:	781b      	ldrb	r3, [r3, #0]
 800be7a:	015a      	lsls	r2, r3, #5
 800be7c:	693b      	ldr	r3, [r7, #16]
 800be7e:	4413      	add	r3, r2
 800be80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	683a      	ldr	r2, [r7, #0]
 800be88:	7812      	ldrb	r2, [r2, #0]
 800be8a:	0151      	lsls	r1, r2, #5
 800be8c:	693a      	ldr	r2, [r7, #16]
 800be8e:	440a      	add	r2, r1
 800be90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800be94:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800be98:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	3301      	adds	r3, #1
 800be9e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	f242 7210 	movw	r2, #10000	; 0x2710
 800bea6:	4293      	cmp	r3, r2
 800bea8:	d902      	bls.n	800beb0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800beaa:	2301      	movs	r3, #1
 800beac:	75fb      	strb	r3, [r7, #23]
          break;
 800beae:	e00c      	b.n	800beca <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800beb0:	683b      	ldr	r3, [r7, #0]
 800beb2:	781b      	ldrb	r3, [r3, #0]
 800beb4:	015a      	lsls	r2, r3, #5
 800beb6:	693b      	ldr	r3, [r7, #16]
 800beb8:	4413      	add	r3, r2
 800beba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bec4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bec8:	d0e7      	beq.n	800be9a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800beca:	7dfb      	ldrb	r3, [r7, #23]
}
 800becc:	4618      	mov	r0, r3
 800bece:	371c      	adds	r7, #28
 800bed0:	46bd      	mov	sp, r7
 800bed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed6:	4770      	bx	lr

0800bed8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800bed8:	b480      	push	{r7}
 800beda:	b089      	sub	sp, #36	; 0x24
 800bedc:	af00      	add	r7, sp, #0
 800bede:	60f8      	str	r0, [r7, #12]
 800bee0:	60b9      	str	r1, [r7, #8]
 800bee2:	4611      	mov	r1, r2
 800bee4:	461a      	mov	r2, r3
 800bee6:	460b      	mov	r3, r1
 800bee8:	71fb      	strb	r3, [r7, #7]
 800beea:	4613      	mov	r3, r2
 800beec:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800bef2:	68bb      	ldr	r3, [r7, #8]
 800bef4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800bef6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800befa:	2b00      	cmp	r3, #0
 800befc:	d123      	bne.n	800bf46 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800befe:	88bb      	ldrh	r3, [r7, #4]
 800bf00:	3303      	adds	r3, #3
 800bf02:	089b      	lsrs	r3, r3, #2
 800bf04:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800bf06:	2300      	movs	r3, #0
 800bf08:	61bb      	str	r3, [r7, #24]
 800bf0a:	e018      	b.n	800bf3e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800bf0c:	79fb      	ldrb	r3, [r7, #7]
 800bf0e:	031a      	lsls	r2, r3, #12
 800bf10:	697b      	ldr	r3, [r7, #20]
 800bf12:	4413      	add	r3, r2
 800bf14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf18:	461a      	mov	r2, r3
 800bf1a:	69fb      	ldr	r3, [r7, #28]
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	6013      	str	r3, [r2, #0]
      pSrc++;
 800bf20:	69fb      	ldr	r3, [r7, #28]
 800bf22:	3301      	adds	r3, #1
 800bf24:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800bf26:	69fb      	ldr	r3, [r7, #28]
 800bf28:	3301      	adds	r3, #1
 800bf2a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800bf2c:	69fb      	ldr	r3, [r7, #28]
 800bf2e:	3301      	adds	r3, #1
 800bf30:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800bf32:	69fb      	ldr	r3, [r7, #28]
 800bf34:	3301      	adds	r3, #1
 800bf36:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800bf38:	69bb      	ldr	r3, [r7, #24]
 800bf3a:	3301      	adds	r3, #1
 800bf3c:	61bb      	str	r3, [r7, #24]
 800bf3e:	69ba      	ldr	r2, [r7, #24]
 800bf40:	693b      	ldr	r3, [r7, #16]
 800bf42:	429a      	cmp	r2, r3
 800bf44:	d3e2      	bcc.n	800bf0c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800bf46:	2300      	movs	r3, #0
}
 800bf48:	4618      	mov	r0, r3
 800bf4a:	3724      	adds	r7, #36	; 0x24
 800bf4c:	46bd      	mov	sp, r7
 800bf4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf52:	4770      	bx	lr

0800bf54 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800bf54:	b480      	push	{r7}
 800bf56:	b08b      	sub	sp, #44	; 0x2c
 800bf58:	af00      	add	r7, sp, #0
 800bf5a:	60f8      	str	r0, [r7, #12]
 800bf5c:	60b9      	str	r1, [r7, #8]
 800bf5e:	4613      	mov	r3, r2
 800bf60:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800bf66:	68bb      	ldr	r3, [r7, #8]
 800bf68:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800bf6a:	88fb      	ldrh	r3, [r7, #6]
 800bf6c:	089b      	lsrs	r3, r3, #2
 800bf6e:	b29b      	uxth	r3, r3
 800bf70:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800bf72:	88fb      	ldrh	r3, [r7, #6]
 800bf74:	f003 0303 	and.w	r3, r3, #3
 800bf78:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800bf7a:	2300      	movs	r3, #0
 800bf7c:	623b      	str	r3, [r7, #32]
 800bf7e:	e014      	b.n	800bfaa <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800bf80:	69bb      	ldr	r3, [r7, #24]
 800bf82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf86:	681a      	ldr	r2, [r3, #0]
 800bf88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf8a:	601a      	str	r2, [r3, #0]
    pDest++;
 800bf8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf8e:	3301      	adds	r3, #1
 800bf90:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800bf92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf94:	3301      	adds	r3, #1
 800bf96:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800bf98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf9a:	3301      	adds	r3, #1
 800bf9c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800bf9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfa0:	3301      	adds	r3, #1
 800bfa2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800bfa4:	6a3b      	ldr	r3, [r7, #32]
 800bfa6:	3301      	adds	r3, #1
 800bfa8:	623b      	str	r3, [r7, #32]
 800bfaa:	6a3a      	ldr	r2, [r7, #32]
 800bfac:	697b      	ldr	r3, [r7, #20]
 800bfae:	429a      	cmp	r2, r3
 800bfb0:	d3e6      	bcc.n	800bf80 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800bfb2:	8bfb      	ldrh	r3, [r7, #30]
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d01e      	beq.n	800bff6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800bfb8:	2300      	movs	r3, #0
 800bfba:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800bfbc:	69bb      	ldr	r3, [r7, #24]
 800bfbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bfc2:	461a      	mov	r2, r3
 800bfc4:	f107 0310 	add.w	r3, r7, #16
 800bfc8:	6812      	ldr	r2, [r2, #0]
 800bfca:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800bfcc:	693a      	ldr	r2, [r7, #16]
 800bfce:	6a3b      	ldr	r3, [r7, #32]
 800bfd0:	b2db      	uxtb	r3, r3
 800bfd2:	00db      	lsls	r3, r3, #3
 800bfd4:	fa22 f303 	lsr.w	r3, r2, r3
 800bfd8:	b2da      	uxtb	r2, r3
 800bfda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfdc:	701a      	strb	r2, [r3, #0]
      i++;
 800bfde:	6a3b      	ldr	r3, [r7, #32]
 800bfe0:	3301      	adds	r3, #1
 800bfe2:	623b      	str	r3, [r7, #32]
      pDest++;
 800bfe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfe6:	3301      	adds	r3, #1
 800bfe8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800bfea:	8bfb      	ldrh	r3, [r7, #30]
 800bfec:	3b01      	subs	r3, #1
 800bfee:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800bff0:	8bfb      	ldrh	r3, [r7, #30]
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d1ea      	bne.n	800bfcc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800bff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bff8:	4618      	mov	r0, r3
 800bffa:	372c      	adds	r7, #44	; 0x2c
 800bffc:	46bd      	mov	sp, r7
 800bffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c002:	4770      	bx	lr

0800c004 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c004:	b480      	push	{r7}
 800c006:	b085      	sub	sp, #20
 800c008:	af00      	add	r7, sp, #0
 800c00a:	6078      	str	r0, [r7, #4]
 800c00c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c012:	683b      	ldr	r3, [r7, #0]
 800c014:	781b      	ldrb	r3, [r3, #0]
 800c016:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c018:	683b      	ldr	r3, [r7, #0]
 800c01a:	785b      	ldrb	r3, [r3, #1]
 800c01c:	2b01      	cmp	r3, #1
 800c01e:	d12c      	bne.n	800c07a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c020:	68bb      	ldr	r3, [r7, #8]
 800c022:	015a      	lsls	r2, r3, #5
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	4413      	add	r3, r2
 800c028:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	2b00      	cmp	r3, #0
 800c030:	db12      	blt.n	800c058 <USB_EPSetStall+0x54>
 800c032:	68bb      	ldr	r3, [r7, #8]
 800c034:	2b00      	cmp	r3, #0
 800c036:	d00f      	beq.n	800c058 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800c038:	68bb      	ldr	r3, [r7, #8]
 800c03a:	015a      	lsls	r2, r3, #5
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	4413      	add	r3, r2
 800c040:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	68ba      	ldr	r2, [r7, #8]
 800c048:	0151      	lsls	r1, r2, #5
 800c04a:	68fa      	ldr	r2, [r7, #12]
 800c04c:	440a      	add	r2, r1
 800c04e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c052:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c056:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800c058:	68bb      	ldr	r3, [r7, #8]
 800c05a:	015a      	lsls	r2, r3, #5
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	4413      	add	r3, r2
 800c060:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	68ba      	ldr	r2, [r7, #8]
 800c068:	0151      	lsls	r1, r2, #5
 800c06a:	68fa      	ldr	r2, [r7, #12]
 800c06c:	440a      	add	r2, r1
 800c06e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c072:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c076:	6013      	str	r3, [r2, #0]
 800c078:	e02b      	b.n	800c0d2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c07a:	68bb      	ldr	r3, [r7, #8]
 800c07c:	015a      	lsls	r2, r3, #5
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	4413      	add	r3, r2
 800c082:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	2b00      	cmp	r3, #0
 800c08a:	db12      	blt.n	800c0b2 <USB_EPSetStall+0xae>
 800c08c:	68bb      	ldr	r3, [r7, #8]
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d00f      	beq.n	800c0b2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800c092:	68bb      	ldr	r3, [r7, #8]
 800c094:	015a      	lsls	r2, r3, #5
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	4413      	add	r3, r2
 800c09a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	68ba      	ldr	r2, [r7, #8]
 800c0a2:	0151      	lsls	r1, r2, #5
 800c0a4:	68fa      	ldr	r2, [r7, #12]
 800c0a6:	440a      	add	r2, r1
 800c0a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c0ac:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c0b0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800c0b2:	68bb      	ldr	r3, [r7, #8]
 800c0b4:	015a      	lsls	r2, r3, #5
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	4413      	add	r3, r2
 800c0ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	68ba      	ldr	r2, [r7, #8]
 800c0c2:	0151      	lsls	r1, r2, #5
 800c0c4:	68fa      	ldr	r2, [r7, #12]
 800c0c6:	440a      	add	r2, r1
 800c0c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c0cc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c0d0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c0d2:	2300      	movs	r3, #0
}
 800c0d4:	4618      	mov	r0, r3
 800c0d6:	3714      	adds	r7, #20
 800c0d8:	46bd      	mov	sp, r7
 800c0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0de:	4770      	bx	lr

0800c0e0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c0e0:	b480      	push	{r7}
 800c0e2:	b085      	sub	sp, #20
 800c0e4:	af00      	add	r7, sp, #0
 800c0e6:	6078      	str	r0, [r7, #4]
 800c0e8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c0ee:	683b      	ldr	r3, [r7, #0]
 800c0f0:	781b      	ldrb	r3, [r3, #0]
 800c0f2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c0f4:	683b      	ldr	r3, [r7, #0]
 800c0f6:	785b      	ldrb	r3, [r3, #1]
 800c0f8:	2b01      	cmp	r3, #1
 800c0fa:	d128      	bne.n	800c14e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800c0fc:	68bb      	ldr	r3, [r7, #8]
 800c0fe:	015a      	lsls	r2, r3, #5
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	4413      	add	r3, r2
 800c104:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	68ba      	ldr	r2, [r7, #8]
 800c10c:	0151      	lsls	r1, r2, #5
 800c10e:	68fa      	ldr	r2, [r7, #12]
 800c110:	440a      	add	r2, r1
 800c112:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c116:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c11a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c11c:	683b      	ldr	r3, [r7, #0]
 800c11e:	791b      	ldrb	r3, [r3, #4]
 800c120:	2b03      	cmp	r3, #3
 800c122:	d003      	beq.n	800c12c <USB_EPClearStall+0x4c>
 800c124:	683b      	ldr	r3, [r7, #0]
 800c126:	791b      	ldrb	r3, [r3, #4]
 800c128:	2b02      	cmp	r3, #2
 800c12a:	d138      	bne.n	800c19e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c12c:	68bb      	ldr	r3, [r7, #8]
 800c12e:	015a      	lsls	r2, r3, #5
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	4413      	add	r3, r2
 800c134:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	68ba      	ldr	r2, [r7, #8]
 800c13c:	0151      	lsls	r1, r2, #5
 800c13e:	68fa      	ldr	r2, [r7, #12]
 800c140:	440a      	add	r2, r1
 800c142:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c146:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c14a:	6013      	str	r3, [r2, #0]
 800c14c:	e027      	b.n	800c19e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800c14e:	68bb      	ldr	r3, [r7, #8]
 800c150:	015a      	lsls	r2, r3, #5
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	4413      	add	r3, r2
 800c156:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	68ba      	ldr	r2, [r7, #8]
 800c15e:	0151      	lsls	r1, r2, #5
 800c160:	68fa      	ldr	r2, [r7, #12]
 800c162:	440a      	add	r2, r1
 800c164:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c168:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c16c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c16e:	683b      	ldr	r3, [r7, #0]
 800c170:	791b      	ldrb	r3, [r3, #4]
 800c172:	2b03      	cmp	r3, #3
 800c174:	d003      	beq.n	800c17e <USB_EPClearStall+0x9e>
 800c176:	683b      	ldr	r3, [r7, #0]
 800c178:	791b      	ldrb	r3, [r3, #4]
 800c17a:	2b02      	cmp	r3, #2
 800c17c:	d10f      	bne.n	800c19e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c17e:	68bb      	ldr	r3, [r7, #8]
 800c180:	015a      	lsls	r2, r3, #5
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	4413      	add	r3, r2
 800c186:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	68ba      	ldr	r2, [r7, #8]
 800c18e:	0151      	lsls	r1, r2, #5
 800c190:	68fa      	ldr	r2, [r7, #12]
 800c192:	440a      	add	r2, r1
 800c194:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c198:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c19c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800c19e:	2300      	movs	r3, #0
}
 800c1a0:	4618      	mov	r0, r3
 800c1a2:	3714      	adds	r7, #20
 800c1a4:	46bd      	mov	sp, r7
 800c1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1aa:	4770      	bx	lr

0800c1ac <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800c1ac:	b480      	push	{r7}
 800c1ae:	b085      	sub	sp, #20
 800c1b0:	af00      	add	r7, sp, #0
 800c1b2:	6078      	str	r0, [r7, #4]
 800c1b4:	460b      	mov	r3, r1
 800c1b6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	68fa      	ldr	r2, [r7, #12]
 800c1c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c1ca:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800c1ce:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c1d6:	681a      	ldr	r2, [r3, #0]
 800c1d8:	78fb      	ldrb	r3, [r7, #3]
 800c1da:	011b      	lsls	r3, r3, #4
 800c1dc:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800c1e0:	68f9      	ldr	r1, [r7, #12]
 800c1e2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c1e6:	4313      	orrs	r3, r2
 800c1e8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800c1ea:	2300      	movs	r3, #0
}
 800c1ec:	4618      	mov	r0, r3
 800c1ee:	3714      	adds	r7, #20
 800c1f0:	46bd      	mov	sp, r7
 800c1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f6:	4770      	bx	lr

0800c1f8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800c1f8:	b480      	push	{r7}
 800c1fa:	b085      	sub	sp, #20
 800c1fc:	af00      	add	r7, sp, #0
 800c1fe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	68fa      	ldr	r2, [r7, #12]
 800c20e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c212:	f023 0303 	bic.w	r3, r3, #3
 800c216:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c21e:	685b      	ldr	r3, [r3, #4]
 800c220:	68fa      	ldr	r2, [r7, #12]
 800c222:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c226:	f023 0302 	bic.w	r3, r3, #2
 800c22a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c22c:	2300      	movs	r3, #0
}
 800c22e:	4618      	mov	r0, r3
 800c230:	3714      	adds	r7, #20
 800c232:	46bd      	mov	sp, r7
 800c234:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c238:	4770      	bx	lr

0800c23a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800c23a:	b480      	push	{r7}
 800c23c:	b085      	sub	sp, #20
 800c23e:	af00      	add	r7, sp, #0
 800c240:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	68fa      	ldr	r2, [r7, #12]
 800c250:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c254:	f023 0303 	bic.w	r3, r3, #3
 800c258:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c260:	685b      	ldr	r3, [r3, #4]
 800c262:	68fa      	ldr	r2, [r7, #12]
 800c264:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c268:	f043 0302 	orr.w	r3, r3, #2
 800c26c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c26e:	2300      	movs	r3, #0
}
 800c270:	4618      	mov	r0, r3
 800c272:	3714      	adds	r7, #20
 800c274:	46bd      	mov	sp, r7
 800c276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c27a:	4770      	bx	lr

0800c27c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800c27c:	b480      	push	{r7}
 800c27e:	b085      	sub	sp, #20
 800c280:	af00      	add	r7, sp, #0
 800c282:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	695b      	ldr	r3, [r3, #20]
 800c288:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	699b      	ldr	r3, [r3, #24]
 800c28e:	68fa      	ldr	r2, [r7, #12]
 800c290:	4013      	ands	r3, r2
 800c292:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800c294:	68fb      	ldr	r3, [r7, #12]
}
 800c296:	4618      	mov	r0, r3
 800c298:	3714      	adds	r7, #20
 800c29a:	46bd      	mov	sp, r7
 800c29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2a0:	4770      	bx	lr

0800c2a2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800c2a2:	b480      	push	{r7}
 800c2a4:	b085      	sub	sp, #20
 800c2a6:	af00      	add	r7, sp, #0
 800c2a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c2b4:	699b      	ldr	r3, [r3, #24]
 800c2b6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c2be:	69db      	ldr	r3, [r3, #28]
 800c2c0:	68ba      	ldr	r2, [r7, #8]
 800c2c2:	4013      	ands	r3, r2
 800c2c4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800c2c6:	68bb      	ldr	r3, [r7, #8]
 800c2c8:	0c1b      	lsrs	r3, r3, #16
}
 800c2ca:	4618      	mov	r0, r3
 800c2cc:	3714      	adds	r7, #20
 800c2ce:	46bd      	mov	sp, r7
 800c2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2d4:	4770      	bx	lr

0800c2d6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800c2d6:	b480      	push	{r7}
 800c2d8:	b085      	sub	sp, #20
 800c2da:	af00      	add	r7, sp, #0
 800c2dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c2e8:	699b      	ldr	r3, [r3, #24]
 800c2ea:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c2f2:	69db      	ldr	r3, [r3, #28]
 800c2f4:	68ba      	ldr	r2, [r7, #8]
 800c2f6:	4013      	ands	r3, r2
 800c2f8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800c2fa:	68bb      	ldr	r3, [r7, #8]
 800c2fc:	b29b      	uxth	r3, r3
}
 800c2fe:	4618      	mov	r0, r3
 800c300:	3714      	adds	r7, #20
 800c302:	46bd      	mov	sp, r7
 800c304:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c308:	4770      	bx	lr

0800c30a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c30a:	b480      	push	{r7}
 800c30c:	b085      	sub	sp, #20
 800c30e:	af00      	add	r7, sp, #0
 800c310:	6078      	str	r0, [r7, #4]
 800c312:	460b      	mov	r3, r1
 800c314:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800c31a:	78fb      	ldrb	r3, [r7, #3]
 800c31c:	015a      	lsls	r2, r3, #5
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	4413      	add	r3, r2
 800c322:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c326:	689b      	ldr	r3, [r3, #8]
 800c328:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c330:	695b      	ldr	r3, [r3, #20]
 800c332:	68ba      	ldr	r2, [r7, #8]
 800c334:	4013      	ands	r3, r2
 800c336:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c338:	68bb      	ldr	r3, [r7, #8]
}
 800c33a:	4618      	mov	r0, r3
 800c33c:	3714      	adds	r7, #20
 800c33e:	46bd      	mov	sp, r7
 800c340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c344:	4770      	bx	lr

0800c346 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c346:	b480      	push	{r7}
 800c348:	b087      	sub	sp, #28
 800c34a:	af00      	add	r7, sp, #0
 800c34c:	6078      	str	r0, [r7, #4]
 800c34e:	460b      	mov	r3, r1
 800c350:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800c356:	697b      	ldr	r3, [r7, #20]
 800c358:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c35c:	691b      	ldr	r3, [r3, #16]
 800c35e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800c360:	697b      	ldr	r3, [r7, #20]
 800c362:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c366:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c368:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800c36a:	78fb      	ldrb	r3, [r7, #3]
 800c36c:	f003 030f 	and.w	r3, r3, #15
 800c370:	68fa      	ldr	r2, [r7, #12]
 800c372:	fa22 f303 	lsr.w	r3, r2, r3
 800c376:	01db      	lsls	r3, r3, #7
 800c378:	b2db      	uxtb	r3, r3
 800c37a:	693a      	ldr	r2, [r7, #16]
 800c37c:	4313      	orrs	r3, r2
 800c37e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800c380:	78fb      	ldrb	r3, [r7, #3]
 800c382:	015a      	lsls	r2, r3, #5
 800c384:	697b      	ldr	r3, [r7, #20]
 800c386:	4413      	add	r3, r2
 800c388:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c38c:	689b      	ldr	r3, [r3, #8]
 800c38e:	693a      	ldr	r2, [r7, #16]
 800c390:	4013      	ands	r3, r2
 800c392:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c394:	68bb      	ldr	r3, [r7, #8]
}
 800c396:	4618      	mov	r0, r3
 800c398:	371c      	adds	r7, #28
 800c39a:	46bd      	mov	sp, r7
 800c39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a0:	4770      	bx	lr

0800c3a2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800c3a2:	b480      	push	{r7}
 800c3a4:	b083      	sub	sp, #12
 800c3a6:	af00      	add	r7, sp, #0
 800c3a8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	695b      	ldr	r3, [r3, #20]
 800c3ae:	f003 0301 	and.w	r3, r3, #1
}
 800c3b2:	4618      	mov	r0, r3
 800c3b4:	370c      	adds	r7, #12
 800c3b6:	46bd      	mov	sp, r7
 800c3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3bc:	4770      	bx	lr

0800c3be <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800c3be:	b480      	push	{r7}
 800c3c0:	b085      	sub	sp, #20
 800c3c2:	af00      	add	r7, sp, #0
 800c3c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	68fa      	ldr	r2, [r7, #12]
 800c3d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c3d8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800c3dc:	f023 0307 	bic.w	r3, r3, #7
 800c3e0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c3e8:	685b      	ldr	r3, [r3, #4]
 800c3ea:	68fa      	ldr	r2, [r7, #12]
 800c3ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c3f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c3f4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c3f6:	2300      	movs	r3, #0
}
 800c3f8:	4618      	mov	r0, r3
 800c3fa:	3714      	adds	r7, #20
 800c3fc:	46bd      	mov	sp, r7
 800c3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c402:	4770      	bx	lr

0800c404 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800c404:	b480      	push	{r7}
 800c406:	b087      	sub	sp, #28
 800c408:	af00      	add	r7, sp, #0
 800c40a:	60f8      	str	r0, [r7, #12]
 800c40c:	460b      	mov	r3, r1
 800c40e:	607a      	str	r2, [r7, #4]
 800c410:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c412:	68fb      	ldr	r3, [r7, #12]
 800c414:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	333c      	adds	r3, #60	; 0x3c
 800c41a:	3304      	adds	r3, #4
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800c420:	693b      	ldr	r3, [r7, #16]
 800c422:	4a26      	ldr	r2, [pc, #152]	; (800c4bc <USB_EP0_OutStart+0xb8>)
 800c424:	4293      	cmp	r3, r2
 800c426:	d90a      	bls.n	800c43e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c428:	697b      	ldr	r3, [r7, #20]
 800c42a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c434:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c438:	d101      	bne.n	800c43e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800c43a:	2300      	movs	r3, #0
 800c43c:	e037      	b.n	800c4ae <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800c43e:	697b      	ldr	r3, [r7, #20]
 800c440:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c444:	461a      	mov	r2, r3
 800c446:	2300      	movs	r3, #0
 800c448:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c44a:	697b      	ldr	r3, [r7, #20]
 800c44c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c450:	691b      	ldr	r3, [r3, #16]
 800c452:	697a      	ldr	r2, [r7, #20]
 800c454:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c458:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c45c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800c45e:	697b      	ldr	r3, [r7, #20]
 800c460:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c464:	691b      	ldr	r3, [r3, #16]
 800c466:	697a      	ldr	r2, [r7, #20]
 800c468:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c46c:	f043 0318 	orr.w	r3, r3, #24
 800c470:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800c472:	697b      	ldr	r3, [r7, #20]
 800c474:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c478:	691b      	ldr	r3, [r3, #16]
 800c47a:	697a      	ldr	r2, [r7, #20]
 800c47c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c480:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800c484:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800c486:	7afb      	ldrb	r3, [r7, #11]
 800c488:	2b01      	cmp	r3, #1
 800c48a:	d10f      	bne.n	800c4ac <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800c48c:	697b      	ldr	r3, [r7, #20]
 800c48e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c492:	461a      	mov	r2, r3
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800c498:	697b      	ldr	r3, [r7, #20]
 800c49a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	697a      	ldr	r2, [r7, #20]
 800c4a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c4a6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800c4aa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c4ac:	2300      	movs	r3, #0
}
 800c4ae:	4618      	mov	r0, r3
 800c4b0:	371c      	adds	r7, #28
 800c4b2:	46bd      	mov	sp, r7
 800c4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4b8:	4770      	bx	lr
 800c4ba:	bf00      	nop
 800c4bc:	4f54300a 	.word	0x4f54300a

0800c4c0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800c4c0:	b480      	push	{r7}
 800c4c2:	b085      	sub	sp, #20
 800c4c4:	af00      	add	r7, sp, #0
 800c4c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c4c8:	2300      	movs	r3, #0
 800c4ca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	3301      	adds	r3, #1
 800c4d0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	4a13      	ldr	r2, [pc, #76]	; (800c524 <USB_CoreReset+0x64>)
 800c4d6:	4293      	cmp	r3, r2
 800c4d8:	d901      	bls.n	800c4de <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800c4da:	2303      	movs	r3, #3
 800c4dc:	e01b      	b.n	800c516 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	691b      	ldr	r3, [r3, #16]
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	daf2      	bge.n	800c4cc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800c4e6:	2300      	movs	r3, #0
 800c4e8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	691b      	ldr	r3, [r3, #16]
 800c4ee:	f043 0201 	orr.w	r2, r3, #1
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	3301      	adds	r3, #1
 800c4fa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	4a09      	ldr	r2, [pc, #36]	; (800c524 <USB_CoreReset+0x64>)
 800c500:	4293      	cmp	r3, r2
 800c502:	d901      	bls.n	800c508 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800c504:	2303      	movs	r3, #3
 800c506:	e006      	b.n	800c516 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	691b      	ldr	r3, [r3, #16]
 800c50c:	f003 0301 	and.w	r3, r3, #1
 800c510:	2b01      	cmp	r3, #1
 800c512:	d0f0      	beq.n	800c4f6 <USB_CoreReset+0x36>

  return HAL_OK;
 800c514:	2300      	movs	r3, #0
}
 800c516:	4618      	mov	r0, r3
 800c518:	3714      	adds	r7, #20
 800c51a:	46bd      	mov	sp, r7
 800c51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c520:	4770      	bx	lr
 800c522:	bf00      	nop
 800c524:	00030d40 	.word	0x00030d40

0800c528 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c528:	b580      	push	{r7, lr}
 800c52a:	b084      	sub	sp, #16
 800c52c:	af00      	add	r7, sp, #0
 800c52e:	6078      	str	r0, [r7, #4]
 800c530:	460b      	mov	r3, r1
 800c532:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800c534:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800c538:	f002 fc94 	bl	800ee64 <USBD_static_malloc>
 800c53c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	2b00      	cmp	r3, #0
 800c542:	d109      	bne.n	800c558 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	32b0      	adds	r2, #176	; 0xb0
 800c54e:	2100      	movs	r1, #0
 800c550:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800c554:	2302      	movs	r3, #2
 800c556:	e0d4      	b.n	800c702 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800c558:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800c55c:	2100      	movs	r1, #0
 800c55e:	68f8      	ldr	r0, [r7, #12]
 800c560:	f003 fcce 	bl	800ff00 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	32b0      	adds	r2, #176	; 0xb0
 800c56e:	68f9      	ldr	r1, [r7, #12]
 800c570:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	32b0      	adds	r2, #176	; 0xb0
 800c57e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	7c1b      	ldrb	r3, [r3, #16]
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d138      	bne.n	800c602 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800c590:	4b5e      	ldr	r3, [pc, #376]	; (800c70c <USBD_CDC_Init+0x1e4>)
 800c592:	7819      	ldrb	r1, [r3, #0]
 800c594:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c598:	2202      	movs	r2, #2
 800c59a:	6878      	ldr	r0, [r7, #4]
 800c59c:	f002 fb3f 	bl	800ec1e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800c5a0:	4b5a      	ldr	r3, [pc, #360]	; (800c70c <USBD_CDC_Init+0x1e4>)
 800c5a2:	781b      	ldrb	r3, [r3, #0]
 800c5a4:	f003 020f 	and.w	r2, r3, #15
 800c5a8:	6879      	ldr	r1, [r7, #4]
 800c5aa:	4613      	mov	r3, r2
 800c5ac:	009b      	lsls	r3, r3, #2
 800c5ae:	4413      	add	r3, r2
 800c5b0:	009b      	lsls	r3, r3, #2
 800c5b2:	440b      	add	r3, r1
 800c5b4:	3324      	adds	r3, #36	; 0x24
 800c5b6:	2201      	movs	r2, #1
 800c5b8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800c5ba:	4b55      	ldr	r3, [pc, #340]	; (800c710 <USBD_CDC_Init+0x1e8>)
 800c5bc:	7819      	ldrb	r1, [r3, #0]
 800c5be:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c5c2:	2202      	movs	r2, #2
 800c5c4:	6878      	ldr	r0, [r7, #4]
 800c5c6:	f002 fb2a 	bl	800ec1e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800c5ca:	4b51      	ldr	r3, [pc, #324]	; (800c710 <USBD_CDC_Init+0x1e8>)
 800c5cc:	781b      	ldrb	r3, [r3, #0]
 800c5ce:	f003 020f 	and.w	r2, r3, #15
 800c5d2:	6879      	ldr	r1, [r7, #4]
 800c5d4:	4613      	mov	r3, r2
 800c5d6:	009b      	lsls	r3, r3, #2
 800c5d8:	4413      	add	r3, r2
 800c5da:	009b      	lsls	r3, r3, #2
 800c5dc:	440b      	add	r3, r1
 800c5de:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c5e2:	2201      	movs	r2, #1
 800c5e4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800c5e6:	4b4b      	ldr	r3, [pc, #300]	; (800c714 <USBD_CDC_Init+0x1ec>)
 800c5e8:	781b      	ldrb	r3, [r3, #0]
 800c5ea:	f003 020f 	and.w	r2, r3, #15
 800c5ee:	6879      	ldr	r1, [r7, #4]
 800c5f0:	4613      	mov	r3, r2
 800c5f2:	009b      	lsls	r3, r3, #2
 800c5f4:	4413      	add	r3, r2
 800c5f6:	009b      	lsls	r3, r3, #2
 800c5f8:	440b      	add	r3, r1
 800c5fa:	3326      	adds	r3, #38	; 0x26
 800c5fc:	2210      	movs	r2, #16
 800c5fe:	801a      	strh	r2, [r3, #0]
 800c600:	e035      	b.n	800c66e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800c602:	4b42      	ldr	r3, [pc, #264]	; (800c70c <USBD_CDC_Init+0x1e4>)
 800c604:	7819      	ldrb	r1, [r3, #0]
 800c606:	2340      	movs	r3, #64	; 0x40
 800c608:	2202      	movs	r2, #2
 800c60a:	6878      	ldr	r0, [r7, #4]
 800c60c:	f002 fb07 	bl	800ec1e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800c610:	4b3e      	ldr	r3, [pc, #248]	; (800c70c <USBD_CDC_Init+0x1e4>)
 800c612:	781b      	ldrb	r3, [r3, #0]
 800c614:	f003 020f 	and.w	r2, r3, #15
 800c618:	6879      	ldr	r1, [r7, #4]
 800c61a:	4613      	mov	r3, r2
 800c61c:	009b      	lsls	r3, r3, #2
 800c61e:	4413      	add	r3, r2
 800c620:	009b      	lsls	r3, r3, #2
 800c622:	440b      	add	r3, r1
 800c624:	3324      	adds	r3, #36	; 0x24
 800c626:	2201      	movs	r2, #1
 800c628:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800c62a:	4b39      	ldr	r3, [pc, #228]	; (800c710 <USBD_CDC_Init+0x1e8>)
 800c62c:	7819      	ldrb	r1, [r3, #0]
 800c62e:	2340      	movs	r3, #64	; 0x40
 800c630:	2202      	movs	r2, #2
 800c632:	6878      	ldr	r0, [r7, #4]
 800c634:	f002 faf3 	bl	800ec1e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800c638:	4b35      	ldr	r3, [pc, #212]	; (800c710 <USBD_CDC_Init+0x1e8>)
 800c63a:	781b      	ldrb	r3, [r3, #0]
 800c63c:	f003 020f 	and.w	r2, r3, #15
 800c640:	6879      	ldr	r1, [r7, #4]
 800c642:	4613      	mov	r3, r2
 800c644:	009b      	lsls	r3, r3, #2
 800c646:	4413      	add	r3, r2
 800c648:	009b      	lsls	r3, r3, #2
 800c64a:	440b      	add	r3, r1
 800c64c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c650:	2201      	movs	r2, #1
 800c652:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800c654:	4b2f      	ldr	r3, [pc, #188]	; (800c714 <USBD_CDC_Init+0x1ec>)
 800c656:	781b      	ldrb	r3, [r3, #0]
 800c658:	f003 020f 	and.w	r2, r3, #15
 800c65c:	6879      	ldr	r1, [r7, #4]
 800c65e:	4613      	mov	r3, r2
 800c660:	009b      	lsls	r3, r3, #2
 800c662:	4413      	add	r3, r2
 800c664:	009b      	lsls	r3, r3, #2
 800c666:	440b      	add	r3, r1
 800c668:	3326      	adds	r3, #38	; 0x26
 800c66a:	2210      	movs	r2, #16
 800c66c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800c66e:	4b29      	ldr	r3, [pc, #164]	; (800c714 <USBD_CDC_Init+0x1ec>)
 800c670:	7819      	ldrb	r1, [r3, #0]
 800c672:	2308      	movs	r3, #8
 800c674:	2203      	movs	r2, #3
 800c676:	6878      	ldr	r0, [r7, #4]
 800c678:	f002 fad1 	bl	800ec1e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800c67c:	4b25      	ldr	r3, [pc, #148]	; (800c714 <USBD_CDC_Init+0x1ec>)
 800c67e:	781b      	ldrb	r3, [r3, #0]
 800c680:	f003 020f 	and.w	r2, r3, #15
 800c684:	6879      	ldr	r1, [r7, #4]
 800c686:	4613      	mov	r3, r2
 800c688:	009b      	lsls	r3, r3, #2
 800c68a:	4413      	add	r3, r2
 800c68c:	009b      	lsls	r3, r3, #2
 800c68e:	440b      	add	r3, r1
 800c690:	3324      	adds	r3, #36	; 0x24
 800c692:	2201      	movs	r2, #1
 800c694:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	2200      	movs	r2, #0
 800c69a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c6a4:	687a      	ldr	r2, [r7, #4]
 800c6a6:	33b0      	adds	r3, #176	; 0xb0
 800c6a8:	009b      	lsls	r3, r3, #2
 800c6aa:	4413      	add	r3, r2
 800c6ac:	685b      	ldr	r3, [r3, #4]
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	2200      	movs	r2, #0
 800c6b6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	2200      	movs	r2, #0
 800c6be:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800c6c2:	68fb      	ldr	r3, [r7, #12]
 800c6c4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d101      	bne.n	800c6d0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800c6cc:	2302      	movs	r3, #2
 800c6ce:	e018      	b.n	800c702 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	7c1b      	ldrb	r3, [r3, #16]
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d10a      	bne.n	800c6ee <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c6d8:	4b0d      	ldr	r3, [pc, #52]	; (800c710 <USBD_CDC_Init+0x1e8>)
 800c6da:	7819      	ldrb	r1, [r3, #0]
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c6e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c6e6:	6878      	ldr	r0, [r7, #4]
 800c6e8:	f002 fb88 	bl	800edfc <USBD_LL_PrepareReceive>
 800c6ec:	e008      	b.n	800c700 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c6ee:	4b08      	ldr	r3, [pc, #32]	; (800c710 <USBD_CDC_Init+0x1e8>)
 800c6f0:	7819      	ldrb	r1, [r3, #0]
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c6f8:	2340      	movs	r3, #64	; 0x40
 800c6fa:	6878      	ldr	r0, [r7, #4]
 800c6fc:	f002 fb7e 	bl	800edfc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c700:	2300      	movs	r3, #0
}
 800c702:	4618      	mov	r0, r3
 800c704:	3710      	adds	r7, #16
 800c706:	46bd      	mov	sp, r7
 800c708:	bd80      	pop	{r7, pc}
 800c70a:	bf00      	nop
 800c70c:	2000009b 	.word	0x2000009b
 800c710:	2000009c 	.word	0x2000009c
 800c714:	2000009d 	.word	0x2000009d

0800c718 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c718:	b580      	push	{r7, lr}
 800c71a:	b082      	sub	sp, #8
 800c71c:	af00      	add	r7, sp, #0
 800c71e:	6078      	str	r0, [r7, #4]
 800c720:	460b      	mov	r3, r1
 800c722:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800c724:	4b3a      	ldr	r3, [pc, #232]	; (800c810 <USBD_CDC_DeInit+0xf8>)
 800c726:	781b      	ldrb	r3, [r3, #0]
 800c728:	4619      	mov	r1, r3
 800c72a:	6878      	ldr	r0, [r7, #4]
 800c72c:	f002 fa9d 	bl	800ec6a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800c730:	4b37      	ldr	r3, [pc, #220]	; (800c810 <USBD_CDC_DeInit+0xf8>)
 800c732:	781b      	ldrb	r3, [r3, #0]
 800c734:	f003 020f 	and.w	r2, r3, #15
 800c738:	6879      	ldr	r1, [r7, #4]
 800c73a:	4613      	mov	r3, r2
 800c73c:	009b      	lsls	r3, r3, #2
 800c73e:	4413      	add	r3, r2
 800c740:	009b      	lsls	r3, r3, #2
 800c742:	440b      	add	r3, r1
 800c744:	3324      	adds	r3, #36	; 0x24
 800c746:	2200      	movs	r2, #0
 800c748:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800c74a:	4b32      	ldr	r3, [pc, #200]	; (800c814 <USBD_CDC_DeInit+0xfc>)
 800c74c:	781b      	ldrb	r3, [r3, #0]
 800c74e:	4619      	mov	r1, r3
 800c750:	6878      	ldr	r0, [r7, #4]
 800c752:	f002 fa8a 	bl	800ec6a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800c756:	4b2f      	ldr	r3, [pc, #188]	; (800c814 <USBD_CDC_DeInit+0xfc>)
 800c758:	781b      	ldrb	r3, [r3, #0]
 800c75a:	f003 020f 	and.w	r2, r3, #15
 800c75e:	6879      	ldr	r1, [r7, #4]
 800c760:	4613      	mov	r3, r2
 800c762:	009b      	lsls	r3, r3, #2
 800c764:	4413      	add	r3, r2
 800c766:	009b      	lsls	r3, r3, #2
 800c768:	440b      	add	r3, r1
 800c76a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c76e:	2200      	movs	r2, #0
 800c770:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800c772:	4b29      	ldr	r3, [pc, #164]	; (800c818 <USBD_CDC_DeInit+0x100>)
 800c774:	781b      	ldrb	r3, [r3, #0]
 800c776:	4619      	mov	r1, r3
 800c778:	6878      	ldr	r0, [r7, #4]
 800c77a:	f002 fa76 	bl	800ec6a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800c77e:	4b26      	ldr	r3, [pc, #152]	; (800c818 <USBD_CDC_DeInit+0x100>)
 800c780:	781b      	ldrb	r3, [r3, #0]
 800c782:	f003 020f 	and.w	r2, r3, #15
 800c786:	6879      	ldr	r1, [r7, #4]
 800c788:	4613      	mov	r3, r2
 800c78a:	009b      	lsls	r3, r3, #2
 800c78c:	4413      	add	r3, r2
 800c78e:	009b      	lsls	r3, r3, #2
 800c790:	440b      	add	r3, r1
 800c792:	3324      	adds	r3, #36	; 0x24
 800c794:	2200      	movs	r2, #0
 800c796:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800c798:	4b1f      	ldr	r3, [pc, #124]	; (800c818 <USBD_CDC_DeInit+0x100>)
 800c79a:	781b      	ldrb	r3, [r3, #0]
 800c79c:	f003 020f 	and.w	r2, r3, #15
 800c7a0:	6879      	ldr	r1, [r7, #4]
 800c7a2:	4613      	mov	r3, r2
 800c7a4:	009b      	lsls	r3, r3, #2
 800c7a6:	4413      	add	r3, r2
 800c7a8:	009b      	lsls	r3, r3, #2
 800c7aa:	440b      	add	r3, r1
 800c7ac:	3326      	adds	r3, #38	; 0x26
 800c7ae:	2200      	movs	r2, #0
 800c7b0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	32b0      	adds	r2, #176	; 0xb0
 800c7bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d01f      	beq.n	800c804 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c7ca:	687a      	ldr	r2, [r7, #4]
 800c7cc:	33b0      	adds	r3, #176	; 0xb0
 800c7ce:	009b      	lsls	r3, r3, #2
 800c7d0:	4413      	add	r3, r2
 800c7d2:	685b      	ldr	r3, [r3, #4]
 800c7d4:	685b      	ldr	r3, [r3, #4]
 800c7d6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	32b0      	adds	r2, #176	; 0xb0
 800c7e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c7e6:	4618      	mov	r0, r3
 800c7e8:	f002 fb4a 	bl	800ee80 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	32b0      	adds	r2, #176	; 0xb0
 800c7f6:	2100      	movs	r1, #0
 800c7f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	2200      	movs	r2, #0
 800c800:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800c804:	2300      	movs	r3, #0
}
 800c806:	4618      	mov	r0, r3
 800c808:	3708      	adds	r7, #8
 800c80a:	46bd      	mov	sp, r7
 800c80c:	bd80      	pop	{r7, pc}
 800c80e:	bf00      	nop
 800c810:	2000009b 	.word	0x2000009b
 800c814:	2000009c 	.word	0x2000009c
 800c818:	2000009d 	.word	0x2000009d

0800c81c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800c81c:	b580      	push	{r7, lr}
 800c81e:	b086      	sub	sp, #24
 800c820:	af00      	add	r7, sp, #0
 800c822:	6078      	str	r0, [r7, #4]
 800c824:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	32b0      	adds	r2, #176	; 0xb0
 800c830:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c834:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800c836:	2300      	movs	r3, #0
 800c838:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800c83a:	2300      	movs	r3, #0
 800c83c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800c83e:	2300      	movs	r3, #0
 800c840:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800c842:	693b      	ldr	r3, [r7, #16]
 800c844:	2b00      	cmp	r3, #0
 800c846:	d101      	bne.n	800c84c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800c848:	2303      	movs	r3, #3
 800c84a:	e0bf      	b.n	800c9cc <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c84c:	683b      	ldr	r3, [r7, #0]
 800c84e:	781b      	ldrb	r3, [r3, #0]
 800c850:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c854:	2b00      	cmp	r3, #0
 800c856:	d050      	beq.n	800c8fa <USBD_CDC_Setup+0xde>
 800c858:	2b20      	cmp	r3, #32
 800c85a:	f040 80af 	bne.w	800c9bc <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800c85e:	683b      	ldr	r3, [r7, #0]
 800c860:	88db      	ldrh	r3, [r3, #6]
 800c862:	2b00      	cmp	r3, #0
 800c864:	d03a      	beq.n	800c8dc <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800c866:	683b      	ldr	r3, [r7, #0]
 800c868:	781b      	ldrb	r3, [r3, #0]
 800c86a:	b25b      	sxtb	r3, r3
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	da1b      	bge.n	800c8a8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c876:	687a      	ldr	r2, [r7, #4]
 800c878:	33b0      	adds	r3, #176	; 0xb0
 800c87a:	009b      	lsls	r3, r3, #2
 800c87c:	4413      	add	r3, r2
 800c87e:	685b      	ldr	r3, [r3, #4]
 800c880:	689b      	ldr	r3, [r3, #8]
 800c882:	683a      	ldr	r2, [r7, #0]
 800c884:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800c886:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c888:	683a      	ldr	r2, [r7, #0]
 800c88a:	88d2      	ldrh	r2, [r2, #6]
 800c88c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800c88e:	683b      	ldr	r3, [r7, #0]
 800c890:	88db      	ldrh	r3, [r3, #6]
 800c892:	2b07      	cmp	r3, #7
 800c894:	bf28      	it	cs
 800c896:	2307      	movcs	r3, #7
 800c898:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800c89a:	693b      	ldr	r3, [r7, #16]
 800c89c:	89fa      	ldrh	r2, [r7, #14]
 800c89e:	4619      	mov	r1, r3
 800c8a0:	6878      	ldr	r0, [r7, #4]
 800c8a2:	f001 fd89 	bl	800e3b8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800c8a6:	e090      	b.n	800c9ca <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800c8a8:	683b      	ldr	r3, [r7, #0]
 800c8aa:	785a      	ldrb	r2, [r3, #1]
 800c8ac:	693b      	ldr	r3, [r7, #16]
 800c8ae:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800c8b2:	683b      	ldr	r3, [r7, #0]
 800c8b4:	88db      	ldrh	r3, [r3, #6]
 800c8b6:	2b3f      	cmp	r3, #63	; 0x3f
 800c8b8:	d803      	bhi.n	800c8c2 <USBD_CDC_Setup+0xa6>
 800c8ba:	683b      	ldr	r3, [r7, #0]
 800c8bc:	88db      	ldrh	r3, [r3, #6]
 800c8be:	b2da      	uxtb	r2, r3
 800c8c0:	e000      	b.n	800c8c4 <USBD_CDC_Setup+0xa8>
 800c8c2:	2240      	movs	r2, #64	; 0x40
 800c8c4:	693b      	ldr	r3, [r7, #16]
 800c8c6:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800c8ca:	6939      	ldr	r1, [r7, #16]
 800c8cc:	693b      	ldr	r3, [r7, #16]
 800c8ce:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800c8d2:	461a      	mov	r2, r3
 800c8d4:	6878      	ldr	r0, [r7, #4]
 800c8d6:	f001 fd9b 	bl	800e410 <USBD_CtlPrepareRx>
      break;
 800c8da:	e076      	b.n	800c9ca <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c8e2:	687a      	ldr	r2, [r7, #4]
 800c8e4:	33b0      	adds	r3, #176	; 0xb0
 800c8e6:	009b      	lsls	r3, r3, #2
 800c8e8:	4413      	add	r3, r2
 800c8ea:	685b      	ldr	r3, [r3, #4]
 800c8ec:	689b      	ldr	r3, [r3, #8]
 800c8ee:	683a      	ldr	r2, [r7, #0]
 800c8f0:	7850      	ldrb	r0, [r2, #1]
 800c8f2:	2200      	movs	r2, #0
 800c8f4:	6839      	ldr	r1, [r7, #0]
 800c8f6:	4798      	blx	r3
      break;
 800c8f8:	e067      	b.n	800c9ca <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c8fa:	683b      	ldr	r3, [r7, #0]
 800c8fc:	785b      	ldrb	r3, [r3, #1]
 800c8fe:	2b0b      	cmp	r3, #11
 800c900:	d851      	bhi.n	800c9a6 <USBD_CDC_Setup+0x18a>
 800c902:	a201      	add	r2, pc, #4	; (adr r2, 800c908 <USBD_CDC_Setup+0xec>)
 800c904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c908:	0800c939 	.word	0x0800c939
 800c90c:	0800c9b5 	.word	0x0800c9b5
 800c910:	0800c9a7 	.word	0x0800c9a7
 800c914:	0800c9a7 	.word	0x0800c9a7
 800c918:	0800c9a7 	.word	0x0800c9a7
 800c91c:	0800c9a7 	.word	0x0800c9a7
 800c920:	0800c9a7 	.word	0x0800c9a7
 800c924:	0800c9a7 	.word	0x0800c9a7
 800c928:	0800c9a7 	.word	0x0800c9a7
 800c92c:	0800c9a7 	.word	0x0800c9a7
 800c930:	0800c963 	.word	0x0800c963
 800c934:	0800c98d 	.word	0x0800c98d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c93e:	b2db      	uxtb	r3, r3
 800c940:	2b03      	cmp	r3, #3
 800c942:	d107      	bne.n	800c954 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800c944:	f107 030a 	add.w	r3, r7, #10
 800c948:	2202      	movs	r2, #2
 800c94a:	4619      	mov	r1, r3
 800c94c:	6878      	ldr	r0, [r7, #4]
 800c94e:	f001 fd33 	bl	800e3b8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c952:	e032      	b.n	800c9ba <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800c954:	6839      	ldr	r1, [r7, #0]
 800c956:	6878      	ldr	r0, [r7, #4]
 800c958:	f001 fcbd 	bl	800e2d6 <USBD_CtlError>
            ret = USBD_FAIL;
 800c95c:	2303      	movs	r3, #3
 800c95e:	75fb      	strb	r3, [r7, #23]
          break;
 800c960:	e02b      	b.n	800c9ba <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c968:	b2db      	uxtb	r3, r3
 800c96a:	2b03      	cmp	r3, #3
 800c96c:	d107      	bne.n	800c97e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800c96e:	f107 030d 	add.w	r3, r7, #13
 800c972:	2201      	movs	r2, #1
 800c974:	4619      	mov	r1, r3
 800c976:	6878      	ldr	r0, [r7, #4]
 800c978:	f001 fd1e 	bl	800e3b8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c97c:	e01d      	b.n	800c9ba <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800c97e:	6839      	ldr	r1, [r7, #0]
 800c980:	6878      	ldr	r0, [r7, #4]
 800c982:	f001 fca8 	bl	800e2d6 <USBD_CtlError>
            ret = USBD_FAIL;
 800c986:	2303      	movs	r3, #3
 800c988:	75fb      	strb	r3, [r7, #23]
          break;
 800c98a:	e016      	b.n	800c9ba <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c992:	b2db      	uxtb	r3, r3
 800c994:	2b03      	cmp	r3, #3
 800c996:	d00f      	beq.n	800c9b8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800c998:	6839      	ldr	r1, [r7, #0]
 800c99a:	6878      	ldr	r0, [r7, #4]
 800c99c:	f001 fc9b 	bl	800e2d6 <USBD_CtlError>
            ret = USBD_FAIL;
 800c9a0:	2303      	movs	r3, #3
 800c9a2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800c9a4:	e008      	b.n	800c9b8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800c9a6:	6839      	ldr	r1, [r7, #0]
 800c9a8:	6878      	ldr	r0, [r7, #4]
 800c9aa:	f001 fc94 	bl	800e2d6 <USBD_CtlError>
          ret = USBD_FAIL;
 800c9ae:	2303      	movs	r3, #3
 800c9b0:	75fb      	strb	r3, [r7, #23]
          break;
 800c9b2:	e002      	b.n	800c9ba <USBD_CDC_Setup+0x19e>
          break;
 800c9b4:	bf00      	nop
 800c9b6:	e008      	b.n	800c9ca <USBD_CDC_Setup+0x1ae>
          break;
 800c9b8:	bf00      	nop
      }
      break;
 800c9ba:	e006      	b.n	800c9ca <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800c9bc:	6839      	ldr	r1, [r7, #0]
 800c9be:	6878      	ldr	r0, [r7, #4]
 800c9c0:	f001 fc89 	bl	800e2d6 <USBD_CtlError>
      ret = USBD_FAIL;
 800c9c4:	2303      	movs	r3, #3
 800c9c6:	75fb      	strb	r3, [r7, #23]
      break;
 800c9c8:	bf00      	nop
  }

  return (uint8_t)ret;
 800c9ca:	7dfb      	ldrb	r3, [r7, #23]
}
 800c9cc:	4618      	mov	r0, r3
 800c9ce:	3718      	adds	r7, #24
 800c9d0:	46bd      	mov	sp, r7
 800c9d2:	bd80      	pop	{r7, pc}

0800c9d4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c9d4:	b580      	push	{r7, lr}
 800c9d6:	b084      	sub	sp, #16
 800c9d8:	af00      	add	r7, sp, #0
 800c9da:	6078      	str	r0, [r7, #4]
 800c9dc:	460b      	mov	r3, r1
 800c9de:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c9e6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	32b0      	adds	r2, #176	; 0xb0
 800c9f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d101      	bne.n	800c9fe <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800c9fa:	2303      	movs	r3, #3
 800c9fc:	e065      	b.n	800caca <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	32b0      	adds	r2, #176	; 0xb0
 800ca08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca0c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800ca0e:	78fb      	ldrb	r3, [r7, #3]
 800ca10:	f003 020f 	and.w	r2, r3, #15
 800ca14:	6879      	ldr	r1, [r7, #4]
 800ca16:	4613      	mov	r3, r2
 800ca18:	009b      	lsls	r3, r3, #2
 800ca1a:	4413      	add	r3, r2
 800ca1c:	009b      	lsls	r3, r3, #2
 800ca1e:	440b      	add	r3, r1
 800ca20:	3318      	adds	r3, #24
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d02f      	beq.n	800ca88 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800ca28:	78fb      	ldrb	r3, [r7, #3]
 800ca2a:	f003 020f 	and.w	r2, r3, #15
 800ca2e:	6879      	ldr	r1, [r7, #4]
 800ca30:	4613      	mov	r3, r2
 800ca32:	009b      	lsls	r3, r3, #2
 800ca34:	4413      	add	r3, r2
 800ca36:	009b      	lsls	r3, r3, #2
 800ca38:	440b      	add	r3, r1
 800ca3a:	3318      	adds	r3, #24
 800ca3c:	681a      	ldr	r2, [r3, #0]
 800ca3e:	78fb      	ldrb	r3, [r7, #3]
 800ca40:	f003 010f 	and.w	r1, r3, #15
 800ca44:	68f8      	ldr	r0, [r7, #12]
 800ca46:	460b      	mov	r3, r1
 800ca48:	00db      	lsls	r3, r3, #3
 800ca4a:	440b      	add	r3, r1
 800ca4c:	009b      	lsls	r3, r3, #2
 800ca4e:	4403      	add	r3, r0
 800ca50:	3348      	adds	r3, #72	; 0x48
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	fbb2 f1f3 	udiv	r1, r2, r3
 800ca58:	fb01 f303 	mul.w	r3, r1, r3
 800ca5c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d112      	bne.n	800ca88 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800ca62:	78fb      	ldrb	r3, [r7, #3]
 800ca64:	f003 020f 	and.w	r2, r3, #15
 800ca68:	6879      	ldr	r1, [r7, #4]
 800ca6a:	4613      	mov	r3, r2
 800ca6c:	009b      	lsls	r3, r3, #2
 800ca6e:	4413      	add	r3, r2
 800ca70:	009b      	lsls	r3, r3, #2
 800ca72:	440b      	add	r3, r1
 800ca74:	3318      	adds	r3, #24
 800ca76:	2200      	movs	r2, #0
 800ca78:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800ca7a:	78f9      	ldrb	r1, [r7, #3]
 800ca7c:	2300      	movs	r3, #0
 800ca7e:	2200      	movs	r2, #0
 800ca80:	6878      	ldr	r0, [r7, #4]
 800ca82:	f002 f99a 	bl	800edba <USBD_LL_Transmit>
 800ca86:	e01f      	b.n	800cac8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800ca88:	68bb      	ldr	r3, [r7, #8]
 800ca8a:	2200      	movs	r2, #0
 800ca8c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ca96:	687a      	ldr	r2, [r7, #4]
 800ca98:	33b0      	adds	r3, #176	; 0xb0
 800ca9a:	009b      	lsls	r3, r3, #2
 800ca9c:	4413      	add	r3, r2
 800ca9e:	685b      	ldr	r3, [r3, #4]
 800caa0:	691b      	ldr	r3, [r3, #16]
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d010      	beq.n	800cac8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800caac:	687a      	ldr	r2, [r7, #4]
 800caae:	33b0      	adds	r3, #176	; 0xb0
 800cab0:	009b      	lsls	r3, r3, #2
 800cab2:	4413      	add	r3, r2
 800cab4:	685b      	ldr	r3, [r3, #4]
 800cab6:	691b      	ldr	r3, [r3, #16]
 800cab8:	68ba      	ldr	r2, [r7, #8]
 800caba:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800cabe:	68ba      	ldr	r2, [r7, #8]
 800cac0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800cac4:	78fa      	ldrb	r2, [r7, #3]
 800cac6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800cac8:	2300      	movs	r3, #0
}
 800caca:	4618      	mov	r0, r3
 800cacc:	3710      	adds	r7, #16
 800cace:	46bd      	mov	sp, r7
 800cad0:	bd80      	pop	{r7, pc}

0800cad2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800cad2:	b580      	push	{r7, lr}
 800cad4:	b084      	sub	sp, #16
 800cad6:	af00      	add	r7, sp, #0
 800cad8:	6078      	str	r0, [r7, #4]
 800cada:	460b      	mov	r3, r1
 800cadc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	32b0      	adds	r2, #176	; 0xb0
 800cae8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800caec:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	32b0      	adds	r2, #176	; 0xb0
 800caf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d101      	bne.n	800cb04 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800cb00:	2303      	movs	r3, #3
 800cb02:	e01a      	b.n	800cb3a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800cb04:	78fb      	ldrb	r3, [r7, #3]
 800cb06:	4619      	mov	r1, r3
 800cb08:	6878      	ldr	r0, [r7, #4]
 800cb0a:	f002 f998 	bl	800ee3e <USBD_LL_GetRxDataSize>
 800cb0e:	4602      	mov	r2, r0
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cb1c:	687a      	ldr	r2, [r7, #4]
 800cb1e:	33b0      	adds	r3, #176	; 0xb0
 800cb20:	009b      	lsls	r3, r3, #2
 800cb22:	4413      	add	r3, r2
 800cb24:	685b      	ldr	r3, [r3, #4]
 800cb26:	68db      	ldr	r3, [r3, #12]
 800cb28:	68fa      	ldr	r2, [r7, #12]
 800cb2a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800cb2e:	68fa      	ldr	r2, [r7, #12]
 800cb30:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800cb34:	4611      	mov	r1, r2
 800cb36:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800cb38:	2300      	movs	r3, #0
}
 800cb3a:	4618      	mov	r0, r3
 800cb3c:	3710      	adds	r7, #16
 800cb3e:	46bd      	mov	sp, r7
 800cb40:	bd80      	pop	{r7, pc}

0800cb42 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800cb42:	b580      	push	{r7, lr}
 800cb44:	b084      	sub	sp, #16
 800cb46:	af00      	add	r7, sp, #0
 800cb48:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	32b0      	adds	r2, #176	; 0xb0
 800cb54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb58:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d101      	bne.n	800cb64 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800cb60:	2303      	movs	r3, #3
 800cb62:	e025      	b.n	800cbb0 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cb6a:	687a      	ldr	r2, [r7, #4]
 800cb6c:	33b0      	adds	r3, #176	; 0xb0
 800cb6e:	009b      	lsls	r3, r3, #2
 800cb70:	4413      	add	r3, r2
 800cb72:	685b      	ldr	r3, [r3, #4]
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d01a      	beq.n	800cbae <USBD_CDC_EP0_RxReady+0x6c>
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800cb7e:	2bff      	cmp	r3, #255	; 0xff
 800cb80:	d015      	beq.n	800cbae <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cb88:	687a      	ldr	r2, [r7, #4]
 800cb8a:	33b0      	adds	r3, #176	; 0xb0
 800cb8c:	009b      	lsls	r3, r3, #2
 800cb8e:	4413      	add	r3, r2
 800cb90:	685b      	ldr	r3, [r3, #4]
 800cb92:	689b      	ldr	r3, [r3, #8]
 800cb94:	68fa      	ldr	r2, [r7, #12]
 800cb96:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800cb9a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800cb9c:	68fa      	ldr	r2, [r7, #12]
 800cb9e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800cba2:	b292      	uxth	r2, r2
 800cba4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	22ff      	movs	r2, #255	; 0xff
 800cbaa:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800cbae:	2300      	movs	r3, #0
}
 800cbb0:	4618      	mov	r0, r3
 800cbb2:	3710      	adds	r7, #16
 800cbb4:	46bd      	mov	sp, r7
 800cbb6:	bd80      	pop	{r7, pc}

0800cbb8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800cbb8:	b580      	push	{r7, lr}
 800cbba:	b086      	sub	sp, #24
 800cbbc:	af00      	add	r7, sp, #0
 800cbbe:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800cbc0:	2182      	movs	r1, #130	; 0x82
 800cbc2:	4818      	ldr	r0, [pc, #96]	; (800cc24 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800cbc4:	f000 fd4f 	bl	800d666 <USBD_GetEpDesc>
 800cbc8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800cbca:	2101      	movs	r1, #1
 800cbcc:	4815      	ldr	r0, [pc, #84]	; (800cc24 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800cbce:	f000 fd4a 	bl	800d666 <USBD_GetEpDesc>
 800cbd2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800cbd4:	2181      	movs	r1, #129	; 0x81
 800cbd6:	4813      	ldr	r0, [pc, #76]	; (800cc24 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800cbd8:	f000 fd45 	bl	800d666 <USBD_GetEpDesc>
 800cbdc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800cbde:	697b      	ldr	r3, [r7, #20]
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d002      	beq.n	800cbea <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800cbe4:	697b      	ldr	r3, [r7, #20]
 800cbe6:	2210      	movs	r2, #16
 800cbe8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800cbea:	693b      	ldr	r3, [r7, #16]
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d006      	beq.n	800cbfe <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800cbf0:	693b      	ldr	r3, [r7, #16]
 800cbf2:	2200      	movs	r2, #0
 800cbf4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cbf8:	711a      	strb	r2, [r3, #4]
 800cbfa:	2200      	movs	r2, #0
 800cbfc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d006      	beq.n	800cc12 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	2200      	movs	r2, #0
 800cc08:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cc0c:	711a      	strb	r2, [r3, #4]
 800cc0e:	2200      	movs	r2, #0
 800cc10:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	2243      	movs	r2, #67	; 0x43
 800cc16:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800cc18:	4b02      	ldr	r3, [pc, #8]	; (800cc24 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800cc1a:	4618      	mov	r0, r3
 800cc1c:	3718      	adds	r7, #24
 800cc1e:	46bd      	mov	sp, r7
 800cc20:	bd80      	pop	{r7, pc}
 800cc22:	bf00      	nop
 800cc24:	20000058 	.word	0x20000058

0800cc28 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800cc28:	b580      	push	{r7, lr}
 800cc2a:	b086      	sub	sp, #24
 800cc2c:	af00      	add	r7, sp, #0
 800cc2e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800cc30:	2182      	movs	r1, #130	; 0x82
 800cc32:	4818      	ldr	r0, [pc, #96]	; (800cc94 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800cc34:	f000 fd17 	bl	800d666 <USBD_GetEpDesc>
 800cc38:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800cc3a:	2101      	movs	r1, #1
 800cc3c:	4815      	ldr	r0, [pc, #84]	; (800cc94 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800cc3e:	f000 fd12 	bl	800d666 <USBD_GetEpDesc>
 800cc42:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800cc44:	2181      	movs	r1, #129	; 0x81
 800cc46:	4813      	ldr	r0, [pc, #76]	; (800cc94 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800cc48:	f000 fd0d 	bl	800d666 <USBD_GetEpDesc>
 800cc4c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800cc4e:	697b      	ldr	r3, [r7, #20]
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d002      	beq.n	800cc5a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800cc54:	697b      	ldr	r3, [r7, #20]
 800cc56:	2210      	movs	r2, #16
 800cc58:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800cc5a:	693b      	ldr	r3, [r7, #16]
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d006      	beq.n	800cc6e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800cc60:	693b      	ldr	r3, [r7, #16]
 800cc62:	2200      	movs	r2, #0
 800cc64:	711a      	strb	r2, [r3, #4]
 800cc66:	2200      	movs	r2, #0
 800cc68:	f042 0202 	orr.w	r2, r2, #2
 800cc6c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d006      	beq.n	800cc82 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	2200      	movs	r2, #0
 800cc78:	711a      	strb	r2, [r3, #4]
 800cc7a:	2200      	movs	r2, #0
 800cc7c:	f042 0202 	orr.w	r2, r2, #2
 800cc80:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	2243      	movs	r2, #67	; 0x43
 800cc86:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800cc88:	4b02      	ldr	r3, [pc, #8]	; (800cc94 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800cc8a:	4618      	mov	r0, r3
 800cc8c:	3718      	adds	r7, #24
 800cc8e:	46bd      	mov	sp, r7
 800cc90:	bd80      	pop	{r7, pc}
 800cc92:	bf00      	nop
 800cc94:	20000058 	.word	0x20000058

0800cc98 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800cc98:	b580      	push	{r7, lr}
 800cc9a:	b086      	sub	sp, #24
 800cc9c:	af00      	add	r7, sp, #0
 800cc9e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800cca0:	2182      	movs	r1, #130	; 0x82
 800cca2:	4818      	ldr	r0, [pc, #96]	; (800cd04 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800cca4:	f000 fcdf 	bl	800d666 <USBD_GetEpDesc>
 800cca8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ccaa:	2101      	movs	r1, #1
 800ccac:	4815      	ldr	r0, [pc, #84]	; (800cd04 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ccae:	f000 fcda 	bl	800d666 <USBD_GetEpDesc>
 800ccb2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ccb4:	2181      	movs	r1, #129	; 0x81
 800ccb6:	4813      	ldr	r0, [pc, #76]	; (800cd04 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ccb8:	f000 fcd5 	bl	800d666 <USBD_GetEpDesc>
 800ccbc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ccbe:	697b      	ldr	r3, [r7, #20]
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d002      	beq.n	800ccca <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800ccc4:	697b      	ldr	r3, [r7, #20]
 800ccc6:	2210      	movs	r2, #16
 800ccc8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ccca:	693b      	ldr	r3, [r7, #16]
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d006      	beq.n	800ccde <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ccd0:	693b      	ldr	r3, [r7, #16]
 800ccd2:	2200      	movs	r2, #0
 800ccd4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ccd8:	711a      	strb	r2, [r3, #4]
 800ccda:	2200      	movs	r2, #0
 800ccdc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d006      	beq.n	800ccf2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	2200      	movs	r2, #0
 800cce8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ccec:	711a      	strb	r2, [r3, #4]
 800ccee:	2200      	movs	r2, #0
 800ccf0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	2243      	movs	r2, #67	; 0x43
 800ccf6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ccf8:	4b02      	ldr	r3, [pc, #8]	; (800cd04 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800ccfa:	4618      	mov	r0, r3
 800ccfc:	3718      	adds	r7, #24
 800ccfe:	46bd      	mov	sp, r7
 800cd00:	bd80      	pop	{r7, pc}
 800cd02:	bf00      	nop
 800cd04:	20000058 	.word	0x20000058

0800cd08 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800cd08:	b480      	push	{r7}
 800cd0a:	b083      	sub	sp, #12
 800cd0c:	af00      	add	r7, sp, #0
 800cd0e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	220a      	movs	r2, #10
 800cd14:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800cd16:	4b03      	ldr	r3, [pc, #12]	; (800cd24 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800cd18:	4618      	mov	r0, r3
 800cd1a:	370c      	adds	r7, #12
 800cd1c:	46bd      	mov	sp, r7
 800cd1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd22:	4770      	bx	lr
 800cd24:	20000014 	.word	0x20000014

0800cd28 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800cd28:	b480      	push	{r7}
 800cd2a:	b083      	sub	sp, #12
 800cd2c:	af00      	add	r7, sp, #0
 800cd2e:	6078      	str	r0, [r7, #4]
 800cd30:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800cd32:	683b      	ldr	r3, [r7, #0]
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d101      	bne.n	800cd3c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800cd38:	2303      	movs	r3, #3
 800cd3a:	e009      	b.n	800cd50 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cd42:	687a      	ldr	r2, [r7, #4]
 800cd44:	33b0      	adds	r3, #176	; 0xb0
 800cd46:	009b      	lsls	r3, r3, #2
 800cd48:	4413      	add	r3, r2
 800cd4a:	683a      	ldr	r2, [r7, #0]
 800cd4c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800cd4e:	2300      	movs	r3, #0
}
 800cd50:	4618      	mov	r0, r3
 800cd52:	370c      	adds	r7, #12
 800cd54:	46bd      	mov	sp, r7
 800cd56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd5a:	4770      	bx	lr

0800cd5c <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800cd5c:	b480      	push	{r7}
 800cd5e:	b087      	sub	sp, #28
 800cd60:	af00      	add	r7, sp, #0
 800cd62:	60f8      	str	r0, [r7, #12]
 800cd64:	60b9      	str	r1, [r7, #8]
 800cd66:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cd6e:	68fb      	ldr	r3, [r7, #12]
 800cd70:	32b0      	adds	r2, #176	; 0xb0
 800cd72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cd76:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800cd78:	697b      	ldr	r3, [r7, #20]
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d101      	bne.n	800cd82 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800cd7e:	2303      	movs	r3, #3
 800cd80:	e008      	b.n	800cd94 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800cd82:	697b      	ldr	r3, [r7, #20]
 800cd84:	68ba      	ldr	r2, [r7, #8]
 800cd86:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800cd8a:	697b      	ldr	r3, [r7, #20]
 800cd8c:	687a      	ldr	r2, [r7, #4]
 800cd8e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800cd92:	2300      	movs	r3, #0
}
 800cd94:	4618      	mov	r0, r3
 800cd96:	371c      	adds	r7, #28
 800cd98:	46bd      	mov	sp, r7
 800cd9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd9e:	4770      	bx	lr

0800cda0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800cda0:	b480      	push	{r7}
 800cda2:	b085      	sub	sp, #20
 800cda4:	af00      	add	r7, sp, #0
 800cda6:	6078      	str	r0, [r7, #4]
 800cda8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	32b0      	adds	r2, #176	; 0xb0
 800cdb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cdb8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d101      	bne.n	800cdc4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800cdc0:	2303      	movs	r3, #3
 800cdc2:	e004      	b.n	800cdce <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	683a      	ldr	r2, [r7, #0]
 800cdc8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800cdcc:	2300      	movs	r3, #0
}
 800cdce:	4618      	mov	r0, r3
 800cdd0:	3714      	adds	r7, #20
 800cdd2:	46bd      	mov	sp, r7
 800cdd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdd8:	4770      	bx	lr
	...

0800cddc <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800cddc:	b580      	push	{r7, lr}
 800cdde:	b084      	sub	sp, #16
 800cde0:	af00      	add	r7, sp, #0
 800cde2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	32b0      	adds	r2, #176	; 0xb0
 800cdee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cdf2:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800cdf4:	2301      	movs	r3, #1
 800cdf6:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	32b0      	adds	r2, #176	; 0xb0
 800ce02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d101      	bne.n	800ce0e <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800ce0a:	2303      	movs	r3, #3
 800ce0c:	e025      	b.n	800ce5a <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800ce0e:	68bb      	ldr	r3, [r7, #8]
 800ce10:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d11f      	bne.n	800ce58 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800ce18:	68bb      	ldr	r3, [r7, #8]
 800ce1a:	2201      	movs	r2, #1
 800ce1c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800ce20:	4b10      	ldr	r3, [pc, #64]	; (800ce64 <USBD_CDC_TransmitPacket+0x88>)
 800ce22:	781b      	ldrb	r3, [r3, #0]
 800ce24:	f003 020f 	and.w	r2, r3, #15
 800ce28:	68bb      	ldr	r3, [r7, #8]
 800ce2a:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800ce2e:	6878      	ldr	r0, [r7, #4]
 800ce30:	4613      	mov	r3, r2
 800ce32:	009b      	lsls	r3, r3, #2
 800ce34:	4413      	add	r3, r2
 800ce36:	009b      	lsls	r3, r3, #2
 800ce38:	4403      	add	r3, r0
 800ce3a:	3318      	adds	r3, #24
 800ce3c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800ce3e:	4b09      	ldr	r3, [pc, #36]	; (800ce64 <USBD_CDC_TransmitPacket+0x88>)
 800ce40:	7819      	ldrb	r1, [r3, #0]
 800ce42:	68bb      	ldr	r3, [r7, #8]
 800ce44:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800ce48:	68bb      	ldr	r3, [r7, #8]
 800ce4a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800ce4e:	6878      	ldr	r0, [r7, #4]
 800ce50:	f001 ffb3 	bl	800edba <USBD_LL_Transmit>

    ret = USBD_OK;
 800ce54:	2300      	movs	r3, #0
 800ce56:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800ce58:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce5a:	4618      	mov	r0, r3
 800ce5c:	3710      	adds	r7, #16
 800ce5e:	46bd      	mov	sp, r7
 800ce60:	bd80      	pop	{r7, pc}
 800ce62:	bf00      	nop
 800ce64:	2000009b 	.word	0x2000009b

0800ce68 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800ce68:	b580      	push	{r7, lr}
 800ce6a:	b084      	sub	sp, #16
 800ce6c:	af00      	add	r7, sp, #0
 800ce6e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	32b0      	adds	r2, #176	; 0xb0
 800ce7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ce7e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	32b0      	adds	r2, #176	; 0xb0
 800ce8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d101      	bne.n	800ce96 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800ce92:	2303      	movs	r3, #3
 800ce94:	e018      	b.n	800cec8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	7c1b      	ldrb	r3, [r3, #16]
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d10a      	bne.n	800ceb4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ce9e:	4b0c      	ldr	r3, [pc, #48]	; (800ced0 <USBD_CDC_ReceivePacket+0x68>)
 800cea0:	7819      	ldrb	r1, [r3, #0]
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800cea8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ceac:	6878      	ldr	r0, [r7, #4]
 800ceae:	f001 ffa5 	bl	800edfc <USBD_LL_PrepareReceive>
 800ceb2:	e008      	b.n	800cec6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ceb4:	4b06      	ldr	r3, [pc, #24]	; (800ced0 <USBD_CDC_ReceivePacket+0x68>)
 800ceb6:	7819      	ldrb	r1, [r3, #0]
 800ceb8:	68fb      	ldr	r3, [r7, #12]
 800ceba:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800cebe:	2340      	movs	r3, #64	; 0x40
 800cec0:	6878      	ldr	r0, [r7, #4]
 800cec2:	f001 ff9b 	bl	800edfc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800cec6:	2300      	movs	r3, #0
}
 800cec8:	4618      	mov	r0, r3
 800ceca:	3710      	adds	r7, #16
 800cecc:	46bd      	mov	sp, r7
 800cece:	bd80      	pop	{r7, pc}
 800ced0:	2000009c 	.word	0x2000009c

0800ced4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800ced4:	b580      	push	{r7, lr}
 800ced6:	b086      	sub	sp, #24
 800ced8:	af00      	add	r7, sp, #0
 800ceda:	60f8      	str	r0, [r7, #12]
 800cedc:	60b9      	str	r1, [r7, #8]
 800cede:	4613      	mov	r3, r2
 800cee0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d101      	bne.n	800ceec <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800cee8:	2303      	movs	r3, #3
 800ceea:	e01f      	b.n	800cf2c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	2200      	movs	r2, #0
 800cef0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	2200      	movs	r2, #0
 800cef8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	2200      	movs	r2, #0
 800cf00:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800cf04:	68bb      	ldr	r3, [r7, #8]
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d003      	beq.n	800cf12 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	68ba      	ldr	r2, [r7, #8]
 800cf0e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800cf12:	68fb      	ldr	r3, [r7, #12]
 800cf14:	2201      	movs	r2, #1
 800cf16:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800cf1a:	68fb      	ldr	r3, [r7, #12]
 800cf1c:	79fa      	ldrb	r2, [r7, #7]
 800cf1e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800cf20:	68f8      	ldr	r0, [r7, #12]
 800cf22:	f001 fe15 	bl	800eb50 <USBD_LL_Init>
 800cf26:	4603      	mov	r3, r0
 800cf28:	75fb      	strb	r3, [r7, #23]

  return ret;
 800cf2a:	7dfb      	ldrb	r3, [r7, #23]
}
 800cf2c:	4618      	mov	r0, r3
 800cf2e:	3718      	adds	r7, #24
 800cf30:	46bd      	mov	sp, r7
 800cf32:	bd80      	pop	{r7, pc}

0800cf34 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800cf34:	b580      	push	{r7, lr}
 800cf36:	b084      	sub	sp, #16
 800cf38:	af00      	add	r7, sp, #0
 800cf3a:	6078      	str	r0, [r7, #4]
 800cf3c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800cf3e:	2300      	movs	r3, #0
 800cf40:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800cf42:	683b      	ldr	r3, [r7, #0]
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d101      	bne.n	800cf4c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800cf48:	2303      	movs	r3, #3
 800cf4a:	e025      	b.n	800cf98 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	683a      	ldr	r2, [r7, #0]
 800cf50:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	32ae      	adds	r2, #174	; 0xae
 800cf5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d00f      	beq.n	800cf88 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	32ae      	adds	r2, #174	; 0xae
 800cf72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf78:	f107 020e 	add.w	r2, r7, #14
 800cf7c:	4610      	mov	r0, r2
 800cf7e:	4798      	blx	r3
 800cf80:	4602      	mov	r2, r0
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800cf8e:	1c5a      	adds	r2, r3, #1
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800cf96:	2300      	movs	r3, #0
}
 800cf98:	4618      	mov	r0, r3
 800cf9a:	3710      	adds	r7, #16
 800cf9c:	46bd      	mov	sp, r7
 800cf9e:	bd80      	pop	{r7, pc}

0800cfa0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800cfa0:	b580      	push	{r7, lr}
 800cfa2:	b082      	sub	sp, #8
 800cfa4:	af00      	add	r7, sp, #0
 800cfa6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800cfa8:	6878      	ldr	r0, [r7, #4]
 800cfaa:	f001 fe1d 	bl	800ebe8 <USBD_LL_Start>
 800cfae:	4603      	mov	r3, r0
}
 800cfb0:	4618      	mov	r0, r3
 800cfb2:	3708      	adds	r7, #8
 800cfb4:	46bd      	mov	sp, r7
 800cfb6:	bd80      	pop	{r7, pc}

0800cfb8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800cfb8:	b480      	push	{r7}
 800cfba:	b083      	sub	sp, #12
 800cfbc:	af00      	add	r7, sp, #0
 800cfbe:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800cfc0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800cfc2:	4618      	mov	r0, r3
 800cfc4:	370c      	adds	r7, #12
 800cfc6:	46bd      	mov	sp, r7
 800cfc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfcc:	4770      	bx	lr

0800cfce <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cfce:	b580      	push	{r7, lr}
 800cfd0:	b084      	sub	sp, #16
 800cfd2:	af00      	add	r7, sp, #0
 800cfd4:	6078      	str	r0, [r7, #4]
 800cfd6:	460b      	mov	r3, r1
 800cfd8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800cfda:	2300      	movs	r3, #0
 800cfdc:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d009      	beq.n	800cffc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	78fa      	ldrb	r2, [r7, #3]
 800cff2:	4611      	mov	r1, r2
 800cff4:	6878      	ldr	r0, [r7, #4]
 800cff6:	4798      	blx	r3
 800cff8:	4603      	mov	r3, r0
 800cffa:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800cffc:	7bfb      	ldrb	r3, [r7, #15]
}
 800cffe:	4618      	mov	r0, r3
 800d000:	3710      	adds	r7, #16
 800d002:	46bd      	mov	sp, r7
 800d004:	bd80      	pop	{r7, pc}

0800d006 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d006:	b580      	push	{r7, lr}
 800d008:	b084      	sub	sp, #16
 800d00a:	af00      	add	r7, sp, #0
 800d00c:	6078      	str	r0, [r7, #4]
 800d00e:	460b      	mov	r3, r1
 800d010:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800d012:	2300      	movs	r3, #0
 800d014:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d01c:	685b      	ldr	r3, [r3, #4]
 800d01e:	78fa      	ldrb	r2, [r7, #3]
 800d020:	4611      	mov	r1, r2
 800d022:	6878      	ldr	r0, [r7, #4]
 800d024:	4798      	blx	r3
 800d026:	4603      	mov	r3, r0
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d001      	beq.n	800d030 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800d02c:	2303      	movs	r3, #3
 800d02e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d030:	7bfb      	ldrb	r3, [r7, #15]
}
 800d032:	4618      	mov	r0, r3
 800d034:	3710      	adds	r7, #16
 800d036:	46bd      	mov	sp, r7
 800d038:	bd80      	pop	{r7, pc}

0800d03a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800d03a:	b580      	push	{r7, lr}
 800d03c:	b084      	sub	sp, #16
 800d03e:	af00      	add	r7, sp, #0
 800d040:	6078      	str	r0, [r7, #4]
 800d042:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d04a:	6839      	ldr	r1, [r7, #0]
 800d04c:	4618      	mov	r0, r3
 800d04e:	f001 f908 	bl	800e262 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	2201      	movs	r2, #1
 800d056:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800d060:	461a      	mov	r2, r3
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d06e:	f003 031f 	and.w	r3, r3, #31
 800d072:	2b02      	cmp	r3, #2
 800d074:	d01a      	beq.n	800d0ac <USBD_LL_SetupStage+0x72>
 800d076:	2b02      	cmp	r3, #2
 800d078:	d822      	bhi.n	800d0c0 <USBD_LL_SetupStage+0x86>
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	d002      	beq.n	800d084 <USBD_LL_SetupStage+0x4a>
 800d07e:	2b01      	cmp	r3, #1
 800d080:	d00a      	beq.n	800d098 <USBD_LL_SetupStage+0x5e>
 800d082:	e01d      	b.n	800d0c0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d08a:	4619      	mov	r1, r3
 800d08c:	6878      	ldr	r0, [r7, #4]
 800d08e:	f000 fb5f 	bl	800d750 <USBD_StdDevReq>
 800d092:	4603      	mov	r3, r0
 800d094:	73fb      	strb	r3, [r7, #15]
      break;
 800d096:	e020      	b.n	800d0da <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d09e:	4619      	mov	r1, r3
 800d0a0:	6878      	ldr	r0, [r7, #4]
 800d0a2:	f000 fbc7 	bl	800d834 <USBD_StdItfReq>
 800d0a6:	4603      	mov	r3, r0
 800d0a8:	73fb      	strb	r3, [r7, #15]
      break;
 800d0aa:	e016      	b.n	800d0da <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d0b2:	4619      	mov	r1, r3
 800d0b4:	6878      	ldr	r0, [r7, #4]
 800d0b6:	f000 fc29 	bl	800d90c <USBD_StdEPReq>
 800d0ba:	4603      	mov	r3, r0
 800d0bc:	73fb      	strb	r3, [r7, #15]
      break;
 800d0be:	e00c      	b.n	800d0da <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d0c6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d0ca:	b2db      	uxtb	r3, r3
 800d0cc:	4619      	mov	r1, r3
 800d0ce:	6878      	ldr	r0, [r7, #4]
 800d0d0:	f001 fdea 	bl	800eca8 <USBD_LL_StallEP>
 800d0d4:	4603      	mov	r3, r0
 800d0d6:	73fb      	strb	r3, [r7, #15]
      break;
 800d0d8:	bf00      	nop
  }

  return ret;
 800d0da:	7bfb      	ldrb	r3, [r7, #15]
}
 800d0dc:	4618      	mov	r0, r3
 800d0de:	3710      	adds	r7, #16
 800d0e0:	46bd      	mov	sp, r7
 800d0e2:	bd80      	pop	{r7, pc}

0800d0e4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800d0e4:	b580      	push	{r7, lr}
 800d0e6:	b086      	sub	sp, #24
 800d0e8:	af00      	add	r7, sp, #0
 800d0ea:	60f8      	str	r0, [r7, #12]
 800d0ec:	460b      	mov	r3, r1
 800d0ee:	607a      	str	r2, [r7, #4]
 800d0f0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800d0f2:	2300      	movs	r3, #0
 800d0f4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800d0f6:	7afb      	ldrb	r3, [r7, #11]
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d16e      	bne.n	800d1da <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800d102:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d10a:	2b03      	cmp	r3, #3
 800d10c:	f040 8098 	bne.w	800d240 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800d110:	693b      	ldr	r3, [r7, #16]
 800d112:	689a      	ldr	r2, [r3, #8]
 800d114:	693b      	ldr	r3, [r7, #16]
 800d116:	68db      	ldr	r3, [r3, #12]
 800d118:	429a      	cmp	r2, r3
 800d11a:	d913      	bls.n	800d144 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800d11c:	693b      	ldr	r3, [r7, #16]
 800d11e:	689a      	ldr	r2, [r3, #8]
 800d120:	693b      	ldr	r3, [r7, #16]
 800d122:	68db      	ldr	r3, [r3, #12]
 800d124:	1ad2      	subs	r2, r2, r3
 800d126:	693b      	ldr	r3, [r7, #16]
 800d128:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800d12a:	693b      	ldr	r3, [r7, #16]
 800d12c:	68da      	ldr	r2, [r3, #12]
 800d12e:	693b      	ldr	r3, [r7, #16]
 800d130:	689b      	ldr	r3, [r3, #8]
 800d132:	4293      	cmp	r3, r2
 800d134:	bf28      	it	cs
 800d136:	4613      	movcs	r3, r2
 800d138:	461a      	mov	r2, r3
 800d13a:	6879      	ldr	r1, [r7, #4]
 800d13c:	68f8      	ldr	r0, [r7, #12]
 800d13e:	f001 f984 	bl	800e44a <USBD_CtlContinueRx>
 800d142:	e07d      	b.n	800d240 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d14a:	f003 031f 	and.w	r3, r3, #31
 800d14e:	2b02      	cmp	r3, #2
 800d150:	d014      	beq.n	800d17c <USBD_LL_DataOutStage+0x98>
 800d152:	2b02      	cmp	r3, #2
 800d154:	d81d      	bhi.n	800d192 <USBD_LL_DataOutStage+0xae>
 800d156:	2b00      	cmp	r3, #0
 800d158:	d002      	beq.n	800d160 <USBD_LL_DataOutStage+0x7c>
 800d15a:	2b01      	cmp	r3, #1
 800d15c:	d003      	beq.n	800d166 <USBD_LL_DataOutStage+0x82>
 800d15e:	e018      	b.n	800d192 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800d160:	2300      	movs	r3, #0
 800d162:	75bb      	strb	r3, [r7, #22]
            break;
 800d164:	e018      	b.n	800d198 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800d16c:	b2db      	uxtb	r3, r3
 800d16e:	4619      	mov	r1, r3
 800d170:	68f8      	ldr	r0, [r7, #12]
 800d172:	f000 fa5e 	bl	800d632 <USBD_CoreFindIF>
 800d176:	4603      	mov	r3, r0
 800d178:	75bb      	strb	r3, [r7, #22]
            break;
 800d17a:	e00d      	b.n	800d198 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800d182:	b2db      	uxtb	r3, r3
 800d184:	4619      	mov	r1, r3
 800d186:	68f8      	ldr	r0, [r7, #12]
 800d188:	f000 fa60 	bl	800d64c <USBD_CoreFindEP>
 800d18c:	4603      	mov	r3, r0
 800d18e:	75bb      	strb	r3, [r7, #22]
            break;
 800d190:	e002      	b.n	800d198 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800d192:	2300      	movs	r3, #0
 800d194:	75bb      	strb	r3, [r7, #22]
            break;
 800d196:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800d198:	7dbb      	ldrb	r3, [r7, #22]
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d119      	bne.n	800d1d2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d19e:	68fb      	ldr	r3, [r7, #12]
 800d1a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d1a4:	b2db      	uxtb	r3, r3
 800d1a6:	2b03      	cmp	r3, #3
 800d1a8:	d113      	bne.n	800d1d2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800d1aa:	7dba      	ldrb	r2, [r7, #22]
 800d1ac:	68fb      	ldr	r3, [r7, #12]
 800d1ae:	32ae      	adds	r2, #174	; 0xae
 800d1b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d1b4:	691b      	ldr	r3, [r3, #16]
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d00b      	beq.n	800d1d2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800d1ba:	7dba      	ldrb	r2, [r7, #22]
 800d1bc:	68fb      	ldr	r3, [r7, #12]
 800d1be:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800d1c2:	7dba      	ldrb	r2, [r7, #22]
 800d1c4:	68fb      	ldr	r3, [r7, #12]
 800d1c6:	32ae      	adds	r2, #174	; 0xae
 800d1c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d1cc:	691b      	ldr	r3, [r3, #16]
 800d1ce:	68f8      	ldr	r0, [r7, #12]
 800d1d0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800d1d2:	68f8      	ldr	r0, [r7, #12]
 800d1d4:	f001 f94a 	bl	800e46c <USBD_CtlSendStatus>
 800d1d8:	e032      	b.n	800d240 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800d1da:	7afb      	ldrb	r3, [r7, #11]
 800d1dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d1e0:	b2db      	uxtb	r3, r3
 800d1e2:	4619      	mov	r1, r3
 800d1e4:	68f8      	ldr	r0, [r7, #12]
 800d1e6:	f000 fa31 	bl	800d64c <USBD_CoreFindEP>
 800d1ea:	4603      	mov	r3, r0
 800d1ec:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d1ee:	7dbb      	ldrb	r3, [r7, #22]
 800d1f0:	2bff      	cmp	r3, #255	; 0xff
 800d1f2:	d025      	beq.n	800d240 <USBD_LL_DataOutStage+0x15c>
 800d1f4:	7dbb      	ldrb	r3, [r7, #22]
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d122      	bne.n	800d240 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d200:	b2db      	uxtb	r3, r3
 800d202:	2b03      	cmp	r3, #3
 800d204:	d117      	bne.n	800d236 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800d206:	7dba      	ldrb	r2, [r7, #22]
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	32ae      	adds	r2, #174	; 0xae
 800d20c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d210:	699b      	ldr	r3, [r3, #24]
 800d212:	2b00      	cmp	r3, #0
 800d214:	d00f      	beq.n	800d236 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800d216:	7dba      	ldrb	r2, [r7, #22]
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800d21e:	7dba      	ldrb	r2, [r7, #22]
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	32ae      	adds	r2, #174	; 0xae
 800d224:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d228:	699b      	ldr	r3, [r3, #24]
 800d22a:	7afa      	ldrb	r2, [r7, #11]
 800d22c:	4611      	mov	r1, r2
 800d22e:	68f8      	ldr	r0, [r7, #12]
 800d230:	4798      	blx	r3
 800d232:	4603      	mov	r3, r0
 800d234:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800d236:	7dfb      	ldrb	r3, [r7, #23]
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d001      	beq.n	800d240 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800d23c:	7dfb      	ldrb	r3, [r7, #23]
 800d23e:	e000      	b.n	800d242 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800d240:	2300      	movs	r3, #0
}
 800d242:	4618      	mov	r0, r3
 800d244:	3718      	adds	r7, #24
 800d246:	46bd      	mov	sp, r7
 800d248:	bd80      	pop	{r7, pc}

0800d24a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800d24a:	b580      	push	{r7, lr}
 800d24c:	b086      	sub	sp, #24
 800d24e:	af00      	add	r7, sp, #0
 800d250:	60f8      	str	r0, [r7, #12]
 800d252:	460b      	mov	r3, r1
 800d254:	607a      	str	r2, [r7, #4]
 800d256:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800d258:	7afb      	ldrb	r3, [r7, #11]
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d16f      	bne.n	800d33e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	3314      	adds	r3, #20
 800d262:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d26a:	2b02      	cmp	r3, #2
 800d26c:	d15a      	bne.n	800d324 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800d26e:	693b      	ldr	r3, [r7, #16]
 800d270:	689a      	ldr	r2, [r3, #8]
 800d272:	693b      	ldr	r3, [r7, #16]
 800d274:	68db      	ldr	r3, [r3, #12]
 800d276:	429a      	cmp	r2, r3
 800d278:	d914      	bls.n	800d2a4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800d27a:	693b      	ldr	r3, [r7, #16]
 800d27c:	689a      	ldr	r2, [r3, #8]
 800d27e:	693b      	ldr	r3, [r7, #16]
 800d280:	68db      	ldr	r3, [r3, #12]
 800d282:	1ad2      	subs	r2, r2, r3
 800d284:	693b      	ldr	r3, [r7, #16]
 800d286:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800d288:	693b      	ldr	r3, [r7, #16]
 800d28a:	689b      	ldr	r3, [r3, #8]
 800d28c:	461a      	mov	r2, r3
 800d28e:	6879      	ldr	r1, [r7, #4]
 800d290:	68f8      	ldr	r0, [r7, #12]
 800d292:	f001 f8ac 	bl	800e3ee <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d296:	2300      	movs	r3, #0
 800d298:	2200      	movs	r2, #0
 800d29a:	2100      	movs	r1, #0
 800d29c:	68f8      	ldr	r0, [r7, #12]
 800d29e:	f001 fdad 	bl	800edfc <USBD_LL_PrepareReceive>
 800d2a2:	e03f      	b.n	800d324 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800d2a4:	693b      	ldr	r3, [r7, #16]
 800d2a6:	68da      	ldr	r2, [r3, #12]
 800d2a8:	693b      	ldr	r3, [r7, #16]
 800d2aa:	689b      	ldr	r3, [r3, #8]
 800d2ac:	429a      	cmp	r2, r3
 800d2ae:	d11c      	bne.n	800d2ea <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800d2b0:	693b      	ldr	r3, [r7, #16]
 800d2b2:	685a      	ldr	r2, [r3, #4]
 800d2b4:	693b      	ldr	r3, [r7, #16]
 800d2b6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800d2b8:	429a      	cmp	r2, r3
 800d2ba:	d316      	bcc.n	800d2ea <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800d2bc:	693b      	ldr	r3, [r7, #16]
 800d2be:	685a      	ldr	r2, [r3, #4]
 800d2c0:	68fb      	ldr	r3, [r7, #12]
 800d2c2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800d2c6:	429a      	cmp	r2, r3
 800d2c8:	d20f      	bcs.n	800d2ea <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800d2ca:	2200      	movs	r2, #0
 800d2cc:	2100      	movs	r1, #0
 800d2ce:	68f8      	ldr	r0, [r7, #12]
 800d2d0:	f001 f88d 	bl	800e3ee <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	2200      	movs	r2, #0
 800d2d8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d2dc:	2300      	movs	r3, #0
 800d2de:	2200      	movs	r2, #0
 800d2e0:	2100      	movs	r1, #0
 800d2e2:	68f8      	ldr	r0, [r7, #12]
 800d2e4:	f001 fd8a 	bl	800edfc <USBD_LL_PrepareReceive>
 800d2e8:	e01c      	b.n	800d324 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d2ea:	68fb      	ldr	r3, [r7, #12]
 800d2ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d2f0:	b2db      	uxtb	r3, r3
 800d2f2:	2b03      	cmp	r3, #3
 800d2f4:	d10f      	bne.n	800d316 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d2fc:	68db      	ldr	r3, [r3, #12]
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d009      	beq.n	800d316 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800d302:	68fb      	ldr	r3, [r7, #12]
 800d304:	2200      	movs	r2, #0
 800d306:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800d30a:	68fb      	ldr	r3, [r7, #12]
 800d30c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d310:	68db      	ldr	r3, [r3, #12]
 800d312:	68f8      	ldr	r0, [r7, #12]
 800d314:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800d316:	2180      	movs	r1, #128	; 0x80
 800d318:	68f8      	ldr	r0, [r7, #12]
 800d31a:	f001 fcc5 	bl	800eca8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800d31e:	68f8      	ldr	r0, [r7, #12]
 800d320:	f001 f8b7 	bl	800e492 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d03a      	beq.n	800d3a4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800d32e:	68f8      	ldr	r0, [r7, #12]
 800d330:	f7ff fe42 	bl	800cfb8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	2200      	movs	r2, #0
 800d338:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800d33c:	e032      	b.n	800d3a4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800d33e:	7afb      	ldrb	r3, [r7, #11]
 800d340:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d344:	b2db      	uxtb	r3, r3
 800d346:	4619      	mov	r1, r3
 800d348:	68f8      	ldr	r0, [r7, #12]
 800d34a:	f000 f97f 	bl	800d64c <USBD_CoreFindEP>
 800d34e:	4603      	mov	r3, r0
 800d350:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d352:	7dfb      	ldrb	r3, [r7, #23]
 800d354:	2bff      	cmp	r3, #255	; 0xff
 800d356:	d025      	beq.n	800d3a4 <USBD_LL_DataInStage+0x15a>
 800d358:	7dfb      	ldrb	r3, [r7, #23]
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d122      	bne.n	800d3a4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d35e:	68fb      	ldr	r3, [r7, #12]
 800d360:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d364:	b2db      	uxtb	r3, r3
 800d366:	2b03      	cmp	r3, #3
 800d368:	d11c      	bne.n	800d3a4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800d36a:	7dfa      	ldrb	r2, [r7, #23]
 800d36c:	68fb      	ldr	r3, [r7, #12]
 800d36e:	32ae      	adds	r2, #174	; 0xae
 800d370:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d374:	695b      	ldr	r3, [r3, #20]
 800d376:	2b00      	cmp	r3, #0
 800d378:	d014      	beq.n	800d3a4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800d37a:	7dfa      	ldrb	r2, [r7, #23]
 800d37c:	68fb      	ldr	r3, [r7, #12]
 800d37e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800d382:	7dfa      	ldrb	r2, [r7, #23]
 800d384:	68fb      	ldr	r3, [r7, #12]
 800d386:	32ae      	adds	r2, #174	; 0xae
 800d388:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d38c:	695b      	ldr	r3, [r3, #20]
 800d38e:	7afa      	ldrb	r2, [r7, #11]
 800d390:	4611      	mov	r1, r2
 800d392:	68f8      	ldr	r0, [r7, #12]
 800d394:	4798      	blx	r3
 800d396:	4603      	mov	r3, r0
 800d398:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800d39a:	7dbb      	ldrb	r3, [r7, #22]
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d001      	beq.n	800d3a4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800d3a0:	7dbb      	ldrb	r3, [r7, #22]
 800d3a2:	e000      	b.n	800d3a6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800d3a4:	2300      	movs	r3, #0
}
 800d3a6:	4618      	mov	r0, r3
 800d3a8:	3718      	adds	r7, #24
 800d3aa:	46bd      	mov	sp, r7
 800d3ac:	bd80      	pop	{r7, pc}

0800d3ae <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800d3ae:	b580      	push	{r7, lr}
 800d3b0:	b084      	sub	sp, #16
 800d3b2:	af00      	add	r7, sp, #0
 800d3b4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800d3b6:	2300      	movs	r3, #0
 800d3b8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	2201      	movs	r2, #1
 800d3be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	2200      	movs	r2, #0
 800d3c6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	2200      	movs	r2, #0
 800d3ce:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	2200      	movs	r2, #0
 800d3d4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	2200      	movs	r2, #0
 800d3dc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d014      	beq.n	800d414 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d3f0:	685b      	ldr	r3, [r3, #4]
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d00e      	beq.n	800d414 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d3fc:	685b      	ldr	r3, [r3, #4]
 800d3fe:	687a      	ldr	r2, [r7, #4]
 800d400:	6852      	ldr	r2, [r2, #4]
 800d402:	b2d2      	uxtb	r2, r2
 800d404:	4611      	mov	r1, r2
 800d406:	6878      	ldr	r0, [r7, #4]
 800d408:	4798      	blx	r3
 800d40a:	4603      	mov	r3, r0
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d001      	beq.n	800d414 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800d410:	2303      	movs	r3, #3
 800d412:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d414:	2340      	movs	r3, #64	; 0x40
 800d416:	2200      	movs	r2, #0
 800d418:	2100      	movs	r1, #0
 800d41a:	6878      	ldr	r0, [r7, #4]
 800d41c:	f001 fbff 	bl	800ec1e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	2201      	movs	r2, #1
 800d424:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	2240      	movs	r2, #64	; 0x40
 800d42c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d430:	2340      	movs	r3, #64	; 0x40
 800d432:	2200      	movs	r2, #0
 800d434:	2180      	movs	r1, #128	; 0x80
 800d436:	6878      	ldr	r0, [r7, #4]
 800d438:	f001 fbf1 	bl	800ec1e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	2201      	movs	r2, #1
 800d440:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	2240      	movs	r2, #64	; 0x40
 800d446:	621a      	str	r2, [r3, #32]

  return ret;
 800d448:	7bfb      	ldrb	r3, [r7, #15]
}
 800d44a:	4618      	mov	r0, r3
 800d44c:	3710      	adds	r7, #16
 800d44e:	46bd      	mov	sp, r7
 800d450:	bd80      	pop	{r7, pc}

0800d452 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800d452:	b480      	push	{r7}
 800d454:	b083      	sub	sp, #12
 800d456:	af00      	add	r7, sp, #0
 800d458:	6078      	str	r0, [r7, #4]
 800d45a:	460b      	mov	r3, r1
 800d45c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	78fa      	ldrb	r2, [r7, #3]
 800d462:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800d464:	2300      	movs	r3, #0
}
 800d466:	4618      	mov	r0, r3
 800d468:	370c      	adds	r7, #12
 800d46a:	46bd      	mov	sp, r7
 800d46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d470:	4770      	bx	lr

0800d472 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800d472:	b480      	push	{r7}
 800d474:	b083      	sub	sp, #12
 800d476:	af00      	add	r7, sp, #0
 800d478:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d480:	b2da      	uxtb	r2, r3
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	2204      	movs	r2, #4
 800d48c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800d490:	2300      	movs	r3, #0
}
 800d492:	4618      	mov	r0, r3
 800d494:	370c      	adds	r7, #12
 800d496:	46bd      	mov	sp, r7
 800d498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d49c:	4770      	bx	lr

0800d49e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800d49e:	b480      	push	{r7}
 800d4a0:	b083      	sub	sp, #12
 800d4a2:	af00      	add	r7, sp, #0
 800d4a4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d4ac:	b2db      	uxtb	r3, r3
 800d4ae:	2b04      	cmp	r3, #4
 800d4b0:	d106      	bne.n	800d4c0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800d4b8:	b2da      	uxtb	r2, r3
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800d4c0:	2300      	movs	r3, #0
}
 800d4c2:	4618      	mov	r0, r3
 800d4c4:	370c      	adds	r7, #12
 800d4c6:	46bd      	mov	sp, r7
 800d4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4cc:	4770      	bx	lr

0800d4ce <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800d4ce:	b580      	push	{r7, lr}
 800d4d0:	b082      	sub	sp, #8
 800d4d2:	af00      	add	r7, sp, #0
 800d4d4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d4dc:	b2db      	uxtb	r3, r3
 800d4de:	2b03      	cmp	r3, #3
 800d4e0:	d110      	bne.n	800d504 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d00b      	beq.n	800d504 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d4f2:	69db      	ldr	r3, [r3, #28]
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d005      	beq.n	800d504 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d4fe:	69db      	ldr	r3, [r3, #28]
 800d500:	6878      	ldr	r0, [r7, #4]
 800d502:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800d504:	2300      	movs	r3, #0
}
 800d506:	4618      	mov	r0, r3
 800d508:	3708      	adds	r7, #8
 800d50a:	46bd      	mov	sp, r7
 800d50c:	bd80      	pop	{r7, pc}

0800d50e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800d50e:	b580      	push	{r7, lr}
 800d510:	b082      	sub	sp, #8
 800d512:	af00      	add	r7, sp, #0
 800d514:	6078      	str	r0, [r7, #4]
 800d516:	460b      	mov	r3, r1
 800d518:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	32ae      	adds	r2, #174	; 0xae
 800d524:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d101      	bne.n	800d530 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800d52c:	2303      	movs	r3, #3
 800d52e:	e01c      	b.n	800d56a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d536:	b2db      	uxtb	r3, r3
 800d538:	2b03      	cmp	r3, #3
 800d53a:	d115      	bne.n	800d568 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	32ae      	adds	r2, #174	; 0xae
 800d546:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d54a:	6a1b      	ldr	r3, [r3, #32]
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d00b      	beq.n	800d568 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	32ae      	adds	r2, #174	; 0xae
 800d55a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d55e:	6a1b      	ldr	r3, [r3, #32]
 800d560:	78fa      	ldrb	r2, [r7, #3]
 800d562:	4611      	mov	r1, r2
 800d564:	6878      	ldr	r0, [r7, #4]
 800d566:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d568:	2300      	movs	r3, #0
}
 800d56a:	4618      	mov	r0, r3
 800d56c:	3708      	adds	r7, #8
 800d56e:	46bd      	mov	sp, r7
 800d570:	bd80      	pop	{r7, pc}

0800d572 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800d572:	b580      	push	{r7, lr}
 800d574:	b082      	sub	sp, #8
 800d576:	af00      	add	r7, sp, #0
 800d578:	6078      	str	r0, [r7, #4]
 800d57a:	460b      	mov	r3, r1
 800d57c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	32ae      	adds	r2, #174	; 0xae
 800d588:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d101      	bne.n	800d594 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800d590:	2303      	movs	r3, #3
 800d592:	e01c      	b.n	800d5ce <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d59a:	b2db      	uxtb	r3, r3
 800d59c:	2b03      	cmp	r3, #3
 800d59e:	d115      	bne.n	800d5cc <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	32ae      	adds	r2, #174	; 0xae
 800d5aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d5ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	d00b      	beq.n	800d5cc <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	32ae      	adds	r2, #174	; 0xae
 800d5be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d5c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5c4:	78fa      	ldrb	r2, [r7, #3]
 800d5c6:	4611      	mov	r1, r2
 800d5c8:	6878      	ldr	r0, [r7, #4]
 800d5ca:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d5cc:	2300      	movs	r3, #0
}
 800d5ce:	4618      	mov	r0, r3
 800d5d0:	3708      	adds	r7, #8
 800d5d2:	46bd      	mov	sp, r7
 800d5d4:	bd80      	pop	{r7, pc}

0800d5d6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800d5d6:	b480      	push	{r7}
 800d5d8:	b083      	sub	sp, #12
 800d5da:	af00      	add	r7, sp, #0
 800d5dc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d5de:	2300      	movs	r3, #0
}
 800d5e0:	4618      	mov	r0, r3
 800d5e2:	370c      	adds	r7, #12
 800d5e4:	46bd      	mov	sp, r7
 800d5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ea:	4770      	bx	lr

0800d5ec <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800d5ec:	b580      	push	{r7, lr}
 800d5ee:	b084      	sub	sp, #16
 800d5f0:	af00      	add	r7, sp, #0
 800d5f2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800d5f4:	2300      	movs	r3, #0
 800d5f6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	2201      	movs	r2, #1
 800d5fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d606:	2b00      	cmp	r3, #0
 800d608:	d00e      	beq.n	800d628 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d610:	685b      	ldr	r3, [r3, #4]
 800d612:	687a      	ldr	r2, [r7, #4]
 800d614:	6852      	ldr	r2, [r2, #4]
 800d616:	b2d2      	uxtb	r2, r2
 800d618:	4611      	mov	r1, r2
 800d61a:	6878      	ldr	r0, [r7, #4]
 800d61c:	4798      	blx	r3
 800d61e:	4603      	mov	r3, r0
 800d620:	2b00      	cmp	r3, #0
 800d622:	d001      	beq.n	800d628 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800d624:	2303      	movs	r3, #3
 800d626:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d628:	7bfb      	ldrb	r3, [r7, #15]
}
 800d62a:	4618      	mov	r0, r3
 800d62c:	3710      	adds	r7, #16
 800d62e:	46bd      	mov	sp, r7
 800d630:	bd80      	pop	{r7, pc}

0800d632 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800d632:	b480      	push	{r7}
 800d634:	b083      	sub	sp, #12
 800d636:	af00      	add	r7, sp, #0
 800d638:	6078      	str	r0, [r7, #4]
 800d63a:	460b      	mov	r3, r1
 800d63c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800d63e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800d640:	4618      	mov	r0, r3
 800d642:	370c      	adds	r7, #12
 800d644:	46bd      	mov	sp, r7
 800d646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d64a:	4770      	bx	lr

0800d64c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800d64c:	b480      	push	{r7}
 800d64e:	b083      	sub	sp, #12
 800d650:	af00      	add	r7, sp, #0
 800d652:	6078      	str	r0, [r7, #4]
 800d654:	460b      	mov	r3, r1
 800d656:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800d658:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800d65a:	4618      	mov	r0, r3
 800d65c:	370c      	adds	r7, #12
 800d65e:	46bd      	mov	sp, r7
 800d660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d664:	4770      	bx	lr

0800d666 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800d666:	b580      	push	{r7, lr}
 800d668:	b086      	sub	sp, #24
 800d66a:	af00      	add	r7, sp, #0
 800d66c:	6078      	str	r0, [r7, #4]
 800d66e:	460b      	mov	r3, r1
 800d670:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800d67a:	2300      	movs	r3, #0
 800d67c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800d67e:	68fb      	ldr	r3, [r7, #12]
 800d680:	885b      	ldrh	r3, [r3, #2]
 800d682:	b29a      	uxth	r2, r3
 800d684:	68fb      	ldr	r3, [r7, #12]
 800d686:	781b      	ldrb	r3, [r3, #0]
 800d688:	b29b      	uxth	r3, r3
 800d68a:	429a      	cmp	r2, r3
 800d68c:	d920      	bls.n	800d6d0 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800d68e:	68fb      	ldr	r3, [r7, #12]
 800d690:	781b      	ldrb	r3, [r3, #0]
 800d692:	b29b      	uxth	r3, r3
 800d694:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800d696:	e013      	b.n	800d6c0 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800d698:	f107 030a 	add.w	r3, r7, #10
 800d69c:	4619      	mov	r1, r3
 800d69e:	6978      	ldr	r0, [r7, #20]
 800d6a0:	f000 f81b 	bl	800d6da <USBD_GetNextDesc>
 800d6a4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800d6a6:	697b      	ldr	r3, [r7, #20]
 800d6a8:	785b      	ldrb	r3, [r3, #1]
 800d6aa:	2b05      	cmp	r3, #5
 800d6ac:	d108      	bne.n	800d6c0 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800d6ae:	697b      	ldr	r3, [r7, #20]
 800d6b0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800d6b2:	693b      	ldr	r3, [r7, #16]
 800d6b4:	789b      	ldrb	r3, [r3, #2]
 800d6b6:	78fa      	ldrb	r2, [r7, #3]
 800d6b8:	429a      	cmp	r2, r3
 800d6ba:	d008      	beq.n	800d6ce <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800d6bc:	2300      	movs	r3, #0
 800d6be:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	885b      	ldrh	r3, [r3, #2]
 800d6c4:	b29a      	uxth	r2, r3
 800d6c6:	897b      	ldrh	r3, [r7, #10]
 800d6c8:	429a      	cmp	r2, r3
 800d6ca:	d8e5      	bhi.n	800d698 <USBD_GetEpDesc+0x32>
 800d6cc:	e000      	b.n	800d6d0 <USBD_GetEpDesc+0x6a>
          break;
 800d6ce:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800d6d0:	693b      	ldr	r3, [r7, #16]
}
 800d6d2:	4618      	mov	r0, r3
 800d6d4:	3718      	adds	r7, #24
 800d6d6:	46bd      	mov	sp, r7
 800d6d8:	bd80      	pop	{r7, pc}

0800d6da <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800d6da:	b480      	push	{r7}
 800d6dc:	b085      	sub	sp, #20
 800d6de:	af00      	add	r7, sp, #0
 800d6e0:	6078      	str	r0, [r7, #4]
 800d6e2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800d6e8:	683b      	ldr	r3, [r7, #0]
 800d6ea:	881a      	ldrh	r2, [r3, #0]
 800d6ec:	68fb      	ldr	r3, [r7, #12]
 800d6ee:	781b      	ldrb	r3, [r3, #0]
 800d6f0:	b29b      	uxth	r3, r3
 800d6f2:	4413      	add	r3, r2
 800d6f4:	b29a      	uxth	r2, r3
 800d6f6:	683b      	ldr	r3, [r7, #0]
 800d6f8:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800d6fa:	68fb      	ldr	r3, [r7, #12]
 800d6fc:	781b      	ldrb	r3, [r3, #0]
 800d6fe:	461a      	mov	r2, r3
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	4413      	add	r3, r2
 800d704:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800d706:	68fb      	ldr	r3, [r7, #12]
}
 800d708:	4618      	mov	r0, r3
 800d70a:	3714      	adds	r7, #20
 800d70c:	46bd      	mov	sp, r7
 800d70e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d712:	4770      	bx	lr

0800d714 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800d714:	b480      	push	{r7}
 800d716:	b087      	sub	sp, #28
 800d718:	af00      	add	r7, sp, #0
 800d71a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800d720:	697b      	ldr	r3, [r7, #20]
 800d722:	781b      	ldrb	r3, [r3, #0]
 800d724:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800d726:	697b      	ldr	r3, [r7, #20]
 800d728:	3301      	adds	r3, #1
 800d72a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800d72c:	697b      	ldr	r3, [r7, #20]
 800d72e:	781b      	ldrb	r3, [r3, #0]
 800d730:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800d732:	8a3b      	ldrh	r3, [r7, #16]
 800d734:	021b      	lsls	r3, r3, #8
 800d736:	b21a      	sxth	r2, r3
 800d738:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d73c:	4313      	orrs	r3, r2
 800d73e:	b21b      	sxth	r3, r3
 800d740:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800d742:	89fb      	ldrh	r3, [r7, #14]
}
 800d744:	4618      	mov	r0, r3
 800d746:	371c      	adds	r7, #28
 800d748:	46bd      	mov	sp, r7
 800d74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d74e:	4770      	bx	lr

0800d750 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d750:	b580      	push	{r7, lr}
 800d752:	b084      	sub	sp, #16
 800d754:	af00      	add	r7, sp, #0
 800d756:	6078      	str	r0, [r7, #4]
 800d758:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d75a:	2300      	movs	r3, #0
 800d75c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d75e:	683b      	ldr	r3, [r7, #0]
 800d760:	781b      	ldrb	r3, [r3, #0]
 800d762:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d766:	2b40      	cmp	r3, #64	; 0x40
 800d768:	d005      	beq.n	800d776 <USBD_StdDevReq+0x26>
 800d76a:	2b40      	cmp	r3, #64	; 0x40
 800d76c:	d857      	bhi.n	800d81e <USBD_StdDevReq+0xce>
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d00f      	beq.n	800d792 <USBD_StdDevReq+0x42>
 800d772:	2b20      	cmp	r3, #32
 800d774:	d153      	bne.n	800d81e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	32ae      	adds	r2, #174	; 0xae
 800d780:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d784:	689b      	ldr	r3, [r3, #8]
 800d786:	6839      	ldr	r1, [r7, #0]
 800d788:	6878      	ldr	r0, [r7, #4]
 800d78a:	4798      	blx	r3
 800d78c:	4603      	mov	r3, r0
 800d78e:	73fb      	strb	r3, [r7, #15]
      break;
 800d790:	e04a      	b.n	800d828 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d792:	683b      	ldr	r3, [r7, #0]
 800d794:	785b      	ldrb	r3, [r3, #1]
 800d796:	2b09      	cmp	r3, #9
 800d798:	d83b      	bhi.n	800d812 <USBD_StdDevReq+0xc2>
 800d79a:	a201      	add	r2, pc, #4	; (adr r2, 800d7a0 <USBD_StdDevReq+0x50>)
 800d79c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7a0:	0800d7f5 	.word	0x0800d7f5
 800d7a4:	0800d809 	.word	0x0800d809
 800d7a8:	0800d813 	.word	0x0800d813
 800d7ac:	0800d7ff 	.word	0x0800d7ff
 800d7b0:	0800d813 	.word	0x0800d813
 800d7b4:	0800d7d3 	.word	0x0800d7d3
 800d7b8:	0800d7c9 	.word	0x0800d7c9
 800d7bc:	0800d813 	.word	0x0800d813
 800d7c0:	0800d7eb 	.word	0x0800d7eb
 800d7c4:	0800d7dd 	.word	0x0800d7dd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800d7c8:	6839      	ldr	r1, [r7, #0]
 800d7ca:	6878      	ldr	r0, [r7, #4]
 800d7cc:	f000 fa3c 	bl	800dc48 <USBD_GetDescriptor>
          break;
 800d7d0:	e024      	b.n	800d81c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800d7d2:	6839      	ldr	r1, [r7, #0]
 800d7d4:	6878      	ldr	r0, [r7, #4]
 800d7d6:	f000 fba1 	bl	800df1c <USBD_SetAddress>
          break;
 800d7da:	e01f      	b.n	800d81c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800d7dc:	6839      	ldr	r1, [r7, #0]
 800d7de:	6878      	ldr	r0, [r7, #4]
 800d7e0:	f000 fbe0 	bl	800dfa4 <USBD_SetConfig>
 800d7e4:	4603      	mov	r3, r0
 800d7e6:	73fb      	strb	r3, [r7, #15]
          break;
 800d7e8:	e018      	b.n	800d81c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800d7ea:	6839      	ldr	r1, [r7, #0]
 800d7ec:	6878      	ldr	r0, [r7, #4]
 800d7ee:	f000 fc83 	bl	800e0f8 <USBD_GetConfig>
          break;
 800d7f2:	e013      	b.n	800d81c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800d7f4:	6839      	ldr	r1, [r7, #0]
 800d7f6:	6878      	ldr	r0, [r7, #4]
 800d7f8:	f000 fcb4 	bl	800e164 <USBD_GetStatus>
          break;
 800d7fc:	e00e      	b.n	800d81c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800d7fe:	6839      	ldr	r1, [r7, #0]
 800d800:	6878      	ldr	r0, [r7, #4]
 800d802:	f000 fce3 	bl	800e1cc <USBD_SetFeature>
          break;
 800d806:	e009      	b.n	800d81c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800d808:	6839      	ldr	r1, [r7, #0]
 800d80a:	6878      	ldr	r0, [r7, #4]
 800d80c:	f000 fd07 	bl	800e21e <USBD_ClrFeature>
          break;
 800d810:	e004      	b.n	800d81c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800d812:	6839      	ldr	r1, [r7, #0]
 800d814:	6878      	ldr	r0, [r7, #4]
 800d816:	f000 fd5e 	bl	800e2d6 <USBD_CtlError>
          break;
 800d81a:	bf00      	nop
      }
      break;
 800d81c:	e004      	b.n	800d828 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800d81e:	6839      	ldr	r1, [r7, #0]
 800d820:	6878      	ldr	r0, [r7, #4]
 800d822:	f000 fd58 	bl	800e2d6 <USBD_CtlError>
      break;
 800d826:	bf00      	nop
  }

  return ret;
 800d828:	7bfb      	ldrb	r3, [r7, #15]
}
 800d82a:	4618      	mov	r0, r3
 800d82c:	3710      	adds	r7, #16
 800d82e:	46bd      	mov	sp, r7
 800d830:	bd80      	pop	{r7, pc}
 800d832:	bf00      	nop

0800d834 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d834:	b580      	push	{r7, lr}
 800d836:	b084      	sub	sp, #16
 800d838:	af00      	add	r7, sp, #0
 800d83a:	6078      	str	r0, [r7, #4]
 800d83c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d83e:	2300      	movs	r3, #0
 800d840:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d842:	683b      	ldr	r3, [r7, #0]
 800d844:	781b      	ldrb	r3, [r3, #0]
 800d846:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d84a:	2b40      	cmp	r3, #64	; 0x40
 800d84c:	d005      	beq.n	800d85a <USBD_StdItfReq+0x26>
 800d84e:	2b40      	cmp	r3, #64	; 0x40
 800d850:	d852      	bhi.n	800d8f8 <USBD_StdItfReq+0xc4>
 800d852:	2b00      	cmp	r3, #0
 800d854:	d001      	beq.n	800d85a <USBD_StdItfReq+0x26>
 800d856:	2b20      	cmp	r3, #32
 800d858:	d14e      	bne.n	800d8f8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d860:	b2db      	uxtb	r3, r3
 800d862:	3b01      	subs	r3, #1
 800d864:	2b02      	cmp	r3, #2
 800d866:	d840      	bhi.n	800d8ea <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800d868:	683b      	ldr	r3, [r7, #0]
 800d86a:	889b      	ldrh	r3, [r3, #4]
 800d86c:	b2db      	uxtb	r3, r3
 800d86e:	2b01      	cmp	r3, #1
 800d870:	d836      	bhi.n	800d8e0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800d872:	683b      	ldr	r3, [r7, #0]
 800d874:	889b      	ldrh	r3, [r3, #4]
 800d876:	b2db      	uxtb	r3, r3
 800d878:	4619      	mov	r1, r3
 800d87a:	6878      	ldr	r0, [r7, #4]
 800d87c:	f7ff fed9 	bl	800d632 <USBD_CoreFindIF>
 800d880:	4603      	mov	r3, r0
 800d882:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d884:	7bbb      	ldrb	r3, [r7, #14]
 800d886:	2bff      	cmp	r3, #255	; 0xff
 800d888:	d01d      	beq.n	800d8c6 <USBD_StdItfReq+0x92>
 800d88a:	7bbb      	ldrb	r3, [r7, #14]
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d11a      	bne.n	800d8c6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800d890:	7bba      	ldrb	r2, [r7, #14]
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	32ae      	adds	r2, #174	; 0xae
 800d896:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d89a:	689b      	ldr	r3, [r3, #8]
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d00f      	beq.n	800d8c0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800d8a0:	7bba      	ldrb	r2, [r7, #14]
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800d8a8:	7bba      	ldrb	r2, [r7, #14]
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	32ae      	adds	r2, #174	; 0xae
 800d8ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d8b2:	689b      	ldr	r3, [r3, #8]
 800d8b4:	6839      	ldr	r1, [r7, #0]
 800d8b6:	6878      	ldr	r0, [r7, #4]
 800d8b8:	4798      	blx	r3
 800d8ba:	4603      	mov	r3, r0
 800d8bc:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800d8be:	e004      	b.n	800d8ca <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800d8c0:	2303      	movs	r3, #3
 800d8c2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800d8c4:	e001      	b.n	800d8ca <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800d8c6:	2303      	movs	r3, #3
 800d8c8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800d8ca:	683b      	ldr	r3, [r7, #0]
 800d8cc:	88db      	ldrh	r3, [r3, #6]
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d110      	bne.n	800d8f4 <USBD_StdItfReq+0xc0>
 800d8d2:	7bfb      	ldrb	r3, [r7, #15]
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d10d      	bne.n	800d8f4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800d8d8:	6878      	ldr	r0, [r7, #4]
 800d8da:	f000 fdc7 	bl	800e46c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800d8de:	e009      	b.n	800d8f4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800d8e0:	6839      	ldr	r1, [r7, #0]
 800d8e2:	6878      	ldr	r0, [r7, #4]
 800d8e4:	f000 fcf7 	bl	800e2d6 <USBD_CtlError>
          break;
 800d8e8:	e004      	b.n	800d8f4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800d8ea:	6839      	ldr	r1, [r7, #0]
 800d8ec:	6878      	ldr	r0, [r7, #4]
 800d8ee:	f000 fcf2 	bl	800e2d6 <USBD_CtlError>
          break;
 800d8f2:	e000      	b.n	800d8f6 <USBD_StdItfReq+0xc2>
          break;
 800d8f4:	bf00      	nop
      }
      break;
 800d8f6:	e004      	b.n	800d902 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800d8f8:	6839      	ldr	r1, [r7, #0]
 800d8fa:	6878      	ldr	r0, [r7, #4]
 800d8fc:	f000 fceb 	bl	800e2d6 <USBD_CtlError>
      break;
 800d900:	bf00      	nop
  }

  return ret;
 800d902:	7bfb      	ldrb	r3, [r7, #15]
}
 800d904:	4618      	mov	r0, r3
 800d906:	3710      	adds	r7, #16
 800d908:	46bd      	mov	sp, r7
 800d90a:	bd80      	pop	{r7, pc}

0800d90c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d90c:	b580      	push	{r7, lr}
 800d90e:	b084      	sub	sp, #16
 800d910:	af00      	add	r7, sp, #0
 800d912:	6078      	str	r0, [r7, #4]
 800d914:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800d916:	2300      	movs	r3, #0
 800d918:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800d91a:	683b      	ldr	r3, [r7, #0]
 800d91c:	889b      	ldrh	r3, [r3, #4]
 800d91e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d920:	683b      	ldr	r3, [r7, #0]
 800d922:	781b      	ldrb	r3, [r3, #0]
 800d924:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d928:	2b40      	cmp	r3, #64	; 0x40
 800d92a:	d007      	beq.n	800d93c <USBD_StdEPReq+0x30>
 800d92c:	2b40      	cmp	r3, #64	; 0x40
 800d92e:	f200 817f 	bhi.w	800dc30 <USBD_StdEPReq+0x324>
 800d932:	2b00      	cmp	r3, #0
 800d934:	d02a      	beq.n	800d98c <USBD_StdEPReq+0x80>
 800d936:	2b20      	cmp	r3, #32
 800d938:	f040 817a 	bne.w	800dc30 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800d93c:	7bbb      	ldrb	r3, [r7, #14]
 800d93e:	4619      	mov	r1, r3
 800d940:	6878      	ldr	r0, [r7, #4]
 800d942:	f7ff fe83 	bl	800d64c <USBD_CoreFindEP>
 800d946:	4603      	mov	r3, r0
 800d948:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d94a:	7b7b      	ldrb	r3, [r7, #13]
 800d94c:	2bff      	cmp	r3, #255	; 0xff
 800d94e:	f000 8174 	beq.w	800dc3a <USBD_StdEPReq+0x32e>
 800d952:	7b7b      	ldrb	r3, [r7, #13]
 800d954:	2b00      	cmp	r3, #0
 800d956:	f040 8170 	bne.w	800dc3a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800d95a:	7b7a      	ldrb	r2, [r7, #13]
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800d962:	7b7a      	ldrb	r2, [r7, #13]
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	32ae      	adds	r2, #174	; 0xae
 800d968:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d96c:	689b      	ldr	r3, [r3, #8]
 800d96e:	2b00      	cmp	r3, #0
 800d970:	f000 8163 	beq.w	800dc3a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800d974:	7b7a      	ldrb	r2, [r7, #13]
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	32ae      	adds	r2, #174	; 0xae
 800d97a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d97e:	689b      	ldr	r3, [r3, #8]
 800d980:	6839      	ldr	r1, [r7, #0]
 800d982:	6878      	ldr	r0, [r7, #4]
 800d984:	4798      	blx	r3
 800d986:	4603      	mov	r3, r0
 800d988:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800d98a:	e156      	b.n	800dc3a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d98c:	683b      	ldr	r3, [r7, #0]
 800d98e:	785b      	ldrb	r3, [r3, #1]
 800d990:	2b03      	cmp	r3, #3
 800d992:	d008      	beq.n	800d9a6 <USBD_StdEPReq+0x9a>
 800d994:	2b03      	cmp	r3, #3
 800d996:	f300 8145 	bgt.w	800dc24 <USBD_StdEPReq+0x318>
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	f000 809b 	beq.w	800dad6 <USBD_StdEPReq+0x1ca>
 800d9a0:	2b01      	cmp	r3, #1
 800d9a2:	d03c      	beq.n	800da1e <USBD_StdEPReq+0x112>
 800d9a4:	e13e      	b.n	800dc24 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d9ac:	b2db      	uxtb	r3, r3
 800d9ae:	2b02      	cmp	r3, #2
 800d9b0:	d002      	beq.n	800d9b8 <USBD_StdEPReq+0xac>
 800d9b2:	2b03      	cmp	r3, #3
 800d9b4:	d016      	beq.n	800d9e4 <USBD_StdEPReq+0xd8>
 800d9b6:	e02c      	b.n	800da12 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d9b8:	7bbb      	ldrb	r3, [r7, #14]
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d00d      	beq.n	800d9da <USBD_StdEPReq+0xce>
 800d9be:	7bbb      	ldrb	r3, [r7, #14]
 800d9c0:	2b80      	cmp	r3, #128	; 0x80
 800d9c2:	d00a      	beq.n	800d9da <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d9c4:	7bbb      	ldrb	r3, [r7, #14]
 800d9c6:	4619      	mov	r1, r3
 800d9c8:	6878      	ldr	r0, [r7, #4]
 800d9ca:	f001 f96d 	bl	800eca8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d9ce:	2180      	movs	r1, #128	; 0x80
 800d9d0:	6878      	ldr	r0, [r7, #4]
 800d9d2:	f001 f969 	bl	800eca8 <USBD_LL_StallEP>
 800d9d6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d9d8:	e020      	b.n	800da1c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800d9da:	6839      	ldr	r1, [r7, #0]
 800d9dc:	6878      	ldr	r0, [r7, #4]
 800d9de:	f000 fc7a 	bl	800e2d6 <USBD_CtlError>
              break;
 800d9e2:	e01b      	b.n	800da1c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d9e4:	683b      	ldr	r3, [r7, #0]
 800d9e6:	885b      	ldrh	r3, [r3, #2]
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d10e      	bne.n	800da0a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800d9ec:	7bbb      	ldrb	r3, [r7, #14]
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d00b      	beq.n	800da0a <USBD_StdEPReq+0xfe>
 800d9f2:	7bbb      	ldrb	r3, [r7, #14]
 800d9f4:	2b80      	cmp	r3, #128	; 0x80
 800d9f6:	d008      	beq.n	800da0a <USBD_StdEPReq+0xfe>
 800d9f8:	683b      	ldr	r3, [r7, #0]
 800d9fa:	88db      	ldrh	r3, [r3, #6]
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d104      	bne.n	800da0a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800da00:	7bbb      	ldrb	r3, [r7, #14]
 800da02:	4619      	mov	r1, r3
 800da04:	6878      	ldr	r0, [r7, #4]
 800da06:	f001 f94f 	bl	800eca8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800da0a:	6878      	ldr	r0, [r7, #4]
 800da0c:	f000 fd2e 	bl	800e46c <USBD_CtlSendStatus>

              break;
 800da10:	e004      	b.n	800da1c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800da12:	6839      	ldr	r1, [r7, #0]
 800da14:	6878      	ldr	r0, [r7, #4]
 800da16:	f000 fc5e 	bl	800e2d6 <USBD_CtlError>
              break;
 800da1a:	bf00      	nop
          }
          break;
 800da1c:	e107      	b.n	800dc2e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800da24:	b2db      	uxtb	r3, r3
 800da26:	2b02      	cmp	r3, #2
 800da28:	d002      	beq.n	800da30 <USBD_StdEPReq+0x124>
 800da2a:	2b03      	cmp	r3, #3
 800da2c:	d016      	beq.n	800da5c <USBD_StdEPReq+0x150>
 800da2e:	e04b      	b.n	800dac8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800da30:	7bbb      	ldrb	r3, [r7, #14]
 800da32:	2b00      	cmp	r3, #0
 800da34:	d00d      	beq.n	800da52 <USBD_StdEPReq+0x146>
 800da36:	7bbb      	ldrb	r3, [r7, #14]
 800da38:	2b80      	cmp	r3, #128	; 0x80
 800da3a:	d00a      	beq.n	800da52 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800da3c:	7bbb      	ldrb	r3, [r7, #14]
 800da3e:	4619      	mov	r1, r3
 800da40:	6878      	ldr	r0, [r7, #4]
 800da42:	f001 f931 	bl	800eca8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800da46:	2180      	movs	r1, #128	; 0x80
 800da48:	6878      	ldr	r0, [r7, #4]
 800da4a:	f001 f92d 	bl	800eca8 <USBD_LL_StallEP>
 800da4e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800da50:	e040      	b.n	800dad4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800da52:	6839      	ldr	r1, [r7, #0]
 800da54:	6878      	ldr	r0, [r7, #4]
 800da56:	f000 fc3e 	bl	800e2d6 <USBD_CtlError>
              break;
 800da5a:	e03b      	b.n	800dad4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800da5c:	683b      	ldr	r3, [r7, #0]
 800da5e:	885b      	ldrh	r3, [r3, #2]
 800da60:	2b00      	cmp	r3, #0
 800da62:	d136      	bne.n	800dad2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800da64:	7bbb      	ldrb	r3, [r7, #14]
 800da66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d004      	beq.n	800da78 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800da6e:	7bbb      	ldrb	r3, [r7, #14]
 800da70:	4619      	mov	r1, r3
 800da72:	6878      	ldr	r0, [r7, #4]
 800da74:	f001 f937 	bl	800ece6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800da78:	6878      	ldr	r0, [r7, #4]
 800da7a:	f000 fcf7 	bl	800e46c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800da7e:	7bbb      	ldrb	r3, [r7, #14]
 800da80:	4619      	mov	r1, r3
 800da82:	6878      	ldr	r0, [r7, #4]
 800da84:	f7ff fde2 	bl	800d64c <USBD_CoreFindEP>
 800da88:	4603      	mov	r3, r0
 800da8a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800da8c:	7b7b      	ldrb	r3, [r7, #13]
 800da8e:	2bff      	cmp	r3, #255	; 0xff
 800da90:	d01f      	beq.n	800dad2 <USBD_StdEPReq+0x1c6>
 800da92:	7b7b      	ldrb	r3, [r7, #13]
 800da94:	2b00      	cmp	r3, #0
 800da96:	d11c      	bne.n	800dad2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800da98:	7b7a      	ldrb	r2, [r7, #13]
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800daa0:	7b7a      	ldrb	r2, [r7, #13]
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	32ae      	adds	r2, #174	; 0xae
 800daa6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800daaa:	689b      	ldr	r3, [r3, #8]
 800daac:	2b00      	cmp	r3, #0
 800daae:	d010      	beq.n	800dad2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800dab0:	7b7a      	ldrb	r2, [r7, #13]
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	32ae      	adds	r2, #174	; 0xae
 800dab6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800daba:	689b      	ldr	r3, [r3, #8]
 800dabc:	6839      	ldr	r1, [r7, #0]
 800dabe:	6878      	ldr	r0, [r7, #4]
 800dac0:	4798      	blx	r3
 800dac2:	4603      	mov	r3, r0
 800dac4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800dac6:	e004      	b.n	800dad2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800dac8:	6839      	ldr	r1, [r7, #0]
 800daca:	6878      	ldr	r0, [r7, #4]
 800dacc:	f000 fc03 	bl	800e2d6 <USBD_CtlError>
              break;
 800dad0:	e000      	b.n	800dad4 <USBD_StdEPReq+0x1c8>
              break;
 800dad2:	bf00      	nop
          }
          break;
 800dad4:	e0ab      	b.n	800dc2e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dadc:	b2db      	uxtb	r3, r3
 800dade:	2b02      	cmp	r3, #2
 800dae0:	d002      	beq.n	800dae8 <USBD_StdEPReq+0x1dc>
 800dae2:	2b03      	cmp	r3, #3
 800dae4:	d032      	beq.n	800db4c <USBD_StdEPReq+0x240>
 800dae6:	e097      	b.n	800dc18 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800dae8:	7bbb      	ldrb	r3, [r7, #14]
 800daea:	2b00      	cmp	r3, #0
 800daec:	d007      	beq.n	800dafe <USBD_StdEPReq+0x1f2>
 800daee:	7bbb      	ldrb	r3, [r7, #14]
 800daf0:	2b80      	cmp	r3, #128	; 0x80
 800daf2:	d004      	beq.n	800dafe <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800daf4:	6839      	ldr	r1, [r7, #0]
 800daf6:	6878      	ldr	r0, [r7, #4]
 800daf8:	f000 fbed 	bl	800e2d6 <USBD_CtlError>
                break;
 800dafc:	e091      	b.n	800dc22 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800dafe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800db02:	2b00      	cmp	r3, #0
 800db04:	da0b      	bge.n	800db1e <USBD_StdEPReq+0x212>
 800db06:	7bbb      	ldrb	r3, [r7, #14]
 800db08:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800db0c:	4613      	mov	r3, r2
 800db0e:	009b      	lsls	r3, r3, #2
 800db10:	4413      	add	r3, r2
 800db12:	009b      	lsls	r3, r3, #2
 800db14:	3310      	adds	r3, #16
 800db16:	687a      	ldr	r2, [r7, #4]
 800db18:	4413      	add	r3, r2
 800db1a:	3304      	adds	r3, #4
 800db1c:	e00b      	b.n	800db36 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800db1e:	7bbb      	ldrb	r3, [r7, #14]
 800db20:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800db24:	4613      	mov	r3, r2
 800db26:	009b      	lsls	r3, r3, #2
 800db28:	4413      	add	r3, r2
 800db2a:	009b      	lsls	r3, r3, #2
 800db2c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800db30:	687a      	ldr	r2, [r7, #4]
 800db32:	4413      	add	r3, r2
 800db34:	3304      	adds	r3, #4
 800db36:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800db38:	68bb      	ldr	r3, [r7, #8]
 800db3a:	2200      	movs	r2, #0
 800db3c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800db3e:	68bb      	ldr	r3, [r7, #8]
 800db40:	2202      	movs	r2, #2
 800db42:	4619      	mov	r1, r3
 800db44:	6878      	ldr	r0, [r7, #4]
 800db46:	f000 fc37 	bl	800e3b8 <USBD_CtlSendData>
              break;
 800db4a:	e06a      	b.n	800dc22 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800db4c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800db50:	2b00      	cmp	r3, #0
 800db52:	da11      	bge.n	800db78 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800db54:	7bbb      	ldrb	r3, [r7, #14]
 800db56:	f003 020f 	and.w	r2, r3, #15
 800db5a:	6879      	ldr	r1, [r7, #4]
 800db5c:	4613      	mov	r3, r2
 800db5e:	009b      	lsls	r3, r3, #2
 800db60:	4413      	add	r3, r2
 800db62:	009b      	lsls	r3, r3, #2
 800db64:	440b      	add	r3, r1
 800db66:	3324      	adds	r3, #36	; 0x24
 800db68:	881b      	ldrh	r3, [r3, #0]
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d117      	bne.n	800db9e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800db6e:	6839      	ldr	r1, [r7, #0]
 800db70:	6878      	ldr	r0, [r7, #4]
 800db72:	f000 fbb0 	bl	800e2d6 <USBD_CtlError>
                  break;
 800db76:	e054      	b.n	800dc22 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800db78:	7bbb      	ldrb	r3, [r7, #14]
 800db7a:	f003 020f 	and.w	r2, r3, #15
 800db7e:	6879      	ldr	r1, [r7, #4]
 800db80:	4613      	mov	r3, r2
 800db82:	009b      	lsls	r3, r3, #2
 800db84:	4413      	add	r3, r2
 800db86:	009b      	lsls	r3, r3, #2
 800db88:	440b      	add	r3, r1
 800db8a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800db8e:	881b      	ldrh	r3, [r3, #0]
 800db90:	2b00      	cmp	r3, #0
 800db92:	d104      	bne.n	800db9e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800db94:	6839      	ldr	r1, [r7, #0]
 800db96:	6878      	ldr	r0, [r7, #4]
 800db98:	f000 fb9d 	bl	800e2d6 <USBD_CtlError>
                  break;
 800db9c:	e041      	b.n	800dc22 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800db9e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	da0b      	bge.n	800dbbe <USBD_StdEPReq+0x2b2>
 800dba6:	7bbb      	ldrb	r3, [r7, #14]
 800dba8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800dbac:	4613      	mov	r3, r2
 800dbae:	009b      	lsls	r3, r3, #2
 800dbb0:	4413      	add	r3, r2
 800dbb2:	009b      	lsls	r3, r3, #2
 800dbb4:	3310      	adds	r3, #16
 800dbb6:	687a      	ldr	r2, [r7, #4]
 800dbb8:	4413      	add	r3, r2
 800dbba:	3304      	adds	r3, #4
 800dbbc:	e00b      	b.n	800dbd6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800dbbe:	7bbb      	ldrb	r3, [r7, #14]
 800dbc0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800dbc4:	4613      	mov	r3, r2
 800dbc6:	009b      	lsls	r3, r3, #2
 800dbc8:	4413      	add	r3, r2
 800dbca:	009b      	lsls	r3, r3, #2
 800dbcc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800dbd0:	687a      	ldr	r2, [r7, #4]
 800dbd2:	4413      	add	r3, r2
 800dbd4:	3304      	adds	r3, #4
 800dbd6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800dbd8:	7bbb      	ldrb	r3, [r7, #14]
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d002      	beq.n	800dbe4 <USBD_StdEPReq+0x2d8>
 800dbde:	7bbb      	ldrb	r3, [r7, #14]
 800dbe0:	2b80      	cmp	r3, #128	; 0x80
 800dbe2:	d103      	bne.n	800dbec <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800dbe4:	68bb      	ldr	r3, [r7, #8]
 800dbe6:	2200      	movs	r2, #0
 800dbe8:	601a      	str	r2, [r3, #0]
 800dbea:	e00e      	b.n	800dc0a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800dbec:	7bbb      	ldrb	r3, [r7, #14]
 800dbee:	4619      	mov	r1, r3
 800dbf0:	6878      	ldr	r0, [r7, #4]
 800dbf2:	f001 f897 	bl	800ed24 <USBD_LL_IsStallEP>
 800dbf6:	4603      	mov	r3, r0
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d003      	beq.n	800dc04 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800dbfc:	68bb      	ldr	r3, [r7, #8]
 800dbfe:	2201      	movs	r2, #1
 800dc00:	601a      	str	r2, [r3, #0]
 800dc02:	e002      	b.n	800dc0a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800dc04:	68bb      	ldr	r3, [r7, #8]
 800dc06:	2200      	movs	r2, #0
 800dc08:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800dc0a:	68bb      	ldr	r3, [r7, #8]
 800dc0c:	2202      	movs	r2, #2
 800dc0e:	4619      	mov	r1, r3
 800dc10:	6878      	ldr	r0, [r7, #4]
 800dc12:	f000 fbd1 	bl	800e3b8 <USBD_CtlSendData>
              break;
 800dc16:	e004      	b.n	800dc22 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800dc18:	6839      	ldr	r1, [r7, #0]
 800dc1a:	6878      	ldr	r0, [r7, #4]
 800dc1c:	f000 fb5b 	bl	800e2d6 <USBD_CtlError>
              break;
 800dc20:	bf00      	nop
          }
          break;
 800dc22:	e004      	b.n	800dc2e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800dc24:	6839      	ldr	r1, [r7, #0]
 800dc26:	6878      	ldr	r0, [r7, #4]
 800dc28:	f000 fb55 	bl	800e2d6 <USBD_CtlError>
          break;
 800dc2c:	bf00      	nop
      }
      break;
 800dc2e:	e005      	b.n	800dc3c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800dc30:	6839      	ldr	r1, [r7, #0]
 800dc32:	6878      	ldr	r0, [r7, #4]
 800dc34:	f000 fb4f 	bl	800e2d6 <USBD_CtlError>
      break;
 800dc38:	e000      	b.n	800dc3c <USBD_StdEPReq+0x330>
      break;
 800dc3a:	bf00      	nop
  }

  return ret;
 800dc3c:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc3e:	4618      	mov	r0, r3
 800dc40:	3710      	adds	r7, #16
 800dc42:	46bd      	mov	sp, r7
 800dc44:	bd80      	pop	{r7, pc}
	...

0800dc48 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dc48:	b580      	push	{r7, lr}
 800dc4a:	b084      	sub	sp, #16
 800dc4c:	af00      	add	r7, sp, #0
 800dc4e:	6078      	str	r0, [r7, #4]
 800dc50:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800dc52:	2300      	movs	r3, #0
 800dc54:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800dc56:	2300      	movs	r3, #0
 800dc58:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800dc5a:	2300      	movs	r3, #0
 800dc5c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800dc5e:	683b      	ldr	r3, [r7, #0]
 800dc60:	885b      	ldrh	r3, [r3, #2]
 800dc62:	0a1b      	lsrs	r3, r3, #8
 800dc64:	b29b      	uxth	r3, r3
 800dc66:	3b01      	subs	r3, #1
 800dc68:	2b06      	cmp	r3, #6
 800dc6a:	f200 8128 	bhi.w	800debe <USBD_GetDescriptor+0x276>
 800dc6e:	a201      	add	r2, pc, #4	; (adr r2, 800dc74 <USBD_GetDescriptor+0x2c>)
 800dc70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc74:	0800dc91 	.word	0x0800dc91
 800dc78:	0800dca9 	.word	0x0800dca9
 800dc7c:	0800dce9 	.word	0x0800dce9
 800dc80:	0800debf 	.word	0x0800debf
 800dc84:	0800debf 	.word	0x0800debf
 800dc88:	0800de5f 	.word	0x0800de5f
 800dc8c:	0800de8b 	.word	0x0800de8b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dc96:	681b      	ldr	r3, [r3, #0]
 800dc98:	687a      	ldr	r2, [r7, #4]
 800dc9a:	7c12      	ldrb	r2, [r2, #16]
 800dc9c:	f107 0108 	add.w	r1, r7, #8
 800dca0:	4610      	mov	r0, r2
 800dca2:	4798      	blx	r3
 800dca4:	60f8      	str	r0, [r7, #12]
      break;
 800dca6:	e112      	b.n	800dece <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	7c1b      	ldrb	r3, [r3, #16]
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d10d      	bne.n	800dccc <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dcb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dcb8:	f107 0208 	add.w	r2, r7, #8
 800dcbc:	4610      	mov	r0, r2
 800dcbe:	4798      	blx	r3
 800dcc0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	3301      	adds	r3, #1
 800dcc6:	2202      	movs	r2, #2
 800dcc8:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800dcca:	e100      	b.n	800dece <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dcd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dcd4:	f107 0208 	add.w	r2, r7, #8
 800dcd8:	4610      	mov	r0, r2
 800dcda:	4798      	blx	r3
 800dcdc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800dcde:	68fb      	ldr	r3, [r7, #12]
 800dce0:	3301      	adds	r3, #1
 800dce2:	2202      	movs	r2, #2
 800dce4:	701a      	strb	r2, [r3, #0]
      break;
 800dce6:	e0f2      	b.n	800dece <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800dce8:	683b      	ldr	r3, [r7, #0]
 800dcea:	885b      	ldrh	r3, [r3, #2]
 800dcec:	b2db      	uxtb	r3, r3
 800dcee:	2b05      	cmp	r3, #5
 800dcf0:	f200 80ac 	bhi.w	800de4c <USBD_GetDescriptor+0x204>
 800dcf4:	a201      	add	r2, pc, #4	; (adr r2, 800dcfc <USBD_GetDescriptor+0xb4>)
 800dcf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dcfa:	bf00      	nop
 800dcfc:	0800dd15 	.word	0x0800dd15
 800dd00:	0800dd49 	.word	0x0800dd49
 800dd04:	0800dd7d 	.word	0x0800dd7d
 800dd08:	0800ddb1 	.word	0x0800ddb1
 800dd0c:	0800dde5 	.word	0x0800dde5
 800dd10:	0800de19 	.word	0x0800de19
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dd1a:	685b      	ldr	r3, [r3, #4]
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	d00b      	beq.n	800dd38 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dd26:	685b      	ldr	r3, [r3, #4]
 800dd28:	687a      	ldr	r2, [r7, #4]
 800dd2a:	7c12      	ldrb	r2, [r2, #16]
 800dd2c:	f107 0108 	add.w	r1, r7, #8
 800dd30:	4610      	mov	r0, r2
 800dd32:	4798      	blx	r3
 800dd34:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dd36:	e091      	b.n	800de5c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800dd38:	6839      	ldr	r1, [r7, #0]
 800dd3a:	6878      	ldr	r0, [r7, #4]
 800dd3c:	f000 facb 	bl	800e2d6 <USBD_CtlError>
            err++;
 800dd40:	7afb      	ldrb	r3, [r7, #11]
 800dd42:	3301      	adds	r3, #1
 800dd44:	72fb      	strb	r3, [r7, #11]
          break;
 800dd46:	e089      	b.n	800de5c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dd4e:	689b      	ldr	r3, [r3, #8]
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d00b      	beq.n	800dd6c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dd5a:	689b      	ldr	r3, [r3, #8]
 800dd5c:	687a      	ldr	r2, [r7, #4]
 800dd5e:	7c12      	ldrb	r2, [r2, #16]
 800dd60:	f107 0108 	add.w	r1, r7, #8
 800dd64:	4610      	mov	r0, r2
 800dd66:	4798      	blx	r3
 800dd68:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dd6a:	e077      	b.n	800de5c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800dd6c:	6839      	ldr	r1, [r7, #0]
 800dd6e:	6878      	ldr	r0, [r7, #4]
 800dd70:	f000 fab1 	bl	800e2d6 <USBD_CtlError>
            err++;
 800dd74:	7afb      	ldrb	r3, [r7, #11]
 800dd76:	3301      	adds	r3, #1
 800dd78:	72fb      	strb	r3, [r7, #11]
          break;
 800dd7a:	e06f      	b.n	800de5c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dd82:	68db      	ldr	r3, [r3, #12]
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	d00b      	beq.n	800dda0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dd8e:	68db      	ldr	r3, [r3, #12]
 800dd90:	687a      	ldr	r2, [r7, #4]
 800dd92:	7c12      	ldrb	r2, [r2, #16]
 800dd94:	f107 0108 	add.w	r1, r7, #8
 800dd98:	4610      	mov	r0, r2
 800dd9a:	4798      	blx	r3
 800dd9c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dd9e:	e05d      	b.n	800de5c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800dda0:	6839      	ldr	r1, [r7, #0]
 800dda2:	6878      	ldr	r0, [r7, #4]
 800dda4:	f000 fa97 	bl	800e2d6 <USBD_CtlError>
            err++;
 800dda8:	7afb      	ldrb	r3, [r7, #11]
 800ddaa:	3301      	adds	r3, #1
 800ddac:	72fb      	strb	r3, [r7, #11]
          break;
 800ddae:	e055      	b.n	800de5c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ddb6:	691b      	ldr	r3, [r3, #16]
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d00b      	beq.n	800ddd4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ddc2:	691b      	ldr	r3, [r3, #16]
 800ddc4:	687a      	ldr	r2, [r7, #4]
 800ddc6:	7c12      	ldrb	r2, [r2, #16]
 800ddc8:	f107 0108 	add.w	r1, r7, #8
 800ddcc:	4610      	mov	r0, r2
 800ddce:	4798      	blx	r3
 800ddd0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ddd2:	e043      	b.n	800de5c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ddd4:	6839      	ldr	r1, [r7, #0]
 800ddd6:	6878      	ldr	r0, [r7, #4]
 800ddd8:	f000 fa7d 	bl	800e2d6 <USBD_CtlError>
            err++;
 800dddc:	7afb      	ldrb	r3, [r7, #11]
 800ddde:	3301      	adds	r3, #1
 800dde0:	72fb      	strb	r3, [r7, #11]
          break;
 800dde2:	e03b      	b.n	800de5c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ddea:	695b      	ldr	r3, [r3, #20]
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d00b      	beq.n	800de08 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ddf6:	695b      	ldr	r3, [r3, #20]
 800ddf8:	687a      	ldr	r2, [r7, #4]
 800ddfa:	7c12      	ldrb	r2, [r2, #16]
 800ddfc:	f107 0108 	add.w	r1, r7, #8
 800de00:	4610      	mov	r0, r2
 800de02:	4798      	blx	r3
 800de04:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800de06:	e029      	b.n	800de5c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800de08:	6839      	ldr	r1, [r7, #0]
 800de0a:	6878      	ldr	r0, [r7, #4]
 800de0c:	f000 fa63 	bl	800e2d6 <USBD_CtlError>
            err++;
 800de10:	7afb      	ldrb	r3, [r7, #11]
 800de12:	3301      	adds	r3, #1
 800de14:	72fb      	strb	r3, [r7, #11]
          break;
 800de16:	e021      	b.n	800de5c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800de1e:	699b      	ldr	r3, [r3, #24]
 800de20:	2b00      	cmp	r3, #0
 800de22:	d00b      	beq.n	800de3c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800de2a:	699b      	ldr	r3, [r3, #24]
 800de2c:	687a      	ldr	r2, [r7, #4]
 800de2e:	7c12      	ldrb	r2, [r2, #16]
 800de30:	f107 0108 	add.w	r1, r7, #8
 800de34:	4610      	mov	r0, r2
 800de36:	4798      	blx	r3
 800de38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800de3a:	e00f      	b.n	800de5c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800de3c:	6839      	ldr	r1, [r7, #0]
 800de3e:	6878      	ldr	r0, [r7, #4]
 800de40:	f000 fa49 	bl	800e2d6 <USBD_CtlError>
            err++;
 800de44:	7afb      	ldrb	r3, [r7, #11]
 800de46:	3301      	adds	r3, #1
 800de48:	72fb      	strb	r3, [r7, #11]
          break;
 800de4a:	e007      	b.n	800de5c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800de4c:	6839      	ldr	r1, [r7, #0]
 800de4e:	6878      	ldr	r0, [r7, #4]
 800de50:	f000 fa41 	bl	800e2d6 <USBD_CtlError>
          err++;
 800de54:	7afb      	ldrb	r3, [r7, #11]
 800de56:	3301      	adds	r3, #1
 800de58:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800de5a:	bf00      	nop
      }
      break;
 800de5c:	e037      	b.n	800dece <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	7c1b      	ldrb	r3, [r3, #16]
 800de62:	2b00      	cmp	r3, #0
 800de64:	d109      	bne.n	800de7a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800de6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de6e:	f107 0208 	add.w	r2, r7, #8
 800de72:	4610      	mov	r0, r2
 800de74:	4798      	blx	r3
 800de76:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800de78:	e029      	b.n	800dece <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800de7a:	6839      	ldr	r1, [r7, #0]
 800de7c:	6878      	ldr	r0, [r7, #4]
 800de7e:	f000 fa2a 	bl	800e2d6 <USBD_CtlError>
        err++;
 800de82:	7afb      	ldrb	r3, [r7, #11]
 800de84:	3301      	adds	r3, #1
 800de86:	72fb      	strb	r3, [r7, #11]
      break;
 800de88:	e021      	b.n	800dece <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	7c1b      	ldrb	r3, [r3, #16]
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d10d      	bne.n	800deae <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800de98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de9a:	f107 0208 	add.w	r2, r7, #8
 800de9e:	4610      	mov	r0, r2
 800dea0:	4798      	blx	r3
 800dea2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	3301      	adds	r3, #1
 800dea8:	2207      	movs	r2, #7
 800deaa:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800deac:	e00f      	b.n	800dece <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800deae:	6839      	ldr	r1, [r7, #0]
 800deb0:	6878      	ldr	r0, [r7, #4]
 800deb2:	f000 fa10 	bl	800e2d6 <USBD_CtlError>
        err++;
 800deb6:	7afb      	ldrb	r3, [r7, #11]
 800deb8:	3301      	adds	r3, #1
 800deba:	72fb      	strb	r3, [r7, #11]
      break;
 800debc:	e007      	b.n	800dece <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800debe:	6839      	ldr	r1, [r7, #0]
 800dec0:	6878      	ldr	r0, [r7, #4]
 800dec2:	f000 fa08 	bl	800e2d6 <USBD_CtlError>
      err++;
 800dec6:	7afb      	ldrb	r3, [r7, #11]
 800dec8:	3301      	adds	r3, #1
 800deca:	72fb      	strb	r3, [r7, #11]
      break;
 800decc:	bf00      	nop
  }

  if (err != 0U)
 800dece:	7afb      	ldrb	r3, [r7, #11]
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d11e      	bne.n	800df12 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800ded4:	683b      	ldr	r3, [r7, #0]
 800ded6:	88db      	ldrh	r3, [r3, #6]
 800ded8:	2b00      	cmp	r3, #0
 800deda:	d016      	beq.n	800df0a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800dedc:	893b      	ldrh	r3, [r7, #8]
 800dede:	2b00      	cmp	r3, #0
 800dee0:	d00e      	beq.n	800df00 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800dee2:	683b      	ldr	r3, [r7, #0]
 800dee4:	88da      	ldrh	r2, [r3, #6]
 800dee6:	893b      	ldrh	r3, [r7, #8]
 800dee8:	4293      	cmp	r3, r2
 800deea:	bf28      	it	cs
 800deec:	4613      	movcs	r3, r2
 800deee:	b29b      	uxth	r3, r3
 800def0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800def2:	893b      	ldrh	r3, [r7, #8]
 800def4:	461a      	mov	r2, r3
 800def6:	68f9      	ldr	r1, [r7, #12]
 800def8:	6878      	ldr	r0, [r7, #4]
 800defa:	f000 fa5d 	bl	800e3b8 <USBD_CtlSendData>
 800defe:	e009      	b.n	800df14 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800df00:	6839      	ldr	r1, [r7, #0]
 800df02:	6878      	ldr	r0, [r7, #4]
 800df04:	f000 f9e7 	bl	800e2d6 <USBD_CtlError>
 800df08:	e004      	b.n	800df14 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800df0a:	6878      	ldr	r0, [r7, #4]
 800df0c:	f000 faae 	bl	800e46c <USBD_CtlSendStatus>
 800df10:	e000      	b.n	800df14 <USBD_GetDescriptor+0x2cc>
    return;
 800df12:	bf00      	nop
  }
}
 800df14:	3710      	adds	r7, #16
 800df16:	46bd      	mov	sp, r7
 800df18:	bd80      	pop	{r7, pc}
 800df1a:	bf00      	nop

0800df1c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800df1c:	b580      	push	{r7, lr}
 800df1e:	b084      	sub	sp, #16
 800df20:	af00      	add	r7, sp, #0
 800df22:	6078      	str	r0, [r7, #4]
 800df24:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800df26:	683b      	ldr	r3, [r7, #0]
 800df28:	889b      	ldrh	r3, [r3, #4]
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d131      	bne.n	800df92 <USBD_SetAddress+0x76>
 800df2e:	683b      	ldr	r3, [r7, #0]
 800df30:	88db      	ldrh	r3, [r3, #6]
 800df32:	2b00      	cmp	r3, #0
 800df34:	d12d      	bne.n	800df92 <USBD_SetAddress+0x76>
 800df36:	683b      	ldr	r3, [r7, #0]
 800df38:	885b      	ldrh	r3, [r3, #2]
 800df3a:	2b7f      	cmp	r3, #127	; 0x7f
 800df3c:	d829      	bhi.n	800df92 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800df3e:	683b      	ldr	r3, [r7, #0]
 800df40:	885b      	ldrh	r3, [r3, #2]
 800df42:	b2db      	uxtb	r3, r3
 800df44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800df48:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800df50:	b2db      	uxtb	r3, r3
 800df52:	2b03      	cmp	r3, #3
 800df54:	d104      	bne.n	800df60 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800df56:	6839      	ldr	r1, [r7, #0]
 800df58:	6878      	ldr	r0, [r7, #4]
 800df5a:	f000 f9bc 	bl	800e2d6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800df5e:	e01d      	b.n	800df9c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	7bfa      	ldrb	r2, [r7, #15]
 800df64:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800df68:	7bfb      	ldrb	r3, [r7, #15]
 800df6a:	4619      	mov	r1, r3
 800df6c:	6878      	ldr	r0, [r7, #4]
 800df6e:	f000 ff05 	bl	800ed7c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800df72:	6878      	ldr	r0, [r7, #4]
 800df74:	f000 fa7a 	bl	800e46c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800df78:	7bfb      	ldrb	r3, [r7, #15]
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	d004      	beq.n	800df88 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	2202      	movs	r2, #2
 800df82:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800df86:	e009      	b.n	800df9c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	2201      	movs	r2, #1
 800df8c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800df90:	e004      	b.n	800df9c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800df92:	6839      	ldr	r1, [r7, #0]
 800df94:	6878      	ldr	r0, [r7, #4]
 800df96:	f000 f99e 	bl	800e2d6 <USBD_CtlError>
  }
}
 800df9a:	bf00      	nop
 800df9c:	bf00      	nop
 800df9e:	3710      	adds	r7, #16
 800dfa0:	46bd      	mov	sp, r7
 800dfa2:	bd80      	pop	{r7, pc}

0800dfa4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dfa4:	b580      	push	{r7, lr}
 800dfa6:	b084      	sub	sp, #16
 800dfa8:	af00      	add	r7, sp, #0
 800dfaa:	6078      	str	r0, [r7, #4]
 800dfac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800dfae:	2300      	movs	r3, #0
 800dfb0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800dfb2:	683b      	ldr	r3, [r7, #0]
 800dfb4:	885b      	ldrh	r3, [r3, #2]
 800dfb6:	b2da      	uxtb	r2, r3
 800dfb8:	4b4e      	ldr	r3, [pc, #312]	; (800e0f4 <USBD_SetConfig+0x150>)
 800dfba:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800dfbc:	4b4d      	ldr	r3, [pc, #308]	; (800e0f4 <USBD_SetConfig+0x150>)
 800dfbe:	781b      	ldrb	r3, [r3, #0]
 800dfc0:	2b01      	cmp	r3, #1
 800dfc2:	d905      	bls.n	800dfd0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800dfc4:	6839      	ldr	r1, [r7, #0]
 800dfc6:	6878      	ldr	r0, [r7, #4]
 800dfc8:	f000 f985 	bl	800e2d6 <USBD_CtlError>
    return USBD_FAIL;
 800dfcc:	2303      	movs	r3, #3
 800dfce:	e08c      	b.n	800e0ea <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dfd6:	b2db      	uxtb	r3, r3
 800dfd8:	2b02      	cmp	r3, #2
 800dfda:	d002      	beq.n	800dfe2 <USBD_SetConfig+0x3e>
 800dfdc:	2b03      	cmp	r3, #3
 800dfde:	d029      	beq.n	800e034 <USBD_SetConfig+0x90>
 800dfe0:	e075      	b.n	800e0ce <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800dfe2:	4b44      	ldr	r3, [pc, #272]	; (800e0f4 <USBD_SetConfig+0x150>)
 800dfe4:	781b      	ldrb	r3, [r3, #0]
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	d020      	beq.n	800e02c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800dfea:	4b42      	ldr	r3, [pc, #264]	; (800e0f4 <USBD_SetConfig+0x150>)
 800dfec:	781b      	ldrb	r3, [r3, #0]
 800dfee:	461a      	mov	r2, r3
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800dff4:	4b3f      	ldr	r3, [pc, #252]	; (800e0f4 <USBD_SetConfig+0x150>)
 800dff6:	781b      	ldrb	r3, [r3, #0]
 800dff8:	4619      	mov	r1, r3
 800dffa:	6878      	ldr	r0, [r7, #4]
 800dffc:	f7fe ffe7 	bl	800cfce <USBD_SetClassConfig>
 800e000:	4603      	mov	r3, r0
 800e002:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800e004:	7bfb      	ldrb	r3, [r7, #15]
 800e006:	2b00      	cmp	r3, #0
 800e008:	d008      	beq.n	800e01c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800e00a:	6839      	ldr	r1, [r7, #0]
 800e00c:	6878      	ldr	r0, [r7, #4]
 800e00e:	f000 f962 	bl	800e2d6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	2202      	movs	r2, #2
 800e016:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e01a:	e065      	b.n	800e0e8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800e01c:	6878      	ldr	r0, [r7, #4]
 800e01e:	f000 fa25 	bl	800e46c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	2203      	movs	r2, #3
 800e026:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800e02a:	e05d      	b.n	800e0e8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800e02c:	6878      	ldr	r0, [r7, #4]
 800e02e:	f000 fa1d 	bl	800e46c <USBD_CtlSendStatus>
      break;
 800e032:	e059      	b.n	800e0e8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800e034:	4b2f      	ldr	r3, [pc, #188]	; (800e0f4 <USBD_SetConfig+0x150>)
 800e036:	781b      	ldrb	r3, [r3, #0]
 800e038:	2b00      	cmp	r3, #0
 800e03a:	d112      	bne.n	800e062 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	2202      	movs	r2, #2
 800e040:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800e044:	4b2b      	ldr	r3, [pc, #172]	; (800e0f4 <USBD_SetConfig+0x150>)
 800e046:	781b      	ldrb	r3, [r3, #0]
 800e048:	461a      	mov	r2, r3
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e04e:	4b29      	ldr	r3, [pc, #164]	; (800e0f4 <USBD_SetConfig+0x150>)
 800e050:	781b      	ldrb	r3, [r3, #0]
 800e052:	4619      	mov	r1, r3
 800e054:	6878      	ldr	r0, [r7, #4]
 800e056:	f7fe ffd6 	bl	800d006 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800e05a:	6878      	ldr	r0, [r7, #4]
 800e05c:	f000 fa06 	bl	800e46c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e060:	e042      	b.n	800e0e8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800e062:	4b24      	ldr	r3, [pc, #144]	; (800e0f4 <USBD_SetConfig+0x150>)
 800e064:	781b      	ldrb	r3, [r3, #0]
 800e066:	461a      	mov	r2, r3
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	685b      	ldr	r3, [r3, #4]
 800e06c:	429a      	cmp	r2, r3
 800e06e:	d02a      	beq.n	800e0c6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	685b      	ldr	r3, [r3, #4]
 800e074:	b2db      	uxtb	r3, r3
 800e076:	4619      	mov	r1, r3
 800e078:	6878      	ldr	r0, [r7, #4]
 800e07a:	f7fe ffc4 	bl	800d006 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800e07e:	4b1d      	ldr	r3, [pc, #116]	; (800e0f4 <USBD_SetConfig+0x150>)
 800e080:	781b      	ldrb	r3, [r3, #0]
 800e082:	461a      	mov	r2, r3
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e088:	4b1a      	ldr	r3, [pc, #104]	; (800e0f4 <USBD_SetConfig+0x150>)
 800e08a:	781b      	ldrb	r3, [r3, #0]
 800e08c:	4619      	mov	r1, r3
 800e08e:	6878      	ldr	r0, [r7, #4]
 800e090:	f7fe ff9d 	bl	800cfce <USBD_SetClassConfig>
 800e094:	4603      	mov	r3, r0
 800e096:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800e098:	7bfb      	ldrb	r3, [r7, #15]
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	d00f      	beq.n	800e0be <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800e09e:	6839      	ldr	r1, [r7, #0]
 800e0a0:	6878      	ldr	r0, [r7, #4]
 800e0a2:	f000 f918 	bl	800e2d6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	685b      	ldr	r3, [r3, #4]
 800e0aa:	b2db      	uxtb	r3, r3
 800e0ac:	4619      	mov	r1, r3
 800e0ae:	6878      	ldr	r0, [r7, #4]
 800e0b0:	f7fe ffa9 	bl	800d006 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	2202      	movs	r2, #2
 800e0b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800e0bc:	e014      	b.n	800e0e8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800e0be:	6878      	ldr	r0, [r7, #4]
 800e0c0:	f000 f9d4 	bl	800e46c <USBD_CtlSendStatus>
      break;
 800e0c4:	e010      	b.n	800e0e8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800e0c6:	6878      	ldr	r0, [r7, #4]
 800e0c8:	f000 f9d0 	bl	800e46c <USBD_CtlSendStatus>
      break;
 800e0cc:	e00c      	b.n	800e0e8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800e0ce:	6839      	ldr	r1, [r7, #0]
 800e0d0:	6878      	ldr	r0, [r7, #4]
 800e0d2:	f000 f900 	bl	800e2d6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e0d6:	4b07      	ldr	r3, [pc, #28]	; (800e0f4 <USBD_SetConfig+0x150>)
 800e0d8:	781b      	ldrb	r3, [r3, #0]
 800e0da:	4619      	mov	r1, r3
 800e0dc:	6878      	ldr	r0, [r7, #4]
 800e0de:	f7fe ff92 	bl	800d006 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800e0e2:	2303      	movs	r3, #3
 800e0e4:	73fb      	strb	r3, [r7, #15]
      break;
 800e0e6:	bf00      	nop
  }

  return ret;
 800e0e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800e0ea:	4618      	mov	r0, r3
 800e0ec:	3710      	adds	r7, #16
 800e0ee:	46bd      	mov	sp, r7
 800e0f0:	bd80      	pop	{r7, pc}
 800e0f2:	bf00      	nop
 800e0f4:	20010810 	.word	0x20010810

0800e0f8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e0f8:	b580      	push	{r7, lr}
 800e0fa:	b082      	sub	sp, #8
 800e0fc:	af00      	add	r7, sp, #0
 800e0fe:	6078      	str	r0, [r7, #4]
 800e100:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800e102:	683b      	ldr	r3, [r7, #0]
 800e104:	88db      	ldrh	r3, [r3, #6]
 800e106:	2b01      	cmp	r3, #1
 800e108:	d004      	beq.n	800e114 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800e10a:	6839      	ldr	r1, [r7, #0]
 800e10c:	6878      	ldr	r0, [r7, #4]
 800e10e:	f000 f8e2 	bl	800e2d6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800e112:	e023      	b.n	800e15c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e11a:	b2db      	uxtb	r3, r3
 800e11c:	2b02      	cmp	r3, #2
 800e11e:	dc02      	bgt.n	800e126 <USBD_GetConfig+0x2e>
 800e120:	2b00      	cmp	r3, #0
 800e122:	dc03      	bgt.n	800e12c <USBD_GetConfig+0x34>
 800e124:	e015      	b.n	800e152 <USBD_GetConfig+0x5a>
 800e126:	2b03      	cmp	r3, #3
 800e128:	d00b      	beq.n	800e142 <USBD_GetConfig+0x4a>
 800e12a:	e012      	b.n	800e152 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	2200      	movs	r2, #0
 800e130:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	3308      	adds	r3, #8
 800e136:	2201      	movs	r2, #1
 800e138:	4619      	mov	r1, r3
 800e13a:	6878      	ldr	r0, [r7, #4]
 800e13c:	f000 f93c 	bl	800e3b8 <USBD_CtlSendData>
        break;
 800e140:	e00c      	b.n	800e15c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	3304      	adds	r3, #4
 800e146:	2201      	movs	r2, #1
 800e148:	4619      	mov	r1, r3
 800e14a:	6878      	ldr	r0, [r7, #4]
 800e14c:	f000 f934 	bl	800e3b8 <USBD_CtlSendData>
        break;
 800e150:	e004      	b.n	800e15c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800e152:	6839      	ldr	r1, [r7, #0]
 800e154:	6878      	ldr	r0, [r7, #4]
 800e156:	f000 f8be 	bl	800e2d6 <USBD_CtlError>
        break;
 800e15a:	bf00      	nop
}
 800e15c:	bf00      	nop
 800e15e:	3708      	adds	r7, #8
 800e160:	46bd      	mov	sp, r7
 800e162:	bd80      	pop	{r7, pc}

0800e164 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e164:	b580      	push	{r7, lr}
 800e166:	b082      	sub	sp, #8
 800e168:	af00      	add	r7, sp, #0
 800e16a:	6078      	str	r0, [r7, #4]
 800e16c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e174:	b2db      	uxtb	r3, r3
 800e176:	3b01      	subs	r3, #1
 800e178:	2b02      	cmp	r3, #2
 800e17a:	d81e      	bhi.n	800e1ba <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800e17c:	683b      	ldr	r3, [r7, #0]
 800e17e:	88db      	ldrh	r3, [r3, #6]
 800e180:	2b02      	cmp	r3, #2
 800e182:	d004      	beq.n	800e18e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800e184:	6839      	ldr	r1, [r7, #0]
 800e186:	6878      	ldr	r0, [r7, #4]
 800e188:	f000 f8a5 	bl	800e2d6 <USBD_CtlError>
        break;
 800e18c:	e01a      	b.n	800e1c4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	2201      	movs	r2, #1
 800e192:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800e19a:	2b00      	cmp	r3, #0
 800e19c:	d005      	beq.n	800e1aa <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	68db      	ldr	r3, [r3, #12]
 800e1a2:	f043 0202 	orr.w	r2, r3, #2
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	330c      	adds	r3, #12
 800e1ae:	2202      	movs	r2, #2
 800e1b0:	4619      	mov	r1, r3
 800e1b2:	6878      	ldr	r0, [r7, #4]
 800e1b4:	f000 f900 	bl	800e3b8 <USBD_CtlSendData>
      break;
 800e1b8:	e004      	b.n	800e1c4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800e1ba:	6839      	ldr	r1, [r7, #0]
 800e1bc:	6878      	ldr	r0, [r7, #4]
 800e1be:	f000 f88a 	bl	800e2d6 <USBD_CtlError>
      break;
 800e1c2:	bf00      	nop
  }
}
 800e1c4:	bf00      	nop
 800e1c6:	3708      	adds	r7, #8
 800e1c8:	46bd      	mov	sp, r7
 800e1ca:	bd80      	pop	{r7, pc}

0800e1cc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e1cc:	b580      	push	{r7, lr}
 800e1ce:	b082      	sub	sp, #8
 800e1d0:	af00      	add	r7, sp, #0
 800e1d2:	6078      	str	r0, [r7, #4]
 800e1d4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e1d6:	683b      	ldr	r3, [r7, #0]
 800e1d8:	885b      	ldrh	r3, [r3, #2]
 800e1da:	2b01      	cmp	r3, #1
 800e1dc:	d107      	bne.n	800e1ee <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	2201      	movs	r2, #1
 800e1e2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800e1e6:	6878      	ldr	r0, [r7, #4]
 800e1e8:	f000 f940 	bl	800e46c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800e1ec:	e013      	b.n	800e216 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800e1ee:	683b      	ldr	r3, [r7, #0]
 800e1f0:	885b      	ldrh	r3, [r3, #2]
 800e1f2:	2b02      	cmp	r3, #2
 800e1f4:	d10b      	bne.n	800e20e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800e1f6:	683b      	ldr	r3, [r7, #0]
 800e1f8:	889b      	ldrh	r3, [r3, #4]
 800e1fa:	0a1b      	lsrs	r3, r3, #8
 800e1fc:	b29b      	uxth	r3, r3
 800e1fe:	b2da      	uxtb	r2, r3
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800e206:	6878      	ldr	r0, [r7, #4]
 800e208:	f000 f930 	bl	800e46c <USBD_CtlSendStatus>
}
 800e20c:	e003      	b.n	800e216 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800e20e:	6839      	ldr	r1, [r7, #0]
 800e210:	6878      	ldr	r0, [r7, #4]
 800e212:	f000 f860 	bl	800e2d6 <USBD_CtlError>
}
 800e216:	bf00      	nop
 800e218:	3708      	adds	r7, #8
 800e21a:	46bd      	mov	sp, r7
 800e21c:	bd80      	pop	{r7, pc}

0800e21e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e21e:	b580      	push	{r7, lr}
 800e220:	b082      	sub	sp, #8
 800e222:	af00      	add	r7, sp, #0
 800e224:	6078      	str	r0, [r7, #4]
 800e226:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e22e:	b2db      	uxtb	r3, r3
 800e230:	3b01      	subs	r3, #1
 800e232:	2b02      	cmp	r3, #2
 800e234:	d80b      	bhi.n	800e24e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e236:	683b      	ldr	r3, [r7, #0]
 800e238:	885b      	ldrh	r3, [r3, #2]
 800e23a:	2b01      	cmp	r3, #1
 800e23c:	d10c      	bne.n	800e258 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	2200      	movs	r2, #0
 800e242:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800e246:	6878      	ldr	r0, [r7, #4]
 800e248:	f000 f910 	bl	800e46c <USBD_CtlSendStatus>
      }
      break;
 800e24c:	e004      	b.n	800e258 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800e24e:	6839      	ldr	r1, [r7, #0]
 800e250:	6878      	ldr	r0, [r7, #4]
 800e252:	f000 f840 	bl	800e2d6 <USBD_CtlError>
      break;
 800e256:	e000      	b.n	800e25a <USBD_ClrFeature+0x3c>
      break;
 800e258:	bf00      	nop
  }
}
 800e25a:	bf00      	nop
 800e25c:	3708      	adds	r7, #8
 800e25e:	46bd      	mov	sp, r7
 800e260:	bd80      	pop	{r7, pc}

0800e262 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800e262:	b580      	push	{r7, lr}
 800e264:	b084      	sub	sp, #16
 800e266:	af00      	add	r7, sp, #0
 800e268:	6078      	str	r0, [r7, #4]
 800e26a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800e26c:	683b      	ldr	r3, [r7, #0]
 800e26e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800e270:	68fb      	ldr	r3, [r7, #12]
 800e272:	781a      	ldrb	r2, [r3, #0]
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800e278:	68fb      	ldr	r3, [r7, #12]
 800e27a:	3301      	adds	r3, #1
 800e27c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800e27e:	68fb      	ldr	r3, [r7, #12]
 800e280:	781a      	ldrb	r2, [r3, #0]
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800e286:	68fb      	ldr	r3, [r7, #12]
 800e288:	3301      	adds	r3, #1
 800e28a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800e28c:	68f8      	ldr	r0, [r7, #12]
 800e28e:	f7ff fa41 	bl	800d714 <SWAPBYTE>
 800e292:	4603      	mov	r3, r0
 800e294:	461a      	mov	r2, r3
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800e29a:	68fb      	ldr	r3, [r7, #12]
 800e29c:	3301      	adds	r3, #1
 800e29e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e2a0:	68fb      	ldr	r3, [r7, #12]
 800e2a2:	3301      	adds	r3, #1
 800e2a4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800e2a6:	68f8      	ldr	r0, [r7, #12]
 800e2a8:	f7ff fa34 	bl	800d714 <SWAPBYTE>
 800e2ac:	4603      	mov	r3, r0
 800e2ae:	461a      	mov	r2, r3
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800e2b4:	68fb      	ldr	r3, [r7, #12]
 800e2b6:	3301      	adds	r3, #1
 800e2b8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e2ba:	68fb      	ldr	r3, [r7, #12]
 800e2bc:	3301      	adds	r3, #1
 800e2be:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800e2c0:	68f8      	ldr	r0, [r7, #12]
 800e2c2:	f7ff fa27 	bl	800d714 <SWAPBYTE>
 800e2c6:	4603      	mov	r3, r0
 800e2c8:	461a      	mov	r2, r3
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	80da      	strh	r2, [r3, #6]
}
 800e2ce:	bf00      	nop
 800e2d0:	3710      	adds	r7, #16
 800e2d2:	46bd      	mov	sp, r7
 800e2d4:	bd80      	pop	{r7, pc}

0800e2d6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e2d6:	b580      	push	{r7, lr}
 800e2d8:	b082      	sub	sp, #8
 800e2da:	af00      	add	r7, sp, #0
 800e2dc:	6078      	str	r0, [r7, #4]
 800e2de:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800e2e0:	2180      	movs	r1, #128	; 0x80
 800e2e2:	6878      	ldr	r0, [r7, #4]
 800e2e4:	f000 fce0 	bl	800eca8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800e2e8:	2100      	movs	r1, #0
 800e2ea:	6878      	ldr	r0, [r7, #4]
 800e2ec:	f000 fcdc 	bl	800eca8 <USBD_LL_StallEP>
}
 800e2f0:	bf00      	nop
 800e2f2:	3708      	adds	r7, #8
 800e2f4:	46bd      	mov	sp, r7
 800e2f6:	bd80      	pop	{r7, pc}

0800e2f8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800e2f8:	b580      	push	{r7, lr}
 800e2fa:	b086      	sub	sp, #24
 800e2fc:	af00      	add	r7, sp, #0
 800e2fe:	60f8      	str	r0, [r7, #12]
 800e300:	60b9      	str	r1, [r7, #8]
 800e302:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800e304:	2300      	movs	r3, #0
 800e306:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800e308:	68fb      	ldr	r3, [r7, #12]
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	d036      	beq.n	800e37c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800e30e:	68fb      	ldr	r3, [r7, #12]
 800e310:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800e312:	6938      	ldr	r0, [r7, #16]
 800e314:	f000 f836 	bl	800e384 <USBD_GetLen>
 800e318:	4603      	mov	r3, r0
 800e31a:	3301      	adds	r3, #1
 800e31c:	b29b      	uxth	r3, r3
 800e31e:	005b      	lsls	r3, r3, #1
 800e320:	b29a      	uxth	r2, r3
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800e326:	7dfb      	ldrb	r3, [r7, #23]
 800e328:	68ba      	ldr	r2, [r7, #8]
 800e32a:	4413      	add	r3, r2
 800e32c:	687a      	ldr	r2, [r7, #4]
 800e32e:	7812      	ldrb	r2, [r2, #0]
 800e330:	701a      	strb	r2, [r3, #0]
  idx++;
 800e332:	7dfb      	ldrb	r3, [r7, #23]
 800e334:	3301      	adds	r3, #1
 800e336:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800e338:	7dfb      	ldrb	r3, [r7, #23]
 800e33a:	68ba      	ldr	r2, [r7, #8]
 800e33c:	4413      	add	r3, r2
 800e33e:	2203      	movs	r2, #3
 800e340:	701a      	strb	r2, [r3, #0]
  idx++;
 800e342:	7dfb      	ldrb	r3, [r7, #23]
 800e344:	3301      	adds	r3, #1
 800e346:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800e348:	e013      	b.n	800e372 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800e34a:	7dfb      	ldrb	r3, [r7, #23]
 800e34c:	68ba      	ldr	r2, [r7, #8]
 800e34e:	4413      	add	r3, r2
 800e350:	693a      	ldr	r2, [r7, #16]
 800e352:	7812      	ldrb	r2, [r2, #0]
 800e354:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800e356:	693b      	ldr	r3, [r7, #16]
 800e358:	3301      	adds	r3, #1
 800e35a:	613b      	str	r3, [r7, #16]
    idx++;
 800e35c:	7dfb      	ldrb	r3, [r7, #23]
 800e35e:	3301      	adds	r3, #1
 800e360:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800e362:	7dfb      	ldrb	r3, [r7, #23]
 800e364:	68ba      	ldr	r2, [r7, #8]
 800e366:	4413      	add	r3, r2
 800e368:	2200      	movs	r2, #0
 800e36a:	701a      	strb	r2, [r3, #0]
    idx++;
 800e36c:	7dfb      	ldrb	r3, [r7, #23]
 800e36e:	3301      	adds	r3, #1
 800e370:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800e372:	693b      	ldr	r3, [r7, #16]
 800e374:	781b      	ldrb	r3, [r3, #0]
 800e376:	2b00      	cmp	r3, #0
 800e378:	d1e7      	bne.n	800e34a <USBD_GetString+0x52>
 800e37a:	e000      	b.n	800e37e <USBD_GetString+0x86>
    return;
 800e37c:	bf00      	nop
  }
}
 800e37e:	3718      	adds	r7, #24
 800e380:	46bd      	mov	sp, r7
 800e382:	bd80      	pop	{r7, pc}

0800e384 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800e384:	b480      	push	{r7}
 800e386:	b085      	sub	sp, #20
 800e388:	af00      	add	r7, sp, #0
 800e38a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800e38c:	2300      	movs	r3, #0
 800e38e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800e394:	e005      	b.n	800e3a2 <USBD_GetLen+0x1e>
  {
    len++;
 800e396:	7bfb      	ldrb	r3, [r7, #15]
 800e398:	3301      	adds	r3, #1
 800e39a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800e39c:	68bb      	ldr	r3, [r7, #8]
 800e39e:	3301      	adds	r3, #1
 800e3a0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800e3a2:	68bb      	ldr	r3, [r7, #8]
 800e3a4:	781b      	ldrb	r3, [r3, #0]
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	d1f5      	bne.n	800e396 <USBD_GetLen+0x12>
  }

  return len;
 800e3aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800e3ac:	4618      	mov	r0, r3
 800e3ae:	3714      	adds	r7, #20
 800e3b0:	46bd      	mov	sp, r7
 800e3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3b6:	4770      	bx	lr

0800e3b8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800e3b8:	b580      	push	{r7, lr}
 800e3ba:	b084      	sub	sp, #16
 800e3bc:	af00      	add	r7, sp, #0
 800e3be:	60f8      	str	r0, [r7, #12]
 800e3c0:	60b9      	str	r1, [r7, #8]
 800e3c2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800e3c4:	68fb      	ldr	r3, [r7, #12]
 800e3c6:	2202      	movs	r2, #2
 800e3c8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800e3cc:	68fb      	ldr	r3, [r7, #12]
 800e3ce:	687a      	ldr	r2, [r7, #4]
 800e3d0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800e3d2:	68fb      	ldr	r3, [r7, #12]
 800e3d4:	687a      	ldr	r2, [r7, #4]
 800e3d6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	68ba      	ldr	r2, [r7, #8]
 800e3dc:	2100      	movs	r1, #0
 800e3de:	68f8      	ldr	r0, [r7, #12]
 800e3e0:	f000 fceb 	bl	800edba <USBD_LL_Transmit>

  return USBD_OK;
 800e3e4:	2300      	movs	r3, #0
}
 800e3e6:	4618      	mov	r0, r3
 800e3e8:	3710      	adds	r7, #16
 800e3ea:	46bd      	mov	sp, r7
 800e3ec:	bd80      	pop	{r7, pc}

0800e3ee <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800e3ee:	b580      	push	{r7, lr}
 800e3f0:	b084      	sub	sp, #16
 800e3f2:	af00      	add	r7, sp, #0
 800e3f4:	60f8      	str	r0, [r7, #12]
 800e3f6:	60b9      	str	r1, [r7, #8]
 800e3f8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	68ba      	ldr	r2, [r7, #8]
 800e3fe:	2100      	movs	r1, #0
 800e400:	68f8      	ldr	r0, [r7, #12]
 800e402:	f000 fcda 	bl	800edba <USBD_LL_Transmit>

  return USBD_OK;
 800e406:	2300      	movs	r3, #0
}
 800e408:	4618      	mov	r0, r3
 800e40a:	3710      	adds	r7, #16
 800e40c:	46bd      	mov	sp, r7
 800e40e:	bd80      	pop	{r7, pc}

0800e410 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800e410:	b580      	push	{r7, lr}
 800e412:	b084      	sub	sp, #16
 800e414:	af00      	add	r7, sp, #0
 800e416:	60f8      	str	r0, [r7, #12]
 800e418:	60b9      	str	r1, [r7, #8]
 800e41a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800e41c:	68fb      	ldr	r3, [r7, #12]
 800e41e:	2203      	movs	r2, #3
 800e420:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800e424:	68fb      	ldr	r3, [r7, #12]
 800e426:	687a      	ldr	r2, [r7, #4]
 800e428:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800e42c:	68fb      	ldr	r3, [r7, #12]
 800e42e:	687a      	ldr	r2, [r7, #4]
 800e430:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	68ba      	ldr	r2, [r7, #8]
 800e438:	2100      	movs	r1, #0
 800e43a:	68f8      	ldr	r0, [r7, #12]
 800e43c:	f000 fcde 	bl	800edfc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e440:	2300      	movs	r3, #0
}
 800e442:	4618      	mov	r0, r3
 800e444:	3710      	adds	r7, #16
 800e446:	46bd      	mov	sp, r7
 800e448:	bd80      	pop	{r7, pc}

0800e44a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800e44a:	b580      	push	{r7, lr}
 800e44c:	b084      	sub	sp, #16
 800e44e:	af00      	add	r7, sp, #0
 800e450:	60f8      	str	r0, [r7, #12]
 800e452:	60b9      	str	r1, [r7, #8]
 800e454:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	68ba      	ldr	r2, [r7, #8]
 800e45a:	2100      	movs	r1, #0
 800e45c:	68f8      	ldr	r0, [r7, #12]
 800e45e:	f000 fccd 	bl	800edfc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e462:	2300      	movs	r3, #0
}
 800e464:	4618      	mov	r0, r3
 800e466:	3710      	adds	r7, #16
 800e468:	46bd      	mov	sp, r7
 800e46a:	bd80      	pop	{r7, pc}

0800e46c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800e46c:	b580      	push	{r7, lr}
 800e46e:	b082      	sub	sp, #8
 800e470:	af00      	add	r7, sp, #0
 800e472:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	2204      	movs	r2, #4
 800e478:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800e47c:	2300      	movs	r3, #0
 800e47e:	2200      	movs	r2, #0
 800e480:	2100      	movs	r1, #0
 800e482:	6878      	ldr	r0, [r7, #4]
 800e484:	f000 fc99 	bl	800edba <USBD_LL_Transmit>

  return USBD_OK;
 800e488:	2300      	movs	r3, #0
}
 800e48a:	4618      	mov	r0, r3
 800e48c:	3708      	adds	r7, #8
 800e48e:	46bd      	mov	sp, r7
 800e490:	bd80      	pop	{r7, pc}

0800e492 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800e492:	b580      	push	{r7, lr}
 800e494:	b082      	sub	sp, #8
 800e496:	af00      	add	r7, sp, #0
 800e498:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	2205      	movs	r2, #5
 800e49e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e4a2:	2300      	movs	r3, #0
 800e4a4:	2200      	movs	r2, #0
 800e4a6:	2100      	movs	r1, #0
 800e4a8:	6878      	ldr	r0, [r7, #4]
 800e4aa:	f000 fca7 	bl	800edfc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e4ae:	2300      	movs	r3, #0
}
 800e4b0:	4618      	mov	r0, r3
 800e4b2:	3708      	adds	r7, #8
 800e4b4:	46bd      	mov	sp, r7
 800e4b6:	bd80      	pop	{r7, pc}

0800e4b8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800e4b8:	b580      	push	{r7, lr}
 800e4ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800e4bc:	2200      	movs	r2, #0
 800e4be:	4912      	ldr	r1, [pc, #72]	; (800e508 <MX_USB_DEVICE_Init+0x50>)
 800e4c0:	4812      	ldr	r0, [pc, #72]	; (800e50c <MX_USB_DEVICE_Init+0x54>)
 800e4c2:	f7fe fd07 	bl	800ced4 <USBD_Init>
 800e4c6:	4603      	mov	r3, r0
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	d001      	beq.n	800e4d0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800e4cc:	f7f4 f980 	bl	80027d0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800e4d0:	490f      	ldr	r1, [pc, #60]	; (800e510 <MX_USB_DEVICE_Init+0x58>)
 800e4d2:	480e      	ldr	r0, [pc, #56]	; (800e50c <MX_USB_DEVICE_Init+0x54>)
 800e4d4:	f7fe fd2e 	bl	800cf34 <USBD_RegisterClass>
 800e4d8:	4603      	mov	r3, r0
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d001      	beq.n	800e4e2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800e4de:	f7f4 f977 	bl	80027d0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800e4e2:	490c      	ldr	r1, [pc, #48]	; (800e514 <MX_USB_DEVICE_Init+0x5c>)
 800e4e4:	4809      	ldr	r0, [pc, #36]	; (800e50c <MX_USB_DEVICE_Init+0x54>)
 800e4e6:	f7fe fc1f 	bl	800cd28 <USBD_CDC_RegisterInterface>
 800e4ea:	4603      	mov	r3, r0
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	d001      	beq.n	800e4f4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800e4f0:	f7f4 f96e 	bl	80027d0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800e4f4:	4805      	ldr	r0, [pc, #20]	; (800e50c <MX_USB_DEVICE_Init+0x54>)
 800e4f6:	f7fe fd53 	bl	800cfa0 <USBD_Start>
 800e4fa:	4603      	mov	r3, r0
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	d001      	beq.n	800e504 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800e500:	f7f4 f966 	bl	80027d0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800e504:	bf00      	nop
 800e506:	bd80      	pop	{r7, pc}
 800e508:	200000b4 	.word	0x200000b4
 800e50c:	20010814 	.word	0x20010814
 800e510:	20000020 	.word	0x20000020
 800e514:	200000a0 	.word	0x200000a0

0800e518 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800e518:	b580      	push	{r7, lr}
 800e51a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800e51c:	2200      	movs	r2, #0
 800e51e:	4905      	ldr	r1, [pc, #20]	; (800e534 <CDC_Init_FS+0x1c>)
 800e520:	4805      	ldr	r0, [pc, #20]	; (800e538 <CDC_Init_FS+0x20>)
 800e522:	f7fe fc1b 	bl	800cd5c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800e526:	4905      	ldr	r1, [pc, #20]	; (800e53c <CDC_Init_FS+0x24>)
 800e528:	4803      	ldr	r0, [pc, #12]	; (800e538 <CDC_Init_FS+0x20>)
 800e52a:	f7fe fc39 	bl	800cda0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800e52e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800e530:	4618      	mov	r0, r3
 800e532:	bd80      	pop	{r7, pc}
 800e534:	200112f0 	.word	0x200112f0
 800e538:	20010814 	.word	0x20010814
 800e53c:	20010af0 	.word	0x20010af0

0800e540 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800e540:	b480      	push	{r7}
 800e542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800e544:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800e546:	4618      	mov	r0, r3
 800e548:	46bd      	mov	sp, r7
 800e54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e54e:	4770      	bx	lr

0800e550 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800e550:	b480      	push	{r7}
 800e552:	b083      	sub	sp, #12
 800e554:	af00      	add	r7, sp, #0
 800e556:	4603      	mov	r3, r0
 800e558:	6039      	str	r1, [r7, #0]
 800e55a:	71fb      	strb	r3, [r7, #7]
 800e55c:	4613      	mov	r3, r2
 800e55e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800e560:	79fb      	ldrb	r3, [r7, #7]
 800e562:	2b23      	cmp	r3, #35	; 0x23
 800e564:	d84a      	bhi.n	800e5fc <CDC_Control_FS+0xac>
 800e566:	a201      	add	r2, pc, #4	; (adr r2, 800e56c <CDC_Control_FS+0x1c>)
 800e568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e56c:	0800e5fd 	.word	0x0800e5fd
 800e570:	0800e5fd 	.word	0x0800e5fd
 800e574:	0800e5fd 	.word	0x0800e5fd
 800e578:	0800e5fd 	.word	0x0800e5fd
 800e57c:	0800e5fd 	.word	0x0800e5fd
 800e580:	0800e5fd 	.word	0x0800e5fd
 800e584:	0800e5fd 	.word	0x0800e5fd
 800e588:	0800e5fd 	.word	0x0800e5fd
 800e58c:	0800e5fd 	.word	0x0800e5fd
 800e590:	0800e5fd 	.word	0x0800e5fd
 800e594:	0800e5fd 	.word	0x0800e5fd
 800e598:	0800e5fd 	.word	0x0800e5fd
 800e59c:	0800e5fd 	.word	0x0800e5fd
 800e5a0:	0800e5fd 	.word	0x0800e5fd
 800e5a4:	0800e5fd 	.word	0x0800e5fd
 800e5a8:	0800e5fd 	.word	0x0800e5fd
 800e5ac:	0800e5fd 	.word	0x0800e5fd
 800e5b0:	0800e5fd 	.word	0x0800e5fd
 800e5b4:	0800e5fd 	.word	0x0800e5fd
 800e5b8:	0800e5fd 	.word	0x0800e5fd
 800e5bc:	0800e5fd 	.word	0x0800e5fd
 800e5c0:	0800e5fd 	.word	0x0800e5fd
 800e5c4:	0800e5fd 	.word	0x0800e5fd
 800e5c8:	0800e5fd 	.word	0x0800e5fd
 800e5cc:	0800e5fd 	.word	0x0800e5fd
 800e5d0:	0800e5fd 	.word	0x0800e5fd
 800e5d4:	0800e5fd 	.word	0x0800e5fd
 800e5d8:	0800e5fd 	.word	0x0800e5fd
 800e5dc:	0800e5fd 	.word	0x0800e5fd
 800e5e0:	0800e5fd 	.word	0x0800e5fd
 800e5e4:	0800e5fd 	.word	0x0800e5fd
 800e5e8:	0800e5fd 	.word	0x0800e5fd
 800e5ec:	0800e5fd 	.word	0x0800e5fd
 800e5f0:	0800e5fd 	.word	0x0800e5fd
 800e5f4:	0800e5fd 	.word	0x0800e5fd
 800e5f8:	0800e5fd 	.word	0x0800e5fd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800e5fc:	bf00      	nop
  }

  return (USBD_OK);
 800e5fe:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800e600:	4618      	mov	r0, r3
 800e602:	370c      	adds	r7, #12
 800e604:	46bd      	mov	sp, r7
 800e606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e60a:	4770      	bx	lr

0800e60c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800e60c:	b580      	push	{r7, lr}
 800e60e:	b082      	sub	sp, #8
 800e610:	af00      	add	r7, sp, #0
 800e612:	6078      	str	r0, [r7, #4]
 800e614:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800e616:	6879      	ldr	r1, [r7, #4]
 800e618:	4805      	ldr	r0, [pc, #20]	; (800e630 <CDC_Receive_FS+0x24>)
 800e61a:	f7fe fbc1 	bl	800cda0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800e61e:	4804      	ldr	r0, [pc, #16]	; (800e630 <CDC_Receive_FS+0x24>)
 800e620:	f7fe fc22 	bl	800ce68 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800e624:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800e626:	4618      	mov	r0, r3
 800e628:	3708      	adds	r7, #8
 800e62a:	46bd      	mov	sp, r7
 800e62c:	bd80      	pop	{r7, pc}
 800e62e:	bf00      	nop
 800e630:	20010814 	.word	0x20010814

0800e634 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800e634:	b580      	push	{r7, lr}
 800e636:	b084      	sub	sp, #16
 800e638:	af00      	add	r7, sp, #0
 800e63a:	6078      	str	r0, [r7, #4]
 800e63c:	460b      	mov	r3, r1
 800e63e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800e640:	2300      	movs	r3, #0
 800e642:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800e644:	4b0d      	ldr	r3, [pc, #52]	; (800e67c <CDC_Transmit_FS+0x48>)
 800e646:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e64a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800e64c:	68bb      	ldr	r3, [r7, #8]
 800e64e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800e652:	2b00      	cmp	r3, #0
 800e654:	d001      	beq.n	800e65a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800e656:	2301      	movs	r3, #1
 800e658:	e00b      	b.n	800e672 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800e65a:	887b      	ldrh	r3, [r7, #2]
 800e65c:	461a      	mov	r2, r3
 800e65e:	6879      	ldr	r1, [r7, #4]
 800e660:	4806      	ldr	r0, [pc, #24]	; (800e67c <CDC_Transmit_FS+0x48>)
 800e662:	f7fe fb7b 	bl	800cd5c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800e666:	4805      	ldr	r0, [pc, #20]	; (800e67c <CDC_Transmit_FS+0x48>)
 800e668:	f7fe fbb8 	bl	800cddc <USBD_CDC_TransmitPacket>
 800e66c:	4603      	mov	r3, r0
 800e66e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800e670:	7bfb      	ldrb	r3, [r7, #15]
}
 800e672:	4618      	mov	r0, r3
 800e674:	3710      	adds	r7, #16
 800e676:	46bd      	mov	sp, r7
 800e678:	bd80      	pop	{r7, pc}
 800e67a:	bf00      	nop
 800e67c:	20010814 	.word	0x20010814

0800e680 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800e680:	b480      	push	{r7}
 800e682:	b087      	sub	sp, #28
 800e684:	af00      	add	r7, sp, #0
 800e686:	60f8      	str	r0, [r7, #12]
 800e688:	60b9      	str	r1, [r7, #8]
 800e68a:	4613      	mov	r3, r2
 800e68c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800e68e:	2300      	movs	r3, #0
 800e690:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800e692:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e696:	4618      	mov	r0, r3
 800e698:	371c      	adds	r7, #28
 800e69a:	46bd      	mov	sp, r7
 800e69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6a0:	4770      	bx	lr
	...

0800e6a4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e6a4:	b480      	push	{r7}
 800e6a6:	b083      	sub	sp, #12
 800e6a8:	af00      	add	r7, sp, #0
 800e6aa:	4603      	mov	r3, r0
 800e6ac:	6039      	str	r1, [r7, #0]
 800e6ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800e6b0:	683b      	ldr	r3, [r7, #0]
 800e6b2:	2212      	movs	r2, #18
 800e6b4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800e6b6:	4b03      	ldr	r3, [pc, #12]	; (800e6c4 <USBD_FS_DeviceDescriptor+0x20>)
}
 800e6b8:	4618      	mov	r0, r3
 800e6ba:	370c      	adds	r7, #12
 800e6bc:	46bd      	mov	sp, r7
 800e6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6c2:	4770      	bx	lr
 800e6c4:	200000d0 	.word	0x200000d0

0800e6c8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e6c8:	b480      	push	{r7}
 800e6ca:	b083      	sub	sp, #12
 800e6cc:	af00      	add	r7, sp, #0
 800e6ce:	4603      	mov	r3, r0
 800e6d0:	6039      	str	r1, [r7, #0]
 800e6d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800e6d4:	683b      	ldr	r3, [r7, #0]
 800e6d6:	2204      	movs	r2, #4
 800e6d8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800e6da:	4b03      	ldr	r3, [pc, #12]	; (800e6e8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800e6dc:	4618      	mov	r0, r3
 800e6de:	370c      	adds	r7, #12
 800e6e0:	46bd      	mov	sp, r7
 800e6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6e6:	4770      	bx	lr
 800e6e8:	200000e4 	.word	0x200000e4

0800e6ec <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e6ec:	b580      	push	{r7, lr}
 800e6ee:	b082      	sub	sp, #8
 800e6f0:	af00      	add	r7, sp, #0
 800e6f2:	4603      	mov	r3, r0
 800e6f4:	6039      	str	r1, [r7, #0]
 800e6f6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e6f8:	79fb      	ldrb	r3, [r7, #7]
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	d105      	bne.n	800e70a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e6fe:	683a      	ldr	r2, [r7, #0]
 800e700:	4907      	ldr	r1, [pc, #28]	; (800e720 <USBD_FS_ProductStrDescriptor+0x34>)
 800e702:	4808      	ldr	r0, [pc, #32]	; (800e724 <USBD_FS_ProductStrDescriptor+0x38>)
 800e704:	f7ff fdf8 	bl	800e2f8 <USBD_GetString>
 800e708:	e004      	b.n	800e714 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e70a:	683a      	ldr	r2, [r7, #0]
 800e70c:	4904      	ldr	r1, [pc, #16]	; (800e720 <USBD_FS_ProductStrDescriptor+0x34>)
 800e70e:	4805      	ldr	r0, [pc, #20]	; (800e724 <USBD_FS_ProductStrDescriptor+0x38>)
 800e710:	f7ff fdf2 	bl	800e2f8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e714:	4b02      	ldr	r3, [pc, #8]	; (800e720 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800e716:	4618      	mov	r0, r3
 800e718:	3708      	adds	r7, #8
 800e71a:	46bd      	mov	sp, r7
 800e71c:	bd80      	pop	{r7, pc}
 800e71e:	bf00      	nop
 800e720:	20011af0 	.word	0x20011af0
 800e724:	08012eb0 	.word	0x08012eb0

0800e728 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e728:	b580      	push	{r7, lr}
 800e72a:	b082      	sub	sp, #8
 800e72c:	af00      	add	r7, sp, #0
 800e72e:	4603      	mov	r3, r0
 800e730:	6039      	str	r1, [r7, #0]
 800e732:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800e734:	683a      	ldr	r2, [r7, #0]
 800e736:	4904      	ldr	r1, [pc, #16]	; (800e748 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800e738:	4804      	ldr	r0, [pc, #16]	; (800e74c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800e73a:	f7ff fddd 	bl	800e2f8 <USBD_GetString>
  return USBD_StrDesc;
 800e73e:	4b02      	ldr	r3, [pc, #8]	; (800e748 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800e740:	4618      	mov	r0, r3
 800e742:	3708      	adds	r7, #8
 800e744:	46bd      	mov	sp, r7
 800e746:	bd80      	pop	{r7, pc}
 800e748:	20011af0 	.word	0x20011af0
 800e74c:	08012ec8 	.word	0x08012ec8

0800e750 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e750:	b580      	push	{r7, lr}
 800e752:	b082      	sub	sp, #8
 800e754:	af00      	add	r7, sp, #0
 800e756:	4603      	mov	r3, r0
 800e758:	6039      	str	r1, [r7, #0]
 800e75a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800e75c:	683b      	ldr	r3, [r7, #0]
 800e75e:	221a      	movs	r2, #26
 800e760:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800e762:	f000 f843 	bl	800e7ec <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800e766:	4b02      	ldr	r3, [pc, #8]	; (800e770 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800e768:	4618      	mov	r0, r3
 800e76a:	3708      	adds	r7, #8
 800e76c:	46bd      	mov	sp, r7
 800e76e:	bd80      	pop	{r7, pc}
 800e770:	200000e8 	.word	0x200000e8

0800e774 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e774:	b580      	push	{r7, lr}
 800e776:	b082      	sub	sp, #8
 800e778:	af00      	add	r7, sp, #0
 800e77a:	4603      	mov	r3, r0
 800e77c:	6039      	str	r1, [r7, #0]
 800e77e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800e780:	79fb      	ldrb	r3, [r7, #7]
 800e782:	2b00      	cmp	r3, #0
 800e784:	d105      	bne.n	800e792 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e786:	683a      	ldr	r2, [r7, #0]
 800e788:	4907      	ldr	r1, [pc, #28]	; (800e7a8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e78a:	4808      	ldr	r0, [pc, #32]	; (800e7ac <USBD_FS_ConfigStrDescriptor+0x38>)
 800e78c:	f7ff fdb4 	bl	800e2f8 <USBD_GetString>
 800e790:	e004      	b.n	800e79c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e792:	683a      	ldr	r2, [r7, #0]
 800e794:	4904      	ldr	r1, [pc, #16]	; (800e7a8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e796:	4805      	ldr	r0, [pc, #20]	; (800e7ac <USBD_FS_ConfigStrDescriptor+0x38>)
 800e798:	f7ff fdae 	bl	800e2f8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e79c:	4b02      	ldr	r3, [pc, #8]	; (800e7a8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800e79e:	4618      	mov	r0, r3
 800e7a0:	3708      	adds	r7, #8
 800e7a2:	46bd      	mov	sp, r7
 800e7a4:	bd80      	pop	{r7, pc}
 800e7a6:	bf00      	nop
 800e7a8:	20011af0 	.word	0x20011af0
 800e7ac:	08012edc 	.word	0x08012edc

0800e7b0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e7b0:	b580      	push	{r7, lr}
 800e7b2:	b082      	sub	sp, #8
 800e7b4:	af00      	add	r7, sp, #0
 800e7b6:	4603      	mov	r3, r0
 800e7b8:	6039      	str	r1, [r7, #0]
 800e7ba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e7bc:	79fb      	ldrb	r3, [r7, #7]
 800e7be:	2b00      	cmp	r3, #0
 800e7c0:	d105      	bne.n	800e7ce <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e7c2:	683a      	ldr	r2, [r7, #0]
 800e7c4:	4907      	ldr	r1, [pc, #28]	; (800e7e4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e7c6:	4808      	ldr	r0, [pc, #32]	; (800e7e8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e7c8:	f7ff fd96 	bl	800e2f8 <USBD_GetString>
 800e7cc:	e004      	b.n	800e7d8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e7ce:	683a      	ldr	r2, [r7, #0]
 800e7d0:	4904      	ldr	r1, [pc, #16]	; (800e7e4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e7d2:	4805      	ldr	r0, [pc, #20]	; (800e7e8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e7d4:	f7ff fd90 	bl	800e2f8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e7d8:	4b02      	ldr	r3, [pc, #8]	; (800e7e4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800e7da:	4618      	mov	r0, r3
 800e7dc:	3708      	adds	r7, #8
 800e7de:	46bd      	mov	sp, r7
 800e7e0:	bd80      	pop	{r7, pc}
 800e7e2:	bf00      	nop
 800e7e4:	20011af0 	.word	0x20011af0
 800e7e8:	08012ee8 	.word	0x08012ee8

0800e7ec <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800e7ec:	b580      	push	{r7, lr}
 800e7ee:	b084      	sub	sp, #16
 800e7f0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800e7f2:	4b0f      	ldr	r3, [pc, #60]	; (800e830 <Get_SerialNum+0x44>)
 800e7f4:	681b      	ldr	r3, [r3, #0]
 800e7f6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800e7f8:	4b0e      	ldr	r3, [pc, #56]	; (800e834 <Get_SerialNum+0x48>)
 800e7fa:	681b      	ldr	r3, [r3, #0]
 800e7fc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800e7fe:	4b0e      	ldr	r3, [pc, #56]	; (800e838 <Get_SerialNum+0x4c>)
 800e800:	681b      	ldr	r3, [r3, #0]
 800e802:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800e804:	68fa      	ldr	r2, [r7, #12]
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	4413      	add	r3, r2
 800e80a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800e80c:	68fb      	ldr	r3, [r7, #12]
 800e80e:	2b00      	cmp	r3, #0
 800e810:	d009      	beq.n	800e826 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800e812:	2208      	movs	r2, #8
 800e814:	4909      	ldr	r1, [pc, #36]	; (800e83c <Get_SerialNum+0x50>)
 800e816:	68f8      	ldr	r0, [r7, #12]
 800e818:	f000 f814 	bl	800e844 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800e81c:	2204      	movs	r2, #4
 800e81e:	4908      	ldr	r1, [pc, #32]	; (800e840 <Get_SerialNum+0x54>)
 800e820:	68b8      	ldr	r0, [r7, #8]
 800e822:	f000 f80f 	bl	800e844 <IntToUnicode>
  }
}
 800e826:	bf00      	nop
 800e828:	3710      	adds	r7, #16
 800e82a:	46bd      	mov	sp, r7
 800e82c:	bd80      	pop	{r7, pc}
 800e82e:	bf00      	nop
 800e830:	1fff7a10 	.word	0x1fff7a10
 800e834:	1fff7a14 	.word	0x1fff7a14
 800e838:	1fff7a18 	.word	0x1fff7a18
 800e83c:	200000ea 	.word	0x200000ea
 800e840:	200000fa 	.word	0x200000fa

0800e844 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800e844:	b480      	push	{r7}
 800e846:	b087      	sub	sp, #28
 800e848:	af00      	add	r7, sp, #0
 800e84a:	60f8      	str	r0, [r7, #12]
 800e84c:	60b9      	str	r1, [r7, #8]
 800e84e:	4613      	mov	r3, r2
 800e850:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800e852:	2300      	movs	r3, #0
 800e854:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800e856:	2300      	movs	r3, #0
 800e858:	75fb      	strb	r3, [r7, #23]
 800e85a:	e027      	b.n	800e8ac <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800e85c:	68fb      	ldr	r3, [r7, #12]
 800e85e:	0f1b      	lsrs	r3, r3, #28
 800e860:	2b09      	cmp	r3, #9
 800e862:	d80b      	bhi.n	800e87c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800e864:	68fb      	ldr	r3, [r7, #12]
 800e866:	0f1b      	lsrs	r3, r3, #28
 800e868:	b2da      	uxtb	r2, r3
 800e86a:	7dfb      	ldrb	r3, [r7, #23]
 800e86c:	005b      	lsls	r3, r3, #1
 800e86e:	4619      	mov	r1, r3
 800e870:	68bb      	ldr	r3, [r7, #8]
 800e872:	440b      	add	r3, r1
 800e874:	3230      	adds	r2, #48	; 0x30
 800e876:	b2d2      	uxtb	r2, r2
 800e878:	701a      	strb	r2, [r3, #0]
 800e87a:	e00a      	b.n	800e892 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e87c:	68fb      	ldr	r3, [r7, #12]
 800e87e:	0f1b      	lsrs	r3, r3, #28
 800e880:	b2da      	uxtb	r2, r3
 800e882:	7dfb      	ldrb	r3, [r7, #23]
 800e884:	005b      	lsls	r3, r3, #1
 800e886:	4619      	mov	r1, r3
 800e888:	68bb      	ldr	r3, [r7, #8]
 800e88a:	440b      	add	r3, r1
 800e88c:	3237      	adds	r2, #55	; 0x37
 800e88e:	b2d2      	uxtb	r2, r2
 800e890:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800e892:	68fb      	ldr	r3, [r7, #12]
 800e894:	011b      	lsls	r3, r3, #4
 800e896:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800e898:	7dfb      	ldrb	r3, [r7, #23]
 800e89a:	005b      	lsls	r3, r3, #1
 800e89c:	3301      	adds	r3, #1
 800e89e:	68ba      	ldr	r2, [r7, #8]
 800e8a0:	4413      	add	r3, r2
 800e8a2:	2200      	movs	r2, #0
 800e8a4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800e8a6:	7dfb      	ldrb	r3, [r7, #23]
 800e8a8:	3301      	adds	r3, #1
 800e8aa:	75fb      	strb	r3, [r7, #23]
 800e8ac:	7dfa      	ldrb	r2, [r7, #23]
 800e8ae:	79fb      	ldrb	r3, [r7, #7]
 800e8b0:	429a      	cmp	r2, r3
 800e8b2:	d3d3      	bcc.n	800e85c <IntToUnicode+0x18>
  }
}
 800e8b4:	bf00      	nop
 800e8b6:	bf00      	nop
 800e8b8:	371c      	adds	r7, #28
 800e8ba:	46bd      	mov	sp, r7
 800e8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8c0:	4770      	bx	lr
	...

0800e8c4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800e8c4:	b580      	push	{r7, lr}
 800e8c6:	b08a      	sub	sp, #40	; 0x28
 800e8c8:	af00      	add	r7, sp, #0
 800e8ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e8cc:	f107 0314 	add.w	r3, r7, #20
 800e8d0:	2200      	movs	r2, #0
 800e8d2:	601a      	str	r2, [r3, #0]
 800e8d4:	605a      	str	r2, [r3, #4]
 800e8d6:	609a      	str	r2, [r3, #8]
 800e8d8:	60da      	str	r2, [r3, #12]
 800e8da:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	681b      	ldr	r3, [r3, #0]
 800e8e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e8e4:	d13a      	bne.n	800e95c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e8e6:	2300      	movs	r3, #0
 800e8e8:	613b      	str	r3, [r7, #16]
 800e8ea:	4b1e      	ldr	r3, [pc, #120]	; (800e964 <HAL_PCD_MspInit+0xa0>)
 800e8ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e8ee:	4a1d      	ldr	r2, [pc, #116]	; (800e964 <HAL_PCD_MspInit+0xa0>)
 800e8f0:	f043 0301 	orr.w	r3, r3, #1
 800e8f4:	6313      	str	r3, [r2, #48]	; 0x30
 800e8f6:	4b1b      	ldr	r3, [pc, #108]	; (800e964 <HAL_PCD_MspInit+0xa0>)
 800e8f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e8fa:	f003 0301 	and.w	r3, r3, #1
 800e8fe:	613b      	str	r3, [r7, #16]
 800e900:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800e902:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800e906:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e908:	2302      	movs	r3, #2
 800e90a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e90c:	2300      	movs	r3, #0
 800e90e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e910:	2303      	movs	r3, #3
 800e912:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800e914:	230a      	movs	r3, #10
 800e916:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e918:	f107 0314 	add.w	r3, r7, #20
 800e91c:	4619      	mov	r1, r3
 800e91e:	4812      	ldr	r0, [pc, #72]	; (800e968 <HAL_PCD_MspInit+0xa4>)
 800e920:	f7f6 f8ea 	bl	8004af8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800e924:	4b0f      	ldr	r3, [pc, #60]	; (800e964 <HAL_PCD_MspInit+0xa0>)
 800e926:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e928:	4a0e      	ldr	r2, [pc, #56]	; (800e964 <HAL_PCD_MspInit+0xa0>)
 800e92a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e92e:	6353      	str	r3, [r2, #52]	; 0x34
 800e930:	2300      	movs	r3, #0
 800e932:	60fb      	str	r3, [r7, #12]
 800e934:	4b0b      	ldr	r3, [pc, #44]	; (800e964 <HAL_PCD_MspInit+0xa0>)
 800e936:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e938:	4a0a      	ldr	r2, [pc, #40]	; (800e964 <HAL_PCD_MspInit+0xa0>)
 800e93a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e93e:	6453      	str	r3, [r2, #68]	; 0x44
 800e940:	4b08      	ldr	r3, [pc, #32]	; (800e964 <HAL_PCD_MspInit+0xa0>)
 800e942:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e944:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e948:	60fb      	str	r3, [r7, #12]
 800e94a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800e94c:	2200      	movs	r2, #0
 800e94e:	2100      	movs	r1, #0
 800e950:	2043      	movs	r0, #67	; 0x43
 800e952:	f7f5 fc8a 	bl	800426a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800e956:	2043      	movs	r0, #67	; 0x43
 800e958:	f7f5 fca3 	bl	80042a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800e95c:	bf00      	nop
 800e95e:	3728      	adds	r7, #40	; 0x28
 800e960:	46bd      	mov	sp, r7
 800e962:	bd80      	pop	{r7, pc}
 800e964:	40023800 	.word	0x40023800
 800e968:	40020000 	.word	0x40020000

0800e96c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e96c:	b580      	push	{r7, lr}
 800e96e:	b082      	sub	sp, #8
 800e970:	af00      	add	r7, sp, #0
 800e972:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800e980:	4619      	mov	r1, r3
 800e982:	4610      	mov	r0, r2
 800e984:	f7fe fb59 	bl	800d03a <USBD_LL_SetupStage>
}
 800e988:	bf00      	nop
 800e98a:	3708      	adds	r7, #8
 800e98c:	46bd      	mov	sp, r7
 800e98e:	bd80      	pop	{r7, pc}

0800e990 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e990:	b580      	push	{r7, lr}
 800e992:	b082      	sub	sp, #8
 800e994:	af00      	add	r7, sp, #0
 800e996:	6078      	str	r0, [r7, #4]
 800e998:	460b      	mov	r3, r1
 800e99a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800e9a2:	78fa      	ldrb	r2, [r7, #3]
 800e9a4:	6879      	ldr	r1, [r7, #4]
 800e9a6:	4613      	mov	r3, r2
 800e9a8:	00db      	lsls	r3, r3, #3
 800e9aa:	4413      	add	r3, r2
 800e9ac:	009b      	lsls	r3, r3, #2
 800e9ae:	440b      	add	r3, r1
 800e9b0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800e9b4:	681a      	ldr	r2, [r3, #0]
 800e9b6:	78fb      	ldrb	r3, [r7, #3]
 800e9b8:	4619      	mov	r1, r3
 800e9ba:	f7fe fb93 	bl	800d0e4 <USBD_LL_DataOutStage>
}
 800e9be:	bf00      	nop
 800e9c0:	3708      	adds	r7, #8
 800e9c2:	46bd      	mov	sp, r7
 800e9c4:	bd80      	pop	{r7, pc}

0800e9c6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e9c6:	b580      	push	{r7, lr}
 800e9c8:	b082      	sub	sp, #8
 800e9ca:	af00      	add	r7, sp, #0
 800e9cc:	6078      	str	r0, [r7, #4]
 800e9ce:	460b      	mov	r3, r1
 800e9d0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800e9d8:	78fa      	ldrb	r2, [r7, #3]
 800e9da:	6879      	ldr	r1, [r7, #4]
 800e9dc:	4613      	mov	r3, r2
 800e9de:	00db      	lsls	r3, r3, #3
 800e9e0:	4413      	add	r3, r2
 800e9e2:	009b      	lsls	r3, r3, #2
 800e9e4:	440b      	add	r3, r1
 800e9e6:	334c      	adds	r3, #76	; 0x4c
 800e9e8:	681a      	ldr	r2, [r3, #0]
 800e9ea:	78fb      	ldrb	r3, [r7, #3]
 800e9ec:	4619      	mov	r1, r3
 800e9ee:	f7fe fc2c 	bl	800d24a <USBD_LL_DataInStage>
}
 800e9f2:	bf00      	nop
 800e9f4:	3708      	adds	r7, #8
 800e9f6:	46bd      	mov	sp, r7
 800e9f8:	bd80      	pop	{r7, pc}

0800e9fa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e9fa:	b580      	push	{r7, lr}
 800e9fc:	b082      	sub	sp, #8
 800e9fe:	af00      	add	r7, sp, #0
 800ea00:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ea08:	4618      	mov	r0, r3
 800ea0a:	f7fe fd60 	bl	800d4ce <USBD_LL_SOF>
}
 800ea0e:	bf00      	nop
 800ea10:	3708      	adds	r7, #8
 800ea12:	46bd      	mov	sp, r7
 800ea14:	bd80      	pop	{r7, pc}

0800ea16 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ea16:	b580      	push	{r7, lr}
 800ea18:	b084      	sub	sp, #16
 800ea1a:	af00      	add	r7, sp, #0
 800ea1c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ea1e:	2301      	movs	r3, #1
 800ea20:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	68db      	ldr	r3, [r3, #12]
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	d102      	bne.n	800ea30 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800ea2a:	2300      	movs	r3, #0
 800ea2c:	73fb      	strb	r3, [r7, #15]
 800ea2e:	e008      	b.n	800ea42 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	68db      	ldr	r3, [r3, #12]
 800ea34:	2b02      	cmp	r3, #2
 800ea36:	d102      	bne.n	800ea3e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800ea38:	2301      	movs	r3, #1
 800ea3a:	73fb      	strb	r3, [r7, #15]
 800ea3c:	e001      	b.n	800ea42 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800ea3e:	f7f3 fec7 	bl	80027d0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ea48:	7bfa      	ldrb	r2, [r7, #15]
 800ea4a:	4611      	mov	r1, r2
 800ea4c:	4618      	mov	r0, r3
 800ea4e:	f7fe fd00 	bl	800d452 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ea58:	4618      	mov	r0, r3
 800ea5a:	f7fe fca8 	bl	800d3ae <USBD_LL_Reset>
}
 800ea5e:	bf00      	nop
 800ea60:	3710      	adds	r7, #16
 800ea62:	46bd      	mov	sp, r7
 800ea64:	bd80      	pop	{r7, pc}
	...

0800ea68 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ea68:	b580      	push	{r7, lr}
 800ea6a:	b082      	sub	sp, #8
 800ea6c:	af00      	add	r7, sp, #0
 800ea6e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ea76:	4618      	mov	r0, r3
 800ea78:	f7fe fcfb 	bl	800d472 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	681b      	ldr	r3, [r3, #0]
 800ea80:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ea84:	681b      	ldr	r3, [r3, #0]
 800ea86:	687a      	ldr	r2, [r7, #4]
 800ea88:	6812      	ldr	r2, [r2, #0]
 800ea8a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ea8e:	f043 0301 	orr.w	r3, r3, #1
 800ea92:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	6a1b      	ldr	r3, [r3, #32]
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d005      	beq.n	800eaa8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ea9c:	4b04      	ldr	r3, [pc, #16]	; (800eab0 <HAL_PCD_SuspendCallback+0x48>)
 800ea9e:	691b      	ldr	r3, [r3, #16]
 800eaa0:	4a03      	ldr	r2, [pc, #12]	; (800eab0 <HAL_PCD_SuspendCallback+0x48>)
 800eaa2:	f043 0306 	orr.w	r3, r3, #6
 800eaa6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800eaa8:	bf00      	nop
 800eaaa:	3708      	adds	r7, #8
 800eaac:	46bd      	mov	sp, r7
 800eaae:	bd80      	pop	{r7, pc}
 800eab0:	e000ed00 	.word	0xe000ed00

0800eab4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eab4:	b580      	push	{r7, lr}
 800eab6:	b082      	sub	sp, #8
 800eab8:	af00      	add	r7, sp, #0
 800eaba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800eac2:	4618      	mov	r0, r3
 800eac4:	f7fe fceb 	bl	800d49e <USBD_LL_Resume>
}
 800eac8:	bf00      	nop
 800eaca:	3708      	adds	r7, #8
 800eacc:	46bd      	mov	sp, r7
 800eace:	bd80      	pop	{r7, pc}

0800ead0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ead0:	b580      	push	{r7, lr}
 800ead2:	b082      	sub	sp, #8
 800ead4:	af00      	add	r7, sp, #0
 800ead6:	6078      	str	r0, [r7, #4]
 800ead8:	460b      	mov	r3, r1
 800eada:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800eae2:	78fa      	ldrb	r2, [r7, #3]
 800eae4:	4611      	mov	r1, r2
 800eae6:	4618      	mov	r0, r3
 800eae8:	f7fe fd43 	bl	800d572 <USBD_LL_IsoOUTIncomplete>
}
 800eaec:	bf00      	nop
 800eaee:	3708      	adds	r7, #8
 800eaf0:	46bd      	mov	sp, r7
 800eaf2:	bd80      	pop	{r7, pc}

0800eaf4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eaf4:	b580      	push	{r7, lr}
 800eaf6:	b082      	sub	sp, #8
 800eaf8:	af00      	add	r7, sp, #0
 800eafa:	6078      	str	r0, [r7, #4]
 800eafc:	460b      	mov	r3, r1
 800eafe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800eb06:	78fa      	ldrb	r2, [r7, #3]
 800eb08:	4611      	mov	r1, r2
 800eb0a:	4618      	mov	r0, r3
 800eb0c:	f7fe fcff 	bl	800d50e <USBD_LL_IsoINIncomplete>
}
 800eb10:	bf00      	nop
 800eb12:	3708      	adds	r7, #8
 800eb14:	46bd      	mov	sp, r7
 800eb16:	bd80      	pop	{r7, pc}

0800eb18 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eb18:	b580      	push	{r7, lr}
 800eb1a:	b082      	sub	sp, #8
 800eb1c:	af00      	add	r7, sp, #0
 800eb1e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800eb26:	4618      	mov	r0, r3
 800eb28:	f7fe fd55 	bl	800d5d6 <USBD_LL_DevConnected>
}
 800eb2c:	bf00      	nop
 800eb2e:	3708      	adds	r7, #8
 800eb30:	46bd      	mov	sp, r7
 800eb32:	bd80      	pop	{r7, pc}

0800eb34 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eb34:	b580      	push	{r7, lr}
 800eb36:	b082      	sub	sp, #8
 800eb38:	af00      	add	r7, sp, #0
 800eb3a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800eb42:	4618      	mov	r0, r3
 800eb44:	f7fe fd52 	bl	800d5ec <USBD_LL_DevDisconnected>
}
 800eb48:	bf00      	nop
 800eb4a:	3708      	adds	r7, #8
 800eb4c:	46bd      	mov	sp, r7
 800eb4e:	bd80      	pop	{r7, pc}

0800eb50 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800eb50:	b580      	push	{r7, lr}
 800eb52:	b082      	sub	sp, #8
 800eb54:	af00      	add	r7, sp, #0
 800eb56:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	781b      	ldrb	r3, [r3, #0]
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	d13c      	bne.n	800ebda <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800eb60:	4a20      	ldr	r2, [pc, #128]	; (800ebe4 <USBD_LL_Init+0x94>)
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	4a1e      	ldr	r2, [pc, #120]	; (800ebe4 <USBD_LL_Init+0x94>)
 800eb6c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800eb70:	4b1c      	ldr	r3, [pc, #112]	; (800ebe4 <USBD_LL_Init+0x94>)
 800eb72:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800eb76:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800eb78:	4b1a      	ldr	r3, [pc, #104]	; (800ebe4 <USBD_LL_Init+0x94>)
 800eb7a:	2204      	movs	r2, #4
 800eb7c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800eb7e:	4b19      	ldr	r3, [pc, #100]	; (800ebe4 <USBD_LL_Init+0x94>)
 800eb80:	2202      	movs	r2, #2
 800eb82:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800eb84:	4b17      	ldr	r3, [pc, #92]	; (800ebe4 <USBD_LL_Init+0x94>)
 800eb86:	2200      	movs	r2, #0
 800eb88:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800eb8a:	4b16      	ldr	r3, [pc, #88]	; (800ebe4 <USBD_LL_Init+0x94>)
 800eb8c:	2202      	movs	r2, #2
 800eb8e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800eb90:	4b14      	ldr	r3, [pc, #80]	; (800ebe4 <USBD_LL_Init+0x94>)
 800eb92:	2200      	movs	r2, #0
 800eb94:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800eb96:	4b13      	ldr	r3, [pc, #76]	; (800ebe4 <USBD_LL_Init+0x94>)
 800eb98:	2200      	movs	r2, #0
 800eb9a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800eb9c:	4b11      	ldr	r3, [pc, #68]	; (800ebe4 <USBD_LL_Init+0x94>)
 800eb9e:	2200      	movs	r2, #0
 800eba0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800eba2:	4b10      	ldr	r3, [pc, #64]	; (800ebe4 <USBD_LL_Init+0x94>)
 800eba4:	2200      	movs	r2, #0
 800eba6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800eba8:	4b0e      	ldr	r3, [pc, #56]	; (800ebe4 <USBD_LL_Init+0x94>)
 800ebaa:	2200      	movs	r2, #0
 800ebac:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800ebae:	480d      	ldr	r0, [pc, #52]	; (800ebe4 <USBD_LL_Init+0x94>)
 800ebb0:	f7f8 f968 	bl	8006e84 <HAL_PCD_Init>
 800ebb4:	4603      	mov	r3, r0
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	d001      	beq.n	800ebbe <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800ebba:	f7f3 fe09 	bl	80027d0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800ebbe:	2180      	movs	r1, #128	; 0x80
 800ebc0:	4808      	ldr	r0, [pc, #32]	; (800ebe4 <USBD_LL_Init+0x94>)
 800ebc2:	f7f9 fbc0 	bl	8008346 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800ebc6:	2240      	movs	r2, #64	; 0x40
 800ebc8:	2100      	movs	r1, #0
 800ebca:	4806      	ldr	r0, [pc, #24]	; (800ebe4 <USBD_LL_Init+0x94>)
 800ebcc:	f7f9 fb74 	bl	80082b8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800ebd0:	2280      	movs	r2, #128	; 0x80
 800ebd2:	2101      	movs	r1, #1
 800ebd4:	4803      	ldr	r0, [pc, #12]	; (800ebe4 <USBD_LL_Init+0x94>)
 800ebd6:	f7f9 fb6f 	bl	80082b8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800ebda:	2300      	movs	r3, #0
}
 800ebdc:	4618      	mov	r0, r3
 800ebde:	3708      	adds	r7, #8
 800ebe0:	46bd      	mov	sp, r7
 800ebe2:	bd80      	pop	{r7, pc}
 800ebe4:	20011cf0 	.word	0x20011cf0

0800ebe8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ebe8:	b580      	push	{r7, lr}
 800ebea:	b084      	sub	sp, #16
 800ebec:	af00      	add	r7, sp, #0
 800ebee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ebf0:	2300      	movs	r3, #0
 800ebf2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ebf4:	2300      	movs	r3, #0
 800ebf6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ebfe:	4618      	mov	r0, r3
 800ec00:	f7f8 fa5d 	bl	80070be <HAL_PCD_Start>
 800ec04:	4603      	mov	r3, r0
 800ec06:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ec08:	7bfb      	ldrb	r3, [r7, #15]
 800ec0a:	4618      	mov	r0, r3
 800ec0c:	f000 f942 	bl	800ee94 <USBD_Get_USB_Status>
 800ec10:	4603      	mov	r3, r0
 800ec12:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ec14:	7bbb      	ldrb	r3, [r7, #14]
}
 800ec16:	4618      	mov	r0, r3
 800ec18:	3710      	adds	r7, #16
 800ec1a:	46bd      	mov	sp, r7
 800ec1c:	bd80      	pop	{r7, pc}

0800ec1e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ec1e:	b580      	push	{r7, lr}
 800ec20:	b084      	sub	sp, #16
 800ec22:	af00      	add	r7, sp, #0
 800ec24:	6078      	str	r0, [r7, #4]
 800ec26:	4608      	mov	r0, r1
 800ec28:	4611      	mov	r1, r2
 800ec2a:	461a      	mov	r2, r3
 800ec2c:	4603      	mov	r3, r0
 800ec2e:	70fb      	strb	r3, [r7, #3]
 800ec30:	460b      	mov	r3, r1
 800ec32:	70bb      	strb	r3, [r7, #2]
 800ec34:	4613      	mov	r3, r2
 800ec36:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ec38:	2300      	movs	r3, #0
 800ec3a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ec3c:	2300      	movs	r3, #0
 800ec3e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ec46:	78bb      	ldrb	r3, [r7, #2]
 800ec48:	883a      	ldrh	r2, [r7, #0]
 800ec4a:	78f9      	ldrb	r1, [r7, #3]
 800ec4c:	f7f8 ff2e 	bl	8007aac <HAL_PCD_EP_Open>
 800ec50:	4603      	mov	r3, r0
 800ec52:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ec54:	7bfb      	ldrb	r3, [r7, #15]
 800ec56:	4618      	mov	r0, r3
 800ec58:	f000 f91c 	bl	800ee94 <USBD_Get_USB_Status>
 800ec5c:	4603      	mov	r3, r0
 800ec5e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ec60:	7bbb      	ldrb	r3, [r7, #14]
}
 800ec62:	4618      	mov	r0, r3
 800ec64:	3710      	adds	r7, #16
 800ec66:	46bd      	mov	sp, r7
 800ec68:	bd80      	pop	{r7, pc}

0800ec6a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ec6a:	b580      	push	{r7, lr}
 800ec6c:	b084      	sub	sp, #16
 800ec6e:	af00      	add	r7, sp, #0
 800ec70:	6078      	str	r0, [r7, #4]
 800ec72:	460b      	mov	r3, r1
 800ec74:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ec76:	2300      	movs	r3, #0
 800ec78:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ec7a:	2300      	movs	r3, #0
 800ec7c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ec84:	78fa      	ldrb	r2, [r7, #3]
 800ec86:	4611      	mov	r1, r2
 800ec88:	4618      	mov	r0, r3
 800ec8a:	f7f8 ff77 	bl	8007b7c <HAL_PCD_EP_Close>
 800ec8e:	4603      	mov	r3, r0
 800ec90:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ec92:	7bfb      	ldrb	r3, [r7, #15]
 800ec94:	4618      	mov	r0, r3
 800ec96:	f000 f8fd 	bl	800ee94 <USBD_Get_USB_Status>
 800ec9a:	4603      	mov	r3, r0
 800ec9c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ec9e:	7bbb      	ldrb	r3, [r7, #14]
}
 800eca0:	4618      	mov	r0, r3
 800eca2:	3710      	adds	r7, #16
 800eca4:	46bd      	mov	sp, r7
 800eca6:	bd80      	pop	{r7, pc}

0800eca8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800eca8:	b580      	push	{r7, lr}
 800ecaa:	b084      	sub	sp, #16
 800ecac:	af00      	add	r7, sp, #0
 800ecae:	6078      	str	r0, [r7, #4]
 800ecb0:	460b      	mov	r3, r1
 800ecb2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ecb4:	2300      	movs	r3, #0
 800ecb6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ecb8:	2300      	movs	r3, #0
 800ecba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ecc2:	78fa      	ldrb	r2, [r7, #3]
 800ecc4:	4611      	mov	r1, r2
 800ecc6:	4618      	mov	r0, r3
 800ecc8:	f7f9 f84f 	bl	8007d6a <HAL_PCD_EP_SetStall>
 800eccc:	4603      	mov	r3, r0
 800ecce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ecd0:	7bfb      	ldrb	r3, [r7, #15]
 800ecd2:	4618      	mov	r0, r3
 800ecd4:	f000 f8de 	bl	800ee94 <USBD_Get_USB_Status>
 800ecd8:	4603      	mov	r3, r0
 800ecda:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ecdc:	7bbb      	ldrb	r3, [r7, #14]
}
 800ecde:	4618      	mov	r0, r3
 800ece0:	3710      	adds	r7, #16
 800ece2:	46bd      	mov	sp, r7
 800ece4:	bd80      	pop	{r7, pc}

0800ece6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ece6:	b580      	push	{r7, lr}
 800ece8:	b084      	sub	sp, #16
 800ecea:	af00      	add	r7, sp, #0
 800ecec:	6078      	str	r0, [r7, #4]
 800ecee:	460b      	mov	r3, r1
 800ecf0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ecf2:	2300      	movs	r3, #0
 800ecf4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ecf6:	2300      	movs	r3, #0
 800ecf8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ed00:	78fa      	ldrb	r2, [r7, #3]
 800ed02:	4611      	mov	r1, r2
 800ed04:	4618      	mov	r0, r3
 800ed06:	f7f9 f894 	bl	8007e32 <HAL_PCD_EP_ClrStall>
 800ed0a:	4603      	mov	r3, r0
 800ed0c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ed0e:	7bfb      	ldrb	r3, [r7, #15]
 800ed10:	4618      	mov	r0, r3
 800ed12:	f000 f8bf 	bl	800ee94 <USBD_Get_USB_Status>
 800ed16:	4603      	mov	r3, r0
 800ed18:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ed1a:	7bbb      	ldrb	r3, [r7, #14]
}
 800ed1c:	4618      	mov	r0, r3
 800ed1e:	3710      	adds	r7, #16
 800ed20:	46bd      	mov	sp, r7
 800ed22:	bd80      	pop	{r7, pc}

0800ed24 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ed24:	b480      	push	{r7}
 800ed26:	b085      	sub	sp, #20
 800ed28:	af00      	add	r7, sp, #0
 800ed2a:	6078      	str	r0, [r7, #4]
 800ed2c:	460b      	mov	r3, r1
 800ed2e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ed36:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ed38:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	da0b      	bge.n	800ed58 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ed40:	78fb      	ldrb	r3, [r7, #3]
 800ed42:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ed46:	68f9      	ldr	r1, [r7, #12]
 800ed48:	4613      	mov	r3, r2
 800ed4a:	00db      	lsls	r3, r3, #3
 800ed4c:	4413      	add	r3, r2
 800ed4e:	009b      	lsls	r3, r3, #2
 800ed50:	440b      	add	r3, r1
 800ed52:	333e      	adds	r3, #62	; 0x3e
 800ed54:	781b      	ldrb	r3, [r3, #0]
 800ed56:	e00b      	b.n	800ed70 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ed58:	78fb      	ldrb	r3, [r7, #3]
 800ed5a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ed5e:	68f9      	ldr	r1, [r7, #12]
 800ed60:	4613      	mov	r3, r2
 800ed62:	00db      	lsls	r3, r3, #3
 800ed64:	4413      	add	r3, r2
 800ed66:	009b      	lsls	r3, r3, #2
 800ed68:	440b      	add	r3, r1
 800ed6a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800ed6e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ed70:	4618      	mov	r0, r3
 800ed72:	3714      	adds	r7, #20
 800ed74:	46bd      	mov	sp, r7
 800ed76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed7a:	4770      	bx	lr

0800ed7c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ed7c:	b580      	push	{r7, lr}
 800ed7e:	b084      	sub	sp, #16
 800ed80:	af00      	add	r7, sp, #0
 800ed82:	6078      	str	r0, [r7, #4]
 800ed84:	460b      	mov	r3, r1
 800ed86:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ed88:	2300      	movs	r3, #0
 800ed8a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ed8c:	2300      	movs	r3, #0
 800ed8e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ed96:	78fa      	ldrb	r2, [r7, #3]
 800ed98:	4611      	mov	r1, r2
 800ed9a:	4618      	mov	r0, r3
 800ed9c:	f7f8 fe61 	bl	8007a62 <HAL_PCD_SetAddress>
 800eda0:	4603      	mov	r3, r0
 800eda2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800eda4:	7bfb      	ldrb	r3, [r7, #15]
 800eda6:	4618      	mov	r0, r3
 800eda8:	f000 f874 	bl	800ee94 <USBD_Get_USB_Status>
 800edac:	4603      	mov	r3, r0
 800edae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800edb0:	7bbb      	ldrb	r3, [r7, #14]
}
 800edb2:	4618      	mov	r0, r3
 800edb4:	3710      	adds	r7, #16
 800edb6:	46bd      	mov	sp, r7
 800edb8:	bd80      	pop	{r7, pc}

0800edba <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800edba:	b580      	push	{r7, lr}
 800edbc:	b086      	sub	sp, #24
 800edbe:	af00      	add	r7, sp, #0
 800edc0:	60f8      	str	r0, [r7, #12]
 800edc2:	607a      	str	r2, [r7, #4]
 800edc4:	603b      	str	r3, [r7, #0]
 800edc6:	460b      	mov	r3, r1
 800edc8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800edca:	2300      	movs	r3, #0
 800edcc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800edce:	2300      	movs	r3, #0
 800edd0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800edd2:	68fb      	ldr	r3, [r7, #12]
 800edd4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800edd8:	7af9      	ldrb	r1, [r7, #11]
 800edda:	683b      	ldr	r3, [r7, #0]
 800eddc:	687a      	ldr	r2, [r7, #4]
 800edde:	f7f8 ff7a 	bl	8007cd6 <HAL_PCD_EP_Transmit>
 800ede2:	4603      	mov	r3, r0
 800ede4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ede6:	7dfb      	ldrb	r3, [r7, #23]
 800ede8:	4618      	mov	r0, r3
 800edea:	f000 f853 	bl	800ee94 <USBD_Get_USB_Status>
 800edee:	4603      	mov	r3, r0
 800edf0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800edf2:	7dbb      	ldrb	r3, [r7, #22]
}
 800edf4:	4618      	mov	r0, r3
 800edf6:	3718      	adds	r7, #24
 800edf8:	46bd      	mov	sp, r7
 800edfa:	bd80      	pop	{r7, pc}

0800edfc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800edfc:	b580      	push	{r7, lr}
 800edfe:	b086      	sub	sp, #24
 800ee00:	af00      	add	r7, sp, #0
 800ee02:	60f8      	str	r0, [r7, #12]
 800ee04:	607a      	str	r2, [r7, #4]
 800ee06:	603b      	str	r3, [r7, #0]
 800ee08:	460b      	mov	r3, r1
 800ee0a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ee0c:	2300      	movs	r3, #0
 800ee0e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ee10:	2300      	movs	r3, #0
 800ee12:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ee14:	68fb      	ldr	r3, [r7, #12]
 800ee16:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ee1a:	7af9      	ldrb	r1, [r7, #11]
 800ee1c:	683b      	ldr	r3, [r7, #0]
 800ee1e:	687a      	ldr	r2, [r7, #4]
 800ee20:	f7f8 fef6 	bl	8007c10 <HAL_PCD_EP_Receive>
 800ee24:	4603      	mov	r3, r0
 800ee26:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ee28:	7dfb      	ldrb	r3, [r7, #23]
 800ee2a:	4618      	mov	r0, r3
 800ee2c:	f000 f832 	bl	800ee94 <USBD_Get_USB_Status>
 800ee30:	4603      	mov	r3, r0
 800ee32:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ee34:	7dbb      	ldrb	r3, [r7, #22]
}
 800ee36:	4618      	mov	r0, r3
 800ee38:	3718      	adds	r7, #24
 800ee3a:	46bd      	mov	sp, r7
 800ee3c:	bd80      	pop	{r7, pc}

0800ee3e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ee3e:	b580      	push	{r7, lr}
 800ee40:	b082      	sub	sp, #8
 800ee42:	af00      	add	r7, sp, #0
 800ee44:	6078      	str	r0, [r7, #4]
 800ee46:	460b      	mov	r3, r1
 800ee48:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ee50:	78fa      	ldrb	r2, [r7, #3]
 800ee52:	4611      	mov	r1, r2
 800ee54:	4618      	mov	r0, r3
 800ee56:	f7f8 ff26 	bl	8007ca6 <HAL_PCD_EP_GetRxCount>
 800ee5a:	4603      	mov	r3, r0
}
 800ee5c:	4618      	mov	r0, r3
 800ee5e:	3708      	adds	r7, #8
 800ee60:	46bd      	mov	sp, r7
 800ee62:	bd80      	pop	{r7, pc}

0800ee64 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ee64:	b480      	push	{r7}
 800ee66:	b083      	sub	sp, #12
 800ee68:	af00      	add	r7, sp, #0
 800ee6a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ee6c:	4b03      	ldr	r3, [pc, #12]	; (800ee7c <USBD_static_malloc+0x18>)
}
 800ee6e:	4618      	mov	r0, r3
 800ee70:	370c      	adds	r7, #12
 800ee72:	46bd      	mov	sp, r7
 800ee74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee78:	4770      	bx	lr
 800ee7a:	bf00      	nop
 800ee7c:	200121fc 	.word	0x200121fc

0800ee80 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ee80:	b480      	push	{r7}
 800ee82:	b083      	sub	sp, #12
 800ee84:	af00      	add	r7, sp, #0
 800ee86:	6078      	str	r0, [r7, #4]

}
 800ee88:	bf00      	nop
 800ee8a:	370c      	adds	r7, #12
 800ee8c:	46bd      	mov	sp, r7
 800ee8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee92:	4770      	bx	lr

0800ee94 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ee94:	b480      	push	{r7}
 800ee96:	b085      	sub	sp, #20
 800ee98:	af00      	add	r7, sp, #0
 800ee9a:	4603      	mov	r3, r0
 800ee9c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ee9e:	2300      	movs	r3, #0
 800eea0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800eea2:	79fb      	ldrb	r3, [r7, #7]
 800eea4:	2b03      	cmp	r3, #3
 800eea6:	d817      	bhi.n	800eed8 <USBD_Get_USB_Status+0x44>
 800eea8:	a201      	add	r2, pc, #4	; (adr r2, 800eeb0 <USBD_Get_USB_Status+0x1c>)
 800eeaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eeae:	bf00      	nop
 800eeb0:	0800eec1 	.word	0x0800eec1
 800eeb4:	0800eec7 	.word	0x0800eec7
 800eeb8:	0800eecd 	.word	0x0800eecd
 800eebc:	0800eed3 	.word	0x0800eed3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800eec0:	2300      	movs	r3, #0
 800eec2:	73fb      	strb	r3, [r7, #15]
    break;
 800eec4:	e00b      	b.n	800eede <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800eec6:	2303      	movs	r3, #3
 800eec8:	73fb      	strb	r3, [r7, #15]
    break;
 800eeca:	e008      	b.n	800eede <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800eecc:	2301      	movs	r3, #1
 800eece:	73fb      	strb	r3, [r7, #15]
    break;
 800eed0:	e005      	b.n	800eede <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800eed2:	2303      	movs	r3, #3
 800eed4:	73fb      	strb	r3, [r7, #15]
    break;
 800eed6:	e002      	b.n	800eede <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800eed8:	2303      	movs	r3, #3
 800eeda:	73fb      	strb	r3, [r7, #15]
    break;
 800eedc:	bf00      	nop
  }
  return usb_status;
 800eede:	7bfb      	ldrb	r3, [r7, #15]
}
 800eee0:	4618      	mov	r0, r3
 800eee2:	3714      	adds	r7, #20
 800eee4:	46bd      	mov	sp, r7
 800eee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeea:	4770      	bx	lr

0800eeec <arm_rfft_fast_init_f32>:
 800eeec:	084b      	lsrs	r3, r1, #1
 800eeee:	2b80      	cmp	r3, #128	; 0x80
 800eef0:	b410      	push	{r4}
 800eef2:	8201      	strh	r1, [r0, #16]
 800eef4:	8003      	strh	r3, [r0, #0]
 800eef6:	d046      	beq.n	800ef86 <arm_rfft_fast_init_f32+0x9a>
 800eef8:	d916      	bls.n	800ef28 <arm_rfft_fast_init_f32+0x3c>
 800eefa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800eefe:	d03c      	beq.n	800ef7a <arm_rfft_fast_init_f32+0x8e>
 800ef00:	d928      	bls.n	800ef54 <arm_rfft_fast_init_f32+0x68>
 800ef02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ef06:	d01f      	beq.n	800ef48 <arm_rfft_fast_init_f32+0x5c>
 800ef08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ef0c:	d112      	bne.n	800ef34 <arm_rfft_fast_init_f32+0x48>
 800ef0e:	4920      	ldr	r1, [pc, #128]	; (800ef90 <arm_rfft_fast_init_f32+0xa4>)
 800ef10:	4a20      	ldr	r2, [pc, #128]	; (800ef94 <arm_rfft_fast_init_f32+0xa8>)
 800ef12:	4b21      	ldr	r3, [pc, #132]	; (800ef98 <arm_rfft_fast_init_f32+0xac>)
 800ef14:	f44f 646e 	mov.w	r4, #3808	; 0xee0
 800ef18:	8184      	strh	r4, [r0, #12]
 800ef1a:	6081      	str	r1, [r0, #8]
 800ef1c:	6042      	str	r2, [r0, #4]
 800ef1e:	6143      	str	r3, [r0, #20]
 800ef20:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ef24:	2000      	movs	r0, #0
 800ef26:	4770      	bx	lr
 800ef28:	2b20      	cmp	r3, #32
 800ef2a:	d01c      	beq.n	800ef66 <arm_rfft_fast_init_f32+0x7a>
 800ef2c:	2b40      	cmp	r3, #64	; 0x40
 800ef2e:	d006      	beq.n	800ef3e <arm_rfft_fast_init_f32+0x52>
 800ef30:	2b10      	cmp	r3, #16
 800ef32:	d01d      	beq.n	800ef70 <arm_rfft_fast_init_f32+0x84>
 800ef34:	f04f 30ff 	mov.w	r0, #4294967295
 800ef38:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ef3c:	4770      	bx	lr
 800ef3e:	2438      	movs	r4, #56	; 0x38
 800ef40:	4916      	ldr	r1, [pc, #88]	; (800ef9c <arm_rfft_fast_init_f32+0xb0>)
 800ef42:	4a17      	ldr	r2, [pc, #92]	; (800efa0 <arm_rfft_fast_init_f32+0xb4>)
 800ef44:	4b17      	ldr	r3, [pc, #92]	; (800efa4 <arm_rfft_fast_init_f32+0xb8>)
 800ef46:	e7e7      	b.n	800ef18 <arm_rfft_fast_init_f32+0x2c>
 800ef48:	f44f 64e1 	mov.w	r4, #1800	; 0x708
 800ef4c:	4916      	ldr	r1, [pc, #88]	; (800efa8 <arm_rfft_fast_init_f32+0xbc>)
 800ef4e:	4a17      	ldr	r2, [pc, #92]	; (800efac <arm_rfft_fast_init_f32+0xc0>)
 800ef50:	4b17      	ldr	r3, [pc, #92]	; (800efb0 <arm_rfft_fast_init_f32+0xc4>)
 800ef52:	e7e1      	b.n	800ef18 <arm_rfft_fast_init_f32+0x2c>
 800ef54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ef58:	d1ec      	bne.n	800ef34 <arm_rfft_fast_init_f32+0x48>
 800ef5a:	f44f 74dc 	mov.w	r4, #440	; 0x1b8
 800ef5e:	4915      	ldr	r1, [pc, #84]	; (800efb4 <arm_rfft_fast_init_f32+0xc8>)
 800ef60:	4a15      	ldr	r2, [pc, #84]	; (800efb8 <arm_rfft_fast_init_f32+0xcc>)
 800ef62:	4b16      	ldr	r3, [pc, #88]	; (800efbc <arm_rfft_fast_init_f32+0xd0>)
 800ef64:	e7d8      	b.n	800ef18 <arm_rfft_fast_init_f32+0x2c>
 800ef66:	2430      	movs	r4, #48	; 0x30
 800ef68:	4915      	ldr	r1, [pc, #84]	; (800efc0 <arm_rfft_fast_init_f32+0xd4>)
 800ef6a:	4a16      	ldr	r2, [pc, #88]	; (800efc4 <arm_rfft_fast_init_f32+0xd8>)
 800ef6c:	4b16      	ldr	r3, [pc, #88]	; (800efc8 <arm_rfft_fast_init_f32+0xdc>)
 800ef6e:	e7d3      	b.n	800ef18 <arm_rfft_fast_init_f32+0x2c>
 800ef70:	2414      	movs	r4, #20
 800ef72:	4916      	ldr	r1, [pc, #88]	; (800efcc <arm_rfft_fast_init_f32+0xe0>)
 800ef74:	4a16      	ldr	r2, [pc, #88]	; (800efd0 <arm_rfft_fast_init_f32+0xe4>)
 800ef76:	4b17      	ldr	r3, [pc, #92]	; (800efd4 <arm_rfft_fast_init_f32+0xe8>)
 800ef78:	e7ce      	b.n	800ef18 <arm_rfft_fast_init_f32+0x2c>
 800ef7a:	f44f 74e0 	mov.w	r4, #448	; 0x1c0
 800ef7e:	4916      	ldr	r1, [pc, #88]	; (800efd8 <arm_rfft_fast_init_f32+0xec>)
 800ef80:	4a16      	ldr	r2, [pc, #88]	; (800efdc <arm_rfft_fast_init_f32+0xf0>)
 800ef82:	4b17      	ldr	r3, [pc, #92]	; (800efe0 <arm_rfft_fast_init_f32+0xf4>)
 800ef84:	e7c8      	b.n	800ef18 <arm_rfft_fast_init_f32+0x2c>
 800ef86:	24d0      	movs	r4, #208	; 0xd0
 800ef88:	4916      	ldr	r1, [pc, #88]	; (800efe4 <arm_rfft_fast_init_f32+0xf8>)
 800ef8a:	4a17      	ldr	r2, [pc, #92]	; (800efe8 <arm_rfft_fast_init_f32+0xfc>)
 800ef8c:	4b17      	ldr	r3, [pc, #92]	; (800efec <arm_rfft_fast_init_f32+0x100>)
 800ef8e:	e7c3      	b.n	800ef18 <arm_rfft_fast_init_f32+0x2c>
 800ef90:	08021d78 	.word	0x08021d78
 800ef94:	08012f70 	.word	0x08012f70
 800ef98:	080190e0 	.word	0x080190e0
 800ef9c:	08017070 	.word	0x08017070
 800efa0:	08023b38 	.word	0x08023b38
 800efa4:	08026028 	.word	0x08026028
 800efa8:	0801fa60 	.word	0x0801fa60
 800efac:	0801d960 	.word	0x0801d960
 800efb0:	080170e0 	.word	0x080170e0
 800efb4:	08025cb8 	.word	0x08025cb8
 800efb8:	0801d0e0 	.word	0x0801d0e0
 800efbc:	08023d38 	.word	0x08023d38
 800efc0:	08020918 	.word	0x08020918
 800efc4:	0801f960 	.word	0x0801f960
 800efc8:	08016f70 	.word	0x08016f70
 800efcc:	08020870 	.word	0x08020870
 800efd0:	0801d8e0 	.word	0x0801d8e0
 800efd4:	08020898 	.word	0x08020898
 800efd8:	08024538 	.word	0x08024538
 800efdc:	08020d78 	.word	0x08020d78
 800efe0:	080248b8 	.word	0x080248b8
 800efe4:	08026228 	.word	0x08026228
 800efe8:	08020978 	.word	0x08020978
 800efec:	080258b8 	.word	0x080258b8

0800eff0 <arm_rfft_fast_f32>:
 800eff0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eff4:	8a06      	ldrh	r6, [r0, #16]
 800eff6:	0876      	lsrs	r6, r6, #1
 800eff8:	4607      	mov	r7, r0
 800effa:	4615      	mov	r5, r2
 800effc:	8006      	strh	r6, [r0, #0]
 800effe:	460c      	mov	r4, r1
 800f000:	2b00      	cmp	r3, #0
 800f002:	d15c      	bne.n	800f0be <arm_rfft_fast_f32+0xce>
 800f004:	461a      	mov	r2, r3
 800f006:	2301      	movs	r3, #1
 800f008:	f000 fbe4 	bl	800f7d4 <arm_cfft_f32>
 800f00c:	edd4 7a00 	vldr	s15, [r4]
 800f010:	ed94 7a01 	vldr	s14, [r4, #4]
 800f014:	883e      	ldrh	r6, [r7, #0]
 800f016:	6978      	ldr	r0, [r7, #20]
 800f018:	ee37 7a07 	vadd.f32	s14, s14, s14
 800f01c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800f020:	eeb6 3a00 	vmov.f32	s6, #96	; 0x3f000000  0.5
 800f024:	ee77 6a87 	vadd.f32	s13, s15, s14
 800f028:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f02c:	3e01      	subs	r6, #1
 800f02e:	ee26 7a83 	vmul.f32	s14, s13, s6
 800f032:	ee67 7a83 	vmul.f32	s15, s15, s6
 800f036:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 800f03a:	ed85 7a00 	vstr	s14, [r5]
 800f03e:	edc5 7a01 	vstr	s15, [r5, #4]
 800f042:	3010      	adds	r0, #16
 800f044:	f105 0210 	add.w	r2, r5, #16
 800f048:	3b08      	subs	r3, #8
 800f04a:	f104 0110 	add.w	r1, r4, #16
 800f04e:	ed93 7a02 	vldr	s14, [r3, #8]
 800f052:	ed51 6a02 	vldr	s13, [r1, #-8]
 800f056:	ed10 6a02 	vldr	s12, [r0, #-8]
 800f05a:	edd3 3a03 	vldr	s7, [r3, #12]
 800f05e:	ed11 5a01 	vldr	s10, [r1, #-4]
 800f062:	ed50 5a01 	vldr	s11, [r0, #-4]
 800f066:	ee77 7a66 	vsub.f32	s15, s14, s13
 800f06a:	ee77 4a26 	vadd.f32	s9, s14, s13
 800f06e:	ee33 4a85 	vadd.f32	s8, s7, s10
 800f072:	ee66 6a27 	vmul.f32	s13, s12, s15
 800f076:	ee25 7aa7 	vmul.f32	s14, s11, s15
 800f07a:	ee35 5a63 	vsub.f32	s10, s10, s7
 800f07e:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800f082:	ee77 7a05 	vadd.f32	s15, s14, s10
 800f086:	ee26 6a04 	vmul.f32	s12, s12, s8
 800f08a:	ee65 5a84 	vmul.f32	s11, s11, s8
 800f08e:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800f092:	ee36 7aa5 	vadd.f32	s14, s13, s11
 800f096:	ee67 7a83 	vmul.f32	s15, s15, s6
 800f09a:	ee27 7a03 	vmul.f32	s14, s14, s6
 800f09e:	3e01      	subs	r6, #1
 800f0a0:	ed02 7a02 	vstr	s14, [r2, #-8]
 800f0a4:	ed42 7a01 	vstr	s15, [r2, #-4]
 800f0a8:	f1a3 0308 	sub.w	r3, r3, #8
 800f0ac:	f101 0108 	add.w	r1, r1, #8
 800f0b0:	f100 0008 	add.w	r0, r0, #8
 800f0b4:	f102 0208 	add.w	r2, r2, #8
 800f0b8:	d1c9      	bne.n	800f04e <arm_rfft_fast_f32+0x5e>
 800f0ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f0be:	edd1 7a00 	vldr	s15, [r1]
 800f0c2:	edd1 6a01 	vldr	s13, [r1, #4]
 800f0c6:	6941      	ldr	r1, [r0, #20]
 800f0c8:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800f0cc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800f0d0:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
 800f0d4:	ee27 7a23 	vmul.f32	s14, s14, s7
 800f0d8:	ee67 7aa3 	vmul.f32	s15, s15, s7
 800f0dc:	3e01      	subs	r6, #1
 800f0de:	ed82 7a00 	vstr	s14, [r2]
 800f0e2:	edc2 7a01 	vstr	s15, [r2, #4]
 800f0e6:	00f0      	lsls	r0, r6, #3
 800f0e8:	b3ee      	cbz	r6, 800f166 <arm_rfft_fast_f32+0x176>
 800f0ea:	3808      	subs	r0, #8
 800f0ec:	f101 0e10 	add.w	lr, r1, #16
 800f0f0:	4420      	add	r0, r4
 800f0f2:	f104 0110 	add.w	r1, r4, #16
 800f0f6:	f102 0c10 	add.w	ip, r2, #16
 800f0fa:	ed90 7a02 	vldr	s14, [r0, #8]
 800f0fe:	ed51 6a02 	vldr	s13, [r1, #-8]
 800f102:	ed1e 6a02 	vldr	s12, [lr, #-8]
 800f106:	ed90 4a03 	vldr	s8, [r0, #12]
 800f10a:	ed11 5a01 	vldr	s10, [r1, #-4]
 800f10e:	ed5e 5a01 	vldr	s11, [lr, #-4]
 800f112:	ee76 7ac7 	vsub.f32	s15, s13, s14
 800f116:	ee74 4a05 	vadd.f32	s9, s8, s10
 800f11a:	ee26 3a27 	vmul.f32	s6, s12, s15
 800f11e:	ee77 6a26 	vadd.f32	s13, s14, s13
 800f122:	ee35 5a44 	vsub.f32	s10, s10, s8
 800f126:	ee25 7aa7 	vmul.f32	s14, s11, s15
 800f12a:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800f12e:	ee77 7a05 	vadd.f32	s15, s14, s10
 800f132:	ee26 6a24 	vmul.f32	s12, s12, s9
 800f136:	ee65 5aa4 	vmul.f32	s11, s11, s9
 800f13a:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800f13e:	ee36 7ae5 	vsub.f32	s14, s13, s11
 800f142:	ee67 7aa3 	vmul.f32	s15, s15, s7
 800f146:	ee27 7a23 	vmul.f32	s14, s14, s7
 800f14a:	3e01      	subs	r6, #1
 800f14c:	ed0c 7a02 	vstr	s14, [ip, #-8]
 800f150:	ed4c 7a01 	vstr	s15, [ip, #-4]
 800f154:	f1a0 0008 	sub.w	r0, r0, #8
 800f158:	f101 0108 	add.w	r1, r1, #8
 800f15c:	f10e 0e08 	add.w	lr, lr, #8
 800f160:	f10c 0c08 	add.w	ip, ip, #8
 800f164:	d1c9      	bne.n	800f0fa <arm_rfft_fast_f32+0x10a>
 800f166:	461a      	mov	r2, r3
 800f168:	4629      	mov	r1, r5
 800f16a:	4638      	mov	r0, r7
 800f16c:	2301      	movs	r3, #1
 800f16e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f172:	f000 bb2f 	b.w	800f7d4 <arm_cfft_f32>
 800f176:	bf00      	nop

0800f178 <arm_cfft_radix8by2_f32>:
 800f178:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f17c:	ed2d 8b08 	vpush	{d8-d11}
 800f180:	4607      	mov	r7, r0
 800f182:	4608      	mov	r0, r1
 800f184:	f8b7 e000 	ldrh.w	lr, [r7]
 800f188:	687a      	ldr	r2, [r7, #4]
 800f18a:	ea4f 015e 	mov.w	r1, lr, lsr #1
 800f18e:	eb00 088e 	add.w	r8, r0, lr, lsl #2
 800f192:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 800f196:	f000 80b0 	beq.w	800f2fa <arm_cfft_radix8by2_f32+0x182>
 800f19a:	008b      	lsls	r3, r1, #2
 800f19c:	3310      	adds	r3, #16
 800f19e:	18c6      	adds	r6, r0, r3
 800f1a0:	3210      	adds	r2, #16
 800f1a2:	4443      	add	r3, r8
 800f1a4:	f100 0510 	add.w	r5, r0, #16
 800f1a8:	f108 0410 	add.w	r4, r8, #16
 800f1ac:	ed54 1a04 	vldr	s3, [r4, #-16]
 800f1b0:	ed54 6a03 	vldr	s13, [r4, #-12]
 800f1b4:	ed13 4a04 	vldr	s8, [r3, #-16]
 800f1b8:	ed53 3a03 	vldr	s7, [r3, #-12]
 800f1bc:	ed53 5a02 	vldr	s11, [r3, #-8]
 800f1c0:	ed13 5a01 	vldr	s10, [r3, #-4]
 800f1c4:	ed14 0a02 	vldr	s0, [r4, #-8]
 800f1c8:	ed54 7a01 	vldr	s15, [r4, #-4]
 800f1cc:	ed16 2a04 	vldr	s4, [r6, #-16]
 800f1d0:	ed56 2a03 	vldr	s5, [r6, #-12]
 800f1d4:	ed15 6a03 	vldr	s12, [r5, #-12]
 800f1d8:	ed15 7a01 	vldr	s14, [r5, #-4]
 800f1dc:	ed15 3a04 	vldr	s6, [r5, #-16]
 800f1e0:	ed56 0a02 	vldr	s1, [r6, #-8]
 800f1e4:	ed16 1a01 	vldr	s2, [r6, #-4]
 800f1e8:	ed55 4a02 	vldr	s9, [r5, #-8]
 800f1ec:	ee73 ba21 	vadd.f32	s23, s6, s3
 800f1f0:	ee36 ba26 	vadd.f32	s22, s12, s13
 800f1f4:	ee37 aa27 	vadd.f32	s20, s14, s15
 800f1f8:	ee72 9a04 	vadd.f32	s19, s4, s8
 800f1fc:	ee32 9aa3 	vadd.f32	s18, s5, s7
 800f200:	ee31 8a05 	vadd.f32	s16, s2, s10
 800f204:	ee74 aa80 	vadd.f32	s21, s9, s0
 800f208:	ee70 8aa5 	vadd.f32	s17, s1, s11
 800f20c:	ed45 ba04 	vstr	s23, [r5, #-16]
 800f210:	ed05 ba03 	vstr	s22, [r5, #-12]
 800f214:	ed45 aa02 	vstr	s21, [r5, #-8]
 800f218:	ed05 aa01 	vstr	s20, [r5, #-4]
 800f21c:	ed06 8a01 	vstr	s16, [r6, #-4]
 800f220:	ed46 9a04 	vstr	s19, [r6, #-16]
 800f224:	ed06 9a03 	vstr	s18, [r6, #-12]
 800f228:	ed46 8a02 	vstr	s17, [r6, #-8]
 800f22c:	ee76 6a66 	vsub.f32	s13, s12, s13
 800f230:	ee73 3ae2 	vsub.f32	s7, s7, s5
 800f234:	ed12 6a03 	vldr	s12, [r2, #-12]
 800f238:	ed52 2a04 	vldr	s5, [r2, #-16]
 800f23c:	ee33 3a61 	vsub.f32	s6, s6, s3
 800f240:	ee34 4a42 	vsub.f32	s8, s8, s4
 800f244:	ee26 8a86 	vmul.f32	s16, s13, s12
 800f248:	ee24 2a06 	vmul.f32	s4, s8, s12
 800f24c:	ee63 1a22 	vmul.f32	s3, s6, s5
 800f250:	ee24 4a22 	vmul.f32	s8, s8, s5
 800f254:	ee23 3a06 	vmul.f32	s6, s6, s12
 800f258:	ee66 6aa2 	vmul.f32	s13, s13, s5
 800f25c:	ee23 6a86 	vmul.f32	s12, s7, s12
 800f260:	ee63 3aa2 	vmul.f32	s7, s7, s5
 800f264:	ee36 6a04 	vadd.f32	s12, s12, s8
 800f268:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800f26c:	ee72 3a63 	vsub.f32	s7, s4, s7
 800f270:	ee71 2a88 	vadd.f32	s5, s3, s16
 800f274:	ed44 6a03 	vstr	s13, [r4, #-12]
 800f278:	ed44 2a04 	vstr	s5, [r4, #-16]
 800f27c:	ed43 3a04 	vstr	s7, [r3, #-16]
 800f280:	ed03 6a03 	vstr	s12, [r3, #-12]
 800f284:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f288:	ee75 6ae0 	vsub.f32	s13, s11, s1
 800f28c:	ed12 7a01 	vldr	s14, [r2, #-4]
 800f290:	ed52 5a02 	vldr	s11, [r2, #-8]
 800f294:	ee35 6a41 	vsub.f32	s12, s10, s2
 800f298:	ee74 4ac0 	vsub.f32	s9, s9, s0
 800f29c:	ee67 3a87 	vmul.f32	s7, s15, s14
 800f2a0:	ee26 5a87 	vmul.f32	s10, s13, s14
 800f2a4:	ee24 4aa5 	vmul.f32	s8, s9, s11
 800f2a8:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800f2ac:	ee64 4a87 	vmul.f32	s9, s9, s14
 800f2b0:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800f2b4:	ee26 7a07 	vmul.f32	s14, s12, s14
 800f2b8:	ee26 6a25 	vmul.f32	s12, s12, s11
 800f2bc:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800f2c0:	ee74 5a23 	vadd.f32	s11, s8, s7
 800f2c4:	ee35 6a46 	vsub.f32	s12, s10, s12
 800f2c8:	ee37 7a26 	vadd.f32	s14, s14, s13
 800f2cc:	f1be 0e01 	subs.w	lr, lr, #1
 800f2d0:	ed44 5a02 	vstr	s11, [r4, #-8]
 800f2d4:	f105 0510 	add.w	r5, r5, #16
 800f2d8:	ed44 7a01 	vstr	s15, [r4, #-4]
 800f2dc:	f106 0610 	add.w	r6, r6, #16
 800f2e0:	ed03 6a02 	vstr	s12, [r3, #-8]
 800f2e4:	ed03 7a01 	vstr	s14, [r3, #-4]
 800f2e8:	f102 0210 	add.w	r2, r2, #16
 800f2ec:	f104 0410 	add.w	r4, r4, #16
 800f2f0:	f103 0310 	add.w	r3, r3, #16
 800f2f4:	f47f af5a 	bne.w	800f1ac <arm_cfft_radix8by2_f32+0x34>
 800f2f8:	687a      	ldr	r2, [r7, #4]
 800f2fa:	b28c      	uxth	r4, r1
 800f2fc:	4621      	mov	r1, r4
 800f2fe:	2302      	movs	r3, #2
 800f300:	f000 fae2 	bl	800f8c8 <arm_radix8_butterfly_f32>
 800f304:	ecbd 8b08 	vpop	{d8-d11}
 800f308:	4621      	mov	r1, r4
 800f30a:	687a      	ldr	r2, [r7, #4]
 800f30c:	4640      	mov	r0, r8
 800f30e:	2302      	movs	r3, #2
 800f310:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f314:	f000 bad8 	b.w	800f8c8 <arm_radix8_butterfly_f32>

0800f318 <arm_cfft_radix8by4_f32>:
 800f318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f31c:	ed2d 8b0a 	vpush	{d8-d12}
 800f320:	8802      	ldrh	r2, [r0, #0]
 800f322:	ed91 6a00 	vldr	s12, [r1]
 800f326:	b08f      	sub	sp, #60	; 0x3c
 800f328:	460f      	mov	r7, r1
 800f32a:	0852      	lsrs	r2, r2, #1
 800f32c:	6841      	ldr	r1, [r0, #4]
 800f32e:	900c      	str	r0, [sp, #48]	; 0x30
 800f330:	0093      	lsls	r3, r2, #2
 800f332:	4638      	mov	r0, r7
 800f334:	4418      	add	r0, r3
 800f336:	4606      	mov	r6, r0
 800f338:	9009      	str	r0, [sp, #36]	; 0x24
 800f33a:	4418      	add	r0, r3
 800f33c:	edd0 6a00 	vldr	s13, [r0]
 800f340:	ed96 4a00 	vldr	s8, [r6]
 800f344:	edd6 2a01 	vldr	s5, [r6, #4]
 800f348:	edd0 7a01 	vldr	s15, [r0, #4]
 800f34c:	900a      	str	r0, [sp, #40]	; 0x28
 800f34e:	ee76 5a26 	vadd.f32	s11, s12, s13
 800f352:	4604      	mov	r4, r0
 800f354:	4625      	mov	r5, r4
 800f356:	441c      	add	r4, r3
 800f358:	edd4 4a00 	vldr	s9, [r4]
 800f35c:	ed97 7a01 	vldr	s14, [r7, #4]
 800f360:	ed94 3a01 	vldr	s6, [r4, #4]
 800f364:	9401      	str	r4, [sp, #4]
 800f366:	ee35 5a84 	vadd.f32	s10, s11, s8
 800f36a:	4630      	mov	r0, r6
 800f36c:	ee35 5a24 	vadd.f32	s10, s10, s9
 800f370:	463e      	mov	r6, r7
 800f372:	ee15 ea10 	vmov	lr, s10
 800f376:	ee76 6a66 	vsub.f32	s13, s12, s13
 800f37a:	f846 eb08 	str.w	lr, [r6], #8
 800f37e:	ee37 6a27 	vadd.f32	s12, s14, s15
 800f382:	ed90 5a01 	vldr	s10, [r0, #4]
 800f386:	9605      	str	r6, [sp, #20]
 800f388:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f38c:	9e01      	ldr	r6, [sp, #4]
 800f38e:	9707      	str	r7, [sp, #28]
 800f390:	ee76 3aa2 	vadd.f32	s7, s13, s5
 800f394:	ed96 2a01 	vldr	s4, [r6, #4]
 800f398:	ee36 7a05 	vadd.f32	s14, s12, s10
 800f39c:	ee75 5ac4 	vsub.f32	s11, s11, s8
 800f3a0:	ee37 5ac4 	vsub.f32	s10, s15, s8
 800f3a4:	ee77 7a84 	vadd.f32	s15, s15, s8
 800f3a8:	ee33 4ac3 	vsub.f32	s8, s7, s6
 800f3ac:	4604      	mov	r4, r0
 800f3ae:	46a3      	mov	fp, r4
 800f3b0:	ee37 7a02 	vadd.f32	s14, s14, s4
 800f3b4:	ee35 5a24 	vadd.f32	s10, s10, s9
 800f3b8:	ee14 8a10 	vmov	r8, s8
 800f3bc:	46a4      	mov	ip, r4
 800f3be:	ee75 5ae4 	vsub.f32	s11, s11, s9
 800f3c2:	ed87 7a01 	vstr	s14, [r7, #4]
 800f3c6:	f84b 8b08 	str.w	r8, [fp], #8
 800f3ca:	f1ac 0704 	sub.w	r7, ip, #4
 800f3ce:	ed8c 5a01 	vstr	s10, [ip, #4]
 800f3d2:	f101 0c08 	add.w	ip, r1, #8
 800f3d6:	462c      	mov	r4, r5
 800f3d8:	f8cd c010 	str.w	ip, [sp, #16]
 800f3dc:	ee15 ca90 	vmov	ip, s11
 800f3e0:	ee36 6a62 	vsub.f32	s12, s12, s5
 800f3e4:	f844 cb08 	str.w	ip, [r4], #8
 800f3e8:	ee76 6ae2 	vsub.f32	s13, s13, s5
 800f3ec:	ee36 6a43 	vsub.f32	s12, s12, s6
 800f3f0:	9406      	str	r4, [sp, #24]
 800f3f2:	ee76 6a83 	vadd.f32	s13, s13, s6
 800f3f6:	f101 0410 	add.w	r4, r1, #16
 800f3fa:	0852      	lsrs	r2, r2, #1
 800f3fc:	9402      	str	r4, [sp, #8]
 800f3fe:	ed85 6a01 	vstr	s12, [r5, #4]
 800f402:	462c      	mov	r4, r5
 800f404:	f101 0518 	add.w	r5, r1, #24
 800f408:	920b      	str	r2, [sp, #44]	; 0x2c
 800f40a:	46b2      	mov	sl, r6
 800f40c:	9503      	str	r5, [sp, #12]
 800f40e:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800f412:	3a02      	subs	r2, #2
 800f414:	ee16 5a90 	vmov	r5, s13
 800f418:	46b6      	mov	lr, r6
 800f41a:	4630      	mov	r0, r6
 800f41c:	0852      	lsrs	r2, r2, #1
 800f41e:	f84a 5b08 	str.w	r5, [sl], #8
 800f422:	f1a0 0604 	sub.w	r6, r0, #4
 800f426:	edce 7a01 	vstr	s15, [lr, #4]
 800f42a:	9208      	str	r2, [sp, #32]
 800f42c:	f000 8130 	beq.w	800f690 <arm_cfft_radix8by4_f32+0x378>
 800f430:	4691      	mov	r9, r2
 800f432:	9a07      	ldr	r2, [sp, #28]
 800f434:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800f438:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800f43c:	3b08      	subs	r3, #8
 800f43e:	f102 0510 	add.w	r5, r2, #16
 800f442:	f101 0c20 	add.w	ip, r1, #32
 800f446:	f1a4 020c 	sub.w	r2, r4, #12
 800f44a:	f101 0e30 	add.w	lr, r1, #48	; 0x30
 800f44e:	4433      	add	r3, r6
 800f450:	3410      	adds	r4, #16
 800f452:	4650      	mov	r0, sl
 800f454:	4659      	mov	r1, fp
 800f456:	ed55 3a02 	vldr	s7, [r5, #-8]
 800f45a:	ed14 5a02 	vldr	s10, [r4, #-8]
 800f45e:	ed91 7a00 	vldr	s14, [r1]
 800f462:	edd0 7a00 	vldr	s15, [r0]
 800f466:	ed54 5a01 	vldr	s11, [r4, #-4]
 800f46a:	ed15 4a01 	vldr	s8, [r5, #-4]
 800f46e:	edd0 6a01 	vldr	s13, [r0, #4]
 800f472:	ed91 6a01 	vldr	s12, [r1, #4]
 800f476:	ee33 8a85 	vadd.f32	s16, s7, s10
 800f47a:	ee34 0a25 	vadd.f32	s0, s8, s11
 800f47e:	ee78 4a07 	vadd.f32	s9, s16, s14
 800f482:	ee74 5a65 	vsub.f32	s11, s8, s11
 800f486:	ee74 4aa7 	vadd.f32	s9, s9, s15
 800f48a:	ee33 5ac5 	vsub.f32	s10, s7, s10
 800f48e:	ed45 4a02 	vstr	s9, [r5, #-8]
 800f492:	edd1 4a01 	vldr	s9, [r1, #4]
 800f496:	ed90 4a01 	vldr	s8, [r0, #4]
 800f49a:	ee70 4a24 	vadd.f32	s9, s0, s9
 800f49e:	ee75 aa06 	vadd.f32	s21, s10, s12
 800f4a2:	ee74 4a84 	vadd.f32	s9, s9, s8
 800f4a6:	ee35 aac7 	vsub.f32	s20, s11, s14
 800f4aa:	ed45 4a01 	vstr	s9, [r5, #-4]
 800f4ae:	edd6 1a00 	vldr	s3, [r6]
 800f4b2:	edd7 0a00 	vldr	s1, [r7]
 800f4b6:	ed92 4a02 	vldr	s8, [r2, #8]
 800f4ba:	edd3 3a02 	vldr	s7, [r3, #8]
 800f4be:	ed93 2a01 	vldr	s4, [r3, #4]
 800f4c2:	ed16 1a01 	vldr	s2, [r6, #-4]
 800f4c6:	edd2 2a01 	vldr	s5, [r2, #4]
 800f4ca:	ed57 9a01 	vldr	s19, [r7, #-4]
 800f4ce:	ee70 4aa1 	vadd.f32	s9, s1, s3
 800f4d2:	ee39 3a81 	vadd.f32	s6, s19, s2
 800f4d6:	ee74 8a84 	vadd.f32	s17, s9, s8
 800f4da:	ee70 1ae1 	vsub.f32	s3, s1, s3
 800f4de:	ee78 8aa3 	vadd.f32	s17, s17, s7
 800f4e2:	ee7a aae6 	vsub.f32	s21, s21, s13
 800f4e6:	ee18 aa90 	vmov	sl, s17
 800f4ea:	f847 a908 	str.w	sl, [r7], #-8
 800f4ee:	edd2 8a01 	vldr	s17, [r2, #4]
 800f4f2:	ed93 9a01 	vldr	s18, [r3, #4]
 800f4f6:	ee73 8a28 	vadd.f32	s17, s6, s17
 800f4fa:	ee3a aa27 	vadd.f32	s20, s20, s15
 800f4fe:	ee78 8a89 	vadd.f32	s17, s17, s18
 800f502:	ee74 0a63 	vsub.f32	s1, s8, s7
 800f506:	edc7 8a01 	vstr	s17, [r7, #4]
 800f50a:	ed18 ba02 	vldr	s22, [r8, #-8]
 800f50e:	ed58 8a01 	vldr	s17, [r8, #-4]
 800f512:	ee39 1ac1 	vsub.f32	s2, s19, s2
 800f516:	ee6a ba28 	vmul.f32	s23, s20, s17
 800f51a:	ee2a ca8b 	vmul.f32	s24, s21, s22
 800f51e:	ee71 9ae2 	vsub.f32	s19, s3, s5
 800f522:	ee31 9a20 	vadd.f32	s18, s2, s1
 800f526:	ee79 9a82 	vadd.f32	s19, s19, s4
 800f52a:	ee3c ca2b 	vadd.f32	s24, s24, s23
 800f52e:	ee6a aaa8 	vmul.f32	s21, s21, s17
 800f532:	ee69 baa8 	vmul.f32	s23, s19, s17
 800f536:	ee2a aa0b 	vmul.f32	s20, s20, s22
 800f53a:	ee69 9a8b 	vmul.f32	s19, s19, s22
 800f53e:	ee69 8a28 	vmul.f32	s17, s18, s17
 800f542:	ee29 ba0b 	vmul.f32	s22, s18, s22
 800f546:	ee1c aa10 	vmov	sl, s24
 800f54a:	ee78 8aa9 	vadd.f32	s17, s17, s19
 800f54e:	f841 ab08 	str.w	sl, [r1], #8
 800f552:	ee3a aa6a 	vsub.f32	s20, s20, s21
 800f556:	ee3b bacb 	vsub.f32	s22, s23, s22
 800f55a:	ee34 4ac4 	vsub.f32	s8, s9, s8
 800f55e:	ee33 3a62 	vsub.f32	s6, s6, s5
 800f562:	ed01 aa01 	vstr	s20, [r1, #-4]
 800f566:	edc2 8a01 	vstr	s17, [r2, #4]
 800f56a:	ed82 ba02 	vstr	s22, [r2, #8]
 800f56e:	ed5c 4a04 	vldr	s9, [ip, #-16]
 800f572:	ee74 3a63 	vsub.f32	s7, s8, s7
 800f576:	ee38 8a47 	vsub.f32	s16, s16, s14
 800f57a:	ed1c 4a03 	vldr	s8, [ip, #-12]
 800f57e:	ee30 0a46 	vsub.f32	s0, s0, s12
 800f582:	ee33 3a42 	vsub.f32	s6, s6, s4
 800f586:	ee38 8a67 	vsub.f32	s16, s16, s15
 800f58a:	ee30 0a66 	vsub.f32	s0, s0, s13
 800f58e:	ee23 9ae4 	vnmul.f32	s18, s7, s9
 800f592:	ee63 8a04 	vmul.f32	s17, s6, s8
 800f596:	ee28 aa24 	vmul.f32	s20, s16, s9
 800f59a:	ee60 9a04 	vmul.f32	s19, s0, s8
 800f59e:	ee28 8a04 	vmul.f32	s16, s16, s8
 800f5a2:	ee20 0a24 	vmul.f32	s0, s0, s9
 800f5a6:	ee63 3a84 	vmul.f32	s7, s7, s8
 800f5aa:	ee39 4a68 	vsub.f32	s8, s18, s17
 800f5ae:	ee7a 9a29 	vadd.f32	s19, s20, s19
 800f5b2:	ee14 aa10 	vmov	sl, s8
 800f5b6:	ee30 0a48 	vsub.f32	s0, s0, s16
 800f5ba:	ee63 4a24 	vmul.f32	s9, s6, s9
 800f5be:	ed44 9a02 	vstr	s19, [r4, #-8]
 800f5c2:	ee73 3ae4 	vsub.f32	s7, s7, s9
 800f5c6:	ed04 0a01 	vstr	s0, [r4, #-4]
 800f5ca:	f846 a908 	str.w	sl, [r6], #-8
 800f5ce:	ee35 6a46 	vsub.f32	s12, s10, s12
 800f5d2:	ee35 7a87 	vadd.f32	s14, s11, s14
 800f5d6:	edc6 3a01 	vstr	s7, [r6, #4]
 800f5da:	ee76 6a26 	vadd.f32	s13, s12, s13
 800f5de:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f5e2:	ed1e 6a05 	vldr	s12, [lr, #-20]	; 0xffffffec
 800f5e6:	ed1e 7a06 	vldr	s14, [lr, #-24]	; 0xffffffe8
 800f5ea:	ee67 5a86 	vmul.f32	s11, s15, s12
 800f5ee:	ee26 5a87 	vmul.f32	s10, s13, s14
 800f5f2:	ee72 2a62 	vsub.f32	s5, s4, s5
 800f5f6:	ee30 1ac1 	vsub.f32	s2, s1, s2
 800f5fa:	ee72 2ae1 	vsub.f32	s5, s5, s3
 800f5fe:	ee75 5a25 	vadd.f32	s11, s10, s11
 800f602:	ee62 0a86 	vmul.f32	s1, s5, s12
 800f606:	ee66 6a86 	vmul.f32	s13, s13, s12
 800f60a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f60e:	ee21 6a06 	vmul.f32	s12, s2, s12
 800f612:	ee62 2a87 	vmul.f32	s5, s5, s14
 800f616:	ee21 1a07 	vmul.f32	s2, s2, s14
 800f61a:	ee15 aa90 	vmov	sl, s11
 800f61e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800f622:	f840 ab08 	str.w	sl, [r0], #8
 800f626:	ee30 1ac1 	vsub.f32	s2, s1, s2
 800f62a:	ee76 2a22 	vadd.f32	s5, s12, s5
 800f62e:	f1b9 0901 	subs.w	r9, r9, #1
 800f632:	ed40 7a01 	vstr	s15, [r0, #-4]
 800f636:	f105 0508 	add.w	r5, r5, #8
 800f63a:	ed83 1a02 	vstr	s2, [r3, #8]
 800f63e:	edc3 2a01 	vstr	s5, [r3, #4]
 800f642:	f108 0808 	add.w	r8, r8, #8
 800f646:	f1a2 0208 	sub.w	r2, r2, #8
 800f64a:	f10c 0c10 	add.w	ip, ip, #16
 800f64e:	f104 0408 	add.w	r4, r4, #8
 800f652:	f10e 0e18 	add.w	lr, lr, #24
 800f656:	f1a3 0308 	sub.w	r3, r3, #8
 800f65a:	f47f aefc 	bne.w	800f456 <arm_cfft_radix8by4_f32+0x13e>
 800f65e:	9908      	ldr	r1, [sp, #32]
 800f660:	9802      	ldr	r0, [sp, #8]
 800f662:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
 800f666:	00cb      	lsls	r3, r1, #3
 800f668:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 800f66c:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 800f670:	9102      	str	r1, [sp, #8]
 800f672:	9905      	ldr	r1, [sp, #20]
 800f674:	4419      	add	r1, r3
 800f676:	9105      	str	r1, [sp, #20]
 800f678:	9904      	ldr	r1, [sp, #16]
 800f67a:	4419      	add	r1, r3
 800f67c:	9104      	str	r1, [sp, #16]
 800f67e:	9906      	ldr	r1, [sp, #24]
 800f680:	449b      	add	fp, r3
 800f682:	4419      	add	r1, r3
 800f684:	449a      	add	sl, r3
 800f686:	9b03      	ldr	r3, [sp, #12]
 800f688:	9106      	str	r1, [sp, #24]
 800f68a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f68e:	9303      	str	r3, [sp, #12]
 800f690:	9a05      	ldr	r2, [sp, #20]
 800f692:	9806      	ldr	r0, [sp, #24]
 800f694:	ed92 4a00 	vldr	s8, [r2]
 800f698:	ed90 7a00 	vldr	s14, [r0]
 800f69c:	ed9b 3a00 	vldr	s6, [fp]
 800f6a0:	edda 3a00 	vldr	s7, [sl]
 800f6a4:	edd2 4a01 	vldr	s9, [r2, #4]
 800f6a8:	edd0 6a01 	vldr	s13, [r0, #4]
 800f6ac:	ed9a 2a01 	vldr	s4, [sl, #4]
 800f6b0:	eddb 7a01 	vldr	s15, [fp, #4]
 800f6b4:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 800f6b8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800f6ba:	ee34 6a07 	vadd.f32	s12, s8, s14
 800f6be:	ee74 5aa6 	vadd.f32	s11, s9, s13
 800f6c2:	ee36 5a03 	vadd.f32	s10, s12, s6
 800f6c6:	ee74 6ae6 	vsub.f32	s13, s9, s13
 800f6ca:	ee35 5a23 	vadd.f32	s10, s10, s7
 800f6ce:	ee34 7a47 	vsub.f32	s14, s8, s14
 800f6d2:	ed82 5a00 	vstr	s10, [r2]
 800f6d6:	ed9b 5a01 	vldr	s10, [fp, #4]
 800f6da:	edda 4a01 	vldr	s9, [sl, #4]
 800f6de:	ee35 5a85 	vadd.f32	s10, s11, s10
 800f6e2:	ee37 4a27 	vadd.f32	s8, s14, s15
 800f6e6:	ee35 5a24 	vadd.f32	s10, s10, s9
 800f6ea:	ee76 4ac3 	vsub.f32	s9, s13, s6
 800f6ee:	ed82 5a01 	vstr	s10, [r2, #4]
 800f6f2:	9a04      	ldr	r2, [sp, #16]
 800f6f4:	ee34 5aa3 	vadd.f32	s10, s9, s7
 800f6f8:	edd2 1a00 	vldr	s3, [r2]
 800f6fc:	edd2 2a01 	vldr	s5, [r2, #4]
 800f700:	9a02      	ldr	r2, [sp, #8]
 800f702:	ee34 4a42 	vsub.f32	s8, s8, s4
 800f706:	ee36 6a43 	vsub.f32	s12, s12, s6
 800f70a:	ee64 4a21 	vmul.f32	s9, s8, s3
 800f70e:	ee24 4a22 	vmul.f32	s8, s8, s5
 800f712:	ee65 2a22 	vmul.f32	s5, s10, s5
 800f716:	ee25 5a21 	vmul.f32	s10, s10, s3
 800f71a:	ee74 2aa2 	vadd.f32	s5, s9, s5
 800f71e:	ee35 5a44 	vsub.f32	s10, s10, s8
 800f722:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800f726:	edcb 2a00 	vstr	s5, [fp]
 800f72a:	ed8b 5a01 	vstr	s10, [fp, #4]
 800f72e:	ed92 4a01 	vldr	s8, [r2, #4]
 800f732:	ed92 5a00 	vldr	s10, [r2]
 800f736:	9a03      	ldr	r2, [sp, #12]
 800f738:	ee36 6a63 	vsub.f32	s12, s12, s7
 800f73c:	ee75 5ac2 	vsub.f32	s11, s11, s4
 800f740:	ee66 4a05 	vmul.f32	s9, s12, s10
 800f744:	ee25 5a85 	vmul.f32	s10, s11, s10
 800f748:	ee26 6a04 	vmul.f32	s12, s12, s8
 800f74c:	ee65 5a84 	vmul.f32	s11, s11, s8
 800f750:	ee35 6a46 	vsub.f32	s12, s10, s12
 800f754:	ee74 5aa5 	vadd.f32	s11, s9, s11
 800f758:	ee76 6a83 	vadd.f32	s13, s13, s6
 800f75c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f760:	ed80 6a01 	vstr	s12, [r0, #4]
 800f764:	edc0 5a00 	vstr	s11, [r0]
 800f768:	edd2 5a01 	vldr	s11, [r2, #4]
 800f76c:	9807      	ldr	r0, [sp, #28]
 800f76e:	ee77 7a02 	vadd.f32	s15, s14, s4
 800f772:	ee36 7ae3 	vsub.f32	s14, s13, s7
 800f776:	edd2 6a00 	vldr	s13, [r2]
 800f77a:	ee27 6aa6 	vmul.f32	s12, s15, s13
 800f77e:	ee67 6a26 	vmul.f32	s13, s14, s13
 800f782:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800f786:	ee27 7a25 	vmul.f32	s14, s14, s11
 800f78a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800f78e:	ee36 7a07 	vadd.f32	s14, s12, s14
 800f792:	edca 7a01 	vstr	s15, [sl, #4]
 800f796:	ed8a 7a00 	vstr	s14, [sl]
 800f79a:	6872      	ldr	r2, [r6, #4]
 800f79c:	4621      	mov	r1, r4
 800f79e:	2304      	movs	r3, #4
 800f7a0:	f000 f892 	bl	800f8c8 <arm_radix8_butterfly_f32>
 800f7a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f7a6:	6872      	ldr	r2, [r6, #4]
 800f7a8:	4621      	mov	r1, r4
 800f7aa:	2304      	movs	r3, #4
 800f7ac:	f000 f88c 	bl	800f8c8 <arm_radix8_butterfly_f32>
 800f7b0:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f7b2:	6872      	ldr	r2, [r6, #4]
 800f7b4:	4621      	mov	r1, r4
 800f7b6:	2304      	movs	r3, #4
 800f7b8:	f000 f886 	bl	800f8c8 <arm_radix8_butterfly_f32>
 800f7bc:	6872      	ldr	r2, [r6, #4]
 800f7be:	9801      	ldr	r0, [sp, #4]
 800f7c0:	4621      	mov	r1, r4
 800f7c2:	2304      	movs	r3, #4
 800f7c4:	b00f      	add	sp, #60	; 0x3c
 800f7c6:	ecbd 8b0a 	vpop	{d8-d12}
 800f7ca:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7ce:	f000 b87b 	b.w	800f8c8 <arm_radix8_butterfly_f32>
 800f7d2:	bf00      	nop

0800f7d4 <arm_cfft_f32>:
 800f7d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f7d8:	2a01      	cmp	r2, #1
 800f7da:	4606      	mov	r6, r0
 800f7dc:	4617      	mov	r7, r2
 800f7de:	460c      	mov	r4, r1
 800f7e0:	4698      	mov	r8, r3
 800f7e2:	8805      	ldrh	r5, [r0, #0]
 800f7e4:	d054      	beq.n	800f890 <arm_cfft_f32+0xbc>
 800f7e6:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800f7ea:	d04c      	beq.n	800f886 <arm_cfft_f32+0xb2>
 800f7ec:	d916      	bls.n	800f81c <arm_cfft_f32+0x48>
 800f7ee:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 800f7f2:	d01a      	beq.n	800f82a <arm_cfft_f32+0x56>
 800f7f4:	d95c      	bls.n	800f8b0 <arm_cfft_f32+0xdc>
 800f7f6:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 800f7fa:	d044      	beq.n	800f886 <arm_cfft_f32+0xb2>
 800f7fc:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 800f800:	d105      	bne.n	800f80e <arm_cfft_f32+0x3a>
 800f802:	2301      	movs	r3, #1
 800f804:	6872      	ldr	r2, [r6, #4]
 800f806:	4629      	mov	r1, r5
 800f808:	4620      	mov	r0, r4
 800f80a:	f000 f85d 	bl	800f8c8 <arm_radix8_butterfly_f32>
 800f80e:	f1b8 0f00 	cmp.w	r8, #0
 800f812:	d111      	bne.n	800f838 <arm_cfft_f32+0x64>
 800f814:	2f01      	cmp	r7, #1
 800f816:	d016      	beq.n	800f846 <arm_cfft_f32+0x72>
 800f818:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f81c:	2d20      	cmp	r5, #32
 800f81e:	d032      	beq.n	800f886 <arm_cfft_f32+0xb2>
 800f820:	d94a      	bls.n	800f8b8 <arm_cfft_f32+0xe4>
 800f822:	2d40      	cmp	r5, #64	; 0x40
 800f824:	d0ed      	beq.n	800f802 <arm_cfft_f32+0x2e>
 800f826:	2d80      	cmp	r5, #128	; 0x80
 800f828:	d1f1      	bne.n	800f80e <arm_cfft_f32+0x3a>
 800f82a:	4621      	mov	r1, r4
 800f82c:	4630      	mov	r0, r6
 800f82e:	f7ff fca3 	bl	800f178 <arm_cfft_radix8by2_f32>
 800f832:	f1b8 0f00 	cmp.w	r8, #0
 800f836:	d0ed      	beq.n	800f814 <arm_cfft_f32+0x40>
 800f838:	68b2      	ldr	r2, [r6, #8]
 800f83a:	89b1      	ldrh	r1, [r6, #12]
 800f83c:	4620      	mov	r0, r4
 800f83e:	f7f0 fccf 	bl	80001e0 <arm_bitreversal_32>
 800f842:	2f01      	cmp	r7, #1
 800f844:	d1e8      	bne.n	800f818 <arm_cfft_f32+0x44>
 800f846:	ee07 5a90 	vmov	s15, r5
 800f84a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f84e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f852:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800f856:	2d00      	cmp	r5, #0
 800f858:	d0de      	beq.n	800f818 <arm_cfft_f32+0x44>
 800f85a:	f104 0108 	add.w	r1, r4, #8
 800f85e:	2300      	movs	r3, #0
 800f860:	3301      	adds	r3, #1
 800f862:	429d      	cmp	r5, r3
 800f864:	f101 0108 	add.w	r1, r1, #8
 800f868:	ed11 7a04 	vldr	s14, [r1, #-16]
 800f86c:	ed51 7a03 	vldr	s15, [r1, #-12]
 800f870:	ee27 7a26 	vmul.f32	s14, s14, s13
 800f874:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800f878:	ed01 7a04 	vstr	s14, [r1, #-16]
 800f87c:	ed41 7a03 	vstr	s15, [r1, #-12]
 800f880:	d1ee      	bne.n	800f860 <arm_cfft_f32+0x8c>
 800f882:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f886:	4621      	mov	r1, r4
 800f888:	4630      	mov	r0, r6
 800f88a:	f7ff fd45 	bl	800f318 <arm_cfft_radix8by4_f32>
 800f88e:	e7be      	b.n	800f80e <arm_cfft_f32+0x3a>
 800f890:	b1ad      	cbz	r5, 800f8be <arm_cfft_f32+0xea>
 800f892:	f101 030c 	add.w	r3, r1, #12
 800f896:	2200      	movs	r2, #0
 800f898:	ed53 7a02 	vldr	s15, [r3, #-8]
 800f89c:	3201      	adds	r2, #1
 800f89e:	eef1 7a67 	vneg.f32	s15, s15
 800f8a2:	4295      	cmp	r5, r2
 800f8a4:	ed43 7a02 	vstr	s15, [r3, #-8]
 800f8a8:	f103 0308 	add.w	r3, r3, #8
 800f8ac:	d1f4      	bne.n	800f898 <arm_cfft_f32+0xc4>
 800f8ae:	e79a      	b.n	800f7e6 <arm_cfft_f32+0x12>
 800f8b0:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 800f8b4:	d0a5      	beq.n	800f802 <arm_cfft_f32+0x2e>
 800f8b6:	e7aa      	b.n	800f80e <arm_cfft_f32+0x3a>
 800f8b8:	2d10      	cmp	r5, #16
 800f8ba:	d0b6      	beq.n	800f82a <arm_cfft_f32+0x56>
 800f8bc:	e7a7      	b.n	800f80e <arm_cfft_f32+0x3a>
 800f8be:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800f8c2:	d894      	bhi.n	800f7ee <arm_cfft_f32+0x1a>
 800f8c4:	e7aa      	b.n	800f81c <arm_cfft_f32+0x48>
 800f8c6:	bf00      	nop

0800f8c8 <arm_radix8_butterfly_f32>:
 800f8c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8cc:	ed2d 8b10 	vpush	{d8-d15}
 800f8d0:	461c      	mov	r4, r3
 800f8d2:	b09d      	sub	sp, #116	; 0x74
 800f8d4:	4603      	mov	r3, r0
 800f8d6:	3304      	adds	r3, #4
 800f8d8:	ed9f bac4 	vldr	s22, [pc, #784]	; 800fbec <arm_radix8_butterfly_f32+0x324>
 800f8dc:	9019      	str	r0, [sp, #100]	; 0x64
 800f8de:	921a      	str	r2, [sp, #104]	; 0x68
 800f8e0:	468b      	mov	fp, r1
 800f8e2:	931b      	str	r3, [sp, #108]	; 0x6c
 800f8e4:	468a      	mov	sl, r1
 800f8e6:	46a1      	mov	r9, r4
 800f8e8:	4607      	mov	r7, r0
 800f8ea:	ea4f 03db 	mov.w	r3, fp, lsr #3
 800f8ee:	ea4f 0843 	mov.w	r8, r3, lsl #1
 800f8f2:	eb03 0508 	add.w	r5, r3, r8
 800f8f6:	195c      	adds	r4, r3, r5
 800f8f8:	00de      	lsls	r6, r3, #3
 800f8fa:	191a      	adds	r2, r3, r4
 800f8fc:	9600      	str	r6, [sp, #0]
 800f8fe:	1898      	adds	r0, r3, r2
 800f900:	4619      	mov	r1, r3
 800f902:	9e00      	ldr	r6, [sp, #0]
 800f904:	9311      	str	r3, [sp, #68]	; 0x44
 800f906:	4401      	add	r1, r0
 800f908:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
 800f90c:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 800f910:	19be      	adds	r6, r7, r6
 800f912:	eb07 05c5 	add.w	r5, r7, r5, lsl #3
 800f916:	eb07 04c4 	add.w	r4, r7, r4, lsl #3
 800f91a:	eb07 00c0 	add.w	r0, r7, r0, lsl #3
 800f91e:	9f00      	ldr	r7, [sp, #0]
 800f920:	011b      	lsls	r3, r3, #4
 800f922:	eb06 0e07 	add.w	lr, r6, r7
 800f926:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800f928:	9302      	str	r3, [sp, #8]
 800f92a:	3204      	adds	r2, #4
 800f92c:	3104      	adds	r1, #4
 800f92e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800f932:	f04f 0c00 	mov.w	ip, #0
 800f936:	edde 7a00 	vldr	s15, [lr]
 800f93a:	edd6 6a00 	vldr	s13, [r6]
 800f93e:	ed95 2a00 	vldr	s4, [r5]
 800f942:	ed17 aa01 	vldr	s20, [r7, #-4]
 800f946:	edd4 4a00 	vldr	s9, [r4]
 800f94a:	ed90 5a00 	vldr	s10, [r0]
 800f94e:	ed12 7a01 	vldr	s14, [r2, #-4]
 800f952:	ed51 0a01 	vldr	s1, [r1, #-4]
 800f956:	ee77 8a85 	vadd.f32	s17, s15, s10
 800f95a:	ee76 3a87 	vadd.f32	s7, s13, s14
 800f95e:	ee32 4a20 	vadd.f32	s8, s4, s1
 800f962:	ee3a 3a24 	vadd.f32	s6, s20, s9
 800f966:	ee33 6a84 	vadd.f32	s12, s7, s8
 800f96a:	ee73 5a28 	vadd.f32	s11, s6, s17
 800f96e:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800f972:	ee75 6a86 	vadd.f32	s13, s11, s12
 800f976:	ee75 5ac6 	vsub.f32	s11, s11, s12
 800f97a:	ed47 6a01 	vstr	s13, [r7, #-4]
 800f97e:	edc4 5a00 	vstr	s11, [r4]
 800f982:	ed92 9a00 	vldr	s18, [r2]
 800f986:	ed95 1a01 	vldr	s2, [r5, #4]
 800f98a:	edd6 5a01 	vldr	s11, [r6, #4]
 800f98e:	ed91 6a00 	vldr	s12, [r1]
 800f992:	edd7 2a00 	vldr	s5, [r7]
 800f996:	edd4 1a01 	vldr	s3, [r4, #4]
 800f99a:	edde 6a01 	vldr	s13, [lr, #4]
 800f99e:	edd0 9a01 	vldr	s19, [r0, #4]
 800f9a2:	ee72 0a60 	vsub.f32	s1, s4, s1
 800f9a6:	ee71 aa46 	vsub.f32	s21, s2, s12
 800f9aa:	ee35 2ac9 	vsub.f32	s4, s11, s18
 800f9ae:	ee37 0a60 	vsub.f32	s0, s14, s1
 800f9b2:	ee32 8a2a 	vadd.f32	s16, s4, s21
 800f9b6:	ee37 7a20 	vadd.f32	s14, s14, s1
 800f9ba:	ee32 2a6a 	vsub.f32	s4, s4, s21
 800f9be:	ee37 5ac5 	vsub.f32	s10, s15, s10
 800f9c2:	ee75 5a89 	vadd.f32	s11, s11, s18
 800f9c6:	ee60 0a0b 	vmul.f32	s1, s0, s22
 800f9ca:	ee7a 4a64 	vsub.f32	s9, s20, s9
 800f9ce:	ee31 6a06 	vadd.f32	s12, s2, s12
 800f9d2:	ee36 9aa9 	vadd.f32	s18, s13, s19
 800f9d6:	ee32 1aa1 	vadd.f32	s2, s5, s3
 800f9da:	ee76 6ae9 	vsub.f32	s13, s13, s19
 800f9de:	ee72 1ae1 	vsub.f32	s3, s5, s3
 800f9e2:	ee28 8a0b 	vmul.f32	s16, s16, s22
 800f9e6:	ee62 2a0b 	vmul.f32	s5, s4, s22
 800f9ea:	ee67 7a0b 	vmul.f32	s15, s14, s22
 800f9ee:	ee33 3a68 	vsub.f32	s6, s6, s17
 800f9f2:	ee36 0a88 	vadd.f32	s0, s13, s16
 800f9f6:	ee75 8a86 	vadd.f32	s17, s11, s12
 800f9fa:	ee36 7ac8 	vsub.f32	s14, s13, s16
 800f9fe:	ee33 4ac4 	vsub.f32	s8, s7, s8
 800fa02:	ee74 6ae0 	vsub.f32	s13, s9, s1
 800fa06:	ee74 3aa0 	vadd.f32	s7, s9, s1
 800fa0a:	ee35 6ac6 	vsub.f32	s12, s11, s12
 800fa0e:	ee75 4a27 	vadd.f32	s9, s10, s15
 800fa12:	ee71 5a49 	vsub.f32	s11, s2, s18
 800fa16:	ee31 2a09 	vadd.f32	s4, s2, s18
 800fa1a:	ee75 7a67 	vsub.f32	s15, s10, s15
 800fa1e:	ee31 1aa2 	vadd.f32	s2, s3, s5
 800fa22:	ee71 2ae2 	vsub.f32	s5, s3, s5
 800fa26:	ee73 0a06 	vadd.f32	s1, s6, s12
 800fa2a:	ee75 1ac4 	vsub.f32	s3, s11, s8
 800fa2e:	ee36 5a87 	vadd.f32	s10, s13, s14
 800fa32:	ee32 8a28 	vadd.f32	s16, s4, s17
 800fa36:	ee33 6a46 	vsub.f32	s12, s6, s12
 800fa3a:	ee34 4a25 	vadd.f32	s8, s8, s11
 800fa3e:	ee33 3a80 	vadd.f32	s6, s7, s0
 800fa42:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800fa46:	ee71 5a64 	vsub.f32	s11, s2, s9
 800fa4a:	ee72 6ae7 	vsub.f32	s13, s5, s15
 800fa4e:	ee32 2a68 	vsub.f32	s4, s4, s17
 800fa52:	ee73 3ac0 	vsub.f32	s7, s7, s0
 800fa56:	ee74 4a81 	vadd.f32	s9, s9, s2
 800fa5a:	ee77 7aa2 	vadd.f32	s15, s15, s5
 800fa5e:	44dc      	add	ip, fp
 800fa60:	45e2      	cmp	sl, ip
 800fa62:	ed87 8a00 	vstr	s16, [r7]
 800fa66:	ed84 2a01 	vstr	s4, [r4, #4]
 800fa6a:	441f      	add	r7, r3
 800fa6c:	edce 0a00 	vstr	s1, [lr]
 800fa70:	441c      	add	r4, r3
 800fa72:	ed80 6a00 	vstr	s12, [r0]
 800fa76:	edce 1a01 	vstr	s3, [lr, #4]
 800fa7a:	ed80 4a01 	vstr	s8, [r0, #4]
 800fa7e:	449e      	add	lr, r3
 800fa80:	ed86 3a00 	vstr	s6, [r6]
 800fa84:	4418      	add	r0, r3
 800fa86:	ed41 3a01 	vstr	s7, [r1, #-4]
 800fa8a:	ed02 5a01 	vstr	s10, [r2, #-4]
 800fa8e:	ed85 7a00 	vstr	s14, [r5]
 800fa92:	edc6 5a01 	vstr	s11, [r6, #4]
 800fa96:	edc1 4a00 	vstr	s9, [r1]
 800fa9a:	441e      	add	r6, r3
 800fa9c:	edc2 6a00 	vstr	s13, [r2]
 800faa0:	4419      	add	r1, r3
 800faa2:	edc5 7a01 	vstr	s15, [r5, #4]
 800faa6:	441a      	add	r2, r3
 800faa8:	441d      	add	r5, r3
 800faaa:	f63f af44 	bhi.w	800f936 <arm_radix8_butterfly_f32+0x6e>
 800faae:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800fab0:	2a07      	cmp	r2, #7
 800fab2:	f240 81f5 	bls.w	800fea0 <arm_radix8_butterfly_f32+0x5d8>
 800fab6:	f108 0101 	add.w	r1, r8, #1
 800faba:	188f      	adds	r7, r1, r2
 800fabc:	eb09 0849 	add.w	r8, r9, r9, lsl #1
 800fac0:	19d6      	adds	r6, r2, r7
 800fac2:	eb08 0c09 	add.w	ip, r8, r9
 800fac6:	1994      	adds	r4, r2, r6
 800fac8:	eb0c 0e09 	add.w	lr, ip, r9
 800facc:	4610      	mov	r0, r2
 800face:	9701      	str	r7, [sp, #4]
 800fad0:	4420      	add	r0, r4
 800fad2:	eb0e 0709 	add.w	r7, lr, r9
 800fad6:	1815      	adds	r5, r2, r0
 800fad8:	eb07 0209 	add.w	r2, r7, r9
 800fadc:	9203      	str	r2, [sp, #12]
 800fade:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800fae0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800fae4:	9117      	str	r1, [sp, #92]	; 0x5c
 800fae6:	440a      	add	r2, r1
 800fae8:	9900      	ldr	r1, [sp, #0]
 800faea:	3108      	adds	r1, #8
 800faec:	9100      	str	r1, [sp, #0]
 800faee:	9902      	ldr	r1, [sp, #8]
 800faf0:	3108      	adds	r1, #8
 800faf2:	9102      	str	r1, [sp, #8]
 800faf4:	9919      	ldr	r1, [sp, #100]	; 0x64
 800faf6:	00ff      	lsls	r7, r7, #3
 800faf8:	9715      	str	r7, [sp, #84]	; 0x54
 800fafa:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 800fafe:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800fb02:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 800fb06:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 800fb08:	9903      	ldr	r1, [sp, #12]
 800fb0a:	19d7      	adds	r7, r2, r7
 800fb0c:	00c9      	lsls	r1, r1, #3
 800fb0e:	9114      	str	r1, [sp, #80]	; 0x50
 800fb10:	9710      	str	r7, [sp, #64]	; 0x40
 800fb12:	9919      	ldr	r1, [sp, #100]	; 0x64
 800fb14:	9f00      	ldr	r7, [sp, #0]
 800fb16:	19cf      	adds	r7, r1, r7
 800fb18:	970d      	str	r7, [sp, #52]	; 0x34
 800fb1a:	9f02      	ldr	r7, [sp, #8]
 800fb1c:	19cf      	adds	r7, r1, r7
 800fb1e:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 800fb22:	970c      	str	r7, [sp, #48]	; 0x30
 800fb24:	9f01      	ldr	r7, [sp, #4]
 800fb26:	f8cd e058 	str.w	lr, [sp, #88]	; 0x58
 800fb2a:	3504      	adds	r5, #4
 800fb2c:	3004      	adds	r0, #4
 800fb2e:	eb01 0ec7 	add.w	lr, r1, r7, lsl #3
 800fb32:	9508      	str	r5, [sp, #32]
 800fb34:	9009      	str	r0, [sp, #36]	; 0x24
 800fb36:	9d16      	ldr	r5, [sp, #88]	; 0x58
 800fb38:	981a      	ldr	r0, [sp, #104]	; 0x68
 800fb3a:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
 800fb3e:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 800fb42:	eb01 0ec6 	add.w	lr, r1, r6, lsl #3
 800fb46:	9e14      	ldr	r6, [sp, #80]	; 0x50
 800fb48:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
 800fb4c:	1945      	adds	r5, r0, r5
 800fb4e:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 800fb52:	460f      	mov	r7, r1
 800fb54:	3404      	adds	r4, #4
 800fb56:	4641      	mov	r1, r8
 800fb58:	1841      	adds	r1, r0, r1
 800fb5a:	f8cd c048 	str.w	ip, [sp, #72]	; 0x48
 800fb5e:	940a      	str	r4, [sp, #40]	; 0x28
 800fb60:	eb00 0c06 	add.w	ip, r0, r6
 800fb64:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800fb68:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800fb6a:	9506      	str	r5, [sp, #24]
 800fb6c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 800fb6e:	9105      	str	r1, [sp, #20]
 800fb70:	4639      	mov	r1, r7
 800fb72:	1905      	adds	r5, r0, r4
 800fb74:	3108      	adds	r1, #8
 800fb76:	9c10      	ldr	r4, [sp, #64]	; 0x40
 800fb78:	9507      	str	r5, [sp, #28]
 800fb7a:	910f      	str	r1, [sp, #60]	; 0x3c
 800fb7c:	ea4f 1509 	mov.w	r5, r9, lsl #4
 800fb80:	2101      	movs	r1, #1
 800fb82:	eb00 0e06 	add.w	lr, r0, r6
 800fb86:	9518      	str	r5, [sp, #96]	; 0x60
 800fb88:	9404      	str	r4, [sp, #16]
 800fb8a:	9103      	str	r1, [sp, #12]
 800fb8c:	4620      	mov	r0, r4
 800fb8e:	4689      	mov	r9, r1
 800fb90:	9e06      	ldr	r6, [sp, #24]
 800fb92:	ed90 fa00 	vldr	s30, [r0]
 800fb96:	edd6 7a01 	vldr	s15, [r6, #4]
 800fb9a:	edd0 ba01 	vldr	s23, [r0, #4]
 800fb9e:	edcd 7a00 	vstr	s15, [sp]
 800fba2:	a80d      	add	r0, sp, #52	; 0x34
 800fba4:	edde 7a01 	vldr	s15, [lr, #4]
 800fba8:	9c05      	ldr	r4, [sp, #20]
 800fbaa:	9d07      	ldr	r5, [sp, #28]
 800fbac:	edd2 fa00 	vldr	s31, [r2]
 800fbb0:	ed92 ca01 	vldr	s24, [r2, #4]
 800fbb4:	edcd 7a01 	vstr	s15, [sp, #4]
 800fbb8:	c807      	ldmia	r0, {r0, r1, r2}
 800fbba:	eddc 7a01 	vldr	s15, [ip, #4]
 800fbbe:	edd4 ea00 	vldr	s29, [r4]
 800fbc2:	ed95 ea00 	vldr	s28, [r5]
 800fbc6:	edd6 da00 	vldr	s27, [r6]
 800fbca:	edd4 aa01 	vldr	s21, [r4, #4]
 800fbce:	ed95 aa01 	vldr	s20, [r5, #4]
 800fbd2:	ed9e da00 	vldr	s26, [lr]
 800fbd6:	eddc ca00 	vldr	s25, [ip]
 800fbda:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800fbde:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800fbe0:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800fbe2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800fbe4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800fbe6:	edcd 7a02 	vstr	s15, [sp, #8]
 800fbea:	e001      	b.n	800fbf0 <arm_radix8_butterfly_f32+0x328>
 800fbec:	3f3504f3 	.word	0x3f3504f3
 800fbf0:	ed16 6a01 	vldr	s12, [r6, #-4]
 800fbf4:	ed91 5a00 	vldr	s10, [r1]
 800fbf8:	ed57 9a01 	vldr	s19, [r7, #-4]
 800fbfc:	edd5 7a00 	vldr	s15, [r5]
 800fc00:	ed18 7a01 	vldr	s14, [r8, #-4]
 800fc04:	edd2 3a00 	vldr	s7, [r2]
 800fc08:	ed94 3a00 	vldr	s6, [r4]
 800fc0c:	ed90 2a00 	vldr	s4, [r0]
 800fc10:	ed92 0a01 	vldr	s0, [r2, #4]
 800fc14:	ee33 8a85 	vadd.f32	s16, s7, s10
 800fc18:	ee32 1a06 	vadd.f32	s2, s4, s12
 800fc1c:	ee33 4a29 	vadd.f32	s8, s6, s19
 800fc20:	ee77 4a87 	vadd.f32	s9, s15, s14
 800fc24:	ee78 1a04 	vadd.f32	s3, s16, s8
 800fc28:	ee71 6a24 	vadd.f32	s13, s2, s9
 800fc2c:	ee32 2a46 	vsub.f32	s4, s4, s12
 800fc30:	ee31 6aa6 	vadd.f32	s12, s3, s13
 800fc34:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fc38:	ed82 6a00 	vstr	s12, [r2]
 800fc3c:	edd5 8a01 	vldr	s17, [r5, #4]
 800fc40:	ed90 9a01 	vldr	s18, [r0, #4]
 800fc44:	edd6 2a00 	vldr	s5, [r6]
 800fc48:	ed98 7a00 	vldr	s14, [r8]
 800fc4c:	edd4 0a01 	vldr	s1, [r4, #4]
 800fc50:	ed91 6a01 	vldr	s12, [r1, #4]
 800fc54:	edd7 5a00 	vldr	s11, [r7]
 800fc58:	ee73 3ac5 	vsub.f32	s7, s7, s10
 800fc5c:	ee33 3a69 	vsub.f32	s6, s6, s19
 800fc60:	ee39 5a62 	vsub.f32	s10, s18, s5
 800fc64:	ee78 9ac7 	vsub.f32	s19, s17, s14
 800fc68:	ee38 4a44 	vsub.f32	s8, s16, s8
 800fc6c:	ee38 7a87 	vadd.f32	s14, s17, s14
 800fc70:	ee30 8aa5 	vadd.f32	s16, s1, s11
 800fc74:	ee79 2a22 	vadd.f32	s5, s18, s5
 800fc78:	ee75 8a69 	vsub.f32	s17, s10, s19
 800fc7c:	ee32 9a27 	vadd.f32	s18, s4, s15
 800fc80:	ee35 5a29 	vadd.f32	s10, s10, s19
 800fc84:	ee72 7a67 	vsub.f32	s15, s4, s15
 800fc88:	ee30 2a06 	vadd.f32	s4, s0, s12
 800fc8c:	ee69 9a0b 	vmul.f32	s19, s18, s22
 800fc90:	ee70 5ae5 	vsub.f32	s11, s1, s11
 800fc94:	ee32 9a08 	vadd.f32	s18, s4, s16
 800fc98:	ee68 8a8b 	vmul.f32	s17, s17, s22
 800fc9c:	ee32 2a48 	vsub.f32	s4, s4, s16
 800fca0:	ee71 4a64 	vsub.f32	s9, s2, s9
 800fca4:	ee25 5a0b 	vmul.f32	s10, s10, s22
 800fca8:	ee32 1a87 	vadd.f32	s2, s5, s14
 800fcac:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800fcb0:	ee72 2ac7 	vsub.f32	s5, s5, s14
 800fcb4:	ee30 6a46 	vsub.f32	s12, s0, s12
 800fcb8:	ee73 0a29 	vadd.f32	s1, s6, s19
 800fcbc:	ee36 0a28 	vadd.f32	s0, s12, s17
 800fcc0:	ee33 3a69 	vsub.f32	s6, s6, s19
 800fcc4:	ee32 7a64 	vsub.f32	s14, s4, s9
 800fcc8:	ee73 9aa7 	vadd.f32	s19, s7, s15
 800fccc:	ee36 6a68 	vsub.f32	s12, s12, s17
 800fcd0:	ee73 7ae7 	vsub.f32	s15, s7, s15
 800fcd4:	ee75 8a85 	vadd.f32	s17, s11, s10
 800fcd8:	ee74 3a22 	vadd.f32	s7, s8, s5
 800fcdc:	ee35 5ac5 	vsub.f32	s10, s11, s10
 800fce0:	ee71 6ae6 	vsub.f32	s13, s3, s13
 800fce4:	ee79 1a41 	vsub.f32	s3, s18, s2
 800fce8:	ee39 8aa8 	vadd.f32	s16, s19, s17
 800fcec:	ee76 5a43 	vsub.f32	s11, s12, s6
 800fcf0:	ee74 2a62 	vsub.f32	s5, s8, s5
 800fcf4:	ee74 4a82 	vadd.f32	s9, s9, s4
 800fcf8:	ee30 4a60 	vsub.f32	s8, s0, s1
 800fcfc:	ee79 8ae8 	vsub.f32	s17, s19, s17
 800fd00:	ee30 0a80 	vadd.f32	s0, s1, s0
 800fd04:	ee77 9a85 	vadd.f32	s19, s15, s10
 800fd08:	ee33 6a06 	vadd.f32	s12, s6, s12
 800fd0c:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800fd10:	ee2e 2a21 	vmul.f32	s4, s28, s3
 800fd14:	ee2e 5a26 	vmul.f32	s10, s28, s13
 800fd18:	ee6f 0a23 	vmul.f32	s1, s30, s7
 800fd1c:	ee2a 3a21 	vmul.f32	s6, s20, s3
 800fd20:	ee39 1a01 	vadd.f32	s2, s18, s2
 800fd24:	ee6a 6a26 	vmul.f32	s13, s20, s13
 800fd28:	ee2b 9a87 	vmul.f32	s18, s23, s14
 800fd2c:	ee6b 3aa3 	vmul.f32	s7, s23, s7
 800fd30:	ee2f 7a07 	vmul.f32	s14, s30, s14
 800fd34:	ee6f 1a84 	vmul.f32	s3, s31, s8
 800fd38:	ee35 3a03 	vadd.f32	s6, s10, s6
 800fd3c:	ee72 6a66 	vsub.f32	s13, s4, s13
 800fd40:	ee2c 5a04 	vmul.f32	s10, s24, s8
 800fd44:	ee2f 2a88 	vmul.f32	s4, s31, s16
 800fd48:	ed9d 4a02 	vldr	s8, [sp, #8]
 800fd4c:	ed82 1a01 	vstr	s2, [r2, #4]
 800fd50:	ee77 3a63 	vsub.f32	s7, s14, s7
 800fd54:	ee2c 8a08 	vmul.f32	s16, s24, s16
 800fd58:	ed9d 7a01 	vldr	s14, [sp, #4]
 800fd5c:	ed81 3a00 	vstr	s6, [r1]
 800fd60:	ee30 9a89 	vadd.f32	s18, s1, s18
 800fd64:	ee32 2a05 	vadd.f32	s4, s4, s10
 800fd68:	ee6d 0a22 	vmul.f32	s1, s26, s5
 800fd6c:	ee31 8ac8 	vsub.f32	s16, s3, s16
 800fd70:	ee67 2a22 	vmul.f32	s5, s14, s5
 800fd74:	ee64 1a00 	vmul.f32	s3, s8, s0
 800fd78:	ee27 7a24 	vmul.f32	s14, s14, s9
 800fd7c:	ee2c 5aa8 	vmul.f32	s10, s25, s17
 800fd80:	ee6d 4a24 	vmul.f32	s9, s26, s9
 800fd84:	ee64 8a28 	vmul.f32	s17, s8, s17
 800fd88:	ed9d 4a00 	vldr	s8, [sp]
 800fd8c:	edc1 6a01 	vstr	s13, [r1, #4]
 800fd90:	ee74 2ae2 	vsub.f32	s5, s9, s5
 800fd94:	ee6d 4aa9 	vmul.f32	s9, s27, s19
 800fd98:	ee64 9a29 	vmul.f32	s19, s8, s19
 800fd9c:	ee24 4a25 	vmul.f32	s8, s8, s11
 800fda0:	ee30 7a87 	vadd.f32	s14, s1, s14
 800fda4:	ee74 4a84 	vadd.f32	s9, s9, s8
 800fda8:	ee6e 0aa7 	vmul.f32	s1, s29, s15
 800fdac:	ee2a 4a86 	vmul.f32	s8, s21, s12
 800fdb0:	ee2c 0a80 	vmul.f32	s0, s25, s0
 800fdb4:	ee6d 5aa5 	vmul.f32	s11, s27, s11
 800fdb8:	ee6a 7aa7 	vmul.f32	s15, s21, s15
 800fdbc:	ee2e 6a86 	vmul.f32	s12, s29, s12
 800fdc0:	ee75 1a21 	vadd.f32	s3, s10, s3
 800fdc4:	ee30 0a68 	vsub.f32	s0, s0, s17
 800fdc8:	ee75 9ae9 	vsub.f32	s19, s11, s19
 800fdcc:	ee70 0a84 	vadd.f32	s1, s1, s8
 800fdd0:	ee36 6a67 	vsub.f32	s12, s12, s15
 800fdd4:	44d9      	add	r9, fp
 800fdd6:	45ca      	cmp	sl, r9
 800fdd8:	ed84 9a00 	vstr	s18, [r4]
 800fddc:	edc4 3a01 	vstr	s7, [r4, #4]
 800fde0:	441a      	add	r2, r3
 800fde2:	ed07 7a01 	vstr	s14, [r7, #-4]
 800fde6:	edc7 2a00 	vstr	s5, [r7]
 800fdea:	4419      	add	r1, r3
 800fdec:	ed80 2a00 	vstr	s4, [r0]
 800fdf0:	ed80 8a01 	vstr	s16, [r0, #4]
 800fdf4:	441c      	add	r4, r3
 800fdf6:	ed48 1a01 	vstr	s3, [r8, #-4]
 800fdfa:	ed88 0a00 	vstr	s0, [r8]
 800fdfe:	441f      	add	r7, r3
 800fe00:	ed46 4a01 	vstr	s9, [r6, #-4]
 800fe04:	4418      	add	r0, r3
 800fe06:	edc6 9a00 	vstr	s19, [r6]
 800fe0a:	4498      	add	r8, r3
 800fe0c:	edc5 0a00 	vstr	s1, [r5]
 800fe10:	ed85 6a01 	vstr	s12, [r5, #4]
 800fe14:	441e      	add	r6, r3
 800fe16:	441d      	add	r5, r3
 800fe18:	f63f aeea 	bhi.w	800fbf0 <arm_radix8_butterfly_f32+0x328>
 800fe1c:	9a03      	ldr	r2, [sp, #12]
 800fe1e:	9818      	ldr	r0, [sp, #96]	; 0x60
 800fe20:	3201      	adds	r2, #1
 800fe22:	4611      	mov	r1, r2
 800fe24:	9203      	str	r2, [sp, #12]
 800fe26:	9a04      	ldr	r2, [sp, #16]
 800fe28:	4402      	add	r2, r0
 800fe2a:	9204      	str	r2, [sp, #16]
 800fe2c:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800fe2e:	9a05      	ldr	r2, [sp, #20]
 800fe30:	4402      	add	r2, r0
 800fe32:	9205      	str	r2, [sp, #20]
 800fe34:	9812      	ldr	r0, [sp, #72]	; 0x48
 800fe36:	9a07      	ldr	r2, [sp, #28]
 800fe38:	4402      	add	r2, r0
 800fe3a:	9207      	str	r2, [sp, #28]
 800fe3c:	9816      	ldr	r0, [sp, #88]	; 0x58
 800fe3e:	9a06      	ldr	r2, [sp, #24]
 800fe40:	4402      	add	r2, r0
 800fe42:	9206      	str	r2, [sp, #24]
 800fe44:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800fe46:	4496      	add	lr, r2
 800fe48:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800fe4a:	4494      	add	ip, r2
 800fe4c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800fe4e:	3208      	adds	r2, #8
 800fe50:	920f      	str	r2, [sp, #60]	; 0x3c
 800fe52:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800fe54:	3208      	adds	r2, #8
 800fe56:	920e      	str	r2, [sp, #56]	; 0x38
 800fe58:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800fe5a:	3208      	adds	r2, #8
 800fe5c:	920d      	str	r2, [sp, #52]	; 0x34
 800fe5e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800fe60:	3208      	adds	r2, #8
 800fe62:	920c      	str	r2, [sp, #48]	; 0x30
 800fe64:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800fe66:	3208      	adds	r2, #8
 800fe68:	920b      	str	r2, [sp, #44]	; 0x2c
 800fe6a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fe6c:	3208      	adds	r2, #8
 800fe6e:	920a      	str	r2, [sp, #40]	; 0x28
 800fe70:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fe72:	3208      	adds	r2, #8
 800fe74:	9209      	str	r2, [sp, #36]	; 0x24
 800fe76:	9a08      	ldr	r2, [sp, #32]
 800fe78:	3208      	adds	r2, #8
 800fe7a:	9208      	str	r2, [sp, #32]
 800fe7c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 800fe7e:	9811      	ldr	r0, [sp, #68]	; 0x44
 800fe80:	4288      	cmp	r0, r1
 800fe82:	4622      	mov	r2, r4
 800fe84:	d007      	beq.n	800fe96 <arm_radix8_butterfly_f32+0x5ce>
 800fe86:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800fe88:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800fe8c:	4621      	mov	r1, r4
 800fe8e:	4401      	add	r1, r0
 800fe90:	9110      	str	r1, [sp, #64]	; 0x40
 800fe92:	9804      	ldr	r0, [sp, #16]
 800fe94:	e67c      	b.n	800fb90 <arm_radix8_butterfly_f32+0x2c8>
 800fe96:	4683      	mov	fp, r0
 800fe98:	f8bd 905c 	ldrh.w	r9, [sp, #92]	; 0x5c
 800fe9c:	9f19      	ldr	r7, [sp, #100]	; 0x64
 800fe9e:	e524      	b.n	800f8ea <arm_radix8_butterfly_f32+0x22>
 800fea0:	b01d      	add	sp, #116	; 0x74
 800fea2:	ecbd 8b10 	vpop	{d8-d15}
 800fea6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800feaa:	bf00      	nop

0800feac <__errno>:
 800feac:	4b01      	ldr	r3, [pc, #4]	; (800feb4 <__errno+0x8>)
 800feae:	6818      	ldr	r0, [r3, #0]
 800feb0:	4770      	bx	lr
 800feb2:	bf00      	nop
 800feb4:	20000104 	.word	0x20000104

0800feb8 <__libc_init_array>:
 800feb8:	b570      	push	{r4, r5, r6, lr}
 800feba:	4d0d      	ldr	r5, [pc, #52]	; (800fef0 <__libc_init_array+0x38>)
 800febc:	4c0d      	ldr	r4, [pc, #52]	; (800fef4 <__libc_init_array+0x3c>)
 800febe:	1b64      	subs	r4, r4, r5
 800fec0:	10a4      	asrs	r4, r4, #2
 800fec2:	2600      	movs	r6, #0
 800fec4:	42a6      	cmp	r6, r4
 800fec6:	d109      	bne.n	800fedc <__libc_init_array+0x24>
 800fec8:	4d0b      	ldr	r5, [pc, #44]	; (800fef8 <__libc_init_array+0x40>)
 800feca:	4c0c      	ldr	r4, [pc, #48]	; (800fefc <__libc_init_array+0x44>)
 800fecc:	f002 ff04 	bl	8012cd8 <_init>
 800fed0:	1b64      	subs	r4, r4, r5
 800fed2:	10a4      	asrs	r4, r4, #2
 800fed4:	2600      	movs	r6, #0
 800fed6:	42a6      	cmp	r6, r4
 800fed8:	d105      	bne.n	800fee6 <__libc_init_array+0x2e>
 800feda:	bd70      	pop	{r4, r5, r6, pc}
 800fedc:	f855 3b04 	ldr.w	r3, [r5], #4
 800fee0:	4798      	blx	r3
 800fee2:	3601      	adds	r6, #1
 800fee4:	e7ee      	b.n	800fec4 <__libc_init_array+0xc>
 800fee6:	f855 3b04 	ldr.w	r3, [r5], #4
 800feea:	4798      	blx	r3
 800feec:	3601      	adds	r6, #1
 800feee:	e7f2      	b.n	800fed6 <__libc_init_array+0x1e>
 800fef0:	080267ac 	.word	0x080267ac
 800fef4:	080267ac 	.word	0x080267ac
 800fef8:	080267ac 	.word	0x080267ac
 800fefc:	080267b0 	.word	0x080267b0

0800ff00 <memset>:
 800ff00:	4402      	add	r2, r0
 800ff02:	4603      	mov	r3, r0
 800ff04:	4293      	cmp	r3, r2
 800ff06:	d100      	bne.n	800ff0a <memset+0xa>
 800ff08:	4770      	bx	lr
 800ff0a:	f803 1b01 	strb.w	r1, [r3], #1
 800ff0e:	e7f9      	b.n	800ff04 <memset+0x4>

0800ff10 <__cvt>:
 800ff10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ff14:	ec55 4b10 	vmov	r4, r5, d0
 800ff18:	2d00      	cmp	r5, #0
 800ff1a:	460e      	mov	r6, r1
 800ff1c:	4619      	mov	r1, r3
 800ff1e:	462b      	mov	r3, r5
 800ff20:	bfbb      	ittet	lt
 800ff22:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800ff26:	461d      	movlt	r5, r3
 800ff28:	2300      	movge	r3, #0
 800ff2a:	232d      	movlt	r3, #45	; 0x2d
 800ff2c:	700b      	strb	r3, [r1, #0]
 800ff2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ff30:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800ff34:	4691      	mov	r9, r2
 800ff36:	f023 0820 	bic.w	r8, r3, #32
 800ff3a:	bfbc      	itt	lt
 800ff3c:	4622      	movlt	r2, r4
 800ff3e:	4614      	movlt	r4, r2
 800ff40:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ff44:	d005      	beq.n	800ff52 <__cvt+0x42>
 800ff46:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800ff4a:	d100      	bne.n	800ff4e <__cvt+0x3e>
 800ff4c:	3601      	adds	r6, #1
 800ff4e:	2102      	movs	r1, #2
 800ff50:	e000      	b.n	800ff54 <__cvt+0x44>
 800ff52:	2103      	movs	r1, #3
 800ff54:	ab03      	add	r3, sp, #12
 800ff56:	9301      	str	r3, [sp, #4]
 800ff58:	ab02      	add	r3, sp, #8
 800ff5a:	9300      	str	r3, [sp, #0]
 800ff5c:	ec45 4b10 	vmov	d0, r4, r5
 800ff60:	4653      	mov	r3, sl
 800ff62:	4632      	mov	r2, r6
 800ff64:	f000 fcec 	bl	8010940 <_dtoa_r>
 800ff68:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800ff6c:	4607      	mov	r7, r0
 800ff6e:	d102      	bne.n	800ff76 <__cvt+0x66>
 800ff70:	f019 0f01 	tst.w	r9, #1
 800ff74:	d022      	beq.n	800ffbc <__cvt+0xac>
 800ff76:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ff7a:	eb07 0906 	add.w	r9, r7, r6
 800ff7e:	d110      	bne.n	800ffa2 <__cvt+0x92>
 800ff80:	783b      	ldrb	r3, [r7, #0]
 800ff82:	2b30      	cmp	r3, #48	; 0x30
 800ff84:	d10a      	bne.n	800ff9c <__cvt+0x8c>
 800ff86:	2200      	movs	r2, #0
 800ff88:	2300      	movs	r3, #0
 800ff8a:	4620      	mov	r0, r4
 800ff8c:	4629      	mov	r1, r5
 800ff8e:	f7f0 fe03 	bl	8000b98 <__aeabi_dcmpeq>
 800ff92:	b918      	cbnz	r0, 800ff9c <__cvt+0x8c>
 800ff94:	f1c6 0601 	rsb	r6, r6, #1
 800ff98:	f8ca 6000 	str.w	r6, [sl]
 800ff9c:	f8da 3000 	ldr.w	r3, [sl]
 800ffa0:	4499      	add	r9, r3
 800ffa2:	2200      	movs	r2, #0
 800ffa4:	2300      	movs	r3, #0
 800ffa6:	4620      	mov	r0, r4
 800ffa8:	4629      	mov	r1, r5
 800ffaa:	f7f0 fdf5 	bl	8000b98 <__aeabi_dcmpeq>
 800ffae:	b108      	cbz	r0, 800ffb4 <__cvt+0xa4>
 800ffb0:	f8cd 900c 	str.w	r9, [sp, #12]
 800ffb4:	2230      	movs	r2, #48	; 0x30
 800ffb6:	9b03      	ldr	r3, [sp, #12]
 800ffb8:	454b      	cmp	r3, r9
 800ffba:	d307      	bcc.n	800ffcc <__cvt+0xbc>
 800ffbc:	9b03      	ldr	r3, [sp, #12]
 800ffbe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ffc0:	1bdb      	subs	r3, r3, r7
 800ffc2:	4638      	mov	r0, r7
 800ffc4:	6013      	str	r3, [r2, #0]
 800ffc6:	b004      	add	sp, #16
 800ffc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ffcc:	1c59      	adds	r1, r3, #1
 800ffce:	9103      	str	r1, [sp, #12]
 800ffd0:	701a      	strb	r2, [r3, #0]
 800ffd2:	e7f0      	b.n	800ffb6 <__cvt+0xa6>

0800ffd4 <__exponent>:
 800ffd4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ffd6:	4603      	mov	r3, r0
 800ffd8:	2900      	cmp	r1, #0
 800ffda:	bfb8      	it	lt
 800ffdc:	4249      	neglt	r1, r1
 800ffde:	f803 2b02 	strb.w	r2, [r3], #2
 800ffe2:	bfb4      	ite	lt
 800ffe4:	222d      	movlt	r2, #45	; 0x2d
 800ffe6:	222b      	movge	r2, #43	; 0x2b
 800ffe8:	2909      	cmp	r1, #9
 800ffea:	7042      	strb	r2, [r0, #1]
 800ffec:	dd2a      	ble.n	8010044 <__exponent+0x70>
 800ffee:	f10d 0407 	add.w	r4, sp, #7
 800fff2:	46a4      	mov	ip, r4
 800fff4:	270a      	movs	r7, #10
 800fff6:	46a6      	mov	lr, r4
 800fff8:	460a      	mov	r2, r1
 800fffa:	fb91 f6f7 	sdiv	r6, r1, r7
 800fffe:	fb07 1516 	mls	r5, r7, r6, r1
 8010002:	3530      	adds	r5, #48	; 0x30
 8010004:	2a63      	cmp	r2, #99	; 0x63
 8010006:	f104 34ff 	add.w	r4, r4, #4294967295
 801000a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801000e:	4631      	mov	r1, r6
 8010010:	dcf1      	bgt.n	800fff6 <__exponent+0x22>
 8010012:	3130      	adds	r1, #48	; 0x30
 8010014:	f1ae 0502 	sub.w	r5, lr, #2
 8010018:	f804 1c01 	strb.w	r1, [r4, #-1]
 801001c:	1c44      	adds	r4, r0, #1
 801001e:	4629      	mov	r1, r5
 8010020:	4561      	cmp	r1, ip
 8010022:	d30a      	bcc.n	801003a <__exponent+0x66>
 8010024:	f10d 0209 	add.w	r2, sp, #9
 8010028:	eba2 020e 	sub.w	r2, r2, lr
 801002c:	4565      	cmp	r5, ip
 801002e:	bf88      	it	hi
 8010030:	2200      	movhi	r2, #0
 8010032:	4413      	add	r3, r2
 8010034:	1a18      	subs	r0, r3, r0
 8010036:	b003      	add	sp, #12
 8010038:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801003a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801003e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8010042:	e7ed      	b.n	8010020 <__exponent+0x4c>
 8010044:	2330      	movs	r3, #48	; 0x30
 8010046:	3130      	adds	r1, #48	; 0x30
 8010048:	7083      	strb	r3, [r0, #2]
 801004a:	70c1      	strb	r1, [r0, #3]
 801004c:	1d03      	adds	r3, r0, #4
 801004e:	e7f1      	b.n	8010034 <__exponent+0x60>

08010050 <_printf_float>:
 8010050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010054:	ed2d 8b02 	vpush	{d8}
 8010058:	b08d      	sub	sp, #52	; 0x34
 801005a:	460c      	mov	r4, r1
 801005c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8010060:	4616      	mov	r6, r2
 8010062:	461f      	mov	r7, r3
 8010064:	4605      	mov	r5, r0
 8010066:	f001 fa59 	bl	801151c <_localeconv_r>
 801006a:	f8d0 a000 	ldr.w	sl, [r0]
 801006e:	4650      	mov	r0, sl
 8010070:	f7f0 f916 	bl	80002a0 <strlen>
 8010074:	2300      	movs	r3, #0
 8010076:	930a      	str	r3, [sp, #40]	; 0x28
 8010078:	6823      	ldr	r3, [r4, #0]
 801007a:	9305      	str	r3, [sp, #20]
 801007c:	f8d8 3000 	ldr.w	r3, [r8]
 8010080:	f894 b018 	ldrb.w	fp, [r4, #24]
 8010084:	3307      	adds	r3, #7
 8010086:	f023 0307 	bic.w	r3, r3, #7
 801008a:	f103 0208 	add.w	r2, r3, #8
 801008e:	f8c8 2000 	str.w	r2, [r8]
 8010092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010096:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801009a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801009e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80100a2:	9307      	str	r3, [sp, #28]
 80100a4:	f8cd 8018 	str.w	r8, [sp, #24]
 80100a8:	ee08 0a10 	vmov	s16, r0
 80100ac:	4b9f      	ldr	r3, [pc, #636]	; (801032c <_printf_float+0x2dc>)
 80100ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80100b2:	f04f 32ff 	mov.w	r2, #4294967295
 80100b6:	f7f0 fda1 	bl	8000bfc <__aeabi_dcmpun>
 80100ba:	bb88      	cbnz	r0, 8010120 <_printf_float+0xd0>
 80100bc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80100c0:	4b9a      	ldr	r3, [pc, #616]	; (801032c <_printf_float+0x2dc>)
 80100c2:	f04f 32ff 	mov.w	r2, #4294967295
 80100c6:	f7f0 fd7b 	bl	8000bc0 <__aeabi_dcmple>
 80100ca:	bb48      	cbnz	r0, 8010120 <_printf_float+0xd0>
 80100cc:	2200      	movs	r2, #0
 80100ce:	2300      	movs	r3, #0
 80100d0:	4640      	mov	r0, r8
 80100d2:	4649      	mov	r1, r9
 80100d4:	f7f0 fd6a 	bl	8000bac <__aeabi_dcmplt>
 80100d8:	b110      	cbz	r0, 80100e0 <_printf_float+0x90>
 80100da:	232d      	movs	r3, #45	; 0x2d
 80100dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80100e0:	4b93      	ldr	r3, [pc, #588]	; (8010330 <_printf_float+0x2e0>)
 80100e2:	4894      	ldr	r0, [pc, #592]	; (8010334 <_printf_float+0x2e4>)
 80100e4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80100e8:	bf94      	ite	ls
 80100ea:	4698      	movls	r8, r3
 80100ec:	4680      	movhi	r8, r0
 80100ee:	2303      	movs	r3, #3
 80100f0:	6123      	str	r3, [r4, #16]
 80100f2:	9b05      	ldr	r3, [sp, #20]
 80100f4:	f023 0204 	bic.w	r2, r3, #4
 80100f8:	6022      	str	r2, [r4, #0]
 80100fa:	f04f 0900 	mov.w	r9, #0
 80100fe:	9700      	str	r7, [sp, #0]
 8010100:	4633      	mov	r3, r6
 8010102:	aa0b      	add	r2, sp, #44	; 0x2c
 8010104:	4621      	mov	r1, r4
 8010106:	4628      	mov	r0, r5
 8010108:	f000 f9d8 	bl	80104bc <_printf_common>
 801010c:	3001      	adds	r0, #1
 801010e:	f040 8090 	bne.w	8010232 <_printf_float+0x1e2>
 8010112:	f04f 30ff 	mov.w	r0, #4294967295
 8010116:	b00d      	add	sp, #52	; 0x34
 8010118:	ecbd 8b02 	vpop	{d8}
 801011c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010120:	4642      	mov	r2, r8
 8010122:	464b      	mov	r3, r9
 8010124:	4640      	mov	r0, r8
 8010126:	4649      	mov	r1, r9
 8010128:	f7f0 fd68 	bl	8000bfc <__aeabi_dcmpun>
 801012c:	b140      	cbz	r0, 8010140 <_printf_float+0xf0>
 801012e:	464b      	mov	r3, r9
 8010130:	2b00      	cmp	r3, #0
 8010132:	bfbc      	itt	lt
 8010134:	232d      	movlt	r3, #45	; 0x2d
 8010136:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801013a:	487f      	ldr	r0, [pc, #508]	; (8010338 <_printf_float+0x2e8>)
 801013c:	4b7f      	ldr	r3, [pc, #508]	; (801033c <_printf_float+0x2ec>)
 801013e:	e7d1      	b.n	80100e4 <_printf_float+0x94>
 8010140:	6863      	ldr	r3, [r4, #4]
 8010142:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8010146:	9206      	str	r2, [sp, #24]
 8010148:	1c5a      	adds	r2, r3, #1
 801014a:	d13f      	bne.n	80101cc <_printf_float+0x17c>
 801014c:	2306      	movs	r3, #6
 801014e:	6063      	str	r3, [r4, #4]
 8010150:	9b05      	ldr	r3, [sp, #20]
 8010152:	6861      	ldr	r1, [r4, #4]
 8010154:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8010158:	2300      	movs	r3, #0
 801015a:	9303      	str	r3, [sp, #12]
 801015c:	ab0a      	add	r3, sp, #40	; 0x28
 801015e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8010162:	ab09      	add	r3, sp, #36	; 0x24
 8010164:	ec49 8b10 	vmov	d0, r8, r9
 8010168:	9300      	str	r3, [sp, #0]
 801016a:	6022      	str	r2, [r4, #0]
 801016c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8010170:	4628      	mov	r0, r5
 8010172:	f7ff fecd 	bl	800ff10 <__cvt>
 8010176:	9b06      	ldr	r3, [sp, #24]
 8010178:	9909      	ldr	r1, [sp, #36]	; 0x24
 801017a:	2b47      	cmp	r3, #71	; 0x47
 801017c:	4680      	mov	r8, r0
 801017e:	d108      	bne.n	8010192 <_printf_float+0x142>
 8010180:	1cc8      	adds	r0, r1, #3
 8010182:	db02      	blt.n	801018a <_printf_float+0x13a>
 8010184:	6863      	ldr	r3, [r4, #4]
 8010186:	4299      	cmp	r1, r3
 8010188:	dd41      	ble.n	801020e <_printf_float+0x1be>
 801018a:	f1ab 0b02 	sub.w	fp, fp, #2
 801018e:	fa5f fb8b 	uxtb.w	fp, fp
 8010192:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8010196:	d820      	bhi.n	80101da <_printf_float+0x18a>
 8010198:	3901      	subs	r1, #1
 801019a:	465a      	mov	r2, fp
 801019c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80101a0:	9109      	str	r1, [sp, #36]	; 0x24
 80101a2:	f7ff ff17 	bl	800ffd4 <__exponent>
 80101a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80101a8:	1813      	adds	r3, r2, r0
 80101aa:	2a01      	cmp	r2, #1
 80101ac:	4681      	mov	r9, r0
 80101ae:	6123      	str	r3, [r4, #16]
 80101b0:	dc02      	bgt.n	80101b8 <_printf_float+0x168>
 80101b2:	6822      	ldr	r2, [r4, #0]
 80101b4:	07d2      	lsls	r2, r2, #31
 80101b6:	d501      	bpl.n	80101bc <_printf_float+0x16c>
 80101b8:	3301      	adds	r3, #1
 80101ba:	6123      	str	r3, [r4, #16]
 80101bc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80101c0:	2b00      	cmp	r3, #0
 80101c2:	d09c      	beq.n	80100fe <_printf_float+0xae>
 80101c4:	232d      	movs	r3, #45	; 0x2d
 80101c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80101ca:	e798      	b.n	80100fe <_printf_float+0xae>
 80101cc:	9a06      	ldr	r2, [sp, #24]
 80101ce:	2a47      	cmp	r2, #71	; 0x47
 80101d0:	d1be      	bne.n	8010150 <_printf_float+0x100>
 80101d2:	2b00      	cmp	r3, #0
 80101d4:	d1bc      	bne.n	8010150 <_printf_float+0x100>
 80101d6:	2301      	movs	r3, #1
 80101d8:	e7b9      	b.n	801014e <_printf_float+0xfe>
 80101da:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80101de:	d118      	bne.n	8010212 <_printf_float+0x1c2>
 80101e0:	2900      	cmp	r1, #0
 80101e2:	6863      	ldr	r3, [r4, #4]
 80101e4:	dd0b      	ble.n	80101fe <_printf_float+0x1ae>
 80101e6:	6121      	str	r1, [r4, #16]
 80101e8:	b913      	cbnz	r3, 80101f0 <_printf_float+0x1a0>
 80101ea:	6822      	ldr	r2, [r4, #0]
 80101ec:	07d0      	lsls	r0, r2, #31
 80101ee:	d502      	bpl.n	80101f6 <_printf_float+0x1a6>
 80101f0:	3301      	adds	r3, #1
 80101f2:	440b      	add	r3, r1
 80101f4:	6123      	str	r3, [r4, #16]
 80101f6:	65a1      	str	r1, [r4, #88]	; 0x58
 80101f8:	f04f 0900 	mov.w	r9, #0
 80101fc:	e7de      	b.n	80101bc <_printf_float+0x16c>
 80101fe:	b913      	cbnz	r3, 8010206 <_printf_float+0x1b6>
 8010200:	6822      	ldr	r2, [r4, #0]
 8010202:	07d2      	lsls	r2, r2, #31
 8010204:	d501      	bpl.n	801020a <_printf_float+0x1ba>
 8010206:	3302      	adds	r3, #2
 8010208:	e7f4      	b.n	80101f4 <_printf_float+0x1a4>
 801020a:	2301      	movs	r3, #1
 801020c:	e7f2      	b.n	80101f4 <_printf_float+0x1a4>
 801020e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8010212:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010214:	4299      	cmp	r1, r3
 8010216:	db05      	blt.n	8010224 <_printf_float+0x1d4>
 8010218:	6823      	ldr	r3, [r4, #0]
 801021a:	6121      	str	r1, [r4, #16]
 801021c:	07d8      	lsls	r0, r3, #31
 801021e:	d5ea      	bpl.n	80101f6 <_printf_float+0x1a6>
 8010220:	1c4b      	adds	r3, r1, #1
 8010222:	e7e7      	b.n	80101f4 <_printf_float+0x1a4>
 8010224:	2900      	cmp	r1, #0
 8010226:	bfd4      	ite	le
 8010228:	f1c1 0202 	rsble	r2, r1, #2
 801022c:	2201      	movgt	r2, #1
 801022e:	4413      	add	r3, r2
 8010230:	e7e0      	b.n	80101f4 <_printf_float+0x1a4>
 8010232:	6823      	ldr	r3, [r4, #0]
 8010234:	055a      	lsls	r2, r3, #21
 8010236:	d407      	bmi.n	8010248 <_printf_float+0x1f8>
 8010238:	6923      	ldr	r3, [r4, #16]
 801023a:	4642      	mov	r2, r8
 801023c:	4631      	mov	r1, r6
 801023e:	4628      	mov	r0, r5
 8010240:	47b8      	blx	r7
 8010242:	3001      	adds	r0, #1
 8010244:	d12c      	bne.n	80102a0 <_printf_float+0x250>
 8010246:	e764      	b.n	8010112 <_printf_float+0xc2>
 8010248:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801024c:	f240 80e0 	bls.w	8010410 <_printf_float+0x3c0>
 8010250:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010254:	2200      	movs	r2, #0
 8010256:	2300      	movs	r3, #0
 8010258:	f7f0 fc9e 	bl	8000b98 <__aeabi_dcmpeq>
 801025c:	2800      	cmp	r0, #0
 801025e:	d034      	beq.n	80102ca <_printf_float+0x27a>
 8010260:	4a37      	ldr	r2, [pc, #220]	; (8010340 <_printf_float+0x2f0>)
 8010262:	2301      	movs	r3, #1
 8010264:	4631      	mov	r1, r6
 8010266:	4628      	mov	r0, r5
 8010268:	47b8      	blx	r7
 801026a:	3001      	adds	r0, #1
 801026c:	f43f af51 	beq.w	8010112 <_printf_float+0xc2>
 8010270:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010274:	429a      	cmp	r2, r3
 8010276:	db02      	blt.n	801027e <_printf_float+0x22e>
 8010278:	6823      	ldr	r3, [r4, #0]
 801027a:	07d8      	lsls	r0, r3, #31
 801027c:	d510      	bpl.n	80102a0 <_printf_float+0x250>
 801027e:	ee18 3a10 	vmov	r3, s16
 8010282:	4652      	mov	r2, sl
 8010284:	4631      	mov	r1, r6
 8010286:	4628      	mov	r0, r5
 8010288:	47b8      	blx	r7
 801028a:	3001      	adds	r0, #1
 801028c:	f43f af41 	beq.w	8010112 <_printf_float+0xc2>
 8010290:	f04f 0800 	mov.w	r8, #0
 8010294:	f104 091a 	add.w	r9, r4, #26
 8010298:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801029a:	3b01      	subs	r3, #1
 801029c:	4543      	cmp	r3, r8
 801029e:	dc09      	bgt.n	80102b4 <_printf_float+0x264>
 80102a0:	6823      	ldr	r3, [r4, #0]
 80102a2:	079b      	lsls	r3, r3, #30
 80102a4:	f100 8105 	bmi.w	80104b2 <_printf_float+0x462>
 80102a8:	68e0      	ldr	r0, [r4, #12]
 80102aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80102ac:	4298      	cmp	r0, r3
 80102ae:	bfb8      	it	lt
 80102b0:	4618      	movlt	r0, r3
 80102b2:	e730      	b.n	8010116 <_printf_float+0xc6>
 80102b4:	2301      	movs	r3, #1
 80102b6:	464a      	mov	r2, r9
 80102b8:	4631      	mov	r1, r6
 80102ba:	4628      	mov	r0, r5
 80102bc:	47b8      	blx	r7
 80102be:	3001      	adds	r0, #1
 80102c0:	f43f af27 	beq.w	8010112 <_printf_float+0xc2>
 80102c4:	f108 0801 	add.w	r8, r8, #1
 80102c8:	e7e6      	b.n	8010298 <_printf_float+0x248>
 80102ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80102cc:	2b00      	cmp	r3, #0
 80102ce:	dc39      	bgt.n	8010344 <_printf_float+0x2f4>
 80102d0:	4a1b      	ldr	r2, [pc, #108]	; (8010340 <_printf_float+0x2f0>)
 80102d2:	2301      	movs	r3, #1
 80102d4:	4631      	mov	r1, r6
 80102d6:	4628      	mov	r0, r5
 80102d8:	47b8      	blx	r7
 80102da:	3001      	adds	r0, #1
 80102dc:	f43f af19 	beq.w	8010112 <_printf_float+0xc2>
 80102e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80102e4:	4313      	orrs	r3, r2
 80102e6:	d102      	bne.n	80102ee <_printf_float+0x29e>
 80102e8:	6823      	ldr	r3, [r4, #0]
 80102ea:	07d9      	lsls	r1, r3, #31
 80102ec:	d5d8      	bpl.n	80102a0 <_printf_float+0x250>
 80102ee:	ee18 3a10 	vmov	r3, s16
 80102f2:	4652      	mov	r2, sl
 80102f4:	4631      	mov	r1, r6
 80102f6:	4628      	mov	r0, r5
 80102f8:	47b8      	blx	r7
 80102fa:	3001      	adds	r0, #1
 80102fc:	f43f af09 	beq.w	8010112 <_printf_float+0xc2>
 8010300:	f04f 0900 	mov.w	r9, #0
 8010304:	f104 0a1a 	add.w	sl, r4, #26
 8010308:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801030a:	425b      	negs	r3, r3
 801030c:	454b      	cmp	r3, r9
 801030e:	dc01      	bgt.n	8010314 <_printf_float+0x2c4>
 8010310:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010312:	e792      	b.n	801023a <_printf_float+0x1ea>
 8010314:	2301      	movs	r3, #1
 8010316:	4652      	mov	r2, sl
 8010318:	4631      	mov	r1, r6
 801031a:	4628      	mov	r0, r5
 801031c:	47b8      	blx	r7
 801031e:	3001      	adds	r0, #1
 8010320:	f43f aef7 	beq.w	8010112 <_printf_float+0xc2>
 8010324:	f109 0901 	add.w	r9, r9, #1
 8010328:	e7ee      	b.n	8010308 <_printf_float+0x2b8>
 801032a:	bf00      	nop
 801032c:	7fefffff 	.word	0x7fefffff
 8010330:	080263cc 	.word	0x080263cc
 8010334:	080263d0 	.word	0x080263d0
 8010338:	080263d8 	.word	0x080263d8
 801033c:	080263d4 	.word	0x080263d4
 8010340:	080263dc 	.word	0x080263dc
 8010344:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010346:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010348:	429a      	cmp	r2, r3
 801034a:	bfa8      	it	ge
 801034c:	461a      	movge	r2, r3
 801034e:	2a00      	cmp	r2, #0
 8010350:	4691      	mov	r9, r2
 8010352:	dc37      	bgt.n	80103c4 <_printf_float+0x374>
 8010354:	f04f 0b00 	mov.w	fp, #0
 8010358:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801035c:	f104 021a 	add.w	r2, r4, #26
 8010360:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010362:	9305      	str	r3, [sp, #20]
 8010364:	eba3 0309 	sub.w	r3, r3, r9
 8010368:	455b      	cmp	r3, fp
 801036a:	dc33      	bgt.n	80103d4 <_printf_float+0x384>
 801036c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010370:	429a      	cmp	r2, r3
 8010372:	db3b      	blt.n	80103ec <_printf_float+0x39c>
 8010374:	6823      	ldr	r3, [r4, #0]
 8010376:	07da      	lsls	r2, r3, #31
 8010378:	d438      	bmi.n	80103ec <_printf_float+0x39c>
 801037a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801037c:	9a05      	ldr	r2, [sp, #20]
 801037e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010380:	1a9a      	subs	r2, r3, r2
 8010382:	eba3 0901 	sub.w	r9, r3, r1
 8010386:	4591      	cmp	r9, r2
 8010388:	bfa8      	it	ge
 801038a:	4691      	movge	r9, r2
 801038c:	f1b9 0f00 	cmp.w	r9, #0
 8010390:	dc35      	bgt.n	80103fe <_printf_float+0x3ae>
 8010392:	f04f 0800 	mov.w	r8, #0
 8010396:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801039a:	f104 0a1a 	add.w	sl, r4, #26
 801039e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80103a2:	1a9b      	subs	r3, r3, r2
 80103a4:	eba3 0309 	sub.w	r3, r3, r9
 80103a8:	4543      	cmp	r3, r8
 80103aa:	f77f af79 	ble.w	80102a0 <_printf_float+0x250>
 80103ae:	2301      	movs	r3, #1
 80103b0:	4652      	mov	r2, sl
 80103b2:	4631      	mov	r1, r6
 80103b4:	4628      	mov	r0, r5
 80103b6:	47b8      	blx	r7
 80103b8:	3001      	adds	r0, #1
 80103ba:	f43f aeaa 	beq.w	8010112 <_printf_float+0xc2>
 80103be:	f108 0801 	add.w	r8, r8, #1
 80103c2:	e7ec      	b.n	801039e <_printf_float+0x34e>
 80103c4:	4613      	mov	r3, r2
 80103c6:	4631      	mov	r1, r6
 80103c8:	4642      	mov	r2, r8
 80103ca:	4628      	mov	r0, r5
 80103cc:	47b8      	blx	r7
 80103ce:	3001      	adds	r0, #1
 80103d0:	d1c0      	bne.n	8010354 <_printf_float+0x304>
 80103d2:	e69e      	b.n	8010112 <_printf_float+0xc2>
 80103d4:	2301      	movs	r3, #1
 80103d6:	4631      	mov	r1, r6
 80103d8:	4628      	mov	r0, r5
 80103da:	9205      	str	r2, [sp, #20]
 80103dc:	47b8      	blx	r7
 80103de:	3001      	adds	r0, #1
 80103e0:	f43f ae97 	beq.w	8010112 <_printf_float+0xc2>
 80103e4:	9a05      	ldr	r2, [sp, #20]
 80103e6:	f10b 0b01 	add.w	fp, fp, #1
 80103ea:	e7b9      	b.n	8010360 <_printf_float+0x310>
 80103ec:	ee18 3a10 	vmov	r3, s16
 80103f0:	4652      	mov	r2, sl
 80103f2:	4631      	mov	r1, r6
 80103f4:	4628      	mov	r0, r5
 80103f6:	47b8      	blx	r7
 80103f8:	3001      	adds	r0, #1
 80103fa:	d1be      	bne.n	801037a <_printf_float+0x32a>
 80103fc:	e689      	b.n	8010112 <_printf_float+0xc2>
 80103fe:	9a05      	ldr	r2, [sp, #20]
 8010400:	464b      	mov	r3, r9
 8010402:	4442      	add	r2, r8
 8010404:	4631      	mov	r1, r6
 8010406:	4628      	mov	r0, r5
 8010408:	47b8      	blx	r7
 801040a:	3001      	adds	r0, #1
 801040c:	d1c1      	bne.n	8010392 <_printf_float+0x342>
 801040e:	e680      	b.n	8010112 <_printf_float+0xc2>
 8010410:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010412:	2a01      	cmp	r2, #1
 8010414:	dc01      	bgt.n	801041a <_printf_float+0x3ca>
 8010416:	07db      	lsls	r3, r3, #31
 8010418:	d538      	bpl.n	801048c <_printf_float+0x43c>
 801041a:	2301      	movs	r3, #1
 801041c:	4642      	mov	r2, r8
 801041e:	4631      	mov	r1, r6
 8010420:	4628      	mov	r0, r5
 8010422:	47b8      	blx	r7
 8010424:	3001      	adds	r0, #1
 8010426:	f43f ae74 	beq.w	8010112 <_printf_float+0xc2>
 801042a:	ee18 3a10 	vmov	r3, s16
 801042e:	4652      	mov	r2, sl
 8010430:	4631      	mov	r1, r6
 8010432:	4628      	mov	r0, r5
 8010434:	47b8      	blx	r7
 8010436:	3001      	adds	r0, #1
 8010438:	f43f ae6b 	beq.w	8010112 <_printf_float+0xc2>
 801043c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010440:	2200      	movs	r2, #0
 8010442:	2300      	movs	r3, #0
 8010444:	f7f0 fba8 	bl	8000b98 <__aeabi_dcmpeq>
 8010448:	b9d8      	cbnz	r0, 8010482 <_printf_float+0x432>
 801044a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801044c:	f108 0201 	add.w	r2, r8, #1
 8010450:	3b01      	subs	r3, #1
 8010452:	4631      	mov	r1, r6
 8010454:	4628      	mov	r0, r5
 8010456:	47b8      	blx	r7
 8010458:	3001      	adds	r0, #1
 801045a:	d10e      	bne.n	801047a <_printf_float+0x42a>
 801045c:	e659      	b.n	8010112 <_printf_float+0xc2>
 801045e:	2301      	movs	r3, #1
 8010460:	4652      	mov	r2, sl
 8010462:	4631      	mov	r1, r6
 8010464:	4628      	mov	r0, r5
 8010466:	47b8      	blx	r7
 8010468:	3001      	adds	r0, #1
 801046a:	f43f ae52 	beq.w	8010112 <_printf_float+0xc2>
 801046e:	f108 0801 	add.w	r8, r8, #1
 8010472:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010474:	3b01      	subs	r3, #1
 8010476:	4543      	cmp	r3, r8
 8010478:	dcf1      	bgt.n	801045e <_printf_float+0x40e>
 801047a:	464b      	mov	r3, r9
 801047c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8010480:	e6dc      	b.n	801023c <_printf_float+0x1ec>
 8010482:	f04f 0800 	mov.w	r8, #0
 8010486:	f104 0a1a 	add.w	sl, r4, #26
 801048a:	e7f2      	b.n	8010472 <_printf_float+0x422>
 801048c:	2301      	movs	r3, #1
 801048e:	4642      	mov	r2, r8
 8010490:	e7df      	b.n	8010452 <_printf_float+0x402>
 8010492:	2301      	movs	r3, #1
 8010494:	464a      	mov	r2, r9
 8010496:	4631      	mov	r1, r6
 8010498:	4628      	mov	r0, r5
 801049a:	47b8      	blx	r7
 801049c:	3001      	adds	r0, #1
 801049e:	f43f ae38 	beq.w	8010112 <_printf_float+0xc2>
 80104a2:	f108 0801 	add.w	r8, r8, #1
 80104a6:	68e3      	ldr	r3, [r4, #12]
 80104a8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80104aa:	1a5b      	subs	r3, r3, r1
 80104ac:	4543      	cmp	r3, r8
 80104ae:	dcf0      	bgt.n	8010492 <_printf_float+0x442>
 80104b0:	e6fa      	b.n	80102a8 <_printf_float+0x258>
 80104b2:	f04f 0800 	mov.w	r8, #0
 80104b6:	f104 0919 	add.w	r9, r4, #25
 80104ba:	e7f4      	b.n	80104a6 <_printf_float+0x456>

080104bc <_printf_common>:
 80104bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80104c0:	4616      	mov	r6, r2
 80104c2:	4699      	mov	r9, r3
 80104c4:	688a      	ldr	r2, [r1, #8]
 80104c6:	690b      	ldr	r3, [r1, #16]
 80104c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80104cc:	4293      	cmp	r3, r2
 80104ce:	bfb8      	it	lt
 80104d0:	4613      	movlt	r3, r2
 80104d2:	6033      	str	r3, [r6, #0]
 80104d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80104d8:	4607      	mov	r7, r0
 80104da:	460c      	mov	r4, r1
 80104dc:	b10a      	cbz	r2, 80104e2 <_printf_common+0x26>
 80104de:	3301      	adds	r3, #1
 80104e0:	6033      	str	r3, [r6, #0]
 80104e2:	6823      	ldr	r3, [r4, #0]
 80104e4:	0699      	lsls	r1, r3, #26
 80104e6:	bf42      	ittt	mi
 80104e8:	6833      	ldrmi	r3, [r6, #0]
 80104ea:	3302      	addmi	r3, #2
 80104ec:	6033      	strmi	r3, [r6, #0]
 80104ee:	6825      	ldr	r5, [r4, #0]
 80104f0:	f015 0506 	ands.w	r5, r5, #6
 80104f4:	d106      	bne.n	8010504 <_printf_common+0x48>
 80104f6:	f104 0a19 	add.w	sl, r4, #25
 80104fa:	68e3      	ldr	r3, [r4, #12]
 80104fc:	6832      	ldr	r2, [r6, #0]
 80104fe:	1a9b      	subs	r3, r3, r2
 8010500:	42ab      	cmp	r3, r5
 8010502:	dc26      	bgt.n	8010552 <_printf_common+0x96>
 8010504:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010508:	1e13      	subs	r3, r2, #0
 801050a:	6822      	ldr	r2, [r4, #0]
 801050c:	bf18      	it	ne
 801050e:	2301      	movne	r3, #1
 8010510:	0692      	lsls	r2, r2, #26
 8010512:	d42b      	bmi.n	801056c <_printf_common+0xb0>
 8010514:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010518:	4649      	mov	r1, r9
 801051a:	4638      	mov	r0, r7
 801051c:	47c0      	blx	r8
 801051e:	3001      	adds	r0, #1
 8010520:	d01e      	beq.n	8010560 <_printf_common+0xa4>
 8010522:	6823      	ldr	r3, [r4, #0]
 8010524:	68e5      	ldr	r5, [r4, #12]
 8010526:	6832      	ldr	r2, [r6, #0]
 8010528:	f003 0306 	and.w	r3, r3, #6
 801052c:	2b04      	cmp	r3, #4
 801052e:	bf08      	it	eq
 8010530:	1aad      	subeq	r5, r5, r2
 8010532:	68a3      	ldr	r3, [r4, #8]
 8010534:	6922      	ldr	r2, [r4, #16]
 8010536:	bf0c      	ite	eq
 8010538:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801053c:	2500      	movne	r5, #0
 801053e:	4293      	cmp	r3, r2
 8010540:	bfc4      	itt	gt
 8010542:	1a9b      	subgt	r3, r3, r2
 8010544:	18ed      	addgt	r5, r5, r3
 8010546:	2600      	movs	r6, #0
 8010548:	341a      	adds	r4, #26
 801054a:	42b5      	cmp	r5, r6
 801054c:	d11a      	bne.n	8010584 <_printf_common+0xc8>
 801054e:	2000      	movs	r0, #0
 8010550:	e008      	b.n	8010564 <_printf_common+0xa8>
 8010552:	2301      	movs	r3, #1
 8010554:	4652      	mov	r2, sl
 8010556:	4649      	mov	r1, r9
 8010558:	4638      	mov	r0, r7
 801055a:	47c0      	blx	r8
 801055c:	3001      	adds	r0, #1
 801055e:	d103      	bne.n	8010568 <_printf_common+0xac>
 8010560:	f04f 30ff 	mov.w	r0, #4294967295
 8010564:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010568:	3501      	adds	r5, #1
 801056a:	e7c6      	b.n	80104fa <_printf_common+0x3e>
 801056c:	18e1      	adds	r1, r4, r3
 801056e:	1c5a      	adds	r2, r3, #1
 8010570:	2030      	movs	r0, #48	; 0x30
 8010572:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010576:	4422      	add	r2, r4
 8010578:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801057c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010580:	3302      	adds	r3, #2
 8010582:	e7c7      	b.n	8010514 <_printf_common+0x58>
 8010584:	2301      	movs	r3, #1
 8010586:	4622      	mov	r2, r4
 8010588:	4649      	mov	r1, r9
 801058a:	4638      	mov	r0, r7
 801058c:	47c0      	blx	r8
 801058e:	3001      	adds	r0, #1
 8010590:	d0e6      	beq.n	8010560 <_printf_common+0xa4>
 8010592:	3601      	adds	r6, #1
 8010594:	e7d9      	b.n	801054a <_printf_common+0x8e>
	...

08010598 <_printf_i>:
 8010598:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801059c:	7e0f      	ldrb	r7, [r1, #24]
 801059e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80105a0:	2f78      	cmp	r7, #120	; 0x78
 80105a2:	4691      	mov	r9, r2
 80105a4:	4680      	mov	r8, r0
 80105a6:	460c      	mov	r4, r1
 80105a8:	469a      	mov	sl, r3
 80105aa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80105ae:	d807      	bhi.n	80105c0 <_printf_i+0x28>
 80105b0:	2f62      	cmp	r7, #98	; 0x62
 80105b2:	d80a      	bhi.n	80105ca <_printf_i+0x32>
 80105b4:	2f00      	cmp	r7, #0
 80105b6:	f000 80d8 	beq.w	801076a <_printf_i+0x1d2>
 80105ba:	2f58      	cmp	r7, #88	; 0x58
 80105bc:	f000 80a3 	beq.w	8010706 <_printf_i+0x16e>
 80105c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80105c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80105c8:	e03a      	b.n	8010640 <_printf_i+0xa8>
 80105ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80105ce:	2b15      	cmp	r3, #21
 80105d0:	d8f6      	bhi.n	80105c0 <_printf_i+0x28>
 80105d2:	a101      	add	r1, pc, #4	; (adr r1, 80105d8 <_printf_i+0x40>)
 80105d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80105d8:	08010631 	.word	0x08010631
 80105dc:	08010645 	.word	0x08010645
 80105e0:	080105c1 	.word	0x080105c1
 80105e4:	080105c1 	.word	0x080105c1
 80105e8:	080105c1 	.word	0x080105c1
 80105ec:	080105c1 	.word	0x080105c1
 80105f0:	08010645 	.word	0x08010645
 80105f4:	080105c1 	.word	0x080105c1
 80105f8:	080105c1 	.word	0x080105c1
 80105fc:	080105c1 	.word	0x080105c1
 8010600:	080105c1 	.word	0x080105c1
 8010604:	08010751 	.word	0x08010751
 8010608:	08010675 	.word	0x08010675
 801060c:	08010733 	.word	0x08010733
 8010610:	080105c1 	.word	0x080105c1
 8010614:	080105c1 	.word	0x080105c1
 8010618:	08010773 	.word	0x08010773
 801061c:	080105c1 	.word	0x080105c1
 8010620:	08010675 	.word	0x08010675
 8010624:	080105c1 	.word	0x080105c1
 8010628:	080105c1 	.word	0x080105c1
 801062c:	0801073b 	.word	0x0801073b
 8010630:	682b      	ldr	r3, [r5, #0]
 8010632:	1d1a      	adds	r2, r3, #4
 8010634:	681b      	ldr	r3, [r3, #0]
 8010636:	602a      	str	r2, [r5, #0]
 8010638:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801063c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010640:	2301      	movs	r3, #1
 8010642:	e0a3      	b.n	801078c <_printf_i+0x1f4>
 8010644:	6820      	ldr	r0, [r4, #0]
 8010646:	6829      	ldr	r1, [r5, #0]
 8010648:	0606      	lsls	r6, r0, #24
 801064a:	f101 0304 	add.w	r3, r1, #4
 801064e:	d50a      	bpl.n	8010666 <_printf_i+0xce>
 8010650:	680e      	ldr	r6, [r1, #0]
 8010652:	602b      	str	r3, [r5, #0]
 8010654:	2e00      	cmp	r6, #0
 8010656:	da03      	bge.n	8010660 <_printf_i+0xc8>
 8010658:	232d      	movs	r3, #45	; 0x2d
 801065a:	4276      	negs	r6, r6
 801065c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010660:	485e      	ldr	r0, [pc, #376]	; (80107dc <_printf_i+0x244>)
 8010662:	230a      	movs	r3, #10
 8010664:	e019      	b.n	801069a <_printf_i+0x102>
 8010666:	680e      	ldr	r6, [r1, #0]
 8010668:	602b      	str	r3, [r5, #0]
 801066a:	f010 0f40 	tst.w	r0, #64	; 0x40
 801066e:	bf18      	it	ne
 8010670:	b236      	sxthne	r6, r6
 8010672:	e7ef      	b.n	8010654 <_printf_i+0xbc>
 8010674:	682b      	ldr	r3, [r5, #0]
 8010676:	6820      	ldr	r0, [r4, #0]
 8010678:	1d19      	adds	r1, r3, #4
 801067a:	6029      	str	r1, [r5, #0]
 801067c:	0601      	lsls	r1, r0, #24
 801067e:	d501      	bpl.n	8010684 <_printf_i+0xec>
 8010680:	681e      	ldr	r6, [r3, #0]
 8010682:	e002      	b.n	801068a <_printf_i+0xf2>
 8010684:	0646      	lsls	r6, r0, #25
 8010686:	d5fb      	bpl.n	8010680 <_printf_i+0xe8>
 8010688:	881e      	ldrh	r6, [r3, #0]
 801068a:	4854      	ldr	r0, [pc, #336]	; (80107dc <_printf_i+0x244>)
 801068c:	2f6f      	cmp	r7, #111	; 0x6f
 801068e:	bf0c      	ite	eq
 8010690:	2308      	moveq	r3, #8
 8010692:	230a      	movne	r3, #10
 8010694:	2100      	movs	r1, #0
 8010696:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801069a:	6865      	ldr	r5, [r4, #4]
 801069c:	60a5      	str	r5, [r4, #8]
 801069e:	2d00      	cmp	r5, #0
 80106a0:	bfa2      	ittt	ge
 80106a2:	6821      	ldrge	r1, [r4, #0]
 80106a4:	f021 0104 	bicge.w	r1, r1, #4
 80106a8:	6021      	strge	r1, [r4, #0]
 80106aa:	b90e      	cbnz	r6, 80106b0 <_printf_i+0x118>
 80106ac:	2d00      	cmp	r5, #0
 80106ae:	d04d      	beq.n	801074c <_printf_i+0x1b4>
 80106b0:	4615      	mov	r5, r2
 80106b2:	fbb6 f1f3 	udiv	r1, r6, r3
 80106b6:	fb03 6711 	mls	r7, r3, r1, r6
 80106ba:	5dc7      	ldrb	r7, [r0, r7]
 80106bc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80106c0:	4637      	mov	r7, r6
 80106c2:	42bb      	cmp	r3, r7
 80106c4:	460e      	mov	r6, r1
 80106c6:	d9f4      	bls.n	80106b2 <_printf_i+0x11a>
 80106c8:	2b08      	cmp	r3, #8
 80106ca:	d10b      	bne.n	80106e4 <_printf_i+0x14c>
 80106cc:	6823      	ldr	r3, [r4, #0]
 80106ce:	07de      	lsls	r6, r3, #31
 80106d0:	d508      	bpl.n	80106e4 <_printf_i+0x14c>
 80106d2:	6923      	ldr	r3, [r4, #16]
 80106d4:	6861      	ldr	r1, [r4, #4]
 80106d6:	4299      	cmp	r1, r3
 80106d8:	bfde      	ittt	le
 80106da:	2330      	movle	r3, #48	; 0x30
 80106dc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80106e0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80106e4:	1b52      	subs	r2, r2, r5
 80106e6:	6122      	str	r2, [r4, #16]
 80106e8:	f8cd a000 	str.w	sl, [sp]
 80106ec:	464b      	mov	r3, r9
 80106ee:	aa03      	add	r2, sp, #12
 80106f0:	4621      	mov	r1, r4
 80106f2:	4640      	mov	r0, r8
 80106f4:	f7ff fee2 	bl	80104bc <_printf_common>
 80106f8:	3001      	adds	r0, #1
 80106fa:	d14c      	bne.n	8010796 <_printf_i+0x1fe>
 80106fc:	f04f 30ff 	mov.w	r0, #4294967295
 8010700:	b004      	add	sp, #16
 8010702:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010706:	4835      	ldr	r0, [pc, #212]	; (80107dc <_printf_i+0x244>)
 8010708:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801070c:	6829      	ldr	r1, [r5, #0]
 801070e:	6823      	ldr	r3, [r4, #0]
 8010710:	f851 6b04 	ldr.w	r6, [r1], #4
 8010714:	6029      	str	r1, [r5, #0]
 8010716:	061d      	lsls	r5, r3, #24
 8010718:	d514      	bpl.n	8010744 <_printf_i+0x1ac>
 801071a:	07df      	lsls	r7, r3, #31
 801071c:	bf44      	itt	mi
 801071e:	f043 0320 	orrmi.w	r3, r3, #32
 8010722:	6023      	strmi	r3, [r4, #0]
 8010724:	b91e      	cbnz	r6, 801072e <_printf_i+0x196>
 8010726:	6823      	ldr	r3, [r4, #0]
 8010728:	f023 0320 	bic.w	r3, r3, #32
 801072c:	6023      	str	r3, [r4, #0]
 801072e:	2310      	movs	r3, #16
 8010730:	e7b0      	b.n	8010694 <_printf_i+0xfc>
 8010732:	6823      	ldr	r3, [r4, #0]
 8010734:	f043 0320 	orr.w	r3, r3, #32
 8010738:	6023      	str	r3, [r4, #0]
 801073a:	2378      	movs	r3, #120	; 0x78
 801073c:	4828      	ldr	r0, [pc, #160]	; (80107e0 <_printf_i+0x248>)
 801073e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010742:	e7e3      	b.n	801070c <_printf_i+0x174>
 8010744:	0659      	lsls	r1, r3, #25
 8010746:	bf48      	it	mi
 8010748:	b2b6      	uxthmi	r6, r6
 801074a:	e7e6      	b.n	801071a <_printf_i+0x182>
 801074c:	4615      	mov	r5, r2
 801074e:	e7bb      	b.n	80106c8 <_printf_i+0x130>
 8010750:	682b      	ldr	r3, [r5, #0]
 8010752:	6826      	ldr	r6, [r4, #0]
 8010754:	6961      	ldr	r1, [r4, #20]
 8010756:	1d18      	adds	r0, r3, #4
 8010758:	6028      	str	r0, [r5, #0]
 801075a:	0635      	lsls	r5, r6, #24
 801075c:	681b      	ldr	r3, [r3, #0]
 801075e:	d501      	bpl.n	8010764 <_printf_i+0x1cc>
 8010760:	6019      	str	r1, [r3, #0]
 8010762:	e002      	b.n	801076a <_printf_i+0x1d2>
 8010764:	0670      	lsls	r0, r6, #25
 8010766:	d5fb      	bpl.n	8010760 <_printf_i+0x1c8>
 8010768:	8019      	strh	r1, [r3, #0]
 801076a:	2300      	movs	r3, #0
 801076c:	6123      	str	r3, [r4, #16]
 801076e:	4615      	mov	r5, r2
 8010770:	e7ba      	b.n	80106e8 <_printf_i+0x150>
 8010772:	682b      	ldr	r3, [r5, #0]
 8010774:	1d1a      	adds	r2, r3, #4
 8010776:	602a      	str	r2, [r5, #0]
 8010778:	681d      	ldr	r5, [r3, #0]
 801077a:	6862      	ldr	r2, [r4, #4]
 801077c:	2100      	movs	r1, #0
 801077e:	4628      	mov	r0, r5
 8010780:	f7ef fd96 	bl	80002b0 <memchr>
 8010784:	b108      	cbz	r0, 801078a <_printf_i+0x1f2>
 8010786:	1b40      	subs	r0, r0, r5
 8010788:	6060      	str	r0, [r4, #4]
 801078a:	6863      	ldr	r3, [r4, #4]
 801078c:	6123      	str	r3, [r4, #16]
 801078e:	2300      	movs	r3, #0
 8010790:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010794:	e7a8      	b.n	80106e8 <_printf_i+0x150>
 8010796:	6923      	ldr	r3, [r4, #16]
 8010798:	462a      	mov	r2, r5
 801079a:	4649      	mov	r1, r9
 801079c:	4640      	mov	r0, r8
 801079e:	47d0      	blx	sl
 80107a0:	3001      	adds	r0, #1
 80107a2:	d0ab      	beq.n	80106fc <_printf_i+0x164>
 80107a4:	6823      	ldr	r3, [r4, #0]
 80107a6:	079b      	lsls	r3, r3, #30
 80107a8:	d413      	bmi.n	80107d2 <_printf_i+0x23a>
 80107aa:	68e0      	ldr	r0, [r4, #12]
 80107ac:	9b03      	ldr	r3, [sp, #12]
 80107ae:	4298      	cmp	r0, r3
 80107b0:	bfb8      	it	lt
 80107b2:	4618      	movlt	r0, r3
 80107b4:	e7a4      	b.n	8010700 <_printf_i+0x168>
 80107b6:	2301      	movs	r3, #1
 80107b8:	4632      	mov	r2, r6
 80107ba:	4649      	mov	r1, r9
 80107bc:	4640      	mov	r0, r8
 80107be:	47d0      	blx	sl
 80107c0:	3001      	adds	r0, #1
 80107c2:	d09b      	beq.n	80106fc <_printf_i+0x164>
 80107c4:	3501      	adds	r5, #1
 80107c6:	68e3      	ldr	r3, [r4, #12]
 80107c8:	9903      	ldr	r1, [sp, #12]
 80107ca:	1a5b      	subs	r3, r3, r1
 80107cc:	42ab      	cmp	r3, r5
 80107ce:	dcf2      	bgt.n	80107b6 <_printf_i+0x21e>
 80107d0:	e7eb      	b.n	80107aa <_printf_i+0x212>
 80107d2:	2500      	movs	r5, #0
 80107d4:	f104 0619 	add.w	r6, r4, #25
 80107d8:	e7f5      	b.n	80107c6 <_printf_i+0x22e>
 80107da:	bf00      	nop
 80107dc:	080263de 	.word	0x080263de
 80107e0:	080263ef 	.word	0x080263ef

080107e4 <siprintf>:
 80107e4:	b40e      	push	{r1, r2, r3}
 80107e6:	b500      	push	{lr}
 80107e8:	b09c      	sub	sp, #112	; 0x70
 80107ea:	ab1d      	add	r3, sp, #116	; 0x74
 80107ec:	9002      	str	r0, [sp, #8]
 80107ee:	9006      	str	r0, [sp, #24]
 80107f0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80107f4:	4809      	ldr	r0, [pc, #36]	; (801081c <siprintf+0x38>)
 80107f6:	9107      	str	r1, [sp, #28]
 80107f8:	9104      	str	r1, [sp, #16]
 80107fa:	4909      	ldr	r1, [pc, #36]	; (8010820 <siprintf+0x3c>)
 80107fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8010800:	9105      	str	r1, [sp, #20]
 8010802:	6800      	ldr	r0, [r0, #0]
 8010804:	9301      	str	r3, [sp, #4]
 8010806:	a902      	add	r1, sp, #8
 8010808:	f001 fb78 	bl	8011efc <_svfiprintf_r>
 801080c:	9b02      	ldr	r3, [sp, #8]
 801080e:	2200      	movs	r2, #0
 8010810:	701a      	strb	r2, [r3, #0]
 8010812:	b01c      	add	sp, #112	; 0x70
 8010814:	f85d eb04 	ldr.w	lr, [sp], #4
 8010818:	b003      	add	sp, #12
 801081a:	4770      	bx	lr
 801081c:	20000104 	.word	0x20000104
 8010820:	ffff0208 	.word	0xffff0208

08010824 <quorem>:
 8010824:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010828:	6903      	ldr	r3, [r0, #16]
 801082a:	690c      	ldr	r4, [r1, #16]
 801082c:	42a3      	cmp	r3, r4
 801082e:	4607      	mov	r7, r0
 8010830:	f2c0 8081 	blt.w	8010936 <quorem+0x112>
 8010834:	3c01      	subs	r4, #1
 8010836:	f101 0814 	add.w	r8, r1, #20
 801083a:	f100 0514 	add.w	r5, r0, #20
 801083e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010842:	9301      	str	r3, [sp, #4]
 8010844:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010848:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801084c:	3301      	adds	r3, #1
 801084e:	429a      	cmp	r2, r3
 8010850:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8010854:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8010858:	fbb2 f6f3 	udiv	r6, r2, r3
 801085c:	d331      	bcc.n	80108c2 <quorem+0x9e>
 801085e:	f04f 0e00 	mov.w	lr, #0
 8010862:	4640      	mov	r0, r8
 8010864:	46ac      	mov	ip, r5
 8010866:	46f2      	mov	sl, lr
 8010868:	f850 2b04 	ldr.w	r2, [r0], #4
 801086c:	b293      	uxth	r3, r2
 801086e:	fb06 e303 	mla	r3, r6, r3, lr
 8010872:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8010876:	b29b      	uxth	r3, r3
 8010878:	ebaa 0303 	sub.w	r3, sl, r3
 801087c:	f8dc a000 	ldr.w	sl, [ip]
 8010880:	0c12      	lsrs	r2, r2, #16
 8010882:	fa13 f38a 	uxtah	r3, r3, sl
 8010886:	fb06 e202 	mla	r2, r6, r2, lr
 801088a:	9300      	str	r3, [sp, #0]
 801088c:	9b00      	ldr	r3, [sp, #0]
 801088e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8010892:	b292      	uxth	r2, r2
 8010894:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8010898:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801089c:	f8bd 3000 	ldrh.w	r3, [sp]
 80108a0:	4581      	cmp	r9, r0
 80108a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80108a6:	f84c 3b04 	str.w	r3, [ip], #4
 80108aa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80108ae:	d2db      	bcs.n	8010868 <quorem+0x44>
 80108b0:	f855 300b 	ldr.w	r3, [r5, fp]
 80108b4:	b92b      	cbnz	r3, 80108c2 <quorem+0x9e>
 80108b6:	9b01      	ldr	r3, [sp, #4]
 80108b8:	3b04      	subs	r3, #4
 80108ba:	429d      	cmp	r5, r3
 80108bc:	461a      	mov	r2, r3
 80108be:	d32e      	bcc.n	801091e <quorem+0xfa>
 80108c0:	613c      	str	r4, [r7, #16]
 80108c2:	4638      	mov	r0, r7
 80108c4:	f001 f8c6 	bl	8011a54 <__mcmp>
 80108c8:	2800      	cmp	r0, #0
 80108ca:	db24      	blt.n	8010916 <quorem+0xf2>
 80108cc:	3601      	adds	r6, #1
 80108ce:	4628      	mov	r0, r5
 80108d0:	f04f 0c00 	mov.w	ip, #0
 80108d4:	f858 2b04 	ldr.w	r2, [r8], #4
 80108d8:	f8d0 e000 	ldr.w	lr, [r0]
 80108dc:	b293      	uxth	r3, r2
 80108de:	ebac 0303 	sub.w	r3, ip, r3
 80108e2:	0c12      	lsrs	r2, r2, #16
 80108e4:	fa13 f38e 	uxtah	r3, r3, lr
 80108e8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80108ec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80108f0:	b29b      	uxth	r3, r3
 80108f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80108f6:	45c1      	cmp	r9, r8
 80108f8:	f840 3b04 	str.w	r3, [r0], #4
 80108fc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8010900:	d2e8      	bcs.n	80108d4 <quorem+0xb0>
 8010902:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010906:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801090a:	b922      	cbnz	r2, 8010916 <quorem+0xf2>
 801090c:	3b04      	subs	r3, #4
 801090e:	429d      	cmp	r5, r3
 8010910:	461a      	mov	r2, r3
 8010912:	d30a      	bcc.n	801092a <quorem+0x106>
 8010914:	613c      	str	r4, [r7, #16]
 8010916:	4630      	mov	r0, r6
 8010918:	b003      	add	sp, #12
 801091a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801091e:	6812      	ldr	r2, [r2, #0]
 8010920:	3b04      	subs	r3, #4
 8010922:	2a00      	cmp	r2, #0
 8010924:	d1cc      	bne.n	80108c0 <quorem+0x9c>
 8010926:	3c01      	subs	r4, #1
 8010928:	e7c7      	b.n	80108ba <quorem+0x96>
 801092a:	6812      	ldr	r2, [r2, #0]
 801092c:	3b04      	subs	r3, #4
 801092e:	2a00      	cmp	r2, #0
 8010930:	d1f0      	bne.n	8010914 <quorem+0xf0>
 8010932:	3c01      	subs	r4, #1
 8010934:	e7eb      	b.n	801090e <quorem+0xea>
 8010936:	2000      	movs	r0, #0
 8010938:	e7ee      	b.n	8010918 <quorem+0xf4>
 801093a:	0000      	movs	r0, r0
 801093c:	0000      	movs	r0, r0
	...

08010940 <_dtoa_r>:
 8010940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010944:	ed2d 8b04 	vpush	{d8-d9}
 8010948:	ec57 6b10 	vmov	r6, r7, d0
 801094c:	b093      	sub	sp, #76	; 0x4c
 801094e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8010950:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8010954:	9106      	str	r1, [sp, #24]
 8010956:	ee10 aa10 	vmov	sl, s0
 801095a:	4604      	mov	r4, r0
 801095c:	9209      	str	r2, [sp, #36]	; 0x24
 801095e:	930c      	str	r3, [sp, #48]	; 0x30
 8010960:	46bb      	mov	fp, r7
 8010962:	b975      	cbnz	r5, 8010982 <_dtoa_r+0x42>
 8010964:	2010      	movs	r0, #16
 8010966:	f000 fddd 	bl	8011524 <malloc>
 801096a:	4602      	mov	r2, r0
 801096c:	6260      	str	r0, [r4, #36]	; 0x24
 801096e:	b920      	cbnz	r0, 801097a <_dtoa_r+0x3a>
 8010970:	4ba7      	ldr	r3, [pc, #668]	; (8010c10 <_dtoa_r+0x2d0>)
 8010972:	21ea      	movs	r1, #234	; 0xea
 8010974:	48a7      	ldr	r0, [pc, #668]	; (8010c14 <_dtoa_r+0x2d4>)
 8010976:	f001 fbd1 	bl	801211c <__assert_func>
 801097a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801097e:	6005      	str	r5, [r0, #0]
 8010980:	60c5      	str	r5, [r0, #12]
 8010982:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010984:	6819      	ldr	r1, [r3, #0]
 8010986:	b151      	cbz	r1, 801099e <_dtoa_r+0x5e>
 8010988:	685a      	ldr	r2, [r3, #4]
 801098a:	604a      	str	r2, [r1, #4]
 801098c:	2301      	movs	r3, #1
 801098e:	4093      	lsls	r3, r2
 8010990:	608b      	str	r3, [r1, #8]
 8010992:	4620      	mov	r0, r4
 8010994:	f000 fe1c 	bl	80115d0 <_Bfree>
 8010998:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801099a:	2200      	movs	r2, #0
 801099c:	601a      	str	r2, [r3, #0]
 801099e:	1e3b      	subs	r3, r7, #0
 80109a0:	bfaa      	itet	ge
 80109a2:	2300      	movge	r3, #0
 80109a4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80109a8:	f8c8 3000 	strge.w	r3, [r8]
 80109ac:	4b9a      	ldr	r3, [pc, #616]	; (8010c18 <_dtoa_r+0x2d8>)
 80109ae:	bfbc      	itt	lt
 80109b0:	2201      	movlt	r2, #1
 80109b2:	f8c8 2000 	strlt.w	r2, [r8]
 80109b6:	ea33 030b 	bics.w	r3, r3, fp
 80109ba:	d11b      	bne.n	80109f4 <_dtoa_r+0xb4>
 80109bc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80109be:	f242 730f 	movw	r3, #9999	; 0x270f
 80109c2:	6013      	str	r3, [r2, #0]
 80109c4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80109c8:	4333      	orrs	r3, r6
 80109ca:	f000 8592 	beq.w	80114f2 <_dtoa_r+0xbb2>
 80109ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80109d0:	b963      	cbnz	r3, 80109ec <_dtoa_r+0xac>
 80109d2:	4b92      	ldr	r3, [pc, #584]	; (8010c1c <_dtoa_r+0x2dc>)
 80109d4:	e022      	b.n	8010a1c <_dtoa_r+0xdc>
 80109d6:	4b92      	ldr	r3, [pc, #584]	; (8010c20 <_dtoa_r+0x2e0>)
 80109d8:	9301      	str	r3, [sp, #4]
 80109da:	3308      	adds	r3, #8
 80109dc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80109de:	6013      	str	r3, [r2, #0]
 80109e0:	9801      	ldr	r0, [sp, #4]
 80109e2:	b013      	add	sp, #76	; 0x4c
 80109e4:	ecbd 8b04 	vpop	{d8-d9}
 80109e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80109ec:	4b8b      	ldr	r3, [pc, #556]	; (8010c1c <_dtoa_r+0x2dc>)
 80109ee:	9301      	str	r3, [sp, #4]
 80109f0:	3303      	adds	r3, #3
 80109f2:	e7f3      	b.n	80109dc <_dtoa_r+0x9c>
 80109f4:	2200      	movs	r2, #0
 80109f6:	2300      	movs	r3, #0
 80109f8:	4650      	mov	r0, sl
 80109fa:	4659      	mov	r1, fp
 80109fc:	f7f0 f8cc 	bl	8000b98 <__aeabi_dcmpeq>
 8010a00:	ec4b ab19 	vmov	d9, sl, fp
 8010a04:	4680      	mov	r8, r0
 8010a06:	b158      	cbz	r0, 8010a20 <_dtoa_r+0xe0>
 8010a08:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010a0a:	2301      	movs	r3, #1
 8010a0c:	6013      	str	r3, [r2, #0]
 8010a0e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010a10:	2b00      	cmp	r3, #0
 8010a12:	f000 856b 	beq.w	80114ec <_dtoa_r+0xbac>
 8010a16:	4883      	ldr	r0, [pc, #524]	; (8010c24 <_dtoa_r+0x2e4>)
 8010a18:	6018      	str	r0, [r3, #0]
 8010a1a:	1e43      	subs	r3, r0, #1
 8010a1c:	9301      	str	r3, [sp, #4]
 8010a1e:	e7df      	b.n	80109e0 <_dtoa_r+0xa0>
 8010a20:	ec4b ab10 	vmov	d0, sl, fp
 8010a24:	aa10      	add	r2, sp, #64	; 0x40
 8010a26:	a911      	add	r1, sp, #68	; 0x44
 8010a28:	4620      	mov	r0, r4
 8010a2a:	f001 f8b9 	bl	8011ba0 <__d2b>
 8010a2e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8010a32:	ee08 0a10 	vmov	s16, r0
 8010a36:	2d00      	cmp	r5, #0
 8010a38:	f000 8084 	beq.w	8010b44 <_dtoa_r+0x204>
 8010a3c:	ee19 3a90 	vmov	r3, s19
 8010a40:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010a44:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8010a48:	4656      	mov	r6, sl
 8010a4a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8010a4e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8010a52:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8010a56:	4b74      	ldr	r3, [pc, #464]	; (8010c28 <_dtoa_r+0x2e8>)
 8010a58:	2200      	movs	r2, #0
 8010a5a:	4630      	mov	r0, r6
 8010a5c:	4639      	mov	r1, r7
 8010a5e:	f7ef fc7b 	bl	8000358 <__aeabi_dsub>
 8010a62:	a365      	add	r3, pc, #404	; (adr r3, 8010bf8 <_dtoa_r+0x2b8>)
 8010a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a68:	f7ef fe2e 	bl	80006c8 <__aeabi_dmul>
 8010a6c:	a364      	add	r3, pc, #400	; (adr r3, 8010c00 <_dtoa_r+0x2c0>)
 8010a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a72:	f7ef fc73 	bl	800035c <__adddf3>
 8010a76:	4606      	mov	r6, r0
 8010a78:	4628      	mov	r0, r5
 8010a7a:	460f      	mov	r7, r1
 8010a7c:	f7ef fdba 	bl	80005f4 <__aeabi_i2d>
 8010a80:	a361      	add	r3, pc, #388	; (adr r3, 8010c08 <_dtoa_r+0x2c8>)
 8010a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a86:	f7ef fe1f 	bl	80006c8 <__aeabi_dmul>
 8010a8a:	4602      	mov	r2, r0
 8010a8c:	460b      	mov	r3, r1
 8010a8e:	4630      	mov	r0, r6
 8010a90:	4639      	mov	r1, r7
 8010a92:	f7ef fc63 	bl	800035c <__adddf3>
 8010a96:	4606      	mov	r6, r0
 8010a98:	460f      	mov	r7, r1
 8010a9a:	f7f0 f8c5 	bl	8000c28 <__aeabi_d2iz>
 8010a9e:	2200      	movs	r2, #0
 8010aa0:	9000      	str	r0, [sp, #0]
 8010aa2:	2300      	movs	r3, #0
 8010aa4:	4630      	mov	r0, r6
 8010aa6:	4639      	mov	r1, r7
 8010aa8:	f7f0 f880 	bl	8000bac <__aeabi_dcmplt>
 8010aac:	b150      	cbz	r0, 8010ac4 <_dtoa_r+0x184>
 8010aae:	9800      	ldr	r0, [sp, #0]
 8010ab0:	f7ef fda0 	bl	80005f4 <__aeabi_i2d>
 8010ab4:	4632      	mov	r2, r6
 8010ab6:	463b      	mov	r3, r7
 8010ab8:	f7f0 f86e 	bl	8000b98 <__aeabi_dcmpeq>
 8010abc:	b910      	cbnz	r0, 8010ac4 <_dtoa_r+0x184>
 8010abe:	9b00      	ldr	r3, [sp, #0]
 8010ac0:	3b01      	subs	r3, #1
 8010ac2:	9300      	str	r3, [sp, #0]
 8010ac4:	9b00      	ldr	r3, [sp, #0]
 8010ac6:	2b16      	cmp	r3, #22
 8010ac8:	d85a      	bhi.n	8010b80 <_dtoa_r+0x240>
 8010aca:	9a00      	ldr	r2, [sp, #0]
 8010acc:	4b57      	ldr	r3, [pc, #348]	; (8010c2c <_dtoa_r+0x2ec>)
 8010ace:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ad6:	ec51 0b19 	vmov	r0, r1, d9
 8010ada:	f7f0 f867 	bl	8000bac <__aeabi_dcmplt>
 8010ade:	2800      	cmp	r0, #0
 8010ae0:	d050      	beq.n	8010b84 <_dtoa_r+0x244>
 8010ae2:	9b00      	ldr	r3, [sp, #0]
 8010ae4:	3b01      	subs	r3, #1
 8010ae6:	9300      	str	r3, [sp, #0]
 8010ae8:	2300      	movs	r3, #0
 8010aea:	930b      	str	r3, [sp, #44]	; 0x2c
 8010aec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010aee:	1b5d      	subs	r5, r3, r5
 8010af0:	1e6b      	subs	r3, r5, #1
 8010af2:	9305      	str	r3, [sp, #20]
 8010af4:	bf45      	ittet	mi
 8010af6:	f1c5 0301 	rsbmi	r3, r5, #1
 8010afa:	9304      	strmi	r3, [sp, #16]
 8010afc:	2300      	movpl	r3, #0
 8010afe:	2300      	movmi	r3, #0
 8010b00:	bf4c      	ite	mi
 8010b02:	9305      	strmi	r3, [sp, #20]
 8010b04:	9304      	strpl	r3, [sp, #16]
 8010b06:	9b00      	ldr	r3, [sp, #0]
 8010b08:	2b00      	cmp	r3, #0
 8010b0a:	db3d      	blt.n	8010b88 <_dtoa_r+0x248>
 8010b0c:	9b05      	ldr	r3, [sp, #20]
 8010b0e:	9a00      	ldr	r2, [sp, #0]
 8010b10:	920a      	str	r2, [sp, #40]	; 0x28
 8010b12:	4413      	add	r3, r2
 8010b14:	9305      	str	r3, [sp, #20]
 8010b16:	2300      	movs	r3, #0
 8010b18:	9307      	str	r3, [sp, #28]
 8010b1a:	9b06      	ldr	r3, [sp, #24]
 8010b1c:	2b09      	cmp	r3, #9
 8010b1e:	f200 8089 	bhi.w	8010c34 <_dtoa_r+0x2f4>
 8010b22:	2b05      	cmp	r3, #5
 8010b24:	bfc4      	itt	gt
 8010b26:	3b04      	subgt	r3, #4
 8010b28:	9306      	strgt	r3, [sp, #24]
 8010b2a:	9b06      	ldr	r3, [sp, #24]
 8010b2c:	f1a3 0302 	sub.w	r3, r3, #2
 8010b30:	bfcc      	ite	gt
 8010b32:	2500      	movgt	r5, #0
 8010b34:	2501      	movle	r5, #1
 8010b36:	2b03      	cmp	r3, #3
 8010b38:	f200 8087 	bhi.w	8010c4a <_dtoa_r+0x30a>
 8010b3c:	e8df f003 	tbb	[pc, r3]
 8010b40:	59383a2d 	.word	0x59383a2d
 8010b44:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8010b48:	441d      	add	r5, r3
 8010b4a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8010b4e:	2b20      	cmp	r3, #32
 8010b50:	bfc1      	itttt	gt
 8010b52:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8010b56:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8010b5a:	fa0b f303 	lslgt.w	r3, fp, r3
 8010b5e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8010b62:	bfda      	itte	le
 8010b64:	f1c3 0320 	rsble	r3, r3, #32
 8010b68:	fa06 f003 	lslle.w	r0, r6, r3
 8010b6c:	4318      	orrgt	r0, r3
 8010b6e:	f7ef fd31 	bl	80005d4 <__aeabi_ui2d>
 8010b72:	2301      	movs	r3, #1
 8010b74:	4606      	mov	r6, r0
 8010b76:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8010b7a:	3d01      	subs	r5, #1
 8010b7c:	930e      	str	r3, [sp, #56]	; 0x38
 8010b7e:	e76a      	b.n	8010a56 <_dtoa_r+0x116>
 8010b80:	2301      	movs	r3, #1
 8010b82:	e7b2      	b.n	8010aea <_dtoa_r+0x1aa>
 8010b84:	900b      	str	r0, [sp, #44]	; 0x2c
 8010b86:	e7b1      	b.n	8010aec <_dtoa_r+0x1ac>
 8010b88:	9b04      	ldr	r3, [sp, #16]
 8010b8a:	9a00      	ldr	r2, [sp, #0]
 8010b8c:	1a9b      	subs	r3, r3, r2
 8010b8e:	9304      	str	r3, [sp, #16]
 8010b90:	4253      	negs	r3, r2
 8010b92:	9307      	str	r3, [sp, #28]
 8010b94:	2300      	movs	r3, #0
 8010b96:	930a      	str	r3, [sp, #40]	; 0x28
 8010b98:	e7bf      	b.n	8010b1a <_dtoa_r+0x1da>
 8010b9a:	2300      	movs	r3, #0
 8010b9c:	9308      	str	r3, [sp, #32]
 8010b9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010ba0:	2b00      	cmp	r3, #0
 8010ba2:	dc55      	bgt.n	8010c50 <_dtoa_r+0x310>
 8010ba4:	2301      	movs	r3, #1
 8010ba6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8010baa:	461a      	mov	r2, r3
 8010bac:	9209      	str	r2, [sp, #36]	; 0x24
 8010bae:	e00c      	b.n	8010bca <_dtoa_r+0x28a>
 8010bb0:	2301      	movs	r3, #1
 8010bb2:	e7f3      	b.n	8010b9c <_dtoa_r+0x25c>
 8010bb4:	2300      	movs	r3, #0
 8010bb6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010bb8:	9308      	str	r3, [sp, #32]
 8010bba:	9b00      	ldr	r3, [sp, #0]
 8010bbc:	4413      	add	r3, r2
 8010bbe:	9302      	str	r3, [sp, #8]
 8010bc0:	3301      	adds	r3, #1
 8010bc2:	2b01      	cmp	r3, #1
 8010bc4:	9303      	str	r3, [sp, #12]
 8010bc6:	bfb8      	it	lt
 8010bc8:	2301      	movlt	r3, #1
 8010bca:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8010bcc:	2200      	movs	r2, #0
 8010bce:	6042      	str	r2, [r0, #4]
 8010bd0:	2204      	movs	r2, #4
 8010bd2:	f102 0614 	add.w	r6, r2, #20
 8010bd6:	429e      	cmp	r6, r3
 8010bd8:	6841      	ldr	r1, [r0, #4]
 8010bda:	d93d      	bls.n	8010c58 <_dtoa_r+0x318>
 8010bdc:	4620      	mov	r0, r4
 8010bde:	f000 fcb7 	bl	8011550 <_Balloc>
 8010be2:	9001      	str	r0, [sp, #4]
 8010be4:	2800      	cmp	r0, #0
 8010be6:	d13b      	bne.n	8010c60 <_dtoa_r+0x320>
 8010be8:	4b11      	ldr	r3, [pc, #68]	; (8010c30 <_dtoa_r+0x2f0>)
 8010bea:	4602      	mov	r2, r0
 8010bec:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8010bf0:	e6c0      	b.n	8010974 <_dtoa_r+0x34>
 8010bf2:	2301      	movs	r3, #1
 8010bf4:	e7df      	b.n	8010bb6 <_dtoa_r+0x276>
 8010bf6:	bf00      	nop
 8010bf8:	636f4361 	.word	0x636f4361
 8010bfc:	3fd287a7 	.word	0x3fd287a7
 8010c00:	8b60c8b3 	.word	0x8b60c8b3
 8010c04:	3fc68a28 	.word	0x3fc68a28
 8010c08:	509f79fb 	.word	0x509f79fb
 8010c0c:	3fd34413 	.word	0x3fd34413
 8010c10:	0802640d 	.word	0x0802640d
 8010c14:	08026424 	.word	0x08026424
 8010c18:	7ff00000 	.word	0x7ff00000
 8010c1c:	08026409 	.word	0x08026409
 8010c20:	08026400 	.word	0x08026400
 8010c24:	080263dd 	.word	0x080263dd
 8010c28:	3ff80000 	.word	0x3ff80000
 8010c2c:	08026518 	.word	0x08026518
 8010c30:	0802647f 	.word	0x0802647f
 8010c34:	2501      	movs	r5, #1
 8010c36:	2300      	movs	r3, #0
 8010c38:	9306      	str	r3, [sp, #24]
 8010c3a:	9508      	str	r5, [sp, #32]
 8010c3c:	f04f 33ff 	mov.w	r3, #4294967295
 8010c40:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8010c44:	2200      	movs	r2, #0
 8010c46:	2312      	movs	r3, #18
 8010c48:	e7b0      	b.n	8010bac <_dtoa_r+0x26c>
 8010c4a:	2301      	movs	r3, #1
 8010c4c:	9308      	str	r3, [sp, #32]
 8010c4e:	e7f5      	b.n	8010c3c <_dtoa_r+0x2fc>
 8010c50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010c52:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8010c56:	e7b8      	b.n	8010bca <_dtoa_r+0x28a>
 8010c58:	3101      	adds	r1, #1
 8010c5a:	6041      	str	r1, [r0, #4]
 8010c5c:	0052      	lsls	r2, r2, #1
 8010c5e:	e7b8      	b.n	8010bd2 <_dtoa_r+0x292>
 8010c60:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010c62:	9a01      	ldr	r2, [sp, #4]
 8010c64:	601a      	str	r2, [r3, #0]
 8010c66:	9b03      	ldr	r3, [sp, #12]
 8010c68:	2b0e      	cmp	r3, #14
 8010c6a:	f200 809d 	bhi.w	8010da8 <_dtoa_r+0x468>
 8010c6e:	2d00      	cmp	r5, #0
 8010c70:	f000 809a 	beq.w	8010da8 <_dtoa_r+0x468>
 8010c74:	9b00      	ldr	r3, [sp, #0]
 8010c76:	2b00      	cmp	r3, #0
 8010c78:	dd32      	ble.n	8010ce0 <_dtoa_r+0x3a0>
 8010c7a:	4ab7      	ldr	r2, [pc, #732]	; (8010f58 <_dtoa_r+0x618>)
 8010c7c:	f003 030f 	and.w	r3, r3, #15
 8010c80:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8010c84:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010c88:	9b00      	ldr	r3, [sp, #0]
 8010c8a:	05d8      	lsls	r0, r3, #23
 8010c8c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8010c90:	d516      	bpl.n	8010cc0 <_dtoa_r+0x380>
 8010c92:	4bb2      	ldr	r3, [pc, #712]	; (8010f5c <_dtoa_r+0x61c>)
 8010c94:	ec51 0b19 	vmov	r0, r1, d9
 8010c98:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010c9c:	f7ef fe3e 	bl	800091c <__aeabi_ddiv>
 8010ca0:	f007 070f 	and.w	r7, r7, #15
 8010ca4:	4682      	mov	sl, r0
 8010ca6:	468b      	mov	fp, r1
 8010ca8:	2503      	movs	r5, #3
 8010caa:	4eac      	ldr	r6, [pc, #688]	; (8010f5c <_dtoa_r+0x61c>)
 8010cac:	b957      	cbnz	r7, 8010cc4 <_dtoa_r+0x384>
 8010cae:	4642      	mov	r2, r8
 8010cb0:	464b      	mov	r3, r9
 8010cb2:	4650      	mov	r0, sl
 8010cb4:	4659      	mov	r1, fp
 8010cb6:	f7ef fe31 	bl	800091c <__aeabi_ddiv>
 8010cba:	4682      	mov	sl, r0
 8010cbc:	468b      	mov	fp, r1
 8010cbe:	e028      	b.n	8010d12 <_dtoa_r+0x3d2>
 8010cc0:	2502      	movs	r5, #2
 8010cc2:	e7f2      	b.n	8010caa <_dtoa_r+0x36a>
 8010cc4:	07f9      	lsls	r1, r7, #31
 8010cc6:	d508      	bpl.n	8010cda <_dtoa_r+0x39a>
 8010cc8:	4640      	mov	r0, r8
 8010cca:	4649      	mov	r1, r9
 8010ccc:	e9d6 2300 	ldrd	r2, r3, [r6]
 8010cd0:	f7ef fcfa 	bl	80006c8 <__aeabi_dmul>
 8010cd4:	3501      	adds	r5, #1
 8010cd6:	4680      	mov	r8, r0
 8010cd8:	4689      	mov	r9, r1
 8010cda:	107f      	asrs	r7, r7, #1
 8010cdc:	3608      	adds	r6, #8
 8010cde:	e7e5      	b.n	8010cac <_dtoa_r+0x36c>
 8010ce0:	f000 809b 	beq.w	8010e1a <_dtoa_r+0x4da>
 8010ce4:	9b00      	ldr	r3, [sp, #0]
 8010ce6:	4f9d      	ldr	r7, [pc, #628]	; (8010f5c <_dtoa_r+0x61c>)
 8010ce8:	425e      	negs	r6, r3
 8010cea:	4b9b      	ldr	r3, [pc, #620]	; (8010f58 <_dtoa_r+0x618>)
 8010cec:	f006 020f 	and.w	r2, r6, #15
 8010cf0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cf8:	ec51 0b19 	vmov	r0, r1, d9
 8010cfc:	f7ef fce4 	bl	80006c8 <__aeabi_dmul>
 8010d00:	1136      	asrs	r6, r6, #4
 8010d02:	4682      	mov	sl, r0
 8010d04:	468b      	mov	fp, r1
 8010d06:	2300      	movs	r3, #0
 8010d08:	2502      	movs	r5, #2
 8010d0a:	2e00      	cmp	r6, #0
 8010d0c:	d17a      	bne.n	8010e04 <_dtoa_r+0x4c4>
 8010d0e:	2b00      	cmp	r3, #0
 8010d10:	d1d3      	bne.n	8010cba <_dtoa_r+0x37a>
 8010d12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010d14:	2b00      	cmp	r3, #0
 8010d16:	f000 8082 	beq.w	8010e1e <_dtoa_r+0x4de>
 8010d1a:	4b91      	ldr	r3, [pc, #580]	; (8010f60 <_dtoa_r+0x620>)
 8010d1c:	2200      	movs	r2, #0
 8010d1e:	4650      	mov	r0, sl
 8010d20:	4659      	mov	r1, fp
 8010d22:	f7ef ff43 	bl	8000bac <__aeabi_dcmplt>
 8010d26:	2800      	cmp	r0, #0
 8010d28:	d079      	beq.n	8010e1e <_dtoa_r+0x4de>
 8010d2a:	9b03      	ldr	r3, [sp, #12]
 8010d2c:	2b00      	cmp	r3, #0
 8010d2e:	d076      	beq.n	8010e1e <_dtoa_r+0x4de>
 8010d30:	9b02      	ldr	r3, [sp, #8]
 8010d32:	2b00      	cmp	r3, #0
 8010d34:	dd36      	ble.n	8010da4 <_dtoa_r+0x464>
 8010d36:	9b00      	ldr	r3, [sp, #0]
 8010d38:	4650      	mov	r0, sl
 8010d3a:	4659      	mov	r1, fp
 8010d3c:	1e5f      	subs	r7, r3, #1
 8010d3e:	2200      	movs	r2, #0
 8010d40:	4b88      	ldr	r3, [pc, #544]	; (8010f64 <_dtoa_r+0x624>)
 8010d42:	f7ef fcc1 	bl	80006c8 <__aeabi_dmul>
 8010d46:	9e02      	ldr	r6, [sp, #8]
 8010d48:	4682      	mov	sl, r0
 8010d4a:	468b      	mov	fp, r1
 8010d4c:	3501      	adds	r5, #1
 8010d4e:	4628      	mov	r0, r5
 8010d50:	f7ef fc50 	bl	80005f4 <__aeabi_i2d>
 8010d54:	4652      	mov	r2, sl
 8010d56:	465b      	mov	r3, fp
 8010d58:	f7ef fcb6 	bl	80006c8 <__aeabi_dmul>
 8010d5c:	4b82      	ldr	r3, [pc, #520]	; (8010f68 <_dtoa_r+0x628>)
 8010d5e:	2200      	movs	r2, #0
 8010d60:	f7ef fafc 	bl	800035c <__adddf3>
 8010d64:	46d0      	mov	r8, sl
 8010d66:	46d9      	mov	r9, fp
 8010d68:	4682      	mov	sl, r0
 8010d6a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8010d6e:	2e00      	cmp	r6, #0
 8010d70:	d158      	bne.n	8010e24 <_dtoa_r+0x4e4>
 8010d72:	4b7e      	ldr	r3, [pc, #504]	; (8010f6c <_dtoa_r+0x62c>)
 8010d74:	2200      	movs	r2, #0
 8010d76:	4640      	mov	r0, r8
 8010d78:	4649      	mov	r1, r9
 8010d7a:	f7ef faed 	bl	8000358 <__aeabi_dsub>
 8010d7e:	4652      	mov	r2, sl
 8010d80:	465b      	mov	r3, fp
 8010d82:	4680      	mov	r8, r0
 8010d84:	4689      	mov	r9, r1
 8010d86:	f7ef ff2f 	bl	8000be8 <__aeabi_dcmpgt>
 8010d8a:	2800      	cmp	r0, #0
 8010d8c:	f040 8295 	bne.w	80112ba <_dtoa_r+0x97a>
 8010d90:	4652      	mov	r2, sl
 8010d92:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8010d96:	4640      	mov	r0, r8
 8010d98:	4649      	mov	r1, r9
 8010d9a:	f7ef ff07 	bl	8000bac <__aeabi_dcmplt>
 8010d9e:	2800      	cmp	r0, #0
 8010da0:	f040 8289 	bne.w	80112b6 <_dtoa_r+0x976>
 8010da4:	ec5b ab19 	vmov	sl, fp, d9
 8010da8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010daa:	2b00      	cmp	r3, #0
 8010dac:	f2c0 8148 	blt.w	8011040 <_dtoa_r+0x700>
 8010db0:	9a00      	ldr	r2, [sp, #0]
 8010db2:	2a0e      	cmp	r2, #14
 8010db4:	f300 8144 	bgt.w	8011040 <_dtoa_r+0x700>
 8010db8:	4b67      	ldr	r3, [pc, #412]	; (8010f58 <_dtoa_r+0x618>)
 8010dba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010dbe:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010dc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010dc4:	2b00      	cmp	r3, #0
 8010dc6:	f280 80d5 	bge.w	8010f74 <_dtoa_r+0x634>
 8010dca:	9b03      	ldr	r3, [sp, #12]
 8010dcc:	2b00      	cmp	r3, #0
 8010dce:	f300 80d1 	bgt.w	8010f74 <_dtoa_r+0x634>
 8010dd2:	f040 826f 	bne.w	80112b4 <_dtoa_r+0x974>
 8010dd6:	4b65      	ldr	r3, [pc, #404]	; (8010f6c <_dtoa_r+0x62c>)
 8010dd8:	2200      	movs	r2, #0
 8010dda:	4640      	mov	r0, r8
 8010ddc:	4649      	mov	r1, r9
 8010dde:	f7ef fc73 	bl	80006c8 <__aeabi_dmul>
 8010de2:	4652      	mov	r2, sl
 8010de4:	465b      	mov	r3, fp
 8010de6:	f7ef fef5 	bl	8000bd4 <__aeabi_dcmpge>
 8010dea:	9e03      	ldr	r6, [sp, #12]
 8010dec:	4637      	mov	r7, r6
 8010dee:	2800      	cmp	r0, #0
 8010df0:	f040 8245 	bne.w	801127e <_dtoa_r+0x93e>
 8010df4:	9d01      	ldr	r5, [sp, #4]
 8010df6:	2331      	movs	r3, #49	; 0x31
 8010df8:	f805 3b01 	strb.w	r3, [r5], #1
 8010dfc:	9b00      	ldr	r3, [sp, #0]
 8010dfe:	3301      	adds	r3, #1
 8010e00:	9300      	str	r3, [sp, #0]
 8010e02:	e240      	b.n	8011286 <_dtoa_r+0x946>
 8010e04:	07f2      	lsls	r2, r6, #31
 8010e06:	d505      	bpl.n	8010e14 <_dtoa_r+0x4d4>
 8010e08:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010e0c:	f7ef fc5c 	bl	80006c8 <__aeabi_dmul>
 8010e10:	3501      	adds	r5, #1
 8010e12:	2301      	movs	r3, #1
 8010e14:	1076      	asrs	r6, r6, #1
 8010e16:	3708      	adds	r7, #8
 8010e18:	e777      	b.n	8010d0a <_dtoa_r+0x3ca>
 8010e1a:	2502      	movs	r5, #2
 8010e1c:	e779      	b.n	8010d12 <_dtoa_r+0x3d2>
 8010e1e:	9f00      	ldr	r7, [sp, #0]
 8010e20:	9e03      	ldr	r6, [sp, #12]
 8010e22:	e794      	b.n	8010d4e <_dtoa_r+0x40e>
 8010e24:	9901      	ldr	r1, [sp, #4]
 8010e26:	4b4c      	ldr	r3, [pc, #304]	; (8010f58 <_dtoa_r+0x618>)
 8010e28:	4431      	add	r1, r6
 8010e2a:	910d      	str	r1, [sp, #52]	; 0x34
 8010e2c:	9908      	ldr	r1, [sp, #32]
 8010e2e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8010e32:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010e36:	2900      	cmp	r1, #0
 8010e38:	d043      	beq.n	8010ec2 <_dtoa_r+0x582>
 8010e3a:	494d      	ldr	r1, [pc, #308]	; (8010f70 <_dtoa_r+0x630>)
 8010e3c:	2000      	movs	r0, #0
 8010e3e:	f7ef fd6d 	bl	800091c <__aeabi_ddiv>
 8010e42:	4652      	mov	r2, sl
 8010e44:	465b      	mov	r3, fp
 8010e46:	f7ef fa87 	bl	8000358 <__aeabi_dsub>
 8010e4a:	9d01      	ldr	r5, [sp, #4]
 8010e4c:	4682      	mov	sl, r0
 8010e4e:	468b      	mov	fp, r1
 8010e50:	4649      	mov	r1, r9
 8010e52:	4640      	mov	r0, r8
 8010e54:	f7ef fee8 	bl	8000c28 <__aeabi_d2iz>
 8010e58:	4606      	mov	r6, r0
 8010e5a:	f7ef fbcb 	bl	80005f4 <__aeabi_i2d>
 8010e5e:	4602      	mov	r2, r0
 8010e60:	460b      	mov	r3, r1
 8010e62:	4640      	mov	r0, r8
 8010e64:	4649      	mov	r1, r9
 8010e66:	f7ef fa77 	bl	8000358 <__aeabi_dsub>
 8010e6a:	3630      	adds	r6, #48	; 0x30
 8010e6c:	f805 6b01 	strb.w	r6, [r5], #1
 8010e70:	4652      	mov	r2, sl
 8010e72:	465b      	mov	r3, fp
 8010e74:	4680      	mov	r8, r0
 8010e76:	4689      	mov	r9, r1
 8010e78:	f7ef fe98 	bl	8000bac <__aeabi_dcmplt>
 8010e7c:	2800      	cmp	r0, #0
 8010e7e:	d163      	bne.n	8010f48 <_dtoa_r+0x608>
 8010e80:	4642      	mov	r2, r8
 8010e82:	464b      	mov	r3, r9
 8010e84:	4936      	ldr	r1, [pc, #216]	; (8010f60 <_dtoa_r+0x620>)
 8010e86:	2000      	movs	r0, #0
 8010e88:	f7ef fa66 	bl	8000358 <__aeabi_dsub>
 8010e8c:	4652      	mov	r2, sl
 8010e8e:	465b      	mov	r3, fp
 8010e90:	f7ef fe8c 	bl	8000bac <__aeabi_dcmplt>
 8010e94:	2800      	cmp	r0, #0
 8010e96:	f040 80b5 	bne.w	8011004 <_dtoa_r+0x6c4>
 8010e9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010e9c:	429d      	cmp	r5, r3
 8010e9e:	d081      	beq.n	8010da4 <_dtoa_r+0x464>
 8010ea0:	4b30      	ldr	r3, [pc, #192]	; (8010f64 <_dtoa_r+0x624>)
 8010ea2:	2200      	movs	r2, #0
 8010ea4:	4650      	mov	r0, sl
 8010ea6:	4659      	mov	r1, fp
 8010ea8:	f7ef fc0e 	bl	80006c8 <__aeabi_dmul>
 8010eac:	4b2d      	ldr	r3, [pc, #180]	; (8010f64 <_dtoa_r+0x624>)
 8010eae:	4682      	mov	sl, r0
 8010eb0:	468b      	mov	fp, r1
 8010eb2:	4640      	mov	r0, r8
 8010eb4:	4649      	mov	r1, r9
 8010eb6:	2200      	movs	r2, #0
 8010eb8:	f7ef fc06 	bl	80006c8 <__aeabi_dmul>
 8010ebc:	4680      	mov	r8, r0
 8010ebe:	4689      	mov	r9, r1
 8010ec0:	e7c6      	b.n	8010e50 <_dtoa_r+0x510>
 8010ec2:	4650      	mov	r0, sl
 8010ec4:	4659      	mov	r1, fp
 8010ec6:	f7ef fbff 	bl	80006c8 <__aeabi_dmul>
 8010eca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010ecc:	9d01      	ldr	r5, [sp, #4]
 8010ece:	930f      	str	r3, [sp, #60]	; 0x3c
 8010ed0:	4682      	mov	sl, r0
 8010ed2:	468b      	mov	fp, r1
 8010ed4:	4649      	mov	r1, r9
 8010ed6:	4640      	mov	r0, r8
 8010ed8:	f7ef fea6 	bl	8000c28 <__aeabi_d2iz>
 8010edc:	4606      	mov	r6, r0
 8010ede:	f7ef fb89 	bl	80005f4 <__aeabi_i2d>
 8010ee2:	3630      	adds	r6, #48	; 0x30
 8010ee4:	4602      	mov	r2, r0
 8010ee6:	460b      	mov	r3, r1
 8010ee8:	4640      	mov	r0, r8
 8010eea:	4649      	mov	r1, r9
 8010eec:	f7ef fa34 	bl	8000358 <__aeabi_dsub>
 8010ef0:	f805 6b01 	strb.w	r6, [r5], #1
 8010ef4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010ef6:	429d      	cmp	r5, r3
 8010ef8:	4680      	mov	r8, r0
 8010efa:	4689      	mov	r9, r1
 8010efc:	f04f 0200 	mov.w	r2, #0
 8010f00:	d124      	bne.n	8010f4c <_dtoa_r+0x60c>
 8010f02:	4b1b      	ldr	r3, [pc, #108]	; (8010f70 <_dtoa_r+0x630>)
 8010f04:	4650      	mov	r0, sl
 8010f06:	4659      	mov	r1, fp
 8010f08:	f7ef fa28 	bl	800035c <__adddf3>
 8010f0c:	4602      	mov	r2, r0
 8010f0e:	460b      	mov	r3, r1
 8010f10:	4640      	mov	r0, r8
 8010f12:	4649      	mov	r1, r9
 8010f14:	f7ef fe68 	bl	8000be8 <__aeabi_dcmpgt>
 8010f18:	2800      	cmp	r0, #0
 8010f1a:	d173      	bne.n	8011004 <_dtoa_r+0x6c4>
 8010f1c:	4652      	mov	r2, sl
 8010f1e:	465b      	mov	r3, fp
 8010f20:	4913      	ldr	r1, [pc, #76]	; (8010f70 <_dtoa_r+0x630>)
 8010f22:	2000      	movs	r0, #0
 8010f24:	f7ef fa18 	bl	8000358 <__aeabi_dsub>
 8010f28:	4602      	mov	r2, r0
 8010f2a:	460b      	mov	r3, r1
 8010f2c:	4640      	mov	r0, r8
 8010f2e:	4649      	mov	r1, r9
 8010f30:	f7ef fe3c 	bl	8000bac <__aeabi_dcmplt>
 8010f34:	2800      	cmp	r0, #0
 8010f36:	f43f af35 	beq.w	8010da4 <_dtoa_r+0x464>
 8010f3a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8010f3c:	1e6b      	subs	r3, r5, #1
 8010f3e:	930f      	str	r3, [sp, #60]	; 0x3c
 8010f40:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8010f44:	2b30      	cmp	r3, #48	; 0x30
 8010f46:	d0f8      	beq.n	8010f3a <_dtoa_r+0x5fa>
 8010f48:	9700      	str	r7, [sp, #0]
 8010f4a:	e049      	b.n	8010fe0 <_dtoa_r+0x6a0>
 8010f4c:	4b05      	ldr	r3, [pc, #20]	; (8010f64 <_dtoa_r+0x624>)
 8010f4e:	f7ef fbbb 	bl	80006c8 <__aeabi_dmul>
 8010f52:	4680      	mov	r8, r0
 8010f54:	4689      	mov	r9, r1
 8010f56:	e7bd      	b.n	8010ed4 <_dtoa_r+0x594>
 8010f58:	08026518 	.word	0x08026518
 8010f5c:	080264f0 	.word	0x080264f0
 8010f60:	3ff00000 	.word	0x3ff00000
 8010f64:	40240000 	.word	0x40240000
 8010f68:	401c0000 	.word	0x401c0000
 8010f6c:	40140000 	.word	0x40140000
 8010f70:	3fe00000 	.word	0x3fe00000
 8010f74:	9d01      	ldr	r5, [sp, #4]
 8010f76:	4656      	mov	r6, sl
 8010f78:	465f      	mov	r7, fp
 8010f7a:	4642      	mov	r2, r8
 8010f7c:	464b      	mov	r3, r9
 8010f7e:	4630      	mov	r0, r6
 8010f80:	4639      	mov	r1, r7
 8010f82:	f7ef fccb 	bl	800091c <__aeabi_ddiv>
 8010f86:	f7ef fe4f 	bl	8000c28 <__aeabi_d2iz>
 8010f8a:	4682      	mov	sl, r0
 8010f8c:	f7ef fb32 	bl	80005f4 <__aeabi_i2d>
 8010f90:	4642      	mov	r2, r8
 8010f92:	464b      	mov	r3, r9
 8010f94:	f7ef fb98 	bl	80006c8 <__aeabi_dmul>
 8010f98:	4602      	mov	r2, r0
 8010f9a:	460b      	mov	r3, r1
 8010f9c:	4630      	mov	r0, r6
 8010f9e:	4639      	mov	r1, r7
 8010fa0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8010fa4:	f7ef f9d8 	bl	8000358 <__aeabi_dsub>
 8010fa8:	f805 6b01 	strb.w	r6, [r5], #1
 8010fac:	9e01      	ldr	r6, [sp, #4]
 8010fae:	9f03      	ldr	r7, [sp, #12]
 8010fb0:	1bae      	subs	r6, r5, r6
 8010fb2:	42b7      	cmp	r7, r6
 8010fb4:	4602      	mov	r2, r0
 8010fb6:	460b      	mov	r3, r1
 8010fb8:	d135      	bne.n	8011026 <_dtoa_r+0x6e6>
 8010fba:	f7ef f9cf 	bl	800035c <__adddf3>
 8010fbe:	4642      	mov	r2, r8
 8010fc0:	464b      	mov	r3, r9
 8010fc2:	4606      	mov	r6, r0
 8010fc4:	460f      	mov	r7, r1
 8010fc6:	f7ef fe0f 	bl	8000be8 <__aeabi_dcmpgt>
 8010fca:	b9d0      	cbnz	r0, 8011002 <_dtoa_r+0x6c2>
 8010fcc:	4642      	mov	r2, r8
 8010fce:	464b      	mov	r3, r9
 8010fd0:	4630      	mov	r0, r6
 8010fd2:	4639      	mov	r1, r7
 8010fd4:	f7ef fde0 	bl	8000b98 <__aeabi_dcmpeq>
 8010fd8:	b110      	cbz	r0, 8010fe0 <_dtoa_r+0x6a0>
 8010fda:	f01a 0f01 	tst.w	sl, #1
 8010fde:	d110      	bne.n	8011002 <_dtoa_r+0x6c2>
 8010fe0:	4620      	mov	r0, r4
 8010fe2:	ee18 1a10 	vmov	r1, s16
 8010fe6:	f000 faf3 	bl	80115d0 <_Bfree>
 8010fea:	2300      	movs	r3, #0
 8010fec:	9800      	ldr	r0, [sp, #0]
 8010fee:	702b      	strb	r3, [r5, #0]
 8010ff0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010ff2:	3001      	adds	r0, #1
 8010ff4:	6018      	str	r0, [r3, #0]
 8010ff6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010ff8:	2b00      	cmp	r3, #0
 8010ffa:	f43f acf1 	beq.w	80109e0 <_dtoa_r+0xa0>
 8010ffe:	601d      	str	r5, [r3, #0]
 8011000:	e4ee      	b.n	80109e0 <_dtoa_r+0xa0>
 8011002:	9f00      	ldr	r7, [sp, #0]
 8011004:	462b      	mov	r3, r5
 8011006:	461d      	mov	r5, r3
 8011008:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801100c:	2a39      	cmp	r2, #57	; 0x39
 801100e:	d106      	bne.n	801101e <_dtoa_r+0x6de>
 8011010:	9a01      	ldr	r2, [sp, #4]
 8011012:	429a      	cmp	r2, r3
 8011014:	d1f7      	bne.n	8011006 <_dtoa_r+0x6c6>
 8011016:	9901      	ldr	r1, [sp, #4]
 8011018:	2230      	movs	r2, #48	; 0x30
 801101a:	3701      	adds	r7, #1
 801101c:	700a      	strb	r2, [r1, #0]
 801101e:	781a      	ldrb	r2, [r3, #0]
 8011020:	3201      	adds	r2, #1
 8011022:	701a      	strb	r2, [r3, #0]
 8011024:	e790      	b.n	8010f48 <_dtoa_r+0x608>
 8011026:	4ba6      	ldr	r3, [pc, #664]	; (80112c0 <_dtoa_r+0x980>)
 8011028:	2200      	movs	r2, #0
 801102a:	f7ef fb4d 	bl	80006c8 <__aeabi_dmul>
 801102e:	2200      	movs	r2, #0
 8011030:	2300      	movs	r3, #0
 8011032:	4606      	mov	r6, r0
 8011034:	460f      	mov	r7, r1
 8011036:	f7ef fdaf 	bl	8000b98 <__aeabi_dcmpeq>
 801103a:	2800      	cmp	r0, #0
 801103c:	d09d      	beq.n	8010f7a <_dtoa_r+0x63a>
 801103e:	e7cf      	b.n	8010fe0 <_dtoa_r+0x6a0>
 8011040:	9a08      	ldr	r2, [sp, #32]
 8011042:	2a00      	cmp	r2, #0
 8011044:	f000 80d7 	beq.w	80111f6 <_dtoa_r+0x8b6>
 8011048:	9a06      	ldr	r2, [sp, #24]
 801104a:	2a01      	cmp	r2, #1
 801104c:	f300 80ba 	bgt.w	80111c4 <_dtoa_r+0x884>
 8011050:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011052:	2a00      	cmp	r2, #0
 8011054:	f000 80b2 	beq.w	80111bc <_dtoa_r+0x87c>
 8011058:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801105c:	9e07      	ldr	r6, [sp, #28]
 801105e:	9d04      	ldr	r5, [sp, #16]
 8011060:	9a04      	ldr	r2, [sp, #16]
 8011062:	441a      	add	r2, r3
 8011064:	9204      	str	r2, [sp, #16]
 8011066:	9a05      	ldr	r2, [sp, #20]
 8011068:	2101      	movs	r1, #1
 801106a:	441a      	add	r2, r3
 801106c:	4620      	mov	r0, r4
 801106e:	9205      	str	r2, [sp, #20]
 8011070:	f000 fb66 	bl	8011740 <__i2b>
 8011074:	4607      	mov	r7, r0
 8011076:	2d00      	cmp	r5, #0
 8011078:	dd0c      	ble.n	8011094 <_dtoa_r+0x754>
 801107a:	9b05      	ldr	r3, [sp, #20]
 801107c:	2b00      	cmp	r3, #0
 801107e:	dd09      	ble.n	8011094 <_dtoa_r+0x754>
 8011080:	42ab      	cmp	r3, r5
 8011082:	9a04      	ldr	r2, [sp, #16]
 8011084:	bfa8      	it	ge
 8011086:	462b      	movge	r3, r5
 8011088:	1ad2      	subs	r2, r2, r3
 801108a:	9204      	str	r2, [sp, #16]
 801108c:	9a05      	ldr	r2, [sp, #20]
 801108e:	1aed      	subs	r5, r5, r3
 8011090:	1ad3      	subs	r3, r2, r3
 8011092:	9305      	str	r3, [sp, #20]
 8011094:	9b07      	ldr	r3, [sp, #28]
 8011096:	b31b      	cbz	r3, 80110e0 <_dtoa_r+0x7a0>
 8011098:	9b08      	ldr	r3, [sp, #32]
 801109a:	2b00      	cmp	r3, #0
 801109c:	f000 80af 	beq.w	80111fe <_dtoa_r+0x8be>
 80110a0:	2e00      	cmp	r6, #0
 80110a2:	dd13      	ble.n	80110cc <_dtoa_r+0x78c>
 80110a4:	4639      	mov	r1, r7
 80110a6:	4632      	mov	r2, r6
 80110a8:	4620      	mov	r0, r4
 80110aa:	f000 fc09 	bl	80118c0 <__pow5mult>
 80110ae:	ee18 2a10 	vmov	r2, s16
 80110b2:	4601      	mov	r1, r0
 80110b4:	4607      	mov	r7, r0
 80110b6:	4620      	mov	r0, r4
 80110b8:	f000 fb58 	bl	801176c <__multiply>
 80110bc:	ee18 1a10 	vmov	r1, s16
 80110c0:	4680      	mov	r8, r0
 80110c2:	4620      	mov	r0, r4
 80110c4:	f000 fa84 	bl	80115d0 <_Bfree>
 80110c8:	ee08 8a10 	vmov	s16, r8
 80110cc:	9b07      	ldr	r3, [sp, #28]
 80110ce:	1b9a      	subs	r2, r3, r6
 80110d0:	d006      	beq.n	80110e0 <_dtoa_r+0x7a0>
 80110d2:	ee18 1a10 	vmov	r1, s16
 80110d6:	4620      	mov	r0, r4
 80110d8:	f000 fbf2 	bl	80118c0 <__pow5mult>
 80110dc:	ee08 0a10 	vmov	s16, r0
 80110e0:	2101      	movs	r1, #1
 80110e2:	4620      	mov	r0, r4
 80110e4:	f000 fb2c 	bl	8011740 <__i2b>
 80110e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80110ea:	2b00      	cmp	r3, #0
 80110ec:	4606      	mov	r6, r0
 80110ee:	f340 8088 	ble.w	8011202 <_dtoa_r+0x8c2>
 80110f2:	461a      	mov	r2, r3
 80110f4:	4601      	mov	r1, r0
 80110f6:	4620      	mov	r0, r4
 80110f8:	f000 fbe2 	bl	80118c0 <__pow5mult>
 80110fc:	9b06      	ldr	r3, [sp, #24]
 80110fe:	2b01      	cmp	r3, #1
 8011100:	4606      	mov	r6, r0
 8011102:	f340 8081 	ble.w	8011208 <_dtoa_r+0x8c8>
 8011106:	f04f 0800 	mov.w	r8, #0
 801110a:	6933      	ldr	r3, [r6, #16]
 801110c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8011110:	6918      	ldr	r0, [r3, #16]
 8011112:	f000 fac5 	bl	80116a0 <__hi0bits>
 8011116:	f1c0 0020 	rsb	r0, r0, #32
 801111a:	9b05      	ldr	r3, [sp, #20]
 801111c:	4418      	add	r0, r3
 801111e:	f010 001f 	ands.w	r0, r0, #31
 8011122:	f000 8092 	beq.w	801124a <_dtoa_r+0x90a>
 8011126:	f1c0 0320 	rsb	r3, r0, #32
 801112a:	2b04      	cmp	r3, #4
 801112c:	f340 808a 	ble.w	8011244 <_dtoa_r+0x904>
 8011130:	f1c0 001c 	rsb	r0, r0, #28
 8011134:	9b04      	ldr	r3, [sp, #16]
 8011136:	4403      	add	r3, r0
 8011138:	9304      	str	r3, [sp, #16]
 801113a:	9b05      	ldr	r3, [sp, #20]
 801113c:	4403      	add	r3, r0
 801113e:	4405      	add	r5, r0
 8011140:	9305      	str	r3, [sp, #20]
 8011142:	9b04      	ldr	r3, [sp, #16]
 8011144:	2b00      	cmp	r3, #0
 8011146:	dd07      	ble.n	8011158 <_dtoa_r+0x818>
 8011148:	ee18 1a10 	vmov	r1, s16
 801114c:	461a      	mov	r2, r3
 801114e:	4620      	mov	r0, r4
 8011150:	f000 fc10 	bl	8011974 <__lshift>
 8011154:	ee08 0a10 	vmov	s16, r0
 8011158:	9b05      	ldr	r3, [sp, #20]
 801115a:	2b00      	cmp	r3, #0
 801115c:	dd05      	ble.n	801116a <_dtoa_r+0x82a>
 801115e:	4631      	mov	r1, r6
 8011160:	461a      	mov	r2, r3
 8011162:	4620      	mov	r0, r4
 8011164:	f000 fc06 	bl	8011974 <__lshift>
 8011168:	4606      	mov	r6, r0
 801116a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801116c:	2b00      	cmp	r3, #0
 801116e:	d06e      	beq.n	801124e <_dtoa_r+0x90e>
 8011170:	ee18 0a10 	vmov	r0, s16
 8011174:	4631      	mov	r1, r6
 8011176:	f000 fc6d 	bl	8011a54 <__mcmp>
 801117a:	2800      	cmp	r0, #0
 801117c:	da67      	bge.n	801124e <_dtoa_r+0x90e>
 801117e:	9b00      	ldr	r3, [sp, #0]
 8011180:	3b01      	subs	r3, #1
 8011182:	ee18 1a10 	vmov	r1, s16
 8011186:	9300      	str	r3, [sp, #0]
 8011188:	220a      	movs	r2, #10
 801118a:	2300      	movs	r3, #0
 801118c:	4620      	mov	r0, r4
 801118e:	f000 fa41 	bl	8011614 <__multadd>
 8011192:	9b08      	ldr	r3, [sp, #32]
 8011194:	ee08 0a10 	vmov	s16, r0
 8011198:	2b00      	cmp	r3, #0
 801119a:	f000 81b1 	beq.w	8011500 <_dtoa_r+0xbc0>
 801119e:	2300      	movs	r3, #0
 80111a0:	4639      	mov	r1, r7
 80111a2:	220a      	movs	r2, #10
 80111a4:	4620      	mov	r0, r4
 80111a6:	f000 fa35 	bl	8011614 <__multadd>
 80111aa:	9b02      	ldr	r3, [sp, #8]
 80111ac:	2b00      	cmp	r3, #0
 80111ae:	4607      	mov	r7, r0
 80111b0:	f300 808e 	bgt.w	80112d0 <_dtoa_r+0x990>
 80111b4:	9b06      	ldr	r3, [sp, #24]
 80111b6:	2b02      	cmp	r3, #2
 80111b8:	dc51      	bgt.n	801125e <_dtoa_r+0x91e>
 80111ba:	e089      	b.n	80112d0 <_dtoa_r+0x990>
 80111bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80111be:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80111c2:	e74b      	b.n	801105c <_dtoa_r+0x71c>
 80111c4:	9b03      	ldr	r3, [sp, #12]
 80111c6:	1e5e      	subs	r6, r3, #1
 80111c8:	9b07      	ldr	r3, [sp, #28]
 80111ca:	42b3      	cmp	r3, r6
 80111cc:	bfbf      	itttt	lt
 80111ce:	9b07      	ldrlt	r3, [sp, #28]
 80111d0:	9607      	strlt	r6, [sp, #28]
 80111d2:	1af2      	sublt	r2, r6, r3
 80111d4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80111d6:	bfb6      	itet	lt
 80111d8:	189b      	addlt	r3, r3, r2
 80111da:	1b9e      	subge	r6, r3, r6
 80111dc:	930a      	strlt	r3, [sp, #40]	; 0x28
 80111de:	9b03      	ldr	r3, [sp, #12]
 80111e0:	bfb8      	it	lt
 80111e2:	2600      	movlt	r6, #0
 80111e4:	2b00      	cmp	r3, #0
 80111e6:	bfb7      	itett	lt
 80111e8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80111ec:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80111f0:	1a9d      	sublt	r5, r3, r2
 80111f2:	2300      	movlt	r3, #0
 80111f4:	e734      	b.n	8011060 <_dtoa_r+0x720>
 80111f6:	9e07      	ldr	r6, [sp, #28]
 80111f8:	9d04      	ldr	r5, [sp, #16]
 80111fa:	9f08      	ldr	r7, [sp, #32]
 80111fc:	e73b      	b.n	8011076 <_dtoa_r+0x736>
 80111fe:	9a07      	ldr	r2, [sp, #28]
 8011200:	e767      	b.n	80110d2 <_dtoa_r+0x792>
 8011202:	9b06      	ldr	r3, [sp, #24]
 8011204:	2b01      	cmp	r3, #1
 8011206:	dc18      	bgt.n	801123a <_dtoa_r+0x8fa>
 8011208:	f1ba 0f00 	cmp.w	sl, #0
 801120c:	d115      	bne.n	801123a <_dtoa_r+0x8fa>
 801120e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011212:	b993      	cbnz	r3, 801123a <_dtoa_r+0x8fa>
 8011214:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011218:	0d1b      	lsrs	r3, r3, #20
 801121a:	051b      	lsls	r3, r3, #20
 801121c:	b183      	cbz	r3, 8011240 <_dtoa_r+0x900>
 801121e:	9b04      	ldr	r3, [sp, #16]
 8011220:	3301      	adds	r3, #1
 8011222:	9304      	str	r3, [sp, #16]
 8011224:	9b05      	ldr	r3, [sp, #20]
 8011226:	3301      	adds	r3, #1
 8011228:	9305      	str	r3, [sp, #20]
 801122a:	f04f 0801 	mov.w	r8, #1
 801122e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011230:	2b00      	cmp	r3, #0
 8011232:	f47f af6a 	bne.w	801110a <_dtoa_r+0x7ca>
 8011236:	2001      	movs	r0, #1
 8011238:	e76f      	b.n	801111a <_dtoa_r+0x7da>
 801123a:	f04f 0800 	mov.w	r8, #0
 801123e:	e7f6      	b.n	801122e <_dtoa_r+0x8ee>
 8011240:	4698      	mov	r8, r3
 8011242:	e7f4      	b.n	801122e <_dtoa_r+0x8ee>
 8011244:	f43f af7d 	beq.w	8011142 <_dtoa_r+0x802>
 8011248:	4618      	mov	r0, r3
 801124a:	301c      	adds	r0, #28
 801124c:	e772      	b.n	8011134 <_dtoa_r+0x7f4>
 801124e:	9b03      	ldr	r3, [sp, #12]
 8011250:	2b00      	cmp	r3, #0
 8011252:	dc37      	bgt.n	80112c4 <_dtoa_r+0x984>
 8011254:	9b06      	ldr	r3, [sp, #24]
 8011256:	2b02      	cmp	r3, #2
 8011258:	dd34      	ble.n	80112c4 <_dtoa_r+0x984>
 801125a:	9b03      	ldr	r3, [sp, #12]
 801125c:	9302      	str	r3, [sp, #8]
 801125e:	9b02      	ldr	r3, [sp, #8]
 8011260:	b96b      	cbnz	r3, 801127e <_dtoa_r+0x93e>
 8011262:	4631      	mov	r1, r6
 8011264:	2205      	movs	r2, #5
 8011266:	4620      	mov	r0, r4
 8011268:	f000 f9d4 	bl	8011614 <__multadd>
 801126c:	4601      	mov	r1, r0
 801126e:	4606      	mov	r6, r0
 8011270:	ee18 0a10 	vmov	r0, s16
 8011274:	f000 fbee 	bl	8011a54 <__mcmp>
 8011278:	2800      	cmp	r0, #0
 801127a:	f73f adbb 	bgt.w	8010df4 <_dtoa_r+0x4b4>
 801127e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011280:	9d01      	ldr	r5, [sp, #4]
 8011282:	43db      	mvns	r3, r3
 8011284:	9300      	str	r3, [sp, #0]
 8011286:	f04f 0800 	mov.w	r8, #0
 801128a:	4631      	mov	r1, r6
 801128c:	4620      	mov	r0, r4
 801128e:	f000 f99f 	bl	80115d0 <_Bfree>
 8011292:	2f00      	cmp	r7, #0
 8011294:	f43f aea4 	beq.w	8010fe0 <_dtoa_r+0x6a0>
 8011298:	f1b8 0f00 	cmp.w	r8, #0
 801129c:	d005      	beq.n	80112aa <_dtoa_r+0x96a>
 801129e:	45b8      	cmp	r8, r7
 80112a0:	d003      	beq.n	80112aa <_dtoa_r+0x96a>
 80112a2:	4641      	mov	r1, r8
 80112a4:	4620      	mov	r0, r4
 80112a6:	f000 f993 	bl	80115d0 <_Bfree>
 80112aa:	4639      	mov	r1, r7
 80112ac:	4620      	mov	r0, r4
 80112ae:	f000 f98f 	bl	80115d0 <_Bfree>
 80112b2:	e695      	b.n	8010fe0 <_dtoa_r+0x6a0>
 80112b4:	2600      	movs	r6, #0
 80112b6:	4637      	mov	r7, r6
 80112b8:	e7e1      	b.n	801127e <_dtoa_r+0x93e>
 80112ba:	9700      	str	r7, [sp, #0]
 80112bc:	4637      	mov	r7, r6
 80112be:	e599      	b.n	8010df4 <_dtoa_r+0x4b4>
 80112c0:	40240000 	.word	0x40240000
 80112c4:	9b08      	ldr	r3, [sp, #32]
 80112c6:	2b00      	cmp	r3, #0
 80112c8:	f000 80ca 	beq.w	8011460 <_dtoa_r+0xb20>
 80112cc:	9b03      	ldr	r3, [sp, #12]
 80112ce:	9302      	str	r3, [sp, #8]
 80112d0:	2d00      	cmp	r5, #0
 80112d2:	dd05      	ble.n	80112e0 <_dtoa_r+0x9a0>
 80112d4:	4639      	mov	r1, r7
 80112d6:	462a      	mov	r2, r5
 80112d8:	4620      	mov	r0, r4
 80112da:	f000 fb4b 	bl	8011974 <__lshift>
 80112de:	4607      	mov	r7, r0
 80112e0:	f1b8 0f00 	cmp.w	r8, #0
 80112e4:	d05b      	beq.n	801139e <_dtoa_r+0xa5e>
 80112e6:	6879      	ldr	r1, [r7, #4]
 80112e8:	4620      	mov	r0, r4
 80112ea:	f000 f931 	bl	8011550 <_Balloc>
 80112ee:	4605      	mov	r5, r0
 80112f0:	b928      	cbnz	r0, 80112fe <_dtoa_r+0x9be>
 80112f2:	4b87      	ldr	r3, [pc, #540]	; (8011510 <_dtoa_r+0xbd0>)
 80112f4:	4602      	mov	r2, r0
 80112f6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80112fa:	f7ff bb3b 	b.w	8010974 <_dtoa_r+0x34>
 80112fe:	693a      	ldr	r2, [r7, #16]
 8011300:	3202      	adds	r2, #2
 8011302:	0092      	lsls	r2, r2, #2
 8011304:	f107 010c 	add.w	r1, r7, #12
 8011308:	300c      	adds	r0, #12
 801130a:	f000 f913 	bl	8011534 <memcpy>
 801130e:	2201      	movs	r2, #1
 8011310:	4629      	mov	r1, r5
 8011312:	4620      	mov	r0, r4
 8011314:	f000 fb2e 	bl	8011974 <__lshift>
 8011318:	9b01      	ldr	r3, [sp, #4]
 801131a:	f103 0901 	add.w	r9, r3, #1
 801131e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8011322:	4413      	add	r3, r2
 8011324:	9305      	str	r3, [sp, #20]
 8011326:	f00a 0301 	and.w	r3, sl, #1
 801132a:	46b8      	mov	r8, r7
 801132c:	9304      	str	r3, [sp, #16]
 801132e:	4607      	mov	r7, r0
 8011330:	4631      	mov	r1, r6
 8011332:	ee18 0a10 	vmov	r0, s16
 8011336:	f7ff fa75 	bl	8010824 <quorem>
 801133a:	4641      	mov	r1, r8
 801133c:	9002      	str	r0, [sp, #8]
 801133e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8011342:	ee18 0a10 	vmov	r0, s16
 8011346:	f000 fb85 	bl	8011a54 <__mcmp>
 801134a:	463a      	mov	r2, r7
 801134c:	9003      	str	r0, [sp, #12]
 801134e:	4631      	mov	r1, r6
 8011350:	4620      	mov	r0, r4
 8011352:	f000 fb9b 	bl	8011a8c <__mdiff>
 8011356:	68c2      	ldr	r2, [r0, #12]
 8011358:	f109 3bff 	add.w	fp, r9, #4294967295
 801135c:	4605      	mov	r5, r0
 801135e:	bb02      	cbnz	r2, 80113a2 <_dtoa_r+0xa62>
 8011360:	4601      	mov	r1, r0
 8011362:	ee18 0a10 	vmov	r0, s16
 8011366:	f000 fb75 	bl	8011a54 <__mcmp>
 801136a:	4602      	mov	r2, r0
 801136c:	4629      	mov	r1, r5
 801136e:	4620      	mov	r0, r4
 8011370:	9207      	str	r2, [sp, #28]
 8011372:	f000 f92d 	bl	80115d0 <_Bfree>
 8011376:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801137a:	ea43 0102 	orr.w	r1, r3, r2
 801137e:	9b04      	ldr	r3, [sp, #16]
 8011380:	430b      	orrs	r3, r1
 8011382:	464d      	mov	r5, r9
 8011384:	d10f      	bne.n	80113a6 <_dtoa_r+0xa66>
 8011386:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801138a:	d02a      	beq.n	80113e2 <_dtoa_r+0xaa2>
 801138c:	9b03      	ldr	r3, [sp, #12]
 801138e:	2b00      	cmp	r3, #0
 8011390:	dd02      	ble.n	8011398 <_dtoa_r+0xa58>
 8011392:	9b02      	ldr	r3, [sp, #8]
 8011394:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8011398:	f88b a000 	strb.w	sl, [fp]
 801139c:	e775      	b.n	801128a <_dtoa_r+0x94a>
 801139e:	4638      	mov	r0, r7
 80113a0:	e7ba      	b.n	8011318 <_dtoa_r+0x9d8>
 80113a2:	2201      	movs	r2, #1
 80113a4:	e7e2      	b.n	801136c <_dtoa_r+0xa2c>
 80113a6:	9b03      	ldr	r3, [sp, #12]
 80113a8:	2b00      	cmp	r3, #0
 80113aa:	db04      	blt.n	80113b6 <_dtoa_r+0xa76>
 80113ac:	9906      	ldr	r1, [sp, #24]
 80113ae:	430b      	orrs	r3, r1
 80113b0:	9904      	ldr	r1, [sp, #16]
 80113b2:	430b      	orrs	r3, r1
 80113b4:	d122      	bne.n	80113fc <_dtoa_r+0xabc>
 80113b6:	2a00      	cmp	r2, #0
 80113b8:	ddee      	ble.n	8011398 <_dtoa_r+0xa58>
 80113ba:	ee18 1a10 	vmov	r1, s16
 80113be:	2201      	movs	r2, #1
 80113c0:	4620      	mov	r0, r4
 80113c2:	f000 fad7 	bl	8011974 <__lshift>
 80113c6:	4631      	mov	r1, r6
 80113c8:	ee08 0a10 	vmov	s16, r0
 80113cc:	f000 fb42 	bl	8011a54 <__mcmp>
 80113d0:	2800      	cmp	r0, #0
 80113d2:	dc03      	bgt.n	80113dc <_dtoa_r+0xa9c>
 80113d4:	d1e0      	bne.n	8011398 <_dtoa_r+0xa58>
 80113d6:	f01a 0f01 	tst.w	sl, #1
 80113da:	d0dd      	beq.n	8011398 <_dtoa_r+0xa58>
 80113dc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80113e0:	d1d7      	bne.n	8011392 <_dtoa_r+0xa52>
 80113e2:	2339      	movs	r3, #57	; 0x39
 80113e4:	f88b 3000 	strb.w	r3, [fp]
 80113e8:	462b      	mov	r3, r5
 80113ea:	461d      	mov	r5, r3
 80113ec:	3b01      	subs	r3, #1
 80113ee:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80113f2:	2a39      	cmp	r2, #57	; 0x39
 80113f4:	d071      	beq.n	80114da <_dtoa_r+0xb9a>
 80113f6:	3201      	adds	r2, #1
 80113f8:	701a      	strb	r2, [r3, #0]
 80113fa:	e746      	b.n	801128a <_dtoa_r+0x94a>
 80113fc:	2a00      	cmp	r2, #0
 80113fe:	dd07      	ble.n	8011410 <_dtoa_r+0xad0>
 8011400:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8011404:	d0ed      	beq.n	80113e2 <_dtoa_r+0xaa2>
 8011406:	f10a 0301 	add.w	r3, sl, #1
 801140a:	f88b 3000 	strb.w	r3, [fp]
 801140e:	e73c      	b.n	801128a <_dtoa_r+0x94a>
 8011410:	9b05      	ldr	r3, [sp, #20]
 8011412:	f809 ac01 	strb.w	sl, [r9, #-1]
 8011416:	4599      	cmp	r9, r3
 8011418:	d047      	beq.n	80114aa <_dtoa_r+0xb6a>
 801141a:	ee18 1a10 	vmov	r1, s16
 801141e:	2300      	movs	r3, #0
 8011420:	220a      	movs	r2, #10
 8011422:	4620      	mov	r0, r4
 8011424:	f000 f8f6 	bl	8011614 <__multadd>
 8011428:	45b8      	cmp	r8, r7
 801142a:	ee08 0a10 	vmov	s16, r0
 801142e:	f04f 0300 	mov.w	r3, #0
 8011432:	f04f 020a 	mov.w	r2, #10
 8011436:	4641      	mov	r1, r8
 8011438:	4620      	mov	r0, r4
 801143a:	d106      	bne.n	801144a <_dtoa_r+0xb0a>
 801143c:	f000 f8ea 	bl	8011614 <__multadd>
 8011440:	4680      	mov	r8, r0
 8011442:	4607      	mov	r7, r0
 8011444:	f109 0901 	add.w	r9, r9, #1
 8011448:	e772      	b.n	8011330 <_dtoa_r+0x9f0>
 801144a:	f000 f8e3 	bl	8011614 <__multadd>
 801144e:	4639      	mov	r1, r7
 8011450:	4680      	mov	r8, r0
 8011452:	2300      	movs	r3, #0
 8011454:	220a      	movs	r2, #10
 8011456:	4620      	mov	r0, r4
 8011458:	f000 f8dc 	bl	8011614 <__multadd>
 801145c:	4607      	mov	r7, r0
 801145e:	e7f1      	b.n	8011444 <_dtoa_r+0xb04>
 8011460:	9b03      	ldr	r3, [sp, #12]
 8011462:	9302      	str	r3, [sp, #8]
 8011464:	9d01      	ldr	r5, [sp, #4]
 8011466:	ee18 0a10 	vmov	r0, s16
 801146a:	4631      	mov	r1, r6
 801146c:	f7ff f9da 	bl	8010824 <quorem>
 8011470:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8011474:	9b01      	ldr	r3, [sp, #4]
 8011476:	f805 ab01 	strb.w	sl, [r5], #1
 801147a:	1aea      	subs	r2, r5, r3
 801147c:	9b02      	ldr	r3, [sp, #8]
 801147e:	4293      	cmp	r3, r2
 8011480:	dd09      	ble.n	8011496 <_dtoa_r+0xb56>
 8011482:	ee18 1a10 	vmov	r1, s16
 8011486:	2300      	movs	r3, #0
 8011488:	220a      	movs	r2, #10
 801148a:	4620      	mov	r0, r4
 801148c:	f000 f8c2 	bl	8011614 <__multadd>
 8011490:	ee08 0a10 	vmov	s16, r0
 8011494:	e7e7      	b.n	8011466 <_dtoa_r+0xb26>
 8011496:	9b02      	ldr	r3, [sp, #8]
 8011498:	2b00      	cmp	r3, #0
 801149a:	bfc8      	it	gt
 801149c:	461d      	movgt	r5, r3
 801149e:	9b01      	ldr	r3, [sp, #4]
 80114a0:	bfd8      	it	le
 80114a2:	2501      	movle	r5, #1
 80114a4:	441d      	add	r5, r3
 80114a6:	f04f 0800 	mov.w	r8, #0
 80114aa:	ee18 1a10 	vmov	r1, s16
 80114ae:	2201      	movs	r2, #1
 80114b0:	4620      	mov	r0, r4
 80114b2:	f000 fa5f 	bl	8011974 <__lshift>
 80114b6:	4631      	mov	r1, r6
 80114b8:	ee08 0a10 	vmov	s16, r0
 80114bc:	f000 faca 	bl	8011a54 <__mcmp>
 80114c0:	2800      	cmp	r0, #0
 80114c2:	dc91      	bgt.n	80113e8 <_dtoa_r+0xaa8>
 80114c4:	d102      	bne.n	80114cc <_dtoa_r+0xb8c>
 80114c6:	f01a 0f01 	tst.w	sl, #1
 80114ca:	d18d      	bne.n	80113e8 <_dtoa_r+0xaa8>
 80114cc:	462b      	mov	r3, r5
 80114ce:	461d      	mov	r5, r3
 80114d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80114d4:	2a30      	cmp	r2, #48	; 0x30
 80114d6:	d0fa      	beq.n	80114ce <_dtoa_r+0xb8e>
 80114d8:	e6d7      	b.n	801128a <_dtoa_r+0x94a>
 80114da:	9a01      	ldr	r2, [sp, #4]
 80114dc:	429a      	cmp	r2, r3
 80114de:	d184      	bne.n	80113ea <_dtoa_r+0xaaa>
 80114e0:	9b00      	ldr	r3, [sp, #0]
 80114e2:	3301      	adds	r3, #1
 80114e4:	9300      	str	r3, [sp, #0]
 80114e6:	2331      	movs	r3, #49	; 0x31
 80114e8:	7013      	strb	r3, [r2, #0]
 80114ea:	e6ce      	b.n	801128a <_dtoa_r+0x94a>
 80114ec:	4b09      	ldr	r3, [pc, #36]	; (8011514 <_dtoa_r+0xbd4>)
 80114ee:	f7ff ba95 	b.w	8010a1c <_dtoa_r+0xdc>
 80114f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80114f4:	2b00      	cmp	r3, #0
 80114f6:	f47f aa6e 	bne.w	80109d6 <_dtoa_r+0x96>
 80114fa:	4b07      	ldr	r3, [pc, #28]	; (8011518 <_dtoa_r+0xbd8>)
 80114fc:	f7ff ba8e 	b.w	8010a1c <_dtoa_r+0xdc>
 8011500:	9b02      	ldr	r3, [sp, #8]
 8011502:	2b00      	cmp	r3, #0
 8011504:	dcae      	bgt.n	8011464 <_dtoa_r+0xb24>
 8011506:	9b06      	ldr	r3, [sp, #24]
 8011508:	2b02      	cmp	r3, #2
 801150a:	f73f aea8 	bgt.w	801125e <_dtoa_r+0x91e>
 801150e:	e7a9      	b.n	8011464 <_dtoa_r+0xb24>
 8011510:	0802647f 	.word	0x0802647f
 8011514:	080263dc 	.word	0x080263dc
 8011518:	08026400 	.word	0x08026400

0801151c <_localeconv_r>:
 801151c:	4800      	ldr	r0, [pc, #0]	; (8011520 <_localeconv_r+0x4>)
 801151e:	4770      	bx	lr
 8011520:	20000258 	.word	0x20000258

08011524 <malloc>:
 8011524:	4b02      	ldr	r3, [pc, #8]	; (8011530 <malloc+0xc>)
 8011526:	4601      	mov	r1, r0
 8011528:	6818      	ldr	r0, [r3, #0]
 801152a:	f000 bc17 	b.w	8011d5c <_malloc_r>
 801152e:	bf00      	nop
 8011530:	20000104 	.word	0x20000104

08011534 <memcpy>:
 8011534:	440a      	add	r2, r1
 8011536:	4291      	cmp	r1, r2
 8011538:	f100 33ff 	add.w	r3, r0, #4294967295
 801153c:	d100      	bne.n	8011540 <memcpy+0xc>
 801153e:	4770      	bx	lr
 8011540:	b510      	push	{r4, lr}
 8011542:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011546:	f803 4f01 	strb.w	r4, [r3, #1]!
 801154a:	4291      	cmp	r1, r2
 801154c:	d1f9      	bne.n	8011542 <memcpy+0xe>
 801154e:	bd10      	pop	{r4, pc}

08011550 <_Balloc>:
 8011550:	b570      	push	{r4, r5, r6, lr}
 8011552:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011554:	4604      	mov	r4, r0
 8011556:	460d      	mov	r5, r1
 8011558:	b976      	cbnz	r6, 8011578 <_Balloc+0x28>
 801155a:	2010      	movs	r0, #16
 801155c:	f7ff ffe2 	bl	8011524 <malloc>
 8011560:	4602      	mov	r2, r0
 8011562:	6260      	str	r0, [r4, #36]	; 0x24
 8011564:	b920      	cbnz	r0, 8011570 <_Balloc+0x20>
 8011566:	4b18      	ldr	r3, [pc, #96]	; (80115c8 <_Balloc+0x78>)
 8011568:	4818      	ldr	r0, [pc, #96]	; (80115cc <_Balloc+0x7c>)
 801156a:	2166      	movs	r1, #102	; 0x66
 801156c:	f000 fdd6 	bl	801211c <__assert_func>
 8011570:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011574:	6006      	str	r6, [r0, #0]
 8011576:	60c6      	str	r6, [r0, #12]
 8011578:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801157a:	68f3      	ldr	r3, [r6, #12]
 801157c:	b183      	cbz	r3, 80115a0 <_Balloc+0x50>
 801157e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011580:	68db      	ldr	r3, [r3, #12]
 8011582:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8011586:	b9b8      	cbnz	r0, 80115b8 <_Balloc+0x68>
 8011588:	2101      	movs	r1, #1
 801158a:	fa01 f605 	lsl.w	r6, r1, r5
 801158e:	1d72      	adds	r2, r6, #5
 8011590:	0092      	lsls	r2, r2, #2
 8011592:	4620      	mov	r0, r4
 8011594:	f000 fb60 	bl	8011c58 <_calloc_r>
 8011598:	b160      	cbz	r0, 80115b4 <_Balloc+0x64>
 801159a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801159e:	e00e      	b.n	80115be <_Balloc+0x6e>
 80115a0:	2221      	movs	r2, #33	; 0x21
 80115a2:	2104      	movs	r1, #4
 80115a4:	4620      	mov	r0, r4
 80115a6:	f000 fb57 	bl	8011c58 <_calloc_r>
 80115aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80115ac:	60f0      	str	r0, [r6, #12]
 80115ae:	68db      	ldr	r3, [r3, #12]
 80115b0:	2b00      	cmp	r3, #0
 80115b2:	d1e4      	bne.n	801157e <_Balloc+0x2e>
 80115b4:	2000      	movs	r0, #0
 80115b6:	bd70      	pop	{r4, r5, r6, pc}
 80115b8:	6802      	ldr	r2, [r0, #0]
 80115ba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80115be:	2300      	movs	r3, #0
 80115c0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80115c4:	e7f7      	b.n	80115b6 <_Balloc+0x66>
 80115c6:	bf00      	nop
 80115c8:	0802640d 	.word	0x0802640d
 80115cc:	08026490 	.word	0x08026490

080115d0 <_Bfree>:
 80115d0:	b570      	push	{r4, r5, r6, lr}
 80115d2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80115d4:	4605      	mov	r5, r0
 80115d6:	460c      	mov	r4, r1
 80115d8:	b976      	cbnz	r6, 80115f8 <_Bfree+0x28>
 80115da:	2010      	movs	r0, #16
 80115dc:	f7ff ffa2 	bl	8011524 <malloc>
 80115e0:	4602      	mov	r2, r0
 80115e2:	6268      	str	r0, [r5, #36]	; 0x24
 80115e4:	b920      	cbnz	r0, 80115f0 <_Bfree+0x20>
 80115e6:	4b09      	ldr	r3, [pc, #36]	; (801160c <_Bfree+0x3c>)
 80115e8:	4809      	ldr	r0, [pc, #36]	; (8011610 <_Bfree+0x40>)
 80115ea:	218a      	movs	r1, #138	; 0x8a
 80115ec:	f000 fd96 	bl	801211c <__assert_func>
 80115f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80115f4:	6006      	str	r6, [r0, #0]
 80115f6:	60c6      	str	r6, [r0, #12]
 80115f8:	b13c      	cbz	r4, 801160a <_Bfree+0x3a>
 80115fa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80115fc:	6862      	ldr	r2, [r4, #4]
 80115fe:	68db      	ldr	r3, [r3, #12]
 8011600:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011604:	6021      	str	r1, [r4, #0]
 8011606:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801160a:	bd70      	pop	{r4, r5, r6, pc}
 801160c:	0802640d 	.word	0x0802640d
 8011610:	08026490 	.word	0x08026490

08011614 <__multadd>:
 8011614:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011618:	690d      	ldr	r5, [r1, #16]
 801161a:	4607      	mov	r7, r0
 801161c:	460c      	mov	r4, r1
 801161e:	461e      	mov	r6, r3
 8011620:	f101 0c14 	add.w	ip, r1, #20
 8011624:	2000      	movs	r0, #0
 8011626:	f8dc 3000 	ldr.w	r3, [ip]
 801162a:	b299      	uxth	r1, r3
 801162c:	fb02 6101 	mla	r1, r2, r1, r6
 8011630:	0c1e      	lsrs	r6, r3, #16
 8011632:	0c0b      	lsrs	r3, r1, #16
 8011634:	fb02 3306 	mla	r3, r2, r6, r3
 8011638:	b289      	uxth	r1, r1
 801163a:	3001      	adds	r0, #1
 801163c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8011640:	4285      	cmp	r5, r0
 8011642:	f84c 1b04 	str.w	r1, [ip], #4
 8011646:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801164a:	dcec      	bgt.n	8011626 <__multadd+0x12>
 801164c:	b30e      	cbz	r6, 8011692 <__multadd+0x7e>
 801164e:	68a3      	ldr	r3, [r4, #8]
 8011650:	42ab      	cmp	r3, r5
 8011652:	dc19      	bgt.n	8011688 <__multadd+0x74>
 8011654:	6861      	ldr	r1, [r4, #4]
 8011656:	4638      	mov	r0, r7
 8011658:	3101      	adds	r1, #1
 801165a:	f7ff ff79 	bl	8011550 <_Balloc>
 801165e:	4680      	mov	r8, r0
 8011660:	b928      	cbnz	r0, 801166e <__multadd+0x5a>
 8011662:	4602      	mov	r2, r0
 8011664:	4b0c      	ldr	r3, [pc, #48]	; (8011698 <__multadd+0x84>)
 8011666:	480d      	ldr	r0, [pc, #52]	; (801169c <__multadd+0x88>)
 8011668:	21b5      	movs	r1, #181	; 0xb5
 801166a:	f000 fd57 	bl	801211c <__assert_func>
 801166e:	6922      	ldr	r2, [r4, #16]
 8011670:	3202      	adds	r2, #2
 8011672:	f104 010c 	add.w	r1, r4, #12
 8011676:	0092      	lsls	r2, r2, #2
 8011678:	300c      	adds	r0, #12
 801167a:	f7ff ff5b 	bl	8011534 <memcpy>
 801167e:	4621      	mov	r1, r4
 8011680:	4638      	mov	r0, r7
 8011682:	f7ff ffa5 	bl	80115d0 <_Bfree>
 8011686:	4644      	mov	r4, r8
 8011688:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801168c:	3501      	adds	r5, #1
 801168e:	615e      	str	r6, [r3, #20]
 8011690:	6125      	str	r5, [r4, #16]
 8011692:	4620      	mov	r0, r4
 8011694:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011698:	0802647f 	.word	0x0802647f
 801169c:	08026490 	.word	0x08026490

080116a0 <__hi0bits>:
 80116a0:	0c03      	lsrs	r3, r0, #16
 80116a2:	041b      	lsls	r3, r3, #16
 80116a4:	b9d3      	cbnz	r3, 80116dc <__hi0bits+0x3c>
 80116a6:	0400      	lsls	r0, r0, #16
 80116a8:	2310      	movs	r3, #16
 80116aa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80116ae:	bf04      	itt	eq
 80116b0:	0200      	lsleq	r0, r0, #8
 80116b2:	3308      	addeq	r3, #8
 80116b4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80116b8:	bf04      	itt	eq
 80116ba:	0100      	lsleq	r0, r0, #4
 80116bc:	3304      	addeq	r3, #4
 80116be:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80116c2:	bf04      	itt	eq
 80116c4:	0080      	lsleq	r0, r0, #2
 80116c6:	3302      	addeq	r3, #2
 80116c8:	2800      	cmp	r0, #0
 80116ca:	db05      	blt.n	80116d8 <__hi0bits+0x38>
 80116cc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80116d0:	f103 0301 	add.w	r3, r3, #1
 80116d4:	bf08      	it	eq
 80116d6:	2320      	moveq	r3, #32
 80116d8:	4618      	mov	r0, r3
 80116da:	4770      	bx	lr
 80116dc:	2300      	movs	r3, #0
 80116de:	e7e4      	b.n	80116aa <__hi0bits+0xa>

080116e0 <__lo0bits>:
 80116e0:	6803      	ldr	r3, [r0, #0]
 80116e2:	f013 0207 	ands.w	r2, r3, #7
 80116e6:	4601      	mov	r1, r0
 80116e8:	d00b      	beq.n	8011702 <__lo0bits+0x22>
 80116ea:	07da      	lsls	r2, r3, #31
 80116ec:	d423      	bmi.n	8011736 <__lo0bits+0x56>
 80116ee:	0798      	lsls	r0, r3, #30
 80116f0:	bf49      	itett	mi
 80116f2:	085b      	lsrmi	r3, r3, #1
 80116f4:	089b      	lsrpl	r3, r3, #2
 80116f6:	2001      	movmi	r0, #1
 80116f8:	600b      	strmi	r3, [r1, #0]
 80116fa:	bf5c      	itt	pl
 80116fc:	600b      	strpl	r3, [r1, #0]
 80116fe:	2002      	movpl	r0, #2
 8011700:	4770      	bx	lr
 8011702:	b298      	uxth	r0, r3
 8011704:	b9a8      	cbnz	r0, 8011732 <__lo0bits+0x52>
 8011706:	0c1b      	lsrs	r3, r3, #16
 8011708:	2010      	movs	r0, #16
 801170a:	b2da      	uxtb	r2, r3
 801170c:	b90a      	cbnz	r2, 8011712 <__lo0bits+0x32>
 801170e:	3008      	adds	r0, #8
 8011710:	0a1b      	lsrs	r3, r3, #8
 8011712:	071a      	lsls	r2, r3, #28
 8011714:	bf04      	itt	eq
 8011716:	091b      	lsreq	r3, r3, #4
 8011718:	3004      	addeq	r0, #4
 801171a:	079a      	lsls	r2, r3, #30
 801171c:	bf04      	itt	eq
 801171e:	089b      	lsreq	r3, r3, #2
 8011720:	3002      	addeq	r0, #2
 8011722:	07da      	lsls	r2, r3, #31
 8011724:	d403      	bmi.n	801172e <__lo0bits+0x4e>
 8011726:	085b      	lsrs	r3, r3, #1
 8011728:	f100 0001 	add.w	r0, r0, #1
 801172c:	d005      	beq.n	801173a <__lo0bits+0x5a>
 801172e:	600b      	str	r3, [r1, #0]
 8011730:	4770      	bx	lr
 8011732:	4610      	mov	r0, r2
 8011734:	e7e9      	b.n	801170a <__lo0bits+0x2a>
 8011736:	2000      	movs	r0, #0
 8011738:	4770      	bx	lr
 801173a:	2020      	movs	r0, #32
 801173c:	4770      	bx	lr
	...

08011740 <__i2b>:
 8011740:	b510      	push	{r4, lr}
 8011742:	460c      	mov	r4, r1
 8011744:	2101      	movs	r1, #1
 8011746:	f7ff ff03 	bl	8011550 <_Balloc>
 801174a:	4602      	mov	r2, r0
 801174c:	b928      	cbnz	r0, 801175a <__i2b+0x1a>
 801174e:	4b05      	ldr	r3, [pc, #20]	; (8011764 <__i2b+0x24>)
 8011750:	4805      	ldr	r0, [pc, #20]	; (8011768 <__i2b+0x28>)
 8011752:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8011756:	f000 fce1 	bl	801211c <__assert_func>
 801175a:	2301      	movs	r3, #1
 801175c:	6144      	str	r4, [r0, #20]
 801175e:	6103      	str	r3, [r0, #16]
 8011760:	bd10      	pop	{r4, pc}
 8011762:	bf00      	nop
 8011764:	0802647f 	.word	0x0802647f
 8011768:	08026490 	.word	0x08026490

0801176c <__multiply>:
 801176c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011770:	4691      	mov	r9, r2
 8011772:	690a      	ldr	r2, [r1, #16]
 8011774:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011778:	429a      	cmp	r2, r3
 801177a:	bfb8      	it	lt
 801177c:	460b      	movlt	r3, r1
 801177e:	460c      	mov	r4, r1
 8011780:	bfbc      	itt	lt
 8011782:	464c      	movlt	r4, r9
 8011784:	4699      	movlt	r9, r3
 8011786:	6927      	ldr	r7, [r4, #16]
 8011788:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801178c:	68a3      	ldr	r3, [r4, #8]
 801178e:	6861      	ldr	r1, [r4, #4]
 8011790:	eb07 060a 	add.w	r6, r7, sl
 8011794:	42b3      	cmp	r3, r6
 8011796:	b085      	sub	sp, #20
 8011798:	bfb8      	it	lt
 801179a:	3101      	addlt	r1, #1
 801179c:	f7ff fed8 	bl	8011550 <_Balloc>
 80117a0:	b930      	cbnz	r0, 80117b0 <__multiply+0x44>
 80117a2:	4602      	mov	r2, r0
 80117a4:	4b44      	ldr	r3, [pc, #272]	; (80118b8 <__multiply+0x14c>)
 80117a6:	4845      	ldr	r0, [pc, #276]	; (80118bc <__multiply+0x150>)
 80117a8:	f240 115d 	movw	r1, #349	; 0x15d
 80117ac:	f000 fcb6 	bl	801211c <__assert_func>
 80117b0:	f100 0514 	add.w	r5, r0, #20
 80117b4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80117b8:	462b      	mov	r3, r5
 80117ba:	2200      	movs	r2, #0
 80117bc:	4543      	cmp	r3, r8
 80117be:	d321      	bcc.n	8011804 <__multiply+0x98>
 80117c0:	f104 0314 	add.w	r3, r4, #20
 80117c4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80117c8:	f109 0314 	add.w	r3, r9, #20
 80117cc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80117d0:	9202      	str	r2, [sp, #8]
 80117d2:	1b3a      	subs	r2, r7, r4
 80117d4:	3a15      	subs	r2, #21
 80117d6:	f022 0203 	bic.w	r2, r2, #3
 80117da:	3204      	adds	r2, #4
 80117dc:	f104 0115 	add.w	r1, r4, #21
 80117e0:	428f      	cmp	r7, r1
 80117e2:	bf38      	it	cc
 80117e4:	2204      	movcc	r2, #4
 80117e6:	9201      	str	r2, [sp, #4]
 80117e8:	9a02      	ldr	r2, [sp, #8]
 80117ea:	9303      	str	r3, [sp, #12]
 80117ec:	429a      	cmp	r2, r3
 80117ee:	d80c      	bhi.n	801180a <__multiply+0x9e>
 80117f0:	2e00      	cmp	r6, #0
 80117f2:	dd03      	ble.n	80117fc <__multiply+0x90>
 80117f4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80117f8:	2b00      	cmp	r3, #0
 80117fa:	d05a      	beq.n	80118b2 <__multiply+0x146>
 80117fc:	6106      	str	r6, [r0, #16]
 80117fe:	b005      	add	sp, #20
 8011800:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011804:	f843 2b04 	str.w	r2, [r3], #4
 8011808:	e7d8      	b.n	80117bc <__multiply+0x50>
 801180a:	f8b3 a000 	ldrh.w	sl, [r3]
 801180e:	f1ba 0f00 	cmp.w	sl, #0
 8011812:	d024      	beq.n	801185e <__multiply+0xf2>
 8011814:	f104 0e14 	add.w	lr, r4, #20
 8011818:	46a9      	mov	r9, r5
 801181a:	f04f 0c00 	mov.w	ip, #0
 801181e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8011822:	f8d9 1000 	ldr.w	r1, [r9]
 8011826:	fa1f fb82 	uxth.w	fp, r2
 801182a:	b289      	uxth	r1, r1
 801182c:	fb0a 110b 	mla	r1, sl, fp, r1
 8011830:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8011834:	f8d9 2000 	ldr.w	r2, [r9]
 8011838:	4461      	add	r1, ip
 801183a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801183e:	fb0a c20b 	mla	r2, sl, fp, ip
 8011842:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8011846:	b289      	uxth	r1, r1
 8011848:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801184c:	4577      	cmp	r7, lr
 801184e:	f849 1b04 	str.w	r1, [r9], #4
 8011852:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8011856:	d8e2      	bhi.n	801181e <__multiply+0xb2>
 8011858:	9a01      	ldr	r2, [sp, #4]
 801185a:	f845 c002 	str.w	ip, [r5, r2]
 801185e:	9a03      	ldr	r2, [sp, #12]
 8011860:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8011864:	3304      	adds	r3, #4
 8011866:	f1b9 0f00 	cmp.w	r9, #0
 801186a:	d020      	beq.n	80118ae <__multiply+0x142>
 801186c:	6829      	ldr	r1, [r5, #0]
 801186e:	f104 0c14 	add.w	ip, r4, #20
 8011872:	46ae      	mov	lr, r5
 8011874:	f04f 0a00 	mov.w	sl, #0
 8011878:	f8bc b000 	ldrh.w	fp, [ip]
 801187c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8011880:	fb09 220b 	mla	r2, r9, fp, r2
 8011884:	4492      	add	sl, r2
 8011886:	b289      	uxth	r1, r1
 8011888:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 801188c:	f84e 1b04 	str.w	r1, [lr], #4
 8011890:	f85c 2b04 	ldr.w	r2, [ip], #4
 8011894:	f8be 1000 	ldrh.w	r1, [lr]
 8011898:	0c12      	lsrs	r2, r2, #16
 801189a:	fb09 1102 	mla	r1, r9, r2, r1
 801189e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80118a2:	4567      	cmp	r7, ip
 80118a4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80118a8:	d8e6      	bhi.n	8011878 <__multiply+0x10c>
 80118aa:	9a01      	ldr	r2, [sp, #4]
 80118ac:	50a9      	str	r1, [r5, r2]
 80118ae:	3504      	adds	r5, #4
 80118b0:	e79a      	b.n	80117e8 <__multiply+0x7c>
 80118b2:	3e01      	subs	r6, #1
 80118b4:	e79c      	b.n	80117f0 <__multiply+0x84>
 80118b6:	bf00      	nop
 80118b8:	0802647f 	.word	0x0802647f
 80118bc:	08026490 	.word	0x08026490

080118c0 <__pow5mult>:
 80118c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80118c4:	4615      	mov	r5, r2
 80118c6:	f012 0203 	ands.w	r2, r2, #3
 80118ca:	4606      	mov	r6, r0
 80118cc:	460f      	mov	r7, r1
 80118ce:	d007      	beq.n	80118e0 <__pow5mult+0x20>
 80118d0:	4c25      	ldr	r4, [pc, #148]	; (8011968 <__pow5mult+0xa8>)
 80118d2:	3a01      	subs	r2, #1
 80118d4:	2300      	movs	r3, #0
 80118d6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80118da:	f7ff fe9b 	bl	8011614 <__multadd>
 80118de:	4607      	mov	r7, r0
 80118e0:	10ad      	asrs	r5, r5, #2
 80118e2:	d03d      	beq.n	8011960 <__pow5mult+0xa0>
 80118e4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80118e6:	b97c      	cbnz	r4, 8011908 <__pow5mult+0x48>
 80118e8:	2010      	movs	r0, #16
 80118ea:	f7ff fe1b 	bl	8011524 <malloc>
 80118ee:	4602      	mov	r2, r0
 80118f0:	6270      	str	r0, [r6, #36]	; 0x24
 80118f2:	b928      	cbnz	r0, 8011900 <__pow5mult+0x40>
 80118f4:	4b1d      	ldr	r3, [pc, #116]	; (801196c <__pow5mult+0xac>)
 80118f6:	481e      	ldr	r0, [pc, #120]	; (8011970 <__pow5mult+0xb0>)
 80118f8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80118fc:	f000 fc0e 	bl	801211c <__assert_func>
 8011900:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011904:	6004      	str	r4, [r0, #0]
 8011906:	60c4      	str	r4, [r0, #12]
 8011908:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801190c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011910:	b94c      	cbnz	r4, 8011926 <__pow5mult+0x66>
 8011912:	f240 2171 	movw	r1, #625	; 0x271
 8011916:	4630      	mov	r0, r6
 8011918:	f7ff ff12 	bl	8011740 <__i2b>
 801191c:	2300      	movs	r3, #0
 801191e:	f8c8 0008 	str.w	r0, [r8, #8]
 8011922:	4604      	mov	r4, r0
 8011924:	6003      	str	r3, [r0, #0]
 8011926:	f04f 0900 	mov.w	r9, #0
 801192a:	07eb      	lsls	r3, r5, #31
 801192c:	d50a      	bpl.n	8011944 <__pow5mult+0x84>
 801192e:	4639      	mov	r1, r7
 8011930:	4622      	mov	r2, r4
 8011932:	4630      	mov	r0, r6
 8011934:	f7ff ff1a 	bl	801176c <__multiply>
 8011938:	4639      	mov	r1, r7
 801193a:	4680      	mov	r8, r0
 801193c:	4630      	mov	r0, r6
 801193e:	f7ff fe47 	bl	80115d0 <_Bfree>
 8011942:	4647      	mov	r7, r8
 8011944:	106d      	asrs	r5, r5, #1
 8011946:	d00b      	beq.n	8011960 <__pow5mult+0xa0>
 8011948:	6820      	ldr	r0, [r4, #0]
 801194a:	b938      	cbnz	r0, 801195c <__pow5mult+0x9c>
 801194c:	4622      	mov	r2, r4
 801194e:	4621      	mov	r1, r4
 8011950:	4630      	mov	r0, r6
 8011952:	f7ff ff0b 	bl	801176c <__multiply>
 8011956:	6020      	str	r0, [r4, #0]
 8011958:	f8c0 9000 	str.w	r9, [r0]
 801195c:	4604      	mov	r4, r0
 801195e:	e7e4      	b.n	801192a <__pow5mult+0x6a>
 8011960:	4638      	mov	r0, r7
 8011962:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011966:	bf00      	nop
 8011968:	080265e0 	.word	0x080265e0
 801196c:	0802640d 	.word	0x0802640d
 8011970:	08026490 	.word	0x08026490

08011974 <__lshift>:
 8011974:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011978:	460c      	mov	r4, r1
 801197a:	6849      	ldr	r1, [r1, #4]
 801197c:	6923      	ldr	r3, [r4, #16]
 801197e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8011982:	68a3      	ldr	r3, [r4, #8]
 8011984:	4607      	mov	r7, r0
 8011986:	4691      	mov	r9, r2
 8011988:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801198c:	f108 0601 	add.w	r6, r8, #1
 8011990:	42b3      	cmp	r3, r6
 8011992:	db0b      	blt.n	80119ac <__lshift+0x38>
 8011994:	4638      	mov	r0, r7
 8011996:	f7ff fddb 	bl	8011550 <_Balloc>
 801199a:	4605      	mov	r5, r0
 801199c:	b948      	cbnz	r0, 80119b2 <__lshift+0x3e>
 801199e:	4602      	mov	r2, r0
 80119a0:	4b2a      	ldr	r3, [pc, #168]	; (8011a4c <__lshift+0xd8>)
 80119a2:	482b      	ldr	r0, [pc, #172]	; (8011a50 <__lshift+0xdc>)
 80119a4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80119a8:	f000 fbb8 	bl	801211c <__assert_func>
 80119ac:	3101      	adds	r1, #1
 80119ae:	005b      	lsls	r3, r3, #1
 80119b0:	e7ee      	b.n	8011990 <__lshift+0x1c>
 80119b2:	2300      	movs	r3, #0
 80119b4:	f100 0114 	add.w	r1, r0, #20
 80119b8:	f100 0210 	add.w	r2, r0, #16
 80119bc:	4618      	mov	r0, r3
 80119be:	4553      	cmp	r3, sl
 80119c0:	db37      	blt.n	8011a32 <__lshift+0xbe>
 80119c2:	6920      	ldr	r0, [r4, #16]
 80119c4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80119c8:	f104 0314 	add.w	r3, r4, #20
 80119cc:	f019 091f 	ands.w	r9, r9, #31
 80119d0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80119d4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80119d8:	d02f      	beq.n	8011a3a <__lshift+0xc6>
 80119da:	f1c9 0e20 	rsb	lr, r9, #32
 80119de:	468a      	mov	sl, r1
 80119e0:	f04f 0c00 	mov.w	ip, #0
 80119e4:	681a      	ldr	r2, [r3, #0]
 80119e6:	fa02 f209 	lsl.w	r2, r2, r9
 80119ea:	ea42 020c 	orr.w	r2, r2, ip
 80119ee:	f84a 2b04 	str.w	r2, [sl], #4
 80119f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80119f6:	4298      	cmp	r0, r3
 80119f8:	fa22 fc0e 	lsr.w	ip, r2, lr
 80119fc:	d8f2      	bhi.n	80119e4 <__lshift+0x70>
 80119fe:	1b03      	subs	r3, r0, r4
 8011a00:	3b15      	subs	r3, #21
 8011a02:	f023 0303 	bic.w	r3, r3, #3
 8011a06:	3304      	adds	r3, #4
 8011a08:	f104 0215 	add.w	r2, r4, #21
 8011a0c:	4290      	cmp	r0, r2
 8011a0e:	bf38      	it	cc
 8011a10:	2304      	movcc	r3, #4
 8011a12:	f841 c003 	str.w	ip, [r1, r3]
 8011a16:	f1bc 0f00 	cmp.w	ip, #0
 8011a1a:	d001      	beq.n	8011a20 <__lshift+0xac>
 8011a1c:	f108 0602 	add.w	r6, r8, #2
 8011a20:	3e01      	subs	r6, #1
 8011a22:	4638      	mov	r0, r7
 8011a24:	612e      	str	r6, [r5, #16]
 8011a26:	4621      	mov	r1, r4
 8011a28:	f7ff fdd2 	bl	80115d0 <_Bfree>
 8011a2c:	4628      	mov	r0, r5
 8011a2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011a32:	f842 0f04 	str.w	r0, [r2, #4]!
 8011a36:	3301      	adds	r3, #1
 8011a38:	e7c1      	b.n	80119be <__lshift+0x4a>
 8011a3a:	3904      	subs	r1, #4
 8011a3c:	f853 2b04 	ldr.w	r2, [r3], #4
 8011a40:	f841 2f04 	str.w	r2, [r1, #4]!
 8011a44:	4298      	cmp	r0, r3
 8011a46:	d8f9      	bhi.n	8011a3c <__lshift+0xc8>
 8011a48:	e7ea      	b.n	8011a20 <__lshift+0xac>
 8011a4a:	bf00      	nop
 8011a4c:	0802647f 	.word	0x0802647f
 8011a50:	08026490 	.word	0x08026490

08011a54 <__mcmp>:
 8011a54:	b530      	push	{r4, r5, lr}
 8011a56:	6902      	ldr	r2, [r0, #16]
 8011a58:	690c      	ldr	r4, [r1, #16]
 8011a5a:	1b12      	subs	r2, r2, r4
 8011a5c:	d10e      	bne.n	8011a7c <__mcmp+0x28>
 8011a5e:	f100 0314 	add.w	r3, r0, #20
 8011a62:	3114      	adds	r1, #20
 8011a64:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8011a68:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8011a6c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8011a70:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8011a74:	42a5      	cmp	r5, r4
 8011a76:	d003      	beq.n	8011a80 <__mcmp+0x2c>
 8011a78:	d305      	bcc.n	8011a86 <__mcmp+0x32>
 8011a7a:	2201      	movs	r2, #1
 8011a7c:	4610      	mov	r0, r2
 8011a7e:	bd30      	pop	{r4, r5, pc}
 8011a80:	4283      	cmp	r3, r0
 8011a82:	d3f3      	bcc.n	8011a6c <__mcmp+0x18>
 8011a84:	e7fa      	b.n	8011a7c <__mcmp+0x28>
 8011a86:	f04f 32ff 	mov.w	r2, #4294967295
 8011a8a:	e7f7      	b.n	8011a7c <__mcmp+0x28>

08011a8c <__mdiff>:
 8011a8c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a90:	460c      	mov	r4, r1
 8011a92:	4606      	mov	r6, r0
 8011a94:	4611      	mov	r1, r2
 8011a96:	4620      	mov	r0, r4
 8011a98:	4690      	mov	r8, r2
 8011a9a:	f7ff ffdb 	bl	8011a54 <__mcmp>
 8011a9e:	1e05      	subs	r5, r0, #0
 8011aa0:	d110      	bne.n	8011ac4 <__mdiff+0x38>
 8011aa2:	4629      	mov	r1, r5
 8011aa4:	4630      	mov	r0, r6
 8011aa6:	f7ff fd53 	bl	8011550 <_Balloc>
 8011aaa:	b930      	cbnz	r0, 8011aba <__mdiff+0x2e>
 8011aac:	4b3a      	ldr	r3, [pc, #232]	; (8011b98 <__mdiff+0x10c>)
 8011aae:	4602      	mov	r2, r0
 8011ab0:	f240 2132 	movw	r1, #562	; 0x232
 8011ab4:	4839      	ldr	r0, [pc, #228]	; (8011b9c <__mdiff+0x110>)
 8011ab6:	f000 fb31 	bl	801211c <__assert_func>
 8011aba:	2301      	movs	r3, #1
 8011abc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011ac0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ac4:	bfa4      	itt	ge
 8011ac6:	4643      	movge	r3, r8
 8011ac8:	46a0      	movge	r8, r4
 8011aca:	4630      	mov	r0, r6
 8011acc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8011ad0:	bfa6      	itte	ge
 8011ad2:	461c      	movge	r4, r3
 8011ad4:	2500      	movge	r5, #0
 8011ad6:	2501      	movlt	r5, #1
 8011ad8:	f7ff fd3a 	bl	8011550 <_Balloc>
 8011adc:	b920      	cbnz	r0, 8011ae8 <__mdiff+0x5c>
 8011ade:	4b2e      	ldr	r3, [pc, #184]	; (8011b98 <__mdiff+0x10c>)
 8011ae0:	4602      	mov	r2, r0
 8011ae2:	f44f 7110 	mov.w	r1, #576	; 0x240
 8011ae6:	e7e5      	b.n	8011ab4 <__mdiff+0x28>
 8011ae8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8011aec:	6926      	ldr	r6, [r4, #16]
 8011aee:	60c5      	str	r5, [r0, #12]
 8011af0:	f104 0914 	add.w	r9, r4, #20
 8011af4:	f108 0514 	add.w	r5, r8, #20
 8011af8:	f100 0e14 	add.w	lr, r0, #20
 8011afc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8011b00:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8011b04:	f108 0210 	add.w	r2, r8, #16
 8011b08:	46f2      	mov	sl, lr
 8011b0a:	2100      	movs	r1, #0
 8011b0c:	f859 3b04 	ldr.w	r3, [r9], #4
 8011b10:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8011b14:	fa1f f883 	uxth.w	r8, r3
 8011b18:	fa11 f18b 	uxtah	r1, r1, fp
 8011b1c:	0c1b      	lsrs	r3, r3, #16
 8011b1e:	eba1 0808 	sub.w	r8, r1, r8
 8011b22:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8011b26:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8011b2a:	fa1f f888 	uxth.w	r8, r8
 8011b2e:	1419      	asrs	r1, r3, #16
 8011b30:	454e      	cmp	r6, r9
 8011b32:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8011b36:	f84a 3b04 	str.w	r3, [sl], #4
 8011b3a:	d8e7      	bhi.n	8011b0c <__mdiff+0x80>
 8011b3c:	1b33      	subs	r3, r6, r4
 8011b3e:	3b15      	subs	r3, #21
 8011b40:	f023 0303 	bic.w	r3, r3, #3
 8011b44:	3304      	adds	r3, #4
 8011b46:	3415      	adds	r4, #21
 8011b48:	42a6      	cmp	r6, r4
 8011b4a:	bf38      	it	cc
 8011b4c:	2304      	movcc	r3, #4
 8011b4e:	441d      	add	r5, r3
 8011b50:	4473      	add	r3, lr
 8011b52:	469e      	mov	lr, r3
 8011b54:	462e      	mov	r6, r5
 8011b56:	4566      	cmp	r6, ip
 8011b58:	d30e      	bcc.n	8011b78 <__mdiff+0xec>
 8011b5a:	f10c 0203 	add.w	r2, ip, #3
 8011b5e:	1b52      	subs	r2, r2, r5
 8011b60:	f022 0203 	bic.w	r2, r2, #3
 8011b64:	3d03      	subs	r5, #3
 8011b66:	45ac      	cmp	ip, r5
 8011b68:	bf38      	it	cc
 8011b6a:	2200      	movcc	r2, #0
 8011b6c:	441a      	add	r2, r3
 8011b6e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8011b72:	b17b      	cbz	r3, 8011b94 <__mdiff+0x108>
 8011b74:	6107      	str	r7, [r0, #16]
 8011b76:	e7a3      	b.n	8011ac0 <__mdiff+0x34>
 8011b78:	f856 8b04 	ldr.w	r8, [r6], #4
 8011b7c:	fa11 f288 	uxtah	r2, r1, r8
 8011b80:	1414      	asrs	r4, r2, #16
 8011b82:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8011b86:	b292      	uxth	r2, r2
 8011b88:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8011b8c:	f84e 2b04 	str.w	r2, [lr], #4
 8011b90:	1421      	asrs	r1, r4, #16
 8011b92:	e7e0      	b.n	8011b56 <__mdiff+0xca>
 8011b94:	3f01      	subs	r7, #1
 8011b96:	e7ea      	b.n	8011b6e <__mdiff+0xe2>
 8011b98:	0802647f 	.word	0x0802647f
 8011b9c:	08026490 	.word	0x08026490

08011ba0 <__d2b>:
 8011ba0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011ba4:	4689      	mov	r9, r1
 8011ba6:	2101      	movs	r1, #1
 8011ba8:	ec57 6b10 	vmov	r6, r7, d0
 8011bac:	4690      	mov	r8, r2
 8011bae:	f7ff fccf 	bl	8011550 <_Balloc>
 8011bb2:	4604      	mov	r4, r0
 8011bb4:	b930      	cbnz	r0, 8011bc4 <__d2b+0x24>
 8011bb6:	4602      	mov	r2, r0
 8011bb8:	4b25      	ldr	r3, [pc, #148]	; (8011c50 <__d2b+0xb0>)
 8011bba:	4826      	ldr	r0, [pc, #152]	; (8011c54 <__d2b+0xb4>)
 8011bbc:	f240 310a 	movw	r1, #778	; 0x30a
 8011bc0:	f000 faac 	bl	801211c <__assert_func>
 8011bc4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8011bc8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8011bcc:	bb35      	cbnz	r5, 8011c1c <__d2b+0x7c>
 8011bce:	2e00      	cmp	r6, #0
 8011bd0:	9301      	str	r3, [sp, #4]
 8011bd2:	d028      	beq.n	8011c26 <__d2b+0x86>
 8011bd4:	4668      	mov	r0, sp
 8011bd6:	9600      	str	r6, [sp, #0]
 8011bd8:	f7ff fd82 	bl	80116e0 <__lo0bits>
 8011bdc:	9900      	ldr	r1, [sp, #0]
 8011bde:	b300      	cbz	r0, 8011c22 <__d2b+0x82>
 8011be0:	9a01      	ldr	r2, [sp, #4]
 8011be2:	f1c0 0320 	rsb	r3, r0, #32
 8011be6:	fa02 f303 	lsl.w	r3, r2, r3
 8011bea:	430b      	orrs	r3, r1
 8011bec:	40c2      	lsrs	r2, r0
 8011bee:	6163      	str	r3, [r4, #20]
 8011bf0:	9201      	str	r2, [sp, #4]
 8011bf2:	9b01      	ldr	r3, [sp, #4]
 8011bf4:	61a3      	str	r3, [r4, #24]
 8011bf6:	2b00      	cmp	r3, #0
 8011bf8:	bf14      	ite	ne
 8011bfa:	2202      	movne	r2, #2
 8011bfc:	2201      	moveq	r2, #1
 8011bfe:	6122      	str	r2, [r4, #16]
 8011c00:	b1d5      	cbz	r5, 8011c38 <__d2b+0x98>
 8011c02:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8011c06:	4405      	add	r5, r0
 8011c08:	f8c9 5000 	str.w	r5, [r9]
 8011c0c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011c10:	f8c8 0000 	str.w	r0, [r8]
 8011c14:	4620      	mov	r0, r4
 8011c16:	b003      	add	sp, #12
 8011c18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011c1c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011c20:	e7d5      	b.n	8011bce <__d2b+0x2e>
 8011c22:	6161      	str	r1, [r4, #20]
 8011c24:	e7e5      	b.n	8011bf2 <__d2b+0x52>
 8011c26:	a801      	add	r0, sp, #4
 8011c28:	f7ff fd5a 	bl	80116e0 <__lo0bits>
 8011c2c:	9b01      	ldr	r3, [sp, #4]
 8011c2e:	6163      	str	r3, [r4, #20]
 8011c30:	2201      	movs	r2, #1
 8011c32:	6122      	str	r2, [r4, #16]
 8011c34:	3020      	adds	r0, #32
 8011c36:	e7e3      	b.n	8011c00 <__d2b+0x60>
 8011c38:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011c3c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8011c40:	f8c9 0000 	str.w	r0, [r9]
 8011c44:	6918      	ldr	r0, [r3, #16]
 8011c46:	f7ff fd2b 	bl	80116a0 <__hi0bits>
 8011c4a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011c4e:	e7df      	b.n	8011c10 <__d2b+0x70>
 8011c50:	0802647f 	.word	0x0802647f
 8011c54:	08026490 	.word	0x08026490

08011c58 <_calloc_r>:
 8011c58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011c5a:	fba1 2402 	umull	r2, r4, r1, r2
 8011c5e:	b94c      	cbnz	r4, 8011c74 <_calloc_r+0x1c>
 8011c60:	4611      	mov	r1, r2
 8011c62:	9201      	str	r2, [sp, #4]
 8011c64:	f000 f87a 	bl	8011d5c <_malloc_r>
 8011c68:	9a01      	ldr	r2, [sp, #4]
 8011c6a:	4605      	mov	r5, r0
 8011c6c:	b930      	cbnz	r0, 8011c7c <_calloc_r+0x24>
 8011c6e:	4628      	mov	r0, r5
 8011c70:	b003      	add	sp, #12
 8011c72:	bd30      	pop	{r4, r5, pc}
 8011c74:	220c      	movs	r2, #12
 8011c76:	6002      	str	r2, [r0, #0]
 8011c78:	2500      	movs	r5, #0
 8011c7a:	e7f8      	b.n	8011c6e <_calloc_r+0x16>
 8011c7c:	4621      	mov	r1, r4
 8011c7e:	f7fe f93f 	bl	800ff00 <memset>
 8011c82:	e7f4      	b.n	8011c6e <_calloc_r+0x16>

08011c84 <_free_r>:
 8011c84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011c86:	2900      	cmp	r1, #0
 8011c88:	d044      	beq.n	8011d14 <_free_r+0x90>
 8011c8a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011c8e:	9001      	str	r0, [sp, #4]
 8011c90:	2b00      	cmp	r3, #0
 8011c92:	f1a1 0404 	sub.w	r4, r1, #4
 8011c96:	bfb8      	it	lt
 8011c98:	18e4      	addlt	r4, r4, r3
 8011c9a:	f000 fa9b 	bl	80121d4 <__malloc_lock>
 8011c9e:	4a1e      	ldr	r2, [pc, #120]	; (8011d18 <_free_r+0x94>)
 8011ca0:	9801      	ldr	r0, [sp, #4]
 8011ca2:	6813      	ldr	r3, [r2, #0]
 8011ca4:	b933      	cbnz	r3, 8011cb4 <_free_r+0x30>
 8011ca6:	6063      	str	r3, [r4, #4]
 8011ca8:	6014      	str	r4, [r2, #0]
 8011caa:	b003      	add	sp, #12
 8011cac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011cb0:	f000 ba96 	b.w	80121e0 <__malloc_unlock>
 8011cb4:	42a3      	cmp	r3, r4
 8011cb6:	d908      	bls.n	8011cca <_free_r+0x46>
 8011cb8:	6825      	ldr	r5, [r4, #0]
 8011cba:	1961      	adds	r1, r4, r5
 8011cbc:	428b      	cmp	r3, r1
 8011cbe:	bf01      	itttt	eq
 8011cc0:	6819      	ldreq	r1, [r3, #0]
 8011cc2:	685b      	ldreq	r3, [r3, #4]
 8011cc4:	1949      	addeq	r1, r1, r5
 8011cc6:	6021      	streq	r1, [r4, #0]
 8011cc8:	e7ed      	b.n	8011ca6 <_free_r+0x22>
 8011cca:	461a      	mov	r2, r3
 8011ccc:	685b      	ldr	r3, [r3, #4]
 8011cce:	b10b      	cbz	r3, 8011cd4 <_free_r+0x50>
 8011cd0:	42a3      	cmp	r3, r4
 8011cd2:	d9fa      	bls.n	8011cca <_free_r+0x46>
 8011cd4:	6811      	ldr	r1, [r2, #0]
 8011cd6:	1855      	adds	r5, r2, r1
 8011cd8:	42a5      	cmp	r5, r4
 8011cda:	d10b      	bne.n	8011cf4 <_free_r+0x70>
 8011cdc:	6824      	ldr	r4, [r4, #0]
 8011cde:	4421      	add	r1, r4
 8011ce0:	1854      	adds	r4, r2, r1
 8011ce2:	42a3      	cmp	r3, r4
 8011ce4:	6011      	str	r1, [r2, #0]
 8011ce6:	d1e0      	bne.n	8011caa <_free_r+0x26>
 8011ce8:	681c      	ldr	r4, [r3, #0]
 8011cea:	685b      	ldr	r3, [r3, #4]
 8011cec:	6053      	str	r3, [r2, #4]
 8011cee:	4421      	add	r1, r4
 8011cf0:	6011      	str	r1, [r2, #0]
 8011cf2:	e7da      	b.n	8011caa <_free_r+0x26>
 8011cf4:	d902      	bls.n	8011cfc <_free_r+0x78>
 8011cf6:	230c      	movs	r3, #12
 8011cf8:	6003      	str	r3, [r0, #0]
 8011cfa:	e7d6      	b.n	8011caa <_free_r+0x26>
 8011cfc:	6825      	ldr	r5, [r4, #0]
 8011cfe:	1961      	adds	r1, r4, r5
 8011d00:	428b      	cmp	r3, r1
 8011d02:	bf04      	itt	eq
 8011d04:	6819      	ldreq	r1, [r3, #0]
 8011d06:	685b      	ldreq	r3, [r3, #4]
 8011d08:	6063      	str	r3, [r4, #4]
 8011d0a:	bf04      	itt	eq
 8011d0c:	1949      	addeq	r1, r1, r5
 8011d0e:	6021      	streq	r1, [r4, #0]
 8011d10:	6054      	str	r4, [r2, #4]
 8011d12:	e7ca      	b.n	8011caa <_free_r+0x26>
 8011d14:	b003      	add	sp, #12
 8011d16:	bd30      	pop	{r4, r5, pc}
 8011d18:	2001241c 	.word	0x2001241c

08011d1c <sbrk_aligned>:
 8011d1c:	b570      	push	{r4, r5, r6, lr}
 8011d1e:	4e0e      	ldr	r6, [pc, #56]	; (8011d58 <sbrk_aligned+0x3c>)
 8011d20:	460c      	mov	r4, r1
 8011d22:	6831      	ldr	r1, [r6, #0]
 8011d24:	4605      	mov	r5, r0
 8011d26:	b911      	cbnz	r1, 8011d2e <sbrk_aligned+0x12>
 8011d28:	f000 f9e8 	bl	80120fc <_sbrk_r>
 8011d2c:	6030      	str	r0, [r6, #0]
 8011d2e:	4621      	mov	r1, r4
 8011d30:	4628      	mov	r0, r5
 8011d32:	f000 f9e3 	bl	80120fc <_sbrk_r>
 8011d36:	1c43      	adds	r3, r0, #1
 8011d38:	d00a      	beq.n	8011d50 <sbrk_aligned+0x34>
 8011d3a:	1cc4      	adds	r4, r0, #3
 8011d3c:	f024 0403 	bic.w	r4, r4, #3
 8011d40:	42a0      	cmp	r0, r4
 8011d42:	d007      	beq.n	8011d54 <sbrk_aligned+0x38>
 8011d44:	1a21      	subs	r1, r4, r0
 8011d46:	4628      	mov	r0, r5
 8011d48:	f000 f9d8 	bl	80120fc <_sbrk_r>
 8011d4c:	3001      	adds	r0, #1
 8011d4e:	d101      	bne.n	8011d54 <sbrk_aligned+0x38>
 8011d50:	f04f 34ff 	mov.w	r4, #4294967295
 8011d54:	4620      	mov	r0, r4
 8011d56:	bd70      	pop	{r4, r5, r6, pc}
 8011d58:	20012420 	.word	0x20012420

08011d5c <_malloc_r>:
 8011d5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d60:	1ccd      	adds	r5, r1, #3
 8011d62:	f025 0503 	bic.w	r5, r5, #3
 8011d66:	3508      	adds	r5, #8
 8011d68:	2d0c      	cmp	r5, #12
 8011d6a:	bf38      	it	cc
 8011d6c:	250c      	movcc	r5, #12
 8011d6e:	2d00      	cmp	r5, #0
 8011d70:	4607      	mov	r7, r0
 8011d72:	db01      	blt.n	8011d78 <_malloc_r+0x1c>
 8011d74:	42a9      	cmp	r1, r5
 8011d76:	d905      	bls.n	8011d84 <_malloc_r+0x28>
 8011d78:	230c      	movs	r3, #12
 8011d7a:	603b      	str	r3, [r7, #0]
 8011d7c:	2600      	movs	r6, #0
 8011d7e:	4630      	mov	r0, r6
 8011d80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011d84:	4e2e      	ldr	r6, [pc, #184]	; (8011e40 <_malloc_r+0xe4>)
 8011d86:	f000 fa25 	bl	80121d4 <__malloc_lock>
 8011d8a:	6833      	ldr	r3, [r6, #0]
 8011d8c:	461c      	mov	r4, r3
 8011d8e:	bb34      	cbnz	r4, 8011dde <_malloc_r+0x82>
 8011d90:	4629      	mov	r1, r5
 8011d92:	4638      	mov	r0, r7
 8011d94:	f7ff ffc2 	bl	8011d1c <sbrk_aligned>
 8011d98:	1c43      	adds	r3, r0, #1
 8011d9a:	4604      	mov	r4, r0
 8011d9c:	d14d      	bne.n	8011e3a <_malloc_r+0xde>
 8011d9e:	6834      	ldr	r4, [r6, #0]
 8011da0:	4626      	mov	r6, r4
 8011da2:	2e00      	cmp	r6, #0
 8011da4:	d140      	bne.n	8011e28 <_malloc_r+0xcc>
 8011da6:	6823      	ldr	r3, [r4, #0]
 8011da8:	4631      	mov	r1, r6
 8011daa:	4638      	mov	r0, r7
 8011dac:	eb04 0803 	add.w	r8, r4, r3
 8011db0:	f000 f9a4 	bl	80120fc <_sbrk_r>
 8011db4:	4580      	cmp	r8, r0
 8011db6:	d13a      	bne.n	8011e2e <_malloc_r+0xd2>
 8011db8:	6821      	ldr	r1, [r4, #0]
 8011dba:	3503      	adds	r5, #3
 8011dbc:	1a6d      	subs	r5, r5, r1
 8011dbe:	f025 0503 	bic.w	r5, r5, #3
 8011dc2:	3508      	adds	r5, #8
 8011dc4:	2d0c      	cmp	r5, #12
 8011dc6:	bf38      	it	cc
 8011dc8:	250c      	movcc	r5, #12
 8011dca:	4629      	mov	r1, r5
 8011dcc:	4638      	mov	r0, r7
 8011dce:	f7ff ffa5 	bl	8011d1c <sbrk_aligned>
 8011dd2:	3001      	adds	r0, #1
 8011dd4:	d02b      	beq.n	8011e2e <_malloc_r+0xd2>
 8011dd6:	6823      	ldr	r3, [r4, #0]
 8011dd8:	442b      	add	r3, r5
 8011dda:	6023      	str	r3, [r4, #0]
 8011ddc:	e00e      	b.n	8011dfc <_malloc_r+0xa0>
 8011dde:	6822      	ldr	r2, [r4, #0]
 8011de0:	1b52      	subs	r2, r2, r5
 8011de2:	d41e      	bmi.n	8011e22 <_malloc_r+0xc6>
 8011de4:	2a0b      	cmp	r2, #11
 8011de6:	d916      	bls.n	8011e16 <_malloc_r+0xba>
 8011de8:	1961      	adds	r1, r4, r5
 8011dea:	42a3      	cmp	r3, r4
 8011dec:	6025      	str	r5, [r4, #0]
 8011dee:	bf18      	it	ne
 8011df0:	6059      	strne	r1, [r3, #4]
 8011df2:	6863      	ldr	r3, [r4, #4]
 8011df4:	bf08      	it	eq
 8011df6:	6031      	streq	r1, [r6, #0]
 8011df8:	5162      	str	r2, [r4, r5]
 8011dfa:	604b      	str	r3, [r1, #4]
 8011dfc:	4638      	mov	r0, r7
 8011dfe:	f104 060b 	add.w	r6, r4, #11
 8011e02:	f000 f9ed 	bl	80121e0 <__malloc_unlock>
 8011e06:	f026 0607 	bic.w	r6, r6, #7
 8011e0a:	1d23      	adds	r3, r4, #4
 8011e0c:	1af2      	subs	r2, r6, r3
 8011e0e:	d0b6      	beq.n	8011d7e <_malloc_r+0x22>
 8011e10:	1b9b      	subs	r3, r3, r6
 8011e12:	50a3      	str	r3, [r4, r2]
 8011e14:	e7b3      	b.n	8011d7e <_malloc_r+0x22>
 8011e16:	6862      	ldr	r2, [r4, #4]
 8011e18:	42a3      	cmp	r3, r4
 8011e1a:	bf0c      	ite	eq
 8011e1c:	6032      	streq	r2, [r6, #0]
 8011e1e:	605a      	strne	r2, [r3, #4]
 8011e20:	e7ec      	b.n	8011dfc <_malloc_r+0xa0>
 8011e22:	4623      	mov	r3, r4
 8011e24:	6864      	ldr	r4, [r4, #4]
 8011e26:	e7b2      	b.n	8011d8e <_malloc_r+0x32>
 8011e28:	4634      	mov	r4, r6
 8011e2a:	6876      	ldr	r6, [r6, #4]
 8011e2c:	e7b9      	b.n	8011da2 <_malloc_r+0x46>
 8011e2e:	230c      	movs	r3, #12
 8011e30:	603b      	str	r3, [r7, #0]
 8011e32:	4638      	mov	r0, r7
 8011e34:	f000 f9d4 	bl	80121e0 <__malloc_unlock>
 8011e38:	e7a1      	b.n	8011d7e <_malloc_r+0x22>
 8011e3a:	6025      	str	r5, [r4, #0]
 8011e3c:	e7de      	b.n	8011dfc <_malloc_r+0xa0>
 8011e3e:	bf00      	nop
 8011e40:	2001241c 	.word	0x2001241c

08011e44 <__ssputs_r>:
 8011e44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011e48:	688e      	ldr	r6, [r1, #8]
 8011e4a:	429e      	cmp	r6, r3
 8011e4c:	4682      	mov	sl, r0
 8011e4e:	460c      	mov	r4, r1
 8011e50:	4690      	mov	r8, r2
 8011e52:	461f      	mov	r7, r3
 8011e54:	d838      	bhi.n	8011ec8 <__ssputs_r+0x84>
 8011e56:	898a      	ldrh	r2, [r1, #12]
 8011e58:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011e5c:	d032      	beq.n	8011ec4 <__ssputs_r+0x80>
 8011e5e:	6825      	ldr	r5, [r4, #0]
 8011e60:	6909      	ldr	r1, [r1, #16]
 8011e62:	eba5 0901 	sub.w	r9, r5, r1
 8011e66:	6965      	ldr	r5, [r4, #20]
 8011e68:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011e6c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011e70:	3301      	adds	r3, #1
 8011e72:	444b      	add	r3, r9
 8011e74:	106d      	asrs	r5, r5, #1
 8011e76:	429d      	cmp	r5, r3
 8011e78:	bf38      	it	cc
 8011e7a:	461d      	movcc	r5, r3
 8011e7c:	0553      	lsls	r3, r2, #21
 8011e7e:	d531      	bpl.n	8011ee4 <__ssputs_r+0xa0>
 8011e80:	4629      	mov	r1, r5
 8011e82:	f7ff ff6b 	bl	8011d5c <_malloc_r>
 8011e86:	4606      	mov	r6, r0
 8011e88:	b950      	cbnz	r0, 8011ea0 <__ssputs_r+0x5c>
 8011e8a:	230c      	movs	r3, #12
 8011e8c:	f8ca 3000 	str.w	r3, [sl]
 8011e90:	89a3      	ldrh	r3, [r4, #12]
 8011e92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011e96:	81a3      	strh	r3, [r4, #12]
 8011e98:	f04f 30ff 	mov.w	r0, #4294967295
 8011e9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011ea0:	6921      	ldr	r1, [r4, #16]
 8011ea2:	464a      	mov	r2, r9
 8011ea4:	f7ff fb46 	bl	8011534 <memcpy>
 8011ea8:	89a3      	ldrh	r3, [r4, #12]
 8011eaa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011eae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011eb2:	81a3      	strh	r3, [r4, #12]
 8011eb4:	6126      	str	r6, [r4, #16]
 8011eb6:	6165      	str	r5, [r4, #20]
 8011eb8:	444e      	add	r6, r9
 8011eba:	eba5 0509 	sub.w	r5, r5, r9
 8011ebe:	6026      	str	r6, [r4, #0]
 8011ec0:	60a5      	str	r5, [r4, #8]
 8011ec2:	463e      	mov	r6, r7
 8011ec4:	42be      	cmp	r6, r7
 8011ec6:	d900      	bls.n	8011eca <__ssputs_r+0x86>
 8011ec8:	463e      	mov	r6, r7
 8011eca:	6820      	ldr	r0, [r4, #0]
 8011ecc:	4632      	mov	r2, r6
 8011ece:	4641      	mov	r1, r8
 8011ed0:	f000 f966 	bl	80121a0 <memmove>
 8011ed4:	68a3      	ldr	r3, [r4, #8]
 8011ed6:	1b9b      	subs	r3, r3, r6
 8011ed8:	60a3      	str	r3, [r4, #8]
 8011eda:	6823      	ldr	r3, [r4, #0]
 8011edc:	4433      	add	r3, r6
 8011ede:	6023      	str	r3, [r4, #0]
 8011ee0:	2000      	movs	r0, #0
 8011ee2:	e7db      	b.n	8011e9c <__ssputs_r+0x58>
 8011ee4:	462a      	mov	r2, r5
 8011ee6:	f000 f981 	bl	80121ec <_realloc_r>
 8011eea:	4606      	mov	r6, r0
 8011eec:	2800      	cmp	r0, #0
 8011eee:	d1e1      	bne.n	8011eb4 <__ssputs_r+0x70>
 8011ef0:	6921      	ldr	r1, [r4, #16]
 8011ef2:	4650      	mov	r0, sl
 8011ef4:	f7ff fec6 	bl	8011c84 <_free_r>
 8011ef8:	e7c7      	b.n	8011e8a <__ssputs_r+0x46>
	...

08011efc <_svfiprintf_r>:
 8011efc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f00:	4698      	mov	r8, r3
 8011f02:	898b      	ldrh	r3, [r1, #12]
 8011f04:	061b      	lsls	r3, r3, #24
 8011f06:	b09d      	sub	sp, #116	; 0x74
 8011f08:	4607      	mov	r7, r0
 8011f0a:	460d      	mov	r5, r1
 8011f0c:	4614      	mov	r4, r2
 8011f0e:	d50e      	bpl.n	8011f2e <_svfiprintf_r+0x32>
 8011f10:	690b      	ldr	r3, [r1, #16]
 8011f12:	b963      	cbnz	r3, 8011f2e <_svfiprintf_r+0x32>
 8011f14:	2140      	movs	r1, #64	; 0x40
 8011f16:	f7ff ff21 	bl	8011d5c <_malloc_r>
 8011f1a:	6028      	str	r0, [r5, #0]
 8011f1c:	6128      	str	r0, [r5, #16]
 8011f1e:	b920      	cbnz	r0, 8011f2a <_svfiprintf_r+0x2e>
 8011f20:	230c      	movs	r3, #12
 8011f22:	603b      	str	r3, [r7, #0]
 8011f24:	f04f 30ff 	mov.w	r0, #4294967295
 8011f28:	e0d1      	b.n	80120ce <_svfiprintf_r+0x1d2>
 8011f2a:	2340      	movs	r3, #64	; 0x40
 8011f2c:	616b      	str	r3, [r5, #20]
 8011f2e:	2300      	movs	r3, #0
 8011f30:	9309      	str	r3, [sp, #36]	; 0x24
 8011f32:	2320      	movs	r3, #32
 8011f34:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011f38:	f8cd 800c 	str.w	r8, [sp, #12]
 8011f3c:	2330      	movs	r3, #48	; 0x30
 8011f3e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80120e8 <_svfiprintf_r+0x1ec>
 8011f42:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011f46:	f04f 0901 	mov.w	r9, #1
 8011f4a:	4623      	mov	r3, r4
 8011f4c:	469a      	mov	sl, r3
 8011f4e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011f52:	b10a      	cbz	r2, 8011f58 <_svfiprintf_r+0x5c>
 8011f54:	2a25      	cmp	r2, #37	; 0x25
 8011f56:	d1f9      	bne.n	8011f4c <_svfiprintf_r+0x50>
 8011f58:	ebba 0b04 	subs.w	fp, sl, r4
 8011f5c:	d00b      	beq.n	8011f76 <_svfiprintf_r+0x7a>
 8011f5e:	465b      	mov	r3, fp
 8011f60:	4622      	mov	r2, r4
 8011f62:	4629      	mov	r1, r5
 8011f64:	4638      	mov	r0, r7
 8011f66:	f7ff ff6d 	bl	8011e44 <__ssputs_r>
 8011f6a:	3001      	adds	r0, #1
 8011f6c:	f000 80aa 	beq.w	80120c4 <_svfiprintf_r+0x1c8>
 8011f70:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011f72:	445a      	add	r2, fp
 8011f74:	9209      	str	r2, [sp, #36]	; 0x24
 8011f76:	f89a 3000 	ldrb.w	r3, [sl]
 8011f7a:	2b00      	cmp	r3, #0
 8011f7c:	f000 80a2 	beq.w	80120c4 <_svfiprintf_r+0x1c8>
 8011f80:	2300      	movs	r3, #0
 8011f82:	f04f 32ff 	mov.w	r2, #4294967295
 8011f86:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011f8a:	f10a 0a01 	add.w	sl, sl, #1
 8011f8e:	9304      	str	r3, [sp, #16]
 8011f90:	9307      	str	r3, [sp, #28]
 8011f92:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011f96:	931a      	str	r3, [sp, #104]	; 0x68
 8011f98:	4654      	mov	r4, sl
 8011f9a:	2205      	movs	r2, #5
 8011f9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011fa0:	4851      	ldr	r0, [pc, #324]	; (80120e8 <_svfiprintf_r+0x1ec>)
 8011fa2:	f7ee f985 	bl	80002b0 <memchr>
 8011fa6:	9a04      	ldr	r2, [sp, #16]
 8011fa8:	b9d8      	cbnz	r0, 8011fe2 <_svfiprintf_r+0xe6>
 8011faa:	06d0      	lsls	r0, r2, #27
 8011fac:	bf44      	itt	mi
 8011fae:	2320      	movmi	r3, #32
 8011fb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011fb4:	0711      	lsls	r1, r2, #28
 8011fb6:	bf44      	itt	mi
 8011fb8:	232b      	movmi	r3, #43	; 0x2b
 8011fba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011fbe:	f89a 3000 	ldrb.w	r3, [sl]
 8011fc2:	2b2a      	cmp	r3, #42	; 0x2a
 8011fc4:	d015      	beq.n	8011ff2 <_svfiprintf_r+0xf6>
 8011fc6:	9a07      	ldr	r2, [sp, #28]
 8011fc8:	4654      	mov	r4, sl
 8011fca:	2000      	movs	r0, #0
 8011fcc:	f04f 0c0a 	mov.w	ip, #10
 8011fd0:	4621      	mov	r1, r4
 8011fd2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011fd6:	3b30      	subs	r3, #48	; 0x30
 8011fd8:	2b09      	cmp	r3, #9
 8011fda:	d94e      	bls.n	801207a <_svfiprintf_r+0x17e>
 8011fdc:	b1b0      	cbz	r0, 801200c <_svfiprintf_r+0x110>
 8011fde:	9207      	str	r2, [sp, #28]
 8011fe0:	e014      	b.n	801200c <_svfiprintf_r+0x110>
 8011fe2:	eba0 0308 	sub.w	r3, r0, r8
 8011fe6:	fa09 f303 	lsl.w	r3, r9, r3
 8011fea:	4313      	orrs	r3, r2
 8011fec:	9304      	str	r3, [sp, #16]
 8011fee:	46a2      	mov	sl, r4
 8011ff0:	e7d2      	b.n	8011f98 <_svfiprintf_r+0x9c>
 8011ff2:	9b03      	ldr	r3, [sp, #12]
 8011ff4:	1d19      	adds	r1, r3, #4
 8011ff6:	681b      	ldr	r3, [r3, #0]
 8011ff8:	9103      	str	r1, [sp, #12]
 8011ffa:	2b00      	cmp	r3, #0
 8011ffc:	bfbb      	ittet	lt
 8011ffe:	425b      	neglt	r3, r3
 8012000:	f042 0202 	orrlt.w	r2, r2, #2
 8012004:	9307      	strge	r3, [sp, #28]
 8012006:	9307      	strlt	r3, [sp, #28]
 8012008:	bfb8      	it	lt
 801200a:	9204      	strlt	r2, [sp, #16]
 801200c:	7823      	ldrb	r3, [r4, #0]
 801200e:	2b2e      	cmp	r3, #46	; 0x2e
 8012010:	d10c      	bne.n	801202c <_svfiprintf_r+0x130>
 8012012:	7863      	ldrb	r3, [r4, #1]
 8012014:	2b2a      	cmp	r3, #42	; 0x2a
 8012016:	d135      	bne.n	8012084 <_svfiprintf_r+0x188>
 8012018:	9b03      	ldr	r3, [sp, #12]
 801201a:	1d1a      	adds	r2, r3, #4
 801201c:	681b      	ldr	r3, [r3, #0]
 801201e:	9203      	str	r2, [sp, #12]
 8012020:	2b00      	cmp	r3, #0
 8012022:	bfb8      	it	lt
 8012024:	f04f 33ff 	movlt.w	r3, #4294967295
 8012028:	3402      	adds	r4, #2
 801202a:	9305      	str	r3, [sp, #20]
 801202c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80120f8 <_svfiprintf_r+0x1fc>
 8012030:	7821      	ldrb	r1, [r4, #0]
 8012032:	2203      	movs	r2, #3
 8012034:	4650      	mov	r0, sl
 8012036:	f7ee f93b 	bl	80002b0 <memchr>
 801203a:	b140      	cbz	r0, 801204e <_svfiprintf_r+0x152>
 801203c:	2340      	movs	r3, #64	; 0x40
 801203e:	eba0 000a 	sub.w	r0, r0, sl
 8012042:	fa03 f000 	lsl.w	r0, r3, r0
 8012046:	9b04      	ldr	r3, [sp, #16]
 8012048:	4303      	orrs	r3, r0
 801204a:	3401      	adds	r4, #1
 801204c:	9304      	str	r3, [sp, #16]
 801204e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012052:	4826      	ldr	r0, [pc, #152]	; (80120ec <_svfiprintf_r+0x1f0>)
 8012054:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012058:	2206      	movs	r2, #6
 801205a:	f7ee f929 	bl	80002b0 <memchr>
 801205e:	2800      	cmp	r0, #0
 8012060:	d038      	beq.n	80120d4 <_svfiprintf_r+0x1d8>
 8012062:	4b23      	ldr	r3, [pc, #140]	; (80120f0 <_svfiprintf_r+0x1f4>)
 8012064:	bb1b      	cbnz	r3, 80120ae <_svfiprintf_r+0x1b2>
 8012066:	9b03      	ldr	r3, [sp, #12]
 8012068:	3307      	adds	r3, #7
 801206a:	f023 0307 	bic.w	r3, r3, #7
 801206e:	3308      	adds	r3, #8
 8012070:	9303      	str	r3, [sp, #12]
 8012072:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012074:	4433      	add	r3, r6
 8012076:	9309      	str	r3, [sp, #36]	; 0x24
 8012078:	e767      	b.n	8011f4a <_svfiprintf_r+0x4e>
 801207a:	fb0c 3202 	mla	r2, ip, r2, r3
 801207e:	460c      	mov	r4, r1
 8012080:	2001      	movs	r0, #1
 8012082:	e7a5      	b.n	8011fd0 <_svfiprintf_r+0xd4>
 8012084:	2300      	movs	r3, #0
 8012086:	3401      	adds	r4, #1
 8012088:	9305      	str	r3, [sp, #20]
 801208a:	4619      	mov	r1, r3
 801208c:	f04f 0c0a 	mov.w	ip, #10
 8012090:	4620      	mov	r0, r4
 8012092:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012096:	3a30      	subs	r2, #48	; 0x30
 8012098:	2a09      	cmp	r2, #9
 801209a:	d903      	bls.n	80120a4 <_svfiprintf_r+0x1a8>
 801209c:	2b00      	cmp	r3, #0
 801209e:	d0c5      	beq.n	801202c <_svfiprintf_r+0x130>
 80120a0:	9105      	str	r1, [sp, #20]
 80120a2:	e7c3      	b.n	801202c <_svfiprintf_r+0x130>
 80120a4:	fb0c 2101 	mla	r1, ip, r1, r2
 80120a8:	4604      	mov	r4, r0
 80120aa:	2301      	movs	r3, #1
 80120ac:	e7f0      	b.n	8012090 <_svfiprintf_r+0x194>
 80120ae:	ab03      	add	r3, sp, #12
 80120b0:	9300      	str	r3, [sp, #0]
 80120b2:	462a      	mov	r2, r5
 80120b4:	4b0f      	ldr	r3, [pc, #60]	; (80120f4 <_svfiprintf_r+0x1f8>)
 80120b6:	a904      	add	r1, sp, #16
 80120b8:	4638      	mov	r0, r7
 80120ba:	f7fd ffc9 	bl	8010050 <_printf_float>
 80120be:	1c42      	adds	r2, r0, #1
 80120c0:	4606      	mov	r6, r0
 80120c2:	d1d6      	bne.n	8012072 <_svfiprintf_r+0x176>
 80120c4:	89ab      	ldrh	r3, [r5, #12]
 80120c6:	065b      	lsls	r3, r3, #25
 80120c8:	f53f af2c 	bmi.w	8011f24 <_svfiprintf_r+0x28>
 80120cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80120ce:	b01d      	add	sp, #116	; 0x74
 80120d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80120d4:	ab03      	add	r3, sp, #12
 80120d6:	9300      	str	r3, [sp, #0]
 80120d8:	462a      	mov	r2, r5
 80120da:	4b06      	ldr	r3, [pc, #24]	; (80120f4 <_svfiprintf_r+0x1f8>)
 80120dc:	a904      	add	r1, sp, #16
 80120de:	4638      	mov	r0, r7
 80120e0:	f7fe fa5a 	bl	8010598 <_printf_i>
 80120e4:	e7eb      	b.n	80120be <_svfiprintf_r+0x1c2>
 80120e6:	bf00      	nop
 80120e8:	080265ec 	.word	0x080265ec
 80120ec:	080265f6 	.word	0x080265f6
 80120f0:	08010051 	.word	0x08010051
 80120f4:	08011e45 	.word	0x08011e45
 80120f8:	080265f2 	.word	0x080265f2

080120fc <_sbrk_r>:
 80120fc:	b538      	push	{r3, r4, r5, lr}
 80120fe:	4d06      	ldr	r5, [pc, #24]	; (8012118 <_sbrk_r+0x1c>)
 8012100:	2300      	movs	r3, #0
 8012102:	4604      	mov	r4, r0
 8012104:	4608      	mov	r0, r1
 8012106:	602b      	str	r3, [r5, #0]
 8012108:	f7f0 fc88 	bl	8002a1c <_sbrk>
 801210c:	1c43      	adds	r3, r0, #1
 801210e:	d102      	bne.n	8012116 <_sbrk_r+0x1a>
 8012110:	682b      	ldr	r3, [r5, #0]
 8012112:	b103      	cbz	r3, 8012116 <_sbrk_r+0x1a>
 8012114:	6023      	str	r3, [r4, #0]
 8012116:	bd38      	pop	{r3, r4, r5, pc}
 8012118:	20012424 	.word	0x20012424

0801211c <__assert_func>:
 801211c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801211e:	4614      	mov	r4, r2
 8012120:	461a      	mov	r2, r3
 8012122:	4b09      	ldr	r3, [pc, #36]	; (8012148 <__assert_func+0x2c>)
 8012124:	681b      	ldr	r3, [r3, #0]
 8012126:	4605      	mov	r5, r0
 8012128:	68d8      	ldr	r0, [r3, #12]
 801212a:	b14c      	cbz	r4, 8012140 <__assert_func+0x24>
 801212c:	4b07      	ldr	r3, [pc, #28]	; (801214c <__assert_func+0x30>)
 801212e:	9100      	str	r1, [sp, #0]
 8012130:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012134:	4906      	ldr	r1, [pc, #24]	; (8012150 <__assert_func+0x34>)
 8012136:	462b      	mov	r3, r5
 8012138:	f000 f80e 	bl	8012158 <fiprintf>
 801213c:	f000 faac 	bl	8012698 <abort>
 8012140:	4b04      	ldr	r3, [pc, #16]	; (8012154 <__assert_func+0x38>)
 8012142:	461c      	mov	r4, r3
 8012144:	e7f3      	b.n	801212e <__assert_func+0x12>
 8012146:	bf00      	nop
 8012148:	20000104 	.word	0x20000104
 801214c:	080265fd 	.word	0x080265fd
 8012150:	0802660a 	.word	0x0802660a
 8012154:	08026638 	.word	0x08026638

08012158 <fiprintf>:
 8012158:	b40e      	push	{r1, r2, r3}
 801215a:	b503      	push	{r0, r1, lr}
 801215c:	4601      	mov	r1, r0
 801215e:	ab03      	add	r3, sp, #12
 8012160:	4805      	ldr	r0, [pc, #20]	; (8012178 <fiprintf+0x20>)
 8012162:	f853 2b04 	ldr.w	r2, [r3], #4
 8012166:	6800      	ldr	r0, [r0, #0]
 8012168:	9301      	str	r3, [sp, #4]
 801216a:	f000 f897 	bl	801229c <_vfiprintf_r>
 801216e:	b002      	add	sp, #8
 8012170:	f85d eb04 	ldr.w	lr, [sp], #4
 8012174:	b003      	add	sp, #12
 8012176:	4770      	bx	lr
 8012178:	20000104 	.word	0x20000104

0801217c <__ascii_mbtowc>:
 801217c:	b082      	sub	sp, #8
 801217e:	b901      	cbnz	r1, 8012182 <__ascii_mbtowc+0x6>
 8012180:	a901      	add	r1, sp, #4
 8012182:	b142      	cbz	r2, 8012196 <__ascii_mbtowc+0x1a>
 8012184:	b14b      	cbz	r3, 801219a <__ascii_mbtowc+0x1e>
 8012186:	7813      	ldrb	r3, [r2, #0]
 8012188:	600b      	str	r3, [r1, #0]
 801218a:	7812      	ldrb	r2, [r2, #0]
 801218c:	1e10      	subs	r0, r2, #0
 801218e:	bf18      	it	ne
 8012190:	2001      	movne	r0, #1
 8012192:	b002      	add	sp, #8
 8012194:	4770      	bx	lr
 8012196:	4610      	mov	r0, r2
 8012198:	e7fb      	b.n	8012192 <__ascii_mbtowc+0x16>
 801219a:	f06f 0001 	mvn.w	r0, #1
 801219e:	e7f8      	b.n	8012192 <__ascii_mbtowc+0x16>

080121a0 <memmove>:
 80121a0:	4288      	cmp	r0, r1
 80121a2:	b510      	push	{r4, lr}
 80121a4:	eb01 0402 	add.w	r4, r1, r2
 80121a8:	d902      	bls.n	80121b0 <memmove+0x10>
 80121aa:	4284      	cmp	r4, r0
 80121ac:	4623      	mov	r3, r4
 80121ae:	d807      	bhi.n	80121c0 <memmove+0x20>
 80121b0:	1e43      	subs	r3, r0, #1
 80121b2:	42a1      	cmp	r1, r4
 80121b4:	d008      	beq.n	80121c8 <memmove+0x28>
 80121b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80121ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 80121be:	e7f8      	b.n	80121b2 <memmove+0x12>
 80121c0:	4402      	add	r2, r0
 80121c2:	4601      	mov	r1, r0
 80121c4:	428a      	cmp	r2, r1
 80121c6:	d100      	bne.n	80121ca <memmove+0x2a>
 80121c8:	bd10      	pop	{r4, pc}
 80121ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80121ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80121d2:	e7f7      	b.n	80121c4 <memmove+0x24>

080121d4 <__malloc_lock>:
 80121d4:	4801      	ldr	r0, [pc, #4]	; (80121dc <__malloc_lock+0x8>)
 80121d6:	f000 bc1f 	b.w	8012a18 <__retarget_lock_acquire_recursive>
 80121da:	bf00      	nop
 80121dc:	20012428 	.word	0x20012428

080121e0 <__malloc_unlock>:
 80121e0:	4801      	ldr	r0, [pc, #4]	; (80121e8 <__malloc_unlock+0x8>)
 80121e2:	f000 bc1a 	b.w	8012a1a <__retarget_lock_release_recursive>
 80121e6:	bf00      	nop
 80121e8:	20012428 	.word	0x20012428

080121ec <_realloc_r>:
 80121ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80121f0:	4680      	mov	r8, r0
 80121f2:	4614      	mov	r4, r2
 80121f4:	460e      	mov	r6, r1
 80121f6:	b921      	cbnz	r1, 8012202 <_realloc_r+0x16>
 80121f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80121fc:	4611      	mov	r1, r2
 80121fe:	f7ff bdad 	b.w	8011d5c <_malloc_r>
 8012202:	b92a      	cbnz	r2, 8012210 <_realloc_r+0x24>
 8012204:	f7ff fd3e 	bl	8011c84 <_free_r>
 8012208:	4625      	mov	r5, r4
 801220a:	4628      	mov	r0, r5
 801220c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012210:	f000 fc6a 	bl	8012ae8 <_malloc_usable_size_r>
 8012214:	4284      	cmp	r4, r0
 8012216:	4607      	mov	r7, r0
 8012218:	d802      	bhi.n	8012220 <_realloc_r+0x34>
 801221a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801221e:	d812      	bhi.n	8012246 <_realloc_r+0x5a>
 8012220:	4621      	mov	r1, r4
 8012222:	4640      	mov	r0, r8
 8012224:	f7ff fd9a 	bl	8011d5c <_malloc_r>
 8012228:	4605      	mov	r5, r0
 801222a:	2800      	cmp	r0, #0
 801222c:	d0ed      	beq.n	801220a <_realloc_r+0x1e>
 801222e:	42bc      	cmp	r4, r7
 8012230:	4622      	mov	r2, r4
 8012232:	4631      	mov	r1, r6
 8012234:	bf28      	it	cs
 8012236:	463a      	movcs	r2, r7
 8012238:	f7ff f97c 	bl	8011534 <memcpy>
 801223c:	4631      	mov	r1, r6
 801223e:	4640      	mov	r0, r8
 8012240:	f7ff fd20 	bl	8011c84 <_free_r>
 8012244:	e7e1      	b.n	801220a <_realloc_r+0x1e>
 8012246:	4635      	mov	r5, r6
 8012248:	e7df      	b.n	801220a <_realloc_r+0x1e>

0801224a <__sfputc_r>:
 801224a:	6893      	ldr	r3, [r2, #8]
 801224c:	3b01      	subs	r3, #1
 801224e:	2b00      	cmp	r3, #0
 8012250:	b410      	push	{r4}
 8012252:	6093      	str	r3, [r2, #8]
 8012254:	da08      	bge.n	8012268 <__sfputc_r+0x1e>
 8012256:	6994      	ldr	r4, [r2, #24]
 8012258:	42a3      	cmp	r3, r4
 801225a:	db01      	blt.n	8012260 <__sfputc_r+0x16>
 801225c:	290a      	cmp	r1, #10
 801225e:	d103      	bne.n	8012268 <__sfputc_r+0x1e>
 8012260:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012264:	f000 b94a 	b.w	80124fc <__swbuf_r>
 8012268:	6813      	ldr	r3, [r2, #0]
 801226a:	1c58      	adds	r0, r3, #1
 801226c:	6010      	str	r0, [r2, #0]
 801226e:	7019      	strb	r1, [r3, #0]
 8012270:	4608      	mov	r0, r1
 8012272:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012276:	4770      	bx	lr

08012278 <__sfputs_r>:
 8012278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801227a:	4606      	mov	r6, r0
 801227c:	460f      	mov	r7, r1
 801227e:	4614      	mov	r4, r2
 8012280:	18d5      	adds	r5, r2, r3
 8012282:	42ac      	cmp	r4, r5
 8012284:	d101      	bne.n	801228a <__sfputs_r+0x12>
 8012286:	2000      	movs	r0, #0
 8012288:	e007      	b.n	801229a <__sfputs_r+0x22>
 801228a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801228e:	463a      	mov	r2, r7
 8012290:	4630      	mov	r0, r6
 8012292:	f7ff ffda 	bl	801224a <__sfputc_r>
 8012296:	1c43      	adds	r3, r0, #1
 8012298:	d1f3      	bne.n	8012282 <__sfputs_r+0xa>
 801229a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801229c <_vfiprintf_r>:
 801229c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80122a0:	460d      	mov	r5, r1
 80122a2:	b09d      	sub	sp, #116	; 0x74
 80122a4:	4614      	mov	r4, r2
 80122a6:	4698      	mov	r8, r3
 80122a8:	4606      	mov	r6, r0
 80122aa:	b118      	cbz	r0, 80122b4 <_vfiprintf_r+0x18>
 80122ac:	6983      	ldr	r3, [r0, #24]
 80122ae:	b90b      	cbnz	r3, 80122b4 <_vfiprintf_r+0x18>
 80122b0:	f000 fb14 	bl	80128dc <__sinit>
 80122b4:	4b89      	ldr	r3, [pc, #548]	; (80124dc <_vfiprintf_r+0x240>)
 80122b6:	429d      	cmp	r5, r3
 80122b8:	d11b      	bne.n	80122f2 <_vfiprintf_r+0x56>
 80122ba:	6875      	ldr	r5, [r6, #4]
 80122bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80122be:	07d9      	lsls	r1, r3, #31
 80122c0:	d405      	bmi.n	80122ce <_vfiprintf_r+0x32>
 80122c2:	89ab      	ldrh	r3, [r5, #12]
 80122c4:	059a      	lsls	r2, r3, #22
 80122c6:	d402      	bmi.n	80122ce <_vfiprintf_r+0x32>
 80122c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80122ca:	f000 fba5 	bl	8012a18 <__retarget_lock_acquire_recursive>
 80122ce:	89ab      	ldrh	r3, [r5, #12]
 80122d0:	071b      	lsls	r3, r3, #28
 80122d2:	d501      	bpl.n	80122d8 <_vfiprintf_r+0x3c>
 80122d4:	692b      	ldr	r3, [r5, #16]
 80122d6:	b9eb      	cbnz	r3, 8012314 <_vfiprintf_r+0x78>
 80122d8:	4629      	mov	r1, r5
 80122da:	4630      	mov	r0, r6
 80122dc:	f000 f96e 	bl	80125bc <__swsetup_r>
 80122e0:	b1c0      	cbz	r0, 8012314 <_vfiprintf_r+0x78>
 80122e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80122e4:	07dc      	lsls	r4, r3, #31
 80122e6:	d50e      	bpl.n	8012306 <_vfiprintf_r+0x6a>
 80122e8:	f04f 30ff 	mov.w	r0, #4294967295
 80122ec:	b01d      	add	sp, #116	; 0x74
 80122ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80122f2:	4b7b      	ldr	r3, [pc, #492]	; (80124e0 <_vfiprintf_r+0x244>)
 80122f4:	429d      	cmp	r5, r3
 80122f6:	d101      	bne.n	80122fc <_vfiprintf_r+0x60>
 80122f8:	68b5      	ldr	r5, [r6, #8]
 80122fa:	e7df      	b.n	80122bc <_vfiprintf_r+0x20>
 80122fc:	4b79      	ldr	r3, [pc, #484]	; (80124e4 <_vfiprintf_r+0x248>)
 80122fe:	429d      	cmp	r5, r3
 8012300:	bf08      	it	eq
 8012302:	68f5      	ldreq	r5, [r6, #12]
 8012304:	e7da      	b.n	80122bc <_vfiprintf_r+0x20>
 8012306:	89ab      	ldrh	r3, [r5, #12]
 8012308:	0598      	lsls	r0, r3, #22
 801230a:	d4ed      	bmi.n	80122e8 <_vfiprintf_r+0x4c>
 801230c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801230e:	f000 fb84 	bl	8012a1a <__retarget_lock_release_recursive>
 8012312:	e7e9      	b.n	80122e8 <_vfiprintf_r+0x4c>
 8012314:	2300      	movs	r3, #0
 8012316:	9309      	str	r3, [sp, #36]	; 0x24
 8012318:	2320      	movs	r3, #32
 801231a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801231e:	f8cd 800c 	str.w	r8, [sp, #12]
 8012322:	2330      	movs	r3, #48	; 0x30
 8012324:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80124e8 <_vfiprintf_r+0x24c>
 8012328:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801232c:	f04f 0901 	mov.w	r9, #1
 8012330:	4623      	mov	r3, r4
 8012332:	469a      	mov	sl, r3
 8012334:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012338:	b10a      	cbz	r2, 801233e <_vfiprintf_r+0xa2>
 801233a:	2a25      	cmp	r2, #37	; 0x25
 801233c:	d1f9      	bne.n	8012332 <_vfiprintf_r+0x96>
 801233e:	ebba 0b04 	subs.w	fp, sl, r4
 8012342:	d00b      	beq.n	801235c <_vfiprintf_r+0xc0>
 8012344:	465b      	mov	r3, fp
 8012346:	4622      	mov	r2, r4
 8012348:	4629      	mov	r1, r5
 801234a:	4630      	mov	r0, r6
 801234c:	f7ff ff94 	bl	8012278 <__sfputs_r>
 8012350:	3001      	adds	r0, #1
 8012352:	f000 80aa 	beq.w	80124aa <_vfiprintf_r+0x20e>
 8012356:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012358:	445a      	add	r2, fp
 801235a:	9209      	str	r2, [sp, #36]	; 0x24
 801235c:	f89a 3000 	ldrb.w	r3, [sl]
 8012360:	2b00      	cmp	r3, #0
 8012362:	f000 80a2 	beq.w	80124aa <_vfiprintf_r+0x20e>
 8012366:	2300      	movs	r3, #0
 8012368:	f04f 32ff 	mov.w	r2, #4294967295
 801236c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012370:	f10a 0a01 	add.w	sl, sl, #1
 8012374:	9304      	str	r3, [sp, #16]
 8012376:	9307      	str	r3, [sp, #28]
 8012378:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801237c:	931a      	str	r3, [sp, #104]	; 0x68
 801237e:	4654      	mov	r4, sl
 8012380:	2205      	movs	r2, #5
 8012382:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012386:	4858      	ldr	r0, [pc, #352]	; (80124e8 <_vfiprintf_r+0x24c>)
 8012388:	f7ed ff92 	bl	80002b0 <memchr>
 801238c:	9a04      	ldr	r2, [sp, #16]
 801238e:	b9d8      	cbnz	r0, 80123c8 <_vfiprintf_r+0x12c>
 8012390:	06d1      	lsls	r1, r2, #27
 8012392:	bf44      	itt	mi
 8012394:	2320      	movmi	r3, #32
 8012396:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801239a:	0713      	lsls	r3, r2, #28
 801239c:	bf44      	itt	mi
 801239e:	232b      	movmi	r3, #43	; 0x2b
 80123a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80123a4:	f89a 3000 	ldrb.w	r3, [sl]
 80123a8:	2b2a      	cmp	r3, #42	; 0x2a
 80123aa:	d015      	beq.n	80123d8 <_vfiprintf_r+0x13c>
 80123ac:	9a07      	ldr	r2, [sp, #28]
 80123ae:	4654      	mov	r4, sl
 80123b0:	2000      	movs	r0, #0
 80123b2:	f04f 0c0a 	mov.w	ip, #10
 80123b6:	4621      	mov	r1, r4
 80123b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80123bc:	3b30      	subs	r3, #48	; 0x30
 80123be:	2b09      	cmp	r3, #9
 80123c0:	d94e      	bls.n	8012460 <_vfiprintf_r+0x1c4>
 80123c2:	b1b0      	cbz	r0, 80123f2 <_vfiprintf_r+0x156>
 80123c4:	9207      	str	r2, [sp, #28]
 80123c6:	e014      	b.n	80123f2 <_vfiprintf_r+0x156>
 80123c8:	eba0 0308 	sub.w	r3, r0, r8
 80123cc:	fa09 f303 	lsl.w	r3, r9, r3
 80123d0:	4313      	orrs	r3, r2
 80123d2:	9304      	str	r3, [sp, #16]
 80123d4:	46a2      	mov	sl, r4
 80123d6:	e7d2      	b.n	801237e <_vfiprintf_r+0xe2>
 80123d8:	9b03      	ldr	r3, [sp, #12]
 80123da:	1d19      	adds	r1, r3, #4
 80123dc:	681b      	ldr	r3, [r3, #0]
 80123de:	9103      	str	r1, [sp, #12]
 80123e0:	2b00      	cmp	r3, #0
 80123e2:	bfbb      	ittet	lt
 80123e4:	425b      	neglt	r3, r3
 80123e6:	f042 0202 	orrlt.w	r2, r2, #2
 80123ea:	9307      	strge	r3, [sp, #28]
 80123ec:	9307      	strlt	r3, [sp, #28]
 80123ee:	bfb8      	it	lt
 80123f0:	9204      	strlt	r2, [sp, #16]
 80123f2:	7823      	ldrb	r3, [r4, #0]
 80123f4:	2b2e      	cmp	r3, #46	; 0x2e
 80123f6:	d10c      	bne.n	8012412 <_vfiprintf_r+0x176>
 80123f8:	7863      	ldrb	r3, [r4, #1]
 80123fa:	2b2a      	cmp	r3, #42	; 0x2a
 80123fc:	d135      	bne.n	801246a <_vfiprintf_r+0x1ce>
 80123fe:	9b03      	ldr	r3, [sp, #12]
 8012400:	1d1a      	adds	r2, r3, #4
 8012402:	681b      	ldr	r3, [r3, #0]
 8012404:	9203      	str	r2, [sp, #12]
 8012406:	2b00      	cmp	r3, #0
 8012408:	bfb8      	it	lt
 801240a:	f04f 33ff 	movlt.w	r3, #4294967295
 801240e:	3402      	adds	r4, #2
 8012410:	9305      	str	r3, [sp, #20]
 8012412:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80124f8 <_vfiprintf_r+0x25c>
 8012416:	7821      	ldrb	r1, [r4, #0]
 8012418:	2203      	movs	r2, #3
 801241a:	4650      	mov	r0, sl
 801241c:	f7ed ff48 	bl	80002b0 <memchr>
 8012420:	b140      	cbz	r0, 8012434 <_vfiprintf_r+0x198>
 8012422:	2340      	movs	r3, #64	; 0x40
 8012424:	eba0 000a 	sub.w	r0, r0, sl
 8012428:	fa03 f000 	lsl.w	r0, r3, r0
 801242c:	9b04      	ldr	r3, [sp, #16]
 801242e:	4303      	orrs	r3, r0
 8012430:	3401      	adds	r4, #1
 8012432:	9304      	str	r3, [sp, #16]
 8012434:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012438:	482c      	ldr	r0, [pc, #176]	; (80124ec <_vfiprintf_r+0x250>)
 801243a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801243e:	2206      	movs	r2, #6
 8012440:	f7ed ff36 	bl	80002b0 <memchr>
 8012444:	2800      	cmp	r0, #0
 8012446:	d03f      	beq.n	80124c8 <_vfiprintf_r+0x22c>
 8012448:	4b29      	ldr	r3, [pc, #164]	; (80124f0 <_vfiprintf_r+0x254>)
 801244a:	bb1b      	cbnz	r3, 8012494 <_vfiprintf_r+0x1f8>
 801244c:	9b03      	ldr	r3, [sp, #12]
 801244e:	3307      	adds	r3, #7
 8012450:	f023 0307 	bic.w	r3, r3, #7
 8012454:	3308      	adds	r3, #8
 8012456:	9303      	str	r3, [sp, #12]
 8012458:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801245a:	443b      	add	r3, r7
 801245c:	9309      	str	r3, [sp, #36]	; 0x24
 801245e:	e767      	b.n	8012330 <_vfiprintf_r+0x94>
 8012460:	fb0c 3202 	mla	r2, ip, r2, r3
 8012464:	460c      	mov	r4, r1
 8012466:	2001      	movs	r0, #1
 8012468:	e7a5      	b.n	80123b6 <_vfiprintf_r+0x11a>
 801246a:	2300      	movs	r3, #0
 801246c:	3401      	adds	r4, #1
 801246e:	9305      	str	r3, [sp, #20]
 8012470:	4619      	mov	r1, r3
 8012472:	f04f 0c0a 	mov.w	ip, #10
 8012476:	4620      	mov	r0, r4
 8012478:	f810 2b01 	ldrb.w	r2, [r0], #1
 801247c:	3a30      	subs	r2, #48	; 0x30
 801247e:	2a09      	cmp	r2, #9
 8012480:	d903      	bls.n	801248a <_vfiprintf_r+0x1ee>
 8012482:	2b00      	cmp	r3, #0
 8012484:	d0c5      	beq.n	8012412 <_vfiprintf_r+0x176>
 8012486:	9105      	str	r1, [sp, #20]
 8012488:	e7c3      	b.n	8012412 <_vfiprintf_r+0x176>
 801248a:	fb0c 2101 	mla	r1, ip, r1, r2
 801248e:	4604      	mov	r4, r0
 8012490:	2301      	movs	r3, #1
 8012492:	e7f0      	b.n	8012476 <_vfiprintf_r+0x1da>
 8012494:	ab03      	add	r3, sp, #12
 8012496:	9300      	str	r3, [sp, #0]
 8012498:	462a      	mov	r2, r5
 801249a:	4b16      	ldr	r3, [pc, #88]	; (80124f4 <_vfiprintf_r+0x258>)
 801249c:	a904      	add	r1, sp, #16
 801249e:	4630      	mov	r0, r6
 80124a0:	f7fd fdd6 	bl	8010050 <_printf_float>
 80124a4:	4607      	mov	r7, r0
 80124a6:	1c78      	adds	r0, r7, #1
 80124a8:	d1d6      	bne.n	8012458 <_vfiprintf_r+0x1bc>
 80124aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80124ac:	07d9      	lsls	r1, r3, #31
 80124ae:	d405      	bmi.n	80124bc <_vfiprintf_r+0x220>
 80124b0:	89ab      	ldrh	r3, [r5, #12]
 80124b2:	059a      	lsls	r2, r3, #22
 80124b4:	d402      	bmi.n	80124bc <_vfiprintf_r+0x220>
 80124b6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80124b8:	f000 faaf 	bl	8012a1a <__retarget_lock_release_recursive>
 80124bc:	89ab      	ldrh	r3, [r5, #12]
 80124be:	065b      	lsls	r3, r3, #25
 80124c0:	f53f af12 	bmi.w	80122e8 <_vfiprintf_r+0x4c>
 80124c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80124c6:	e711      	b.n	80122ec <_vfiprintf_r+0x50>
 80124c8:	ab03      	add	r3, sp, #12
 80124ca:	9300      	str	r3, [sp, #0]
 80124cc:	462a      	mov	r2, r5
 80124ce:	4b09      	ldr	r3, [pc, #36]	; (80124f4 <_vfiprintf_r+0x258>)
 80124d0:	a904      	add	r1, sp, #16
 80124d2:	4630      	mov	r0, r6
 80124d4:	f7fe f860 	bl	8010598 <_printf_i>
 80124d8:	e7e4      	b.n	80124a4 <_vfiprintf_r+0x208>
 80124da:	bf00      	nop
 80124dc:	08026764 	.word	0x08026764
 80124e0:	08026784 	.word	0x08026784
 80124e4:	08026744 	.word	0x08026744
 80124e8:	080265ec 	.word	0x080265ec
 80124ec:	080265f6 	.word	0x080265f6
 80124f0:	08010051 	.word	0x08010051
 80124f4:	08012279 	.word	0x08012279
 80124f8:	080265f2 	.word	0x080265f2

080124fc <__swbuf_r>:
 80124fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80124fe:	460e      	mov	r6, r1
 8012500:	4614      	mov	r4, r2
 8012502:	4605      	mov	r5, r0
 8012504:	b118      	cbz	r0, 801250e <__swbuf_r+0x12>
 8012506:	6983      	ldr	r3, [r0, #24]
 8012508:	b90b      	cbnz	r3, 801250e <__swbuf_r+0x12>
 801250a:	f000 f9e7 	bl	80128dc <__sinit>
 801250e:	4b21      	ldr	r3, [pc, #132]	; (8012594 <__swbuf_r+0x98>)
 8012510:	429c      	cmp	r4, r3
 8012512:	d12b      	bne.n	801256c <__swbuf_r+0x70>
 8012514:	686c      	ldr	r4, [r5, #4]
 8012516:	69a3      	ldr	r3, [r4, #24]
 8012518:	60a3      	str	r3, [r4, #8]
 801251a:	89a3      	ldrh	r3, [r4, #12]
 801251c:	071a      	lsls	r2, r3, #28
 801251e:	d52f      	bpl.n	8012580 <__swbuf_r+0x84>
 8012520:	6923      	ldr	r3, [r4, #16]
 8012522:	b36b      	cbz	r3, 8012580 <__swbuf_r+0x84>
 8012524:	6923      	ldr	r3, [r4, #16]
 8012526:	6820      	ldr	r0, [r4, #0]
 8012528:	1ac0      	subs	r0, r0, r3
 801252a:	6963      	ldr	r3, [r4, #20]
 801252c:	b2f6      	uxtb	r6, r6
 801252e:	4283      	cmp	r3, r0
 8012530:	4637      	mov	r7, r6
 8012532:	dc04      	bgt.n	801253e <__swbuf_r+0x42>
 8012534:	4621      	mov	r1, r4
 8012536:	4628      	mov	r0, r5
 8012538:	f000 f93c 	bl	80127b4 <_fflush_r>
 801253c:	bb30      	cbnz	r0, 801258c <__swbuf_r+0x90>
 801253e:	68a3      	ldr	r3, [r4, #8]
 8012540:	3b01      	subs	r3, #1
 8012542:	60a3      	str	r3, [r4, #8]
 8012544:	6823      	ldr	r3, [r4, #0]
 8012546:	1c5a      	adds	r2, r3, #1
 8012548:	6022      	str	r2, [r4, #0]
 801254a:	701e      	strb	r6, [r3, #0]
 801254c:	6963      	ldr	r3, [r4, #20]
 801254e:	3001      	adds	r0, #1
 8012550:	4283      	cmp	r3, r0
 8012552:	d004      	beq.n	801255e <__swbuf_r+0x62>
 8012554:	89a3      	ldrh	r3, [r4, #12]
 8012556:	07db      	lsls	r3, r3, #31
 8012558:	d506      	bpl.n	8012568 <__swbuf_r+0x6c>
 801255a:	2e0a      	cmp	r6, #10
 801255c:	d104      	bne.n	8012568 <__swbuf_r+0x6c>
 801255e:	4621      	mov	r1, r4
 8012560:	4628      	mov	r0, r5
 8012562:	f000 f927 	bl	80127b4 <_fflush_r>
 8012566:	b988      	cbnz	r0, 801258c <__swbuf_r+0x90>
 8012568:	4638      	mov	r0, r7
 801256a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801256c:	4b0a      	ldr	r3, [pc, #40]	; (8012598 <__swbuf_r+0x9c>)
 801256e:	429c      	cmp	r4, r3
 8012570:	d101      	bne.n	8012576 <__swbuf_r+0x7a>
 8012572:	68ac      	ldr	r4, [r5, #8]
 8012574:	e7cf      	b.n	8012516 <__swbuf_r+0x1a>
 8012576:	4b09      	ldr	r3, [pc, #36]	; (801259c <__swbuf_r+0xa0>)
 8012578:	429c      	cmp	r4, r3
 801257a:	bf08      	it	eq
 801257c:	68ec      	ldreq	r4, [r5, #12]
 801257e:	e7ca      	b.n	8012516 <__swbuf_r+0x1a>
 8012580:	4621      	mov	r1, r4
 8012582:	4628      	mov	r0, r5
 8012584:	f000 f81a 	bl	80125bc <__swsetup_r>
 8012588:	2800      	cmp	r0, #0
 801258a:	d0cb      	beq.n	8012524 <__swbuf_r+0x28>
 801258c:	f04f 37ff 	mov.w	r7, #4294967295
 8012590:	e7ea      	b.n	8012568 <__swbuf_r+0x6c>
 8012592:	bf00      	nop
 8012594:	08026764 	.word	0x08026764
 8012598:	08026784 	.word	0x08026784
 801259c:	08026744 	.word	0x08026744

080125a0 <__ascii_wctomb>:
 80125a0:	b149      	cbz	r1, 80125b6 <__ascii_wctomb+0x16>
 80125a2:	2aff      	cmp	r2, #255	; 0xff
 80125a4:	bf85      	ittet	hi
 80125a6:	238a      	movhi	r3, #138	; 0x8a
 80125a8:	6003      	strhi	r3, [r0, #0]
 80125aa:	700a      	strbls	r2, [r1, #0]
 80125ac:	f04f 30ff 	movhi.w	r0, #4294967295
 80125b0:	bf98      	it	ls
 80125b2:	2001      	movls	r0, #1
 80125b4:	4770      	bx	lr
 80125b6:	4608      	mov	r0, r1
 80125b8:	4770      	bx	lr
	...

080125bc <__swsetup_r>:
 80125bc:	4b32      	ldr	r3, [pc, #200]	; (8012688 <__swsetup_r+0xcc>)
 80125be:	b570      	push	{r4, r5, r6, lr}
 80125c0:	681d      	ldr	r5, [r3, #0]
 80125c2:	4606      	mov	r6, r0
 80125c4:	460c      	mov	r4, r1
 80125c6:	b125      	cbz	r5, 80125d2 <__swsetup_r+0x16>
 80125c8:	69ab      	ldr	r3, [r5, #24]
 80125ca:	b913      	cbnz	r3, 80125d2 <__swsetup_r+0x16>
 80125cc:	4628      	mov	r0, r5
 80125ce:	f000 f985 	bl	80128dc <__sinit>
 80125d2:	4b2e      	ldr	r3, [pc, #184]	; (801268c <__swsetup_r+0xd0>)
 80125d4:	429c      	cmp	r4, r3
 80125d6:	d10f      	bne.n	80125f8 <__swsetup_r+0x3c>
 80125d8:	686c      	ldr	r4, [r5, #4]
 80125da:	89a3      	ldrh	r3, [r4, #12]
 80125dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80125e0:	0719      	lsls	r1, r3, #28
 80125e2:	d42c      	bmi.n	801263e <__swsetup_r+0x82>
 80125e4:	06dd      	lsls	r5, r3, #27
 80125e6:	d411      	bmi.n	801260c <__swsetup_r+0x50>
 80125e8:	2309      	movs	r3, #9
 80125ea:	6033      	str	r3, [r6, #0]
 80125ec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80125f0:	81a3      	strh	r3, [r4, #12]
 80125f2:	f04f 30ff 	mov.w	r0, #4294967295
 80125f6:	e03e      	b.n	8012676 <__swsetup_r+0xba>
 80125f8:	4b25      	ldr	r3, [pc, #148]	; (8012690 <__swsetup_r+0xd4>)
 80125fa:	429c      	cmp	r4, r3
 80125fc:	d101      	bne.n	8012602 <__swsetup_r+0x46>
 80125fe:	68ac      	ldr	r4, [r5, #8]
 8012600:	e7eb      	b.n	80125da <__swsetup_r+0x1e>
 8012602:	4b24      	ldr	r3, [pc, #144]	; (8012694 <__swsetup_r+0xd8>)
 8012604:	429c      	cmp	r4, r3
 8012606:	bf08      	it	eq
 8012608:	68ec      	ldreq	r4, [r5, #12]
 801260a:	e7e6      	b.n	80125da <__swsetup_r+0x1e>
 801260c:	0758      	lsls	r0, r3, #29
 801260e:	d512      	bpl.n	8012636 <__swsetup_r+0x7a>
 8012610:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012612:	b141      	cbz	r1, 8012626 <__swsetup_r+0x6a>
 8012614:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012618:	4299      	cmp	r1, r3
 801261a:	d002      	beq.n	8012622 <__swsetup_r+0x66>
 801261c:	4630      	mov	r0, r6
 801261e:	f7ff fb31 	bl	8011c84 <_free_r>
 8012622:	2300      	movs	r3, #0
 8012624:	6363      	str	r3, [r4, #52]	; 0x34
 8012626:	89a3      	ldrh	r3, [r4, #12]
 8012628:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801262c:	81a3      	strh	r3, [r4, #12]
 801262e:	2300      	movs	r3, #0
 8012630:	6063      	str	r3, [r4, #4]
 8012632:	6923      	ldr	r3, [r4, #16]
 8012634:	6023      	str	r3, [r4, #0]
 8012636:	89a3      	ldrh	r3, [r4, #12]
 8012638:	f043 0308 	orr.w	r3, r3, #8
 801263c:	81a3      	strh	r3, [r4, #12]
 801263e:	6923      	ldr	r3, [r4, #16]
 8012640:	b94b      	cbnz	r3, 8012656 <__swsetup_r+0x9a>
 8012642:	89a3      	ldrh	r3, [r4, #12]
 8012644:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012648:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801264c:	d003      	beq.n	8012656 <__swsetup_r+0x9a>
 801264e:	4621      	mov	r1, r4
 8012650:	4630      	mov	r0, r6
 8012652:	f000 fa09 	bl	8012a68 <__smakebuf_r>
 8012656:	89a0      	ldrh	r0, [r4, #12]
 8012658:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801265c:	f010 0301 	ands.w	r3, r0, #1
 8012660:	d00a      	beq.n	8012678 <__swsetup_r+0xbc>
 8012662:	2300      	movs	r3, #0
 8012664:	60a3      	str	r3, [r4, #8]
 8012666:	6963      	ldr	r3, [r4, #20]
 8012668:	425b      	negs	r3, r3
 801266a:	61a3      	str	r3, [r4, #24]
 801266c:	6923      	ldr	r3, [r4, #16]
 801266e:	b943      	cbnz	r3, 8012682 <__swsetup_r+0xc6>
 8012670:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8012674:	d1ba      	bne.n	80125ec <__swsetup_r+0x30>
 8012676:	bd70      	pop	{r4, r5, r6, pc}
 8012678:	0781      	lsls	r1, r0, #30
 801267a:	bf58      	it	pl
 801267c:	6963      	ldrpl	r3, [r4, #20]
 801267e:	60a3      	str	r3, [r4, #8]
 8012680:	e7f4      	b.n	801266c <__swsetup_r+0xb0>
 8012682:	2000      	movs	r0, #0
 8012684:	e7f7      	b.n	8012676 <__swsetup_r+0xba>
 8012686:	bf00      	nop
 8012688:	20000104 	.word	0x20000104
 801268c:	08026764 	.word	0x08026764
 8012690:	08026784 	.word	0x08026784
 8012694:	08026744 	.word	0x08026744

08012698 <abort>:
 8012698:	b508      	push	{r3, lr}
 801269a:	2006      	movs	r0, #6
 801269c:	f000 fa54 	bl	8012b48 <raise>
 80126a0:	2001      	movs	r0, #1
 80126a2:	f7f0 f943 	bl	800292c <_exit>
	...

080126a8 <__sflush_r>:
 80126a8:	898a      	ldrh	r2, [r1, #12]
 80126aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80126ae:	4605      	mov	r5, r0
 80126b0:	0710      	lsls	r0, r2, #28
 80126b2:	460c      	mov	r4, r1
 80126b4:	d458      	bmi.n	8012768 <__sflush_r+0xc0>
 80126b6:	684b      	ldr	r3, [r1, #4]
 80126b8:	2b00      	cmp	r3, #0
 80126ba:	dc05      	bgt.n	80126c8 <__sflush_r+0x20>
 80126bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80126be:	2b00      	cmp	r3, #0
 80126c0:	dc02      	bgt.n	80126c8 <__sflush_r+0x20>
 80126c2:	2000      	movs	r0, #0
 80126c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80126c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80126ca:	2e00      	cmp	r6, #0
 80126cc:	d0f9      	beq.n	80126c2 <__sflush_r+0x1a>
 80126ce:	2300      	movs	r3, #0
 80126d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80126d4:	682f      	ldr	r7, [r5, #0]
 80126d6:	602b      	str	r3, [r5, #0]
 80126d8:	d032      	beq.n	8012740 <__sflush_r+0x98>
 80126da:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80126dc:	89a3      	ldrh	r3, [r4, #12]
 80126de:	075a      	lsls	r2, r3, #29
 80126e0:	d505      	bpl.n	80126ee <__sflush_r+0x46>
 80126e2:	6863      	ldr	r3, [r4, #4]
 80126e4:	1ac0      	subs	r0, r0, r3
 80126e6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80126e8:	b10b      	cbz	r3, 80126ee <__sflush_r+0x46>
 80126ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80126ec:	1ac0      	subs	r0, r0, r3
 80126ee:	2300      	movs	r3, #0
 80126f0:	4602      	mov	r2, r0
 80126f2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80126f4:	6a21      	ldr	r1, [r4, #32]
 80126f6:	4628      	mov	r0, r5
 80126f8:	47b0      	blx	r6
 80126fa:	1c43      	adds	r3, r0, #1
 80126fc:	89a3      	ldrh	r3, [r4, #12]
 80126fe:	d106      	bne.n	801270e <__sflush_r+0x66>
 8012700:	6829      	ldr	r1, [r5, #0]
 8012702:	291d      	cmp	r1, #29
 8012704:	d82c      	bhi.n	8012760 <__sflush_r+0xb8>
 8012706:	4a2a      	ldr	r2, [pc, #168]	; (80127b0 <__sflush_r+0x108>)
 8012708:	40ca      	lsrs	r2, r1
 801270a:	07d6      	lsls	r6, r2, #31
 801270c:	d528      	bpl.n	8012760 <__sflush_r+0xb8>
 801270e:	2200      	movs	r2, #0
 8012710:	6062      	str	r2, [r4, #4]
 8012712:	04d9      	lsls	r1, r3, #19
 8012714:	6922      	ldr	r2, [r4, #16]
 8012716:	6022      	str	r2, [r4, #0]
 8012718:	d504      	bpl.n	8012724 <__sflush_r+0x7c>
 801271a:	1c42      	adds	r2, r0, #1
 801271c:	d101      	bne.n	8012722 <__sflush_r+0x7a>
 801271e:	682b      	ldr	r3, [r5, #0]
 8012720:	b903      	cbnz	r3, 8012724 <__sflush_r+0x7c>
 8012722:	6560      	str	r0, [r4, #84]	; 0x54
 8012724:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012726:	602f      	str	r7, [r5, #0]
 8012728:	2900      	cmp	r1, #0
 801272a:	d0ca      	beq.n	80126c2 <__sflush_r+0x1a>
 801272c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012730:	4299      	cmp	r1, r3
 8012732:	d002      	beq.n	801273a <__sflush_r+0x92>
 8012734:	4628      	mov	r0, r5
 8012736:	f7ff faa5 	bl	8011c84 <_free_r>
 801273a:	2000      	movs	r0, #0
 801273c:	6360      	str	r0, [r4, #52]	; 0x34
 801273e:	e7c1      	b.n	80126c4 <__sflush_r+0x1c>
 8012740:	6a21      	ldr	r1, [r4, #32]
 8012742:	2301      	movs	r3, #1
 8012744:	4628      	mov	r0, r5
 8012746:	47b0      	blx	r6
 8012748:	1c41      	adds	r1, r0, #1
 801274a:	d1c7      	bne.n	80126dc <__sflush_r+0x34>
 801274c:	682b      	ldr	r3, [r5, #0]
 801274e:	2b00      	cmp	r3, #0
 8012750:	d0c4      	beq.n	80126dc <__sflush_r+0x34>
 8012752:	2b1d      	cmp	r3, #29
 8012754:	d001      	beq.n	801275a <__sflush_r+0xb2>
 8012756:	2b16      	cmp	r3, #22
 8012758:	d101      	bne.n	801275e <__sflush_r+0xb6>
 801275a:	602f      	str	r7, [r5, #0]
 801275c:	e7b1      	b.n	80126c2 <__sflush_r+0x1a>
 801275e:	89a3      	ldrh	r3, [r4, #12]
 8012760:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012764:	81a3      	strh	r3, [r4, #12]
 8012766:	e7ad      	b.n	80126c4 <__sflush_r+0x1c>
 8012768:	690f      	ldr	r7, [r1, #16]
 801276a:	2f00      	cmp	r7, #0
 801276c:	d0a9      	beq.n	80126c2 <__sflush_r+0x1a>
 801276e:	0793      	lsls	r3, r2, #30
 8012770:	680e      	ldr	r6, [r1, #0]
 8012772:	bf08      	it	eq
 8012774:	694b      	ldreq	r3, [r1, #20]
 8012776:	600f      	str	r7, [r1, #0]
 8012778:	bf18      	it	ne
 801277a:	2300      	movne	r3, #0
 801277c:	eba6 0807 	sub.w	r8, r6, r7
 8012780:	608b      	str	r3, [r1, #8]
 8012782:	f1b8 0f00 	cmp.w	r8, #0
 8012786:	dd9c      	ble.n	80126c2 <__sflush_r+0x1a>
 8012788:	6a21      	ldr	r1, [r4, #32]
 801278a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801278c:	4643      	mov	r3, r8
 801278e:	463a      	mov	r2, r7
 8012790:	4628      	mov	r0, r5
 8012792:	47b0      	blx	r6
 8012794:	2800      	cmp	r0, #0
 8012796:	dc06      	bgt.n	80127a6 <__sflush_r+0xfe>
 8012798:	89a3      	ldrh	r3, [r4, #12]
 801279a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801279e:	81a3      	strh	r3, [r4, #12]
 80127a0:	f04f 30ff 	mov.w	r0, #4294967295
 80127a4:	e78e      	b.n	80126c4 <__sflush_r+0x1c>
 80127a6:	4407      	add	r7, r0
 80127a8:	eba8 0800 	sub.w	r8, r8, r0
 80127ac:	e7e9      	b.n	8012782 <__sflush_r+0xda>
 80127ae:	bf00      	nop
 80127b0:	20400001 	.word	0x20400001

080127b4 <_fflush_r>:
 80127b4:	b538      	push	{r3, r4, r5, lr}
 80127b6:	690b      	ldr	r3, [r1, #16]
 80127b8:	4605      	mov	r5, r0
 80127ba:	460c      	mov	r4, r1
 80127bc:	b913      	cbnz	r3, 80127c4 <_fflush_r+0x10>
 80127be:	2500      	movs	r5, #0
 80127c0:	4628      	mov	r0, r5
 80127c2:	bd38      	pop	{r3, r4, r5, pc}
 80127c4:	b118      	cbz	r0, 80127ce <_fflush_r+0x1a>
 80127c6:	6983      	ldr	r3, [r0, #24]
 80127c8:	b90b      	cbnz	r3, 80127ce <_fflush_r+0x1a>
 80127ca:	f000 f887 	bl	80128dc <__sinit>
 80127ce:	4b14      	ldr	r3, [pc, #80]	; (8012820 <_fflush_r+0x6c>)
 80127d0:	429c      	cmp	r4, r3
 80127d2:	d11b      	bne.n	801280c <_fflush_r+0x58>
 80127d4:	686c      	ldr	r4, [r5, #4]
 80127d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80127da:	2b00      	cmp	r3, #0
 80127dc:	d0ef      	beq.n	80127be <_fflush_r+0xa>
 80127de:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80127e0:	07d0      	lsls	r0, r2, #31
 80127e2:	d404      	bmi.n	80127ee <_fflush_r+0x3a>
 80127e4:	0599      	lsls	r1, r3, #22
 80127e6:	d402      	bmi.n	80127ee <_fflush_r+0x3a>
 80127e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80127ea:	f000 f915 	bl	8012a18 <__retarget_lock_acquire_recursive>
 80127ee:	4628      	mov	r0, r5
 80127f0:	4621      	mov	r1, r4
 80127f2:	f7ff ff59 	bl	80126a8 <__sflush_r>
 80127f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80127f8:	07da      	lsls	r2, r3, #31
 80127fa:	4605      	mov	r5, r0
 80127fc:	d4e0      	bmi.n	80127c0 <_fflush_r+0xc>
 80127fe:	89a3      	ldrh	r3, [r4, #12]
 8012800:	059b      	lsls	r3, r3, #22
 8012802:	d4dd      	bmi.n	80127c0 <_fflush_r+0xc>
 8012804:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012806:	f000 f908 	bl	8012a1a <__retarget_lock_release_recursive>
 801280a:	e7d9      	b.n	80127c0 <_fflush_r+0xc>
 801280c:	4b05      	ldr	r3, [pc, #20]	; (8012824 <_fflush_r+0x70>)
 801280e:	429c      	cmp	r4, r3
 8012810:	d101      	bne.n	8012816 <_fflush_r+0x62>
 8012812:	68ac      	ldr	r4, [r5, #8]
 8012814:	e7df      	b.n	80127d6 <_fflush_r+0x22>
 8012816:	4b04      	ldr	r3, [pc, #16]	; (8012828 <_fflush_r+0x74>)
 8012818:	429c      	cmp	r4, r3
 801281a:	bf08      	it	eq
 801281c:	68ec      	ldreq	r4, [r5, #12]
 801281e:	e7da      	b.n	80127d6 <_fflush_r+0x22>
 8012820:	08026764 	.word	0x08026764
 8012824:	08026784 	.word	0x08026784
 8012828:	08026744 	.word	0x08026744

0801282c <std>:
 801282c:	2300      	movs	r3, #0
 801282e:	b510      	push	{r4, lr}
 8012830:	4604      	mov	r4, r0
 8012832:	e9c0 3300 	strd	r3, r3, [r0]
 8012836:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801283a:	6083      	str	r3, [r0, #8]
 801283c:	8181      	strh	r1, [r0, #12]
 801283e:	6643      	str	r3, [r0, #100]	; 0x64
 8012840:	81c2      	strh	r2, [r0, #14]
 8012842:	6183      	str	r3, [r0, #24]
 8012844:	4619      	mov	r1, r3
 8012846:	2208      	movs	r2, #8
 8012848:	305c      	adds	r0, #92	; 0x5c
 801284a:	f7fd fb59 	bl	800ff00 <memset>
 801284e:	4b05      	ldr	r3, [pc, #20]	; (8012864 <std+0x38>)
 8012850:	6263      	str	r3, [r4, #36]	; 0x24
 8012852:	4b05      	ldr	r3, [pc, #20]	; (8012868 <std+0x3c>)
 8012854:	62a3      	str	r3, [r4, #40]	; 0x28
 8012856:	4b05      	ldr	r3, [pc, #20]	; (801286c <std+0x40>)
 8012858:	62e3      	str	r3, [r4, #44]	; 0x2c
 801285a:	4b05      	ldr	r3, [pc, #20]	; (8012870 <std+0x44>)
 801285c:	6224      	str	r4, [r4, #32]
 801285e:	6323      	str	r3, [r4, #48]	; 0x30
 8012860:	bd10      	pop	{r4, pc}
 8012862:	bf00      	nop
 8012864:	08012b81 	.word	0x08012b81
 8012868:	08012ba3 	.word	0x08012ba3
 801286c:	08012bdb 	.word	0x08012bdb
 8012870:	08012bff 	.word	0x08012bff

08012874 <_cleanup_r>:
 8012874:	4901      	ldr	r1, [pc, #4]	; (801287c <_cleanup_r+0x8>)
 8012876:	f000 b8af 	b.w	80129d8 <_fwalk_reent>
 801287a:	bf00      	nop
 801287c:	080127b5 	.word	0x080127b5

08012880 <__sfmoreglue>:
 8012880:	b570      	push	{r4, r5, r6, lr}
 8012882:	2268      	movs	r2, #104	; 0x68
 8012884:	1e4d      	subs	r5, r1, #1
 8012886:	4355      	muls	r5, r2
 8012888:	460e      	mov	r6, r1
 801288a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801288e:	f7ff fa65 	bl	8011d5c <_malloc_r>
 8012892:	4604      	mov	r4, r0
 8012894:	b140      	cbz	r0, 80128a8 <__sfmoreglue+0x28>
 8012896:	2100      	movs	r1, #0
 8012898:	e9c0 1600 	strd	r1, r6, [r0]
 801289c:	300c      	adds	r0, #12
 801289e:	60a0      	str	r0, [r4, #8]
 80128a0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80128a4:	f7fd fb2c 	bl	800ff00 <memset>
 80128a8:	4620      	mov	r0, r4
 80128aa:	bd70      	pop	{r4, r5, r6, pc}

080128ac <__sfp_lock_acquire>:
 80128ac:	4801      	ldr	r0, [pc, #4]	; (80128b4 <__sfp_lock_acquire+0x8>)
 80128ae:	f000 b8b3 	b.w	8012a18 <__retarget_lock_acquire_recursive>
 80128b2:	bf00      	nop
 80128b4:	20012429 	.word	0x20012429

080128b8 <__sfp_lock_release>:
 80128b8:	4801      	ldr	r0, [pc, #4]	; (80128c0 <__sfp_lock_release+0x8>)
 80128ba:	f000 b8ae 	b.w	8012a1a <__retarget_lock_release_recursive>
 80128be:	bf00      	nop
 80128c0:	20012429 	.word	0x20012429

080128c4 <__sinit_lock_acquire>:
 80128c4:	4801      	ldr	r0, [pc, #4]	; (80128cc <__sinit_lock_acquire+0x8>)
 80128c6:	f000 b8a7 	b.w	8012a18 <__retarget_lock_acquire_recursive>
 80128ca:	bf00      	nop
 80128cc:	2001242a 	.word	0x2001242a

080128d0 <__sinit_lock_release>:
 80128d0:	4801      	ldr	r0, [pc, #4]	; (80128d8 <__sinit_lock_release+0x8>)
 80128d2:	f000 b8a2 	b.w	8012a1a <__retarget_lock_release_recursive>
 80128d6:	bf00      	nop
 80128d8:	2001242a 	.word	0x2001242a

080128dc <__sinit>:
 80128dc:	b510      	push	{r4, lr}
 80128de:	4604      	mov	r4, r0
 80128e0:	f7ff fff0 	bl	80128c4 <__sinit_lock_acquire>
 80128e4:	69a3      	ldr	r3, [r4, #24]
 80128e6:	b11b      	cbz	r3, 80128f0 <__sinit+0x14>
 80128e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80128ec:	f7ff bff0 	b.w	80128d0 <__sinit_lock_release>
 80128f0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80128f4:	6523      	str	r3, [r4, #80]	; 0x50
 80128f6:	4b13      	ldr	r3, [pc, #76]	; (8012944 <__sinit+0x68>)
 80128f8:	4a13      	ldr	r2, [pc, #76]	; (8012948 <__sinit+0x6c>)
 80128fa:	681b      	ldr	r3, [r3, #0]
 80128fc:	62a2      	str	r2, [r4, #40]	; 0x28
 80128fe:	42a3      	cmp	r3, r4
 8012900:	bf04      	itt	eq
 8012902:	2301      	moveq	r3, #1
 8012904:	61a3      	streq	r3, [r4, #24]
 8012906:	4620      	mov	r0, r4
 8012908:	f000 f820 	bl	801294c <__sfp>
 801290c:	6060      	str	r0, [r4, #4]
 801290e:	4620      	mov	r0, r4
 8012910:	f000 f81c 	bl	801294c <__sfp>
 8012914:	60a0      	str	r0, [r4, #8]
 8012916:	4620      	mov	r0, r4
 8012918:	f000 f818 	bl	801294c <__sfp>
 801291c:	2200      	movs	r2, #0
 801291e:	60e0      	str	r0, [r4, #12]
 8012920:	2104      	movs	r1, #4
 8012922:	6860      	ldr	r0, [r4, #4]
 8012924:	f7ff ff82 	bl	801282c <std>
 8012928:	68a0      	ldr	r0, [r4, #8]
 801292a:	2201      	movs	r2, #1
 801292c:	2109      	movs	r1, #9
 801292e:	f7ff ff7d 	bl	801282c <std>
 8012932:	68e0      	ldr	r0, [r4, #12]
 8012934:	2202      	movs	r2, #2
 8012936:	2112      	movs	r1, #18
 8012938:	f7ff ff78 	bl	801282c <std>
 801293c:	2301      	movs	r3, #1
 801293e:	61a3      	str	r3, [r4, #24]
 8012940:	e7d2      	b.n	80128e8 <__sinit+0xc>
 8012942:	bf00      	nop
 8012944:	080263c8 	.word	0x080263c8
 8012948:	08012875 	.word	0x08012875

0801294c <__sfp>:
 801294c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801294e:	4607      	mov	r7, r0
 8012950:	f7ff ffac 	bl	80128ac <__sfp_lock_acquire>
 8012954:	4b1e      	ldr	r3, [pc, #120]	; (80129d0 <__sfp+0x84>)
 8012956:	681e      	ldr	r6, [r3, #0]
 8012958:	69b3      	ldr	r3, [r6, #24]
 801295a:	b913      	cbnz	r3, 8012962 <__sfp+0x16>
 801295c:	4630      	mov	r0, r6
 801295e:	f7ff ffbd 	bl	80128dc <__sinit>
 8012962:	3648      	adds	r6, #72	; 0x48
 8012964:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8012968:	3b01      	subs	r3, #1
 801296a:	d503      	bpl.n	8012974 <__sfp+0x28>
 801296c:	6833      	ldr	r3, [r6, #0]
 801296e:	b30b      	cbz	r3, 80129b4 <__sfp+0x68>
 8012970:	6836      	ldr	r6, [r6, #0]
 8012972:	e7f7      	b.n	8012964 <__sfp+0x18>
 8012974:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012978:	b9d5      	cbnz	r5, 80129b0 <__sfp+0x64>
 801297a:	4b16      	ldr	r3, [pc, #88]	; (80129d4 <__sfp+0x88>)
 801297c:	60e3      	str	r3, [r4, #12]
 801297e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8012982:	6665      	str	r5, [r4, #100]	; 0x64
 8012984:	f000 f847 	bl	8012a16 <__retarget_lock_init_recursive>
 8012988:	f7ff ff96 	bl	80128b8 <__sfp_lock_release>
 801298c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8012990:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8012994:	6025      	str	r5, [r4, #0]
 8012996:	61a5      	str	r5, [r4, #24]
 8012998:	2208      	movs	r2, #8
 801299a:	4629      	mov	r1, r5
 801299c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80129a0:	f7fd faae 	bl	800ff00 <memset>
 80129a4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80129a8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80129ac:	4620      	mov	r0, r4
 80129ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80129b0:	3468      	adds	r4, #104	; 0x68
 80129b2:	e7d9      	b.n	8012968 <__sfp+0x1c>
 80129b4:	2104      	movs	r1, #4
 80129b6:	4638      	mov	r0, r7
 80129b8:	f7ff ff62 	bl	8012880 <__sfmoreglue>
 80129bc:	4604      	mov	r4, r0
 80129be:	6030      	str	r0, [r6, #0]
 80129c0:	2800      	cmp	r0, #0
 80129c2:	d1d5      	bne.n	8012970 <__sfp+0x24>
 80129c4:	f7ff ff78 	bl	80128b8 <__sfp_lock_release>
 80129c8:	230c      	movs	r3, #12
 80129ca:	603b      	str	r3, [r7, #0]
 80129cc:	e7ee      	b.n	80129ac <__sfp+0x60>
 80129ce:	bf00      	nop
 80129d0:	080263c8 	.word	0x080263c8
 80129d4:	ffff0001 	.word	0xffff0001

080129d8 <_fwalk_reent>:
 80129d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80129dc:	4606      	mov	r6, r0
 80129de:	4688      	mov	r8, r1
 80129e0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80129e4:	2700      	movs	r7, #0
 80129e6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80129ea:	f1b9 0901 	subs.w	r9, r9, #1
 80129ee:	d505      	bpl.n	80129fc <_fwalk_reent+0x24>
 80129f0:	6824      	ldr	r4, [r4, #0]
 80129f2:	2c00      	cmp	r4, #0
 80129f4:	d1f7      	bne.n	80129e6 <_fwalk_reent+0xe>
 80129f6:	4638      	mov	r0, r7
 80129f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80129fc:	89ab      	ldrh	r3, [r5, #12]
 80129fe:	2b01      	cmp	r3, #1
 8012a00:	d907      	bls.n	8012a12 <_fwalk_reent+0x3a>
 8012a02:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012a06:	3301      	adds	r3, #1
 8012a08:	d003      	beq.n	8012a12 <_fwalk_reent+0x3a>
 8012a0a:	4629      	mov	r1, r5
 8012a0c:	4630      	mov	r0, r6
 8012a0e:	47c0      	blx	r8
 8012a10:	4307      	orrs	r7, r0
 8012a12:	3568      	adds	r5, #104	; 0x68
 8012a14:	e7e9      	b.n	80129ea <_fwalk_reent+0x12>

08012a16 <__retarget_lock_init_recursive>:
 8012a16:	4770      	bx	lr

08012a18 <__retarget_lock_acquire_recursive>:
 8012a18:	4770      	bx	lr

08012a1a <__retarget_lock_release_recursive>:
 8012a1a:	4770      	bx	lr

08012a1c <__swhatbuf_r>:
 8012a1c:	b570      	push	{r4, r5, r6, lr}
 8012a1e:	460e      	mov	r6, r1
 8012a20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012a24:	2900      	cmp	r1, #0
 8012a26:	b096      	sub	sp, #88	; 0x58
 8012a28:	4614      	mov	r4, r2
 8012a2a:	461d      	mov	r5, r3
 8012a2c:	da08      	bge.n	8012a40 <__swhatbuf_r+0x24>
 8012a2e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8012a32:	2200      	movs	r2, #0
 8012a34:	602a      	str	r2, [r5, #0]
 8012a36:	061a      	lsls	r2, r3, #24
 8012a38:	d410      	bmi.n	8012a5c <__swhatbuf_r+0x40>
 8012a3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012a3e:	e00e      	b.n	8012a5e <__swhatbuf_r+0x42>
 8012a40:	466a      	mov	r2, sp
 8012a42:	f000 f903 	bl	8012c4c <_fstat_r>
 8012a46:	2800      	cmp	r0, #0
 8012a48:	dbf1      	blt.n	8012a2e <__swhatbuf_r+0x12>
 8012a4a:	9a01      	ldr	r2, [sp, #4]
 8012a4c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8012a50:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8012a54:	425a      	negs	r2, r3
 8012a56:	415a      	adcs	r2, r3
 8012a58:	602a      	str	r2, [r5, #0]
 8012a5a:	e7ee      	b.n	8012a3a <__swhatbuf_r+0x1e>
 8012a5c:	2340      	movs	r3, #64	; 0x40
 8012a5e:	2000      	movs	r0, #0
 8012a60:	6023      	str	r3, [r4, #0]
 8012a62:	b016      	add	sp, #88	; 0x58
 8012a64:	bd70      	pop	{r4, r5, r6, pc}
	...

08012a68 <__smakebuf_r>:
 8012a68:	898b      	ldrh	r3, [r1, #12]
 8012a6a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012a6c:	079d      	lsls	r5, r3, #30
 8012a6e:	4606      	mov	r6, r0
 8012a70:	460c      	mov	r4, r1
 8012a72:	d507      	bpl.n	8012a84 <__smakebuf_r+0x1c>
 8012a74:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012a78:	6023      	str	r3, [r4, #0]
 8012a7a:	6123      	str	r3, [r4, #16]
 8012a7c:	2301      	movs	r3, #1
 8012a7e:	6163      	str	r3, [r4, #20]
 8012a80:	b002      	add	sp, #8
 8012a82:	bd70      	pop	{r4, r5, r6, pc}
 8012a84:	ab01      	add	r3, sp, #4
 8012a86:	466a      	mov	r2, sp
 8012a88:	f7ff ffc8 	bl	8012a1c <__swhatbuf_r>
 8012a8c:	9900      	ldr	r1, [sp, #0]
 8012a8e:	4605      	mov	r5, r0
 8012a90:	4630      	mov	r0, r6
 8012a92:	f7ff f963 	bl	8011d5c <_malloc_r>
 8012a96:	b948      	cbnz	r0, 8012aac <__smakebuf_r+0x44>
 8012a98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012a9c:	059a      	lsls	r2, r3, #22
 8012a9e:	d4ef      	bmi.n	8012a80 <__smakebuf_r+0x18>
 8012aa0:	f023 0303 	bic.w	r3, r3, #3
 8012aa4:	f043 0302 	orr.w	r3, r3, #2
 8012aa8:	81a3      	strh	r3, [r4, #12]
 8012aaa:	e7e3      	b.n	8012a74 <__smakebuf_r+0xc>
 8012aac:	4b0d      	ldr	r3, [pc, #52]	; (8012ae4 <__smakebuf_r+0x7c>)
 8012aae:	62b3      	str	r3, [r6, #40]	; 0x28
 8012ab0:	89a3      	ldrh	r3, [r4, #12]
 8012ab2:	6020      	str	r0, [r4, #0]
 8012ab4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012ab8:	81a3      	strh	r3, [r4, #12]
 8012aba:	9b00      	ldr	r3, [sp, #0]
 8012abc:	6163      	str	r3, [r4, #20]
 8012abe:	9b01      	ldr	r3, [sp, #4]
 8012ac0:	6120      	str	r0, [r4, #16]
 8012ac2:	b15b      	cbz	r3, 8012adc <__smakebuf_r+0x74>
 8012ac4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012ac8:	4630      	mov	r0, r6
 8012aca:	f000 f8d1 	bl	8012c70 <_isatty_r>
 8012ace:	b128      	cbz	r0, 8012adc <__smakebuf_r+0x74>
 8012ad0:	89a3      	ldrh	r3, [r4, #12]
 8012ad2:	f023 0303 	bic.w	r3, r3, #3
 8012ad6:	f043 0301 	orr.w	r3, r3, #1
 8012ada:	81a3      	strh	r3, [r4, #12]
 8012adc:	89a0      	ldrh	r0, [r4, #12]
 8012ade:	4305      	orrs	r5, r0
 8012ae0:	81a5      	strh	r5, [r4, #12]
 8012ae2:	e7cd      	b.n	8012a80 <__smakebuf_r+0x18>
 8012ae4:	08012875 	.word	0x08012875

08012ae8 <_malloc_usable_size_r>:
 8012ae8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012aec:	1f18      	subs	r0, r3, #4
 8012aee:	2b00      	cmp	r3, #0
 8012af0:	bfbc      	itt	lt
 8012af2:	580b      	ldrlt	r3, [r1, r0]
 8012af4:	18c0      	addlt	r0, r0, r3
 8012af6:	4770      	bx	lr

08012af8 <_raise_r>:
 8012af8:	291f      	cmp	r1, #31
 8012afa:	b538      	push	{r3, r4, r5, lr}
 8012afc:	4604      	mov	r4, r0
 8012afe:	460d      	mov	r5, r1
 8012b00:	d904      	bls.n	8012b0c <_raise_r+0x14>
 8012b02:	2316      	movs	r3, #22
 8012b04:	6003      	str	r3, [r0, #0]
 8012b06:	f04f 30ff 	mov.w	r0, #4294967295
 8012b0a:	bd38      	pop	{r3, r4, r5, pc}
 8012b0c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8012b0e:	b112      	cbz	r2, 8012b16 <_raise_r+0x1e>
 8012b10:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012b14:	b94b      	cbnz	r3, 8012b2a <_raise_r+0x32>
 8012b16:	4620      	mov	r0, r4
 8012b18:	f000 f830 	bl	8012b7c <_getpid_r>
 8012b1c:	462a      	mov	r2, r5
 8012b1e:	4601      	mov	r1, r0
 8012b20:	4620      	mov	r0, r4
 8012b22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012b26:	f000 b817 	b.w	8012b58 <_kill_r>
 8012b2a:	2b01      	cmp	r3, #1
 8012b2c:	d00a      	beq.n	8012b44 <_raise_r+0x4c>
 8012b2e:	1c59      	adds	r1, r3, #1
 8012b30:	d103      	bne.n	8012b3a <_raise_r+0x42>
 8012b32:	2316      	movs	r3, #22
 8012b34:	6003      	str	r3, [r0, #0]
 8012b36:	2001      	movs	r0, #1
 8012b38:	e7e7      	b.n	8012b0a <_raise_r+0x12>
 8012b3a:	2400      	movs	r4, #0
 8012b3c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8012b40:	4628      	mov	r0, r5
 8012b42:	4798      	blx	r3
 8012b44:	2000      	movs	r0, #0
 8012b46:	e7e0      	b.n	8012b0a <_raise_r+0x12>

08012b48 <raise>:
 8012b48:	4b02      	ldr	r3, [pc, #8]	; (8012b54 <raise+0xc>)
 8012b4a:	4601      	mov	r1, r0
 8012b4c:	6818      	ldr	r0, [r3, #0]
 8012b4e:	f7ff bfd3 	b.w	8012af8 <_raise_r>
 8012b52:	bf00      	nop
 8012b54:	20000104 	.word	0x20000104

08012b58 <_kill_r>:
 8012b58:	b538      	push	{r3, r4, r5, lr}
 8012b5a:	4d07      	ldr	r5, [pc, #28]	; (8012b78 <_kill_r+0x20>)
 8012b5c:	2300      	movs	r3, #0
 8012b5e:	4604      	mov	r4, r0
 8012b60:	4608      	mov	r0, r1
 8012b62:	4611      	mov	r1, r2
 8012b64:	602b      	str	r3, [r5, #0]
 8012b66:	f7ef fed1 	bl	800290c <_kill>
 8012b6a:	1c43      	adds	r3, r0, #1
 8012b6c:	d102      	bne.n	8012b74 <_kill_r+0x1c>
 8012b6e:	682b      	ldr	r3, [r5, #0]
 8012b70:	b103      	cbz	r3, 8012b74 <_kill_r+0x1c>
 8012b72:	6023      	str	r3, [r4, #0]
 8012b74:	bd38      	pop	{r3, r4, r5, pc}
 8012b76:	bf00      	nop
 8012b78:	20012424 	.word	0x20012424

08012b7c <_getpid_r>:
 8012b7c:	f7ef bebe 	b.w	80028fc <_getpid>

08012b80 <__sread>:
 8012b80:	b510      	push	{r4, lr}
 8012b82:	460c      	mov	r4, r1
 8012b84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012b88:	f000 f894 	bl	8012cb4 <_read_r>
 8012b8c:	2800      	cmp	r0, #0
 8012b8e:	bfab      	itete	ge
 8012b90:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012b92:	89a3      	ldrhlt	r3, [r4, #12]
 8012b94:	181b      	addge	r3, r3, r0
 8012b96:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012b9a:	bfac      	ite	ge
 8012b9c:	6563      	strge	r3, [r4, #84]	; 0x54
 8012b9e:	81a3      	strhlt	r3, [r4, #12]
 8012ba0:	bd10      	pop	{r4, pc}

08012ba2 <__swrite>:
 8012ba2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012ba6:	461f      	mov	r7, r3
 8012ba8:	898b      	ldrh	r3, [r1, #12]
 8012baa:	05db      	lsls	r3, r3, #23
 8012bac:	4605      	mov	r5, r0
 8012bae:	460c      	mov	r4, r1
 8012bb0:	4616      	mov	r6, r2
 8012bb2:	d505      	bpl.n	8012bc0 <__swrite+0x1e>
 8012bb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012bb8:	2302      	movs	r3, #2
 8012bba:	2200      	movs	r2, #0
 8012bbc:	f000 f868 	bl	8012c90 <_lseek_r>
 8012bc0:	89a3      	ldrh	r3, [r4, #12]
 8012bc2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012bc6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012bca:	81a3      	strh	r3, [r4, #12]
 8012bcc:	4632      	mov	r2, r6
 8012bce:	463b      	mov	r3, r7
 8012bd0:	4628      	mov	r0, r5
 8012bd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012bd6:	f000 b817 	b.w	8012c08 <_write_r>

08012bda <__sseek>:
 8012bda:	b510      	push	{r4, lr}
 8012bdc:	460c      	mov	r4, r1
 8012bde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012be2:	f000 f855 	bl	8012c90 <_lseek_r>
 8012be6:	1c43      	adds	r3, r0, #1
 8012be8:	89a3      	ldrh	r3, [r4, #12]
 8012bea:	bf15      	itete	ne
 8012bec:	6560      	strne	r0, [r4, #84]	; 0x54
 8012bee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012bf2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012bf6:	81a3      	strheq	r3, [r4, #12]
 8012bf8:	bf18      	it	ne
 8012bfa:	81a3      	strhne	r3, [r4, #12]
 8012bfc:	bd10      	pop	{r4, pc}

08012bfe <__sclose>:
 8012bfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012c02:	f000 b813 	b.w	8012c2c <_close_r>
	...

08012c08 <_write_r>:
 8012c08:	b538      	push	{r3, r4, r5, lr}
 8012c0a:	4d07      	ldr	r5, [pc, #28]	; (8012c28 <_write_r+0x20>)
 8012c0c:	4604      	mov	r4, r0
 8012c0e:	4608      	mov	r0, r1
 8012c10:	4611      	mov	r1, r2
 8012c12:	2200      	movs	r2, #0
 8012c14:	602a      	str	r2, [r5, #0]
 8012c16:	461a      	mov	r2, r3
 8012c18:	f7ef feaf 	bl	800297a <_write>
 8012c1c:	1c43      	adds	r3, r0, #1
 8012c1e:	d102      	bne.n	8012c26 <_write_r+0x1e>
 8012c20:	682b      	ldr	r3, [r5, #0]
 8012c22:	b103      	cbz	r3, 8012c26 <_write_r+0x1e>
 8012c24:	6023      	str	r3, [r4, #0]
 8012c26:	bd38      	pop	{r3, r4, r5, pc}
 8012c28:	20012424 	.word	0x20012424

08012c2c <_close_r>:
 8012c2c:	b538      	push	{r3, r4, r5, lr}
 8012c2e:	4d06      	ldr	r5, [pc, #24]	; (8012c48 <_close_r+0x1c>)
 8012c30:	2300      	movs	r3, #0
 8012c32:	4604      	mov	r4, r0
 8012c34:	4608      	mov	r0, r1
 8012c36:	602b      	str	r3, [r5, #0]
 8012c38:	f7ef febb 	bl	80029b2 <_close>
 8012c3c:	1c43      	adds	r3, r0, #1
 8012c3e:	d102      	bne.n	8012c46 <_close_r+0x1a>
 8012c40:	682b      	ldr	r3, [r5, #0]
 8012c42:	b103      	cbz	r3, 8012c46 <_close_r+0x1a>
 8012c44:	6023      	str	r3, [r4, #0]
 8012c46:	bd38      	pop	{r3, r4, r5, pc}
 8012c48:	20012424 	.word	0x20012424

08012c4c <_fstat_r>:
 8012c4c:	b538      	push	{r3, r4, r5, lr}
 8012c4e:	4d07      	ldr	r5, [pc, #28]	; (8012c6c <_fstat_r+0x20>)
 8012c50:	2300      	movs	r3, #0
 8012c52:	4604      	mov	r4, r0
 8012c54:	4608      	mov	r0, r1
 8012c56:	4611      	mov	r1, r2
 8012c58:	602b      	str	r3, [r5, #0]
 8012c5a:	f7ef feb6 	bl	80029ca <_fstat>
 8012c5e:	1c43      	adds	r3, r0, #1
 8012c60:	d102      	bne.n	8012c68 <_fstat_r+0x1c>
 8012c62:	682b      	ldr	r3, [r5, #0]
 8012c64:	b103      	cbz	r3, 8012c68 <_fstat_r+0x1c>
 8012c66:	6023      	str	r3, [r4, #0]
 8012c68:	bd38      	pop	{r3, r4, r5, pc}
 8012c6a:	bf00      	nop
 8012c6c:	20012424 	.word	0x20012424

08012c70 <_isatty_r>:
 8012c70:	b538      	push	{r3, r4, r5, lr}
 8012c72:	4d06      	ldr	r5, [pc, #24]	; (8012c8c <_isatty_r+0x1c>)
 8012c74:	2300      	movs	r3, #0
 8012c76:	4604      	mov	r4, r0
 8012c78:	4608      	mov	r0, r1
 8012c7a:	602b      	str	r3, [r5, #0]
 8012c7c:	f7ef feb5 	bl	80029ea <_isatty>
 8012c80:	1c43      	adds	r3, r0, #1
 8012c82:	d102      	bne.n	8012c8a <_isatty_r+0x1a>
 8012c84:	682b      	ldr	r3, [r5, #0]
 8012c86:	b103      	cbz	r3, 8012c8a <_isatty_r+0x1a>
 8012c88:	6023      	str	r3, [r4, #0]
 8012c8a:	bd38      	pop	{r3, r4, r5, pc}
 8012c8c:	20012424 	.word	0x20012424

08012c90 <_lseek_r>:
 8012c90:	b538      	push	{r3, r4, r5, lr}
 8012c92:	4d07      	ldr	r5, [pc, #28]	; (8012cb0 <_lseek_r+0x20>)
 8012c94:	4604      	mov	r4, r0
 8012c96:	4608      	mov	r0, r1
 8012c98:	4611      	mov	r1, r2
 8012c9a:	2200      	movs	r2, #0
 8012c9c:	602a      	str	r2, [r5, #0]
 8012c9e:	461a      	mov	r2, r3
 8012ca0:	f7ef feae 	bl	8002a00 <_lseek>
 8012ca4:	1c43      	adds	r3, r0, #1
 8012ca6:	d102      	bne.n	8012cae <_lseek_r+0x1e>
 8012ca8:	682b      	ldr	r3, [r5, #0]
 8012caa:	b103      	cbz	r3, 8012cae <_lseek_r+0x1e>
 8012cac:	6023      	str	r3, [r4, #0]
 8012cae:	bd38      	pop	{r3, r4, r5, pc}
 8012cb0:	20012424 	.word	0x20012424

08012cb4 <_read_r>:
 8012cb4:	b538      	push	{r3, r4, r5, lr}
 8012cb6:	4d07      	ldr	r5, [pc, #28]	; (8012cd4 <_read_r+0x20>)
 8012cb8:	4604      	mov	r4, r0
 8012cba:	4608      	mov	r0, r1
 8012cbc:	4611      	mov	r1, r2
 8012cbe:	2200      	movs	r2, #0
 8012cc0:	602a      	str	r2, [r5, #0]
 8012cc2:	461a      	mov	r2, r3
 8012cc4:	f7ef fe3c 	bl	8002940 <_read>
 8012cc8:	1c43      	adds	r3, r0, #1
 8012cca:	d102      	bne.n	8012cd2 <_read_r+0x1e>
 8012ccc:	682b      	ldr	r3, [r5, #0]
 8012cce:	b103      	cbz	r3, 8012cd2 <_read_r+0x1e>
 8012cd0:	6023      	str	r3, [r4, #0]
 8012cd2:	bd38      	pop	{r3, r4, r5, pc}
 8012cd4:	20012424 	.word	0x20012424

08012cd8 <_init>:
 8012cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012cda:	bf00      	nop
 8012cdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012cde:	bc08      	pop	{r3}
 8012ce0:	469e      	mov	lr, r3
 8012ce2:	4770      	bx	lr

08012ce4 <_fini>:
 8012ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012ce6:	bf00      	nop
 8012ce8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012cea:	bc08      	pop	{r3}
 8012cec:	469e      	mov	lr, r3
 8012cee:	4770      	bx	lr
